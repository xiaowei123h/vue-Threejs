{"version":3,"sources":["webpack:///./src/components/jsm/postprocessing/DotScreenPass.js","webpack:///./src/components/jsm/shaders/ColorifyShader.js","webpack:///./src/components/jsm/shaders/HorizontalBlurShader.js","webpack:///./src/components/jsm/shaders/VerticalBlurShader.js","webpack:///./src/components/jsm/shaders/SepiaShader.js","webpack:///./src/components/jsm/shaders/VignetteShader.js","webpack:///src/views/postprocessing/webglPostprocessingAdvanced.vue","webpack:///./src/views/postprocessing/webglPostprocessingAdvanced.vue?85ce","webpack:///./src/views/postprocessing/webglPostprocessingAdvanced.vue","webpack:///./src/components/jsm/shaders/DotScreenShader.js","webpack:///./src/components/jsm/shaders/BleachBypassShader.js","webpack:///./src/components/jsm/shaders/FilmShader.js","webpack:///./src/components/jsm/postprocessing/FilmPass.js"],"names":["DotScreenPass","center","angle","scale","Pass","call","this","undefined","DotScreenShader","console","error","shader","uniforms","UniformsUtils","clone","value","copy","material","ShaderMaterial","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear","ColorifyShader","tDiffuse","color","Color","join","HorizontalBlurShader","h","VerticalBlurShader","v","SepiaShader","amount","VignetteShader","offset","darkness","webglPostprocessingAdvanced","data","container","stats","composerScene","composer1","composer2","composer3","composer4","cameraOrtho","cameraPerspective","sceneModel","sceneBG","mesh","directionalLight","halfWidth","halfHeight","quadBG","quadMask","renderScene","delta","mounted","$webglInnerWidth","window","innerHeight","init","animate","methods","_this","document","getElementById","$THREE","OrthographicCamera","position","z","PerspectiveCamera","Scene","DirectionalLight","normalize","add","GLTFLoader","load","gltf","createMesh","scene","children","geometry","diffuseMap","TextureLoader","encoding","sRGBEncoding","materialColor","MeshBasicMaterial","map","depthTest","Mesh","PlaneBufferGeometry","sceneMask","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","autoClear","appendChild","domElement","$Stats","dom","style","left","shaderBleach","BleachBypassShader","shaderSepia","shaderVignette","effectBleach","ShaderPass","effectSepia","effectVignette","gammaCorrection","GammaCorrectionShader","effectBloom","BloomPass","effectFilm","FilmPass","effectFilmBW","effectDotScreen","DotScreenPass_DotScreenPass","Vector2","effectHBlur","effectVBlur","effectColorify1","effectColorify2","Uniform","clearMask","MaskPass","renderMask","renderMaskInverse","inverse","rtParameters","minFilter","LinearFilter","magFilter","format","RGBFormat","stencilBuffer","rtWidth","rtHeight","renderBackground","RenderPass","renderModel","EffectComposer","WebGLRenderTarget","addPass","TexturePass","renderTarget2","addEventListener","onWindowResize","innerWidth","aspect","updateProjectionMatrix","right","top","bottom","mat2","MeshPhongMaterial","specular","shininess","normalMap","normalScale","requestAnimationFrame","begin","end","time","Date","now","rotation","y","setViewport","postprocessing_webglPostprocessingAdvanced","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","tSize","opacity","FilmShader","nIntensity","sIntensity","sCount","grayscale","FilmPass_FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","deltaTime"],"mappings":"kOAOIA,EAAgB,SAAWC,EAAQC,EAAOC,GAE7CC,IAAKC,KAAMC,WAEcC,IAApBC,KACJC,QAAQC,MAAO,2CAEhB,IAAIC,EAASH,IAEbF,KAAKM,SAAWC,MAAcC,MAAOH,EAAOC,eAE5BL,IAAXN,GAAuBK,KAAKM,SAAL,OAA0BG,MAAMC,KAAMf,QACnDM,IAAVL,IAAsBI,KAAKM,SAAL,MAAyBG,MAAQb,QAC7CK,IAAVJ,IAAsBG,KAAKM,SAAL,MAAyBG,MAAQZ,GAE5DG,KAAKW,SAAW,IAAIC,OAEnBN,SAAUN,KAAKM,SACfO,aAAcR,EAAOQ,aACrBC,eAAgBT,EAAOS,iBAIxBd,KAAKe,OAAS,IAAIjB,IAAKkB,eAAgBhB,KAAKW,WAI7CjB,EAAcuB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQtB,IAAKmB,YAE5DI,YAAa3B,EAEb4B,OAAQ,SAAWC,EAAUC,EAAaC,GAEzCzB,KAAKM,SAAL,SAA4BG,MAAQgB,EAAWC,QAC/C1B,KAAKM,SAAL,MAAyBG,MAAMkB,IAAKF,EAAWG,MAAOH,EAAWI,QAE5D7B,KAAK8B,gBAETP,EAASQ,gBAAiB,MAC1B/B,KAAKe,OAAOO,OAAQC,KAIpBA,EAASQ,gBAAiBP,GACrBxB,KAAKgC,OAAQT,EAASS,QAC3BhC,KAAKe,OAAOO,OAAQC,+CC5CnBU,GAEH3B,UAEC4B,UAAczB,MAAO,MACrB0B,OAAW1B,MAAO,IAAI2B,IAAO,YAI9BvB,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,sBACA,8BAEA,oBAEA,gBAEA,6CAEA,6CACA,sCAEA,+CAEA,KAECuB,KAAM,OCtCLC,GAEHhC,UAEC4B,UAAczB,MAAO,MACrB8B,GAAO9B,MAAO,EAAM,MAIrBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,8BACA,mBAEA,oBAEA,gBAEA,4BAEA,0EACA,2EACA,4EACA,2EACA,iEACA,2EACA,4EACA,2EACA,0EAEA,wBAEA,KAECuB,KAAM,OC/CLG,GAEHlC,UAEC4B,UAAczB,MAAO,MACrBgC,GAAOhC,MAAO,EAAM,MAIrBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,8BACA,mBAEA,oBAEA,gBAEA,4BAEA,0EACA,2EACA,4EACA,2EACA,iEACA,2EACA,4EACA,2EACA,0EAEA,wBAEA,KAECuB,KAAM,OCnDLK,GAEHpC,UAEC4B,UAAczB,MAAO,MACrBkC,QAAYlC,MAAO,IAIpBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,wBAEA,8BAEA,oBAEA,gBAEA,6CACA,wBAEA,sFACA,sFACA,sFAEA,mEAEA,KAECuB,KAAM,OC3CLO,GAEHtC,UAEC4B,UAAczB,MAAO,MACrBoC,QAAYpC,MAAO,GACnBqC,UAAcrC,MAAO,IAItBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,wBACA,0BAEA,8BAEA,oBAEA,gBAIA,6CACA,sDACA,6FAYA,KAECuB,KAAM,+BC9BTU,GACAC,KADA,WAEA,OACAC,UAAA,KACAC,MAAA,KACAC,cAAA,KACAC,UAAA,KACAC,UAAA,KACAC,UAAA,KACAC,UAAA,KACAC,YAAA,KACAC,kBAAA,KACAC,WAAA,KACAC,QAAA,KACApC,SAAA,KACAqC,KAAA,KACAC,iBAAA,KACAjC,MAAA,KACAC,OAAA,KACAiC,UAAA,KACAC,WAAA,KACAC,OAAA,KACAC,SAAA,KACAC,YAAA,KACAC,MAAA,MAGAC,QA3BA,WA4BApE,KAAA4B,MAAA5B,KAAAqE,kBAAA,EACArE,KAAA6B,OAAAyC,OAAAC,aAAA,EACAvE,KAAA8D,UAAA9D,KAAA4B,MAAA,EACA5B,KAAA+D,WAAA/D,KAAA6B,OAAA,EACA7B,KAAAwE,OACAxE,KAAAyE,WAEAC,SACAF,KADA,WACA,IAAAG,EAAA3E,KACAA,KAAAiD,UAAA2B,SAAAC,eAAA,aAEA7E,KAAAwD,YAAA,IAAAxD,KAAA8E,OAAAC,oBAAA/E,KAAA8D,UAAA9D,KAAA8D,UAAA9D,KAAA+D,YAAA/D,KAAA+D,YAAA,SACA/D,KAAAwD,YAAAwB,SAAAC,EAAA,IACAjF,KAAAyD,kBAAA,IAAAzD,KAAA8E,OAAAI,kBAAA,GAAAlF,KAAA4B,MAAA5B,KAAA6B,OAAA,OACA7B,KAAAyD,kBAAAuB,SAAAC,EAAA,IAEAjF,KAAA0D,WAAA,IAAA1D,KAAA8E,OAAAK,MACAnF,KAAA2D,QAAA,IAAA3D,KAAA8E,OAAAK,MAEAnF,KAAA6D,iBAAA,IAAA7D,KAAA8E,OAAAM,iBAAA,UACApF,KAAA6D,iBAAAmB,SAAArD,IAAA,SAAA0D,YACArF,KAAA0D,WAAA4B,IAAAtF,KAAA6D,mBACA,IAAA0B,EAAA,GACAC,KAAA,8DAAAC,GACAd,EAAAe,WAAAD,EAAAE,MAAAC,SAAA,GAAAC,SAAAlB,EAAAjB,WAAA,OAGA,IAAAoC,GAAA,IAAA9F,KAAA8E,OAAAiB,eAAAP,KAAA,kDACAM,EAAAE,SAAAhG,KAAA8E,OAAAmB,aACA,IAAAC,EAAA,IAAAlG,KAAA8E,OAAAqB,mBACAC,IAAAN,EACAO,WAAA,IAEArG,KAAAgE,OAAA,IAAAhE,KAAA8E,OAAAwB,KAAA,IAAAtG,KAAA8E,OAAAyB,oBAAA,KAAAL,GACAlG,KAAAgE,OAAAgB,SAAAC,GAAA,IACAjF,KAAAgE,OAAAnE,MAAA8B,IAAA3B,KAAA4B,MAAA5B,KAAA6B,OAAA,GACA7B,KAAA2D,QAAA2B,IAAAtF,KAAAgE,QAEA,IAAAwC,EAAA,IAAAxG,KAAA8E,OAAAK,MACAnF,KAAAiE,SAAA,IAAAjE,KAAA8E,OAAAwB,KAAA,IAAAtG,KAAA8E,OAAAyB,oBAAA,SAAAvG,KAAA8E,OAAAqB,mBAAAhE,MAAA,YACAnC,KAAAiE,SAAAe,SAAAC,GAAA,IACAjF,KAAAiE,SAAApE,MAAA8B,IAAA3B,KAAA4B,MAAA,EAAA5B,KAAA6B,OAAA,KACA2E,EAAAlB,IAAAtF,KAAAiE,UAEAjE,KAAAuB,SAAA,IAAAvB,KAAA8E,OAAA2B,cACAzG,KAAAuB,SAAAmF,cAAApC,OAAAqC,kBACA3G,KAAAuB,SAAAqF,QAAA5G,KAAA4B,MAAA5B,KAAA6B,QACA7B,KAAAuB,SAAAsF,WAAA,EAEA7G,KAAAiD,UAAA6D,YAAA9G,KAAAuB,SAAAwF,YAEA/G,KAAAkD,MAAA,IAAAlD,KAAAgH,OACAhH,KAAAkD,MAAA+D,IAAAC,MAAAC,KAAA,QACAnH,KAAAiD,UAAA6D,YAAA9G,KAAAkD,MAAA+D,KAEA,IAAAG,EAAAC,EAAA,EACAC,EAAA5E,EACA6E,EAAA3E,EACA4E,EAAA,IAAAC,EAAA,EAAAL,GACAM,EAAA,IAAAD,EAAA,EAAAH,GACAK,EAAA,IAAAF,EAAA,EAAAF,GACAK,EAAA,IAAAH,EAAA,EAAAI,EAAA,GACAL,EAAAlH,SAAA,QAAAG,MAAA,IACAiH,EAAApH,SAAA,OAAAG,MAAA,GACAkH,EAAArH,SAAA,OAAAG,MAAA,IACAkH,EAAArH,SAAA,SAAAG,MAAA,IACA,IAAAqH,EAAA,IAAAC,EAAA,MACAC,EAAA,IAAAC,EAAA,mBACAC,EAAA,IAAAD,EAAA,kBACAE,EAAA,IAAAC,EAAA,IAAApI,KAAA8E,OAAAuD,QAAA,YACAC,EAAA,IAAAb,EAAA,EAAAnF,GACAiG,EAAA,IAAAd,EAAA,EAAAjF,GACA8F,EAAAhI,SAAA,EAAAG,MAAA,GAAAT,KAAA4B,MAAA,GACA2G,EAAAjI,SAAA,EAAAG,MAAA,GAAAT,KAAA6B,OAAA,GACA,IAAA2G,EAAA,IAAAf,EAAA,EAAAxF,GACAwG,EAAA,IAAAhB,EAAA,EAAAxF,GACAuG,EAAAlI,SAAA,UAAAN,KAAA8E,OAAA4D,QAAA,IAAA1I,KAAA8E,OAAA1C,MAAA,UACAqG,EAAAnI,SAAA,UAAAN,KAAA8E,OAAA4D,QAAA,IAAA1I,KAAA8E,OAAA1C,MAAA,WACA,IAAAuG,EAAA,IAAAC,EAAA,EACAC,EAAA,IAAAD,EAAA,EAAA5I,KAAA0D,WAAA1D,KAAAyD,mBACAqF,EAAA,IAAAF,EAAA,EAAA5I,KAAA0D,WAAA1D,KAAAyD,mBACAqF,EAAAC,SAAA,EAEA,IAAAC,GACAC,UAAAjJ,KAAA8E,OAAAoE,aACAC,UAAAnJ,KAAA8E,OAAAoE,aACAE,OAAApJ,KAAA8E,OAAAuE,UACAC,eAAA,GAEAC,EAAAvJ,KAAA4B,MAAA,EACA4H,EAAAxJ,KAAA6B,OAAA,EAEA4H,EAAA,IAAAC,EAAA,EAAA1J,KAAA2D,QAAA3D,KAAAwD,aACAmG,EAAA,IAAAD,EAAA,EAAA1J,KAAA0D,WAAA1D,KAAAyD,mBACAkG,EAAA3H,OAAA,EACAhC,KAAAmD,cAAA,IAAAyG,EAAA,EAAA5J,KAAAuB,SAAA,IAAAvB,KAAA8E,OAAA+E,kBAAA,EAAAN,EAAA,EAAAC,EAAAR,IACAhJ,KAAAmD,cAAA2G,QAAAL,GACAzJ,KAAAmD,cAAA2G,QAAAH,GACA3J,KAAAmD,cAAA2G,QAAAhB,GACA9I,KAAAmD,cAAA2G,QAAAxB,GACAtI,KAAAmD,cAAA2G,QAAAvB,GACAvI,KAAAmD,cAAA2G,QAAAnB,GAEA3I,KAAAkE,YAAA,IAAA6F,EAAA,EAAA/J,KAAAmD,cAAA6G,cAAAtI,SAEA1B,KAAAoD,UAAA,IAAAwG,EAAA,EAAA5J,KAAAuB,SAAA,IAAAvB,KAAA8E,OAAA+E,kBAAAN,EAAAC,EAAAR,IACAhJ,KAAAoD,UAAA0G,QAAA9J,KAAAkE,aACAlE,KAAAoD,UAAA0G,QAAAlC,GACA5H,KAAAoD,UAAA0G,QAAA5B,GACAlI,KAAAoD,UAAA0G,QAAAnC,GAEA3H,KAAAqD,UAAA,IAAAuG,EAAA,EAAA5J,KAAAuB,SAAA,IAAAvB,KAAA8E,OAAA+E,kBAAAN,EAAAC,EAAAR,IACAhJ,KAAAqD,UAAAyG,QAAA9J,KAAAkE,aACAlE,KAAAqD,UAAAyG,QAAAlC,GACA5H,KAAAqD,UAAAyG,QAAA3B,GACAnI,KAAAqD,UAAAyG,QAAAjB,GACA7I,KAAAqD,UAAAyG,QAAAtB,GACAxI,KAAAqD,UAAAyG,QAAAnB,GACA3I,KAAAqD,UAAAyG,QAAAhB,GACA9I,KAAAqD,UAAAyG,QAAArB,GACAzI,KAAAqD,UAAAyG,QAAAnB,GACA3I,KAAAqD,UAAAyG,QAAAnC,GAEA3H,KAAAsD,UAAA,IAAAsG,EAAA,EAAA5J,KAAAuB,SAAA,IAAAvB,KAAA8E,OAAA+E,kBAAAN,EAAAC,EAAAR,IACAhJ,KAAAsD,UAAAwG,QAAA9J,KAAAkE,aACAlE,KAAAsD,UAAAwG,QAAAlC,GACA5H,KAAAsD,UAAAwG,QAAApC,GACA1H,KAAAsD,UAAAwG,QAAA9B,GACAhI,KAAAsD,UAAAwG,QAAAnC,GAEA3H,KAAAuD,UAAA,IAAAqG,EAAA,EAAA5J,KAAAuB,SAAA,IAAAvB,KAAA8E,OAAA+E,kBAAAN,EAAAC,EAAAR,IACAhJ,KAAAuD,UAAAuG,QAAA9J,KAAAkE,aACAlE,KAAAuD,UAAAuG,QAAAlC,GACA5H,KAAAuD,UAAAuG,QAAAhC,GACA9H,KAAAuD,UAAAuG,QAAA9B,GACAhI,KAAAuD,UAAAuG,QAAAtC,GACAxH,KAAAuD,UAAAuG,QAAAnC,GACA3H,KAAAkE,YAAA5D,SAAA,SAAAG,MAAAT,KAAAmD,cAAA6G,cAAAtI,QACA4C,OAAA2F,iBAAA,SAAAjK,KAAAkK,gBAAA,IAEAA,eArIA,WAsIAlK,KAAA8D,WAAAQ,OAAA6F,WAAA,OACAnK,KAAA+D,WAAAO,OAAAC,YAAA,EACAvE,KAAAyD,kBAAA2G,QAAA9F,OAAA6F,WAAA,KAAA7F,OAAAC,YACAvE,KAAAyD,kBAAA4G,yBACArK,KAAAwD,YAAA2D,MAAAnH,KAAA8D,UACA9D,KAAAwD,YAAA8G,MAAAtK,KAAA8D,UACA9D,KAAAwD,YAAA+G,IAAAvK,KAAA+D,WACA/D,KAAAwD,YAAAgH,QAAAxK,KAAA+D,WACA/D,KAAAwD,YAAA6G,yBACArK,KAAAuB,SAAAqF,QAAAtC,OAAA6F,WAAA,IAAA7F,OAAAC,aACAvE,KAAAmD,cAAAyD,QAAA,EAAA5G,KAAA8D,UAAA,EAAA9D,KAAA+D,YACA/D,KAAAoD,UAAAwD,QAAA5G,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAqD,UAAAuD,QAAA5G,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAsD,UAAAsD,QAAA5G,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAuD,UAAAqD,QAAA5G,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAkE,YAAA5D,SAAA,SAAAG,MAAAT,KAAAmD,cAAA6G,cAAAtI,QACA1B,KAAAgE,OAAAnE,MAAA8B,IAAA2C,OAAA6F,WAAA,IAAA7F,OAAAC,YAAA,GACAvE,KAAAiE,SAAApE,MAAA8B,KAAA2C,OAAA6F,WAAA,OAAA7F,OAAAC,YAAA,MAEAmB,WAzJA,SAyJAG,EAAAF,EAAA9F,GACA,IAAAiG,GAAA,IAAA9F,KAAA8E,OAAAiB,eAAAP,KAAA,gDACAM,EAAAE,SAAAhG,KAAA8E,OAAAmB,aACA,IAAAwE,EAAA,IAAAzK,KAAA8E,OAAA4F,mBACAvI,MAAA,SACAwI,SAAA,OACAC,UAAA,GACAxE,IAAAN,EACA+E,WAAA,IAAA7K,KAAA8E,OAAAiB,eAAAP,KAAA,2EACAsF,YAAA,IAAA9K,KAAA8E,OAAAuD,QAAA,WAEArI,KAAA4D,KAAA,IAAA5D,KAAA8E,OAAAwB,KAAAT,EAAA4E,GACAzK,KAAA4D,KAAAoB,SAAArD,IAAA,SACA3B,KAAA4D,KAAA/D,MAAA8B,IAAA9B,OACA8F,EAAAL,IAAAtF,KAAA4D,OAEAa,QAzKA,WA0KAsG,sBAAA/K,KAAAyE,SACAzE,KAAAkD,MAAA8H,QACAhL,KAAAsB,SACAtB,KAAAkD,MAAA+H,OAEA3J,OA/KA,WAgLA,IAAA4J,EAAA,KAAAC,KAAAC,MACApL,KAAA4D,OAAA5D,KAAA4D,KAAAyH,SAAAC,GAAAJ,GACAlL,KAAAuB,SAAAgK,YAAA,IAAAvL,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAmD,cAAA7B,OAAAtB,KAAAmE,OACAnE,KAAAuB,SAAAgK,YAAA,IAAAvL,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAoD,UAAA9B,OAAAtB,KAAAmE,OACAnE,KAAAuB,SAAAgK,YAAAvL,KAAA8D,UAAA,EAAA9D,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAqD,UAAA/B,OAAAtB,KAAAmE,OACAnE,KAAAuB,SAAAgK,YAAA,EAAAvL,KAAA+D,WAAA/D,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAsD,UAAAhC,OAAAtB,KAAAmE,OACAnE,KAAAuB,SAAAgK,YAAAvL,KAAA8D,UAAA9D,KAAA+D,WAAA/D,KAAA8D,UAAA9D,KAAA+D,YACA/D,KAAAuD,UAAAjC,OAAAtB,KAAAmE,UCvPeqH,GADElK,OAFjB,WAA0BtB,KAAayL,eAAbzL,KAAuC0L,MAAAC,GAAwB,OAA/D3L,KAA+D4L,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAb9L,KAAayL,eAA0BE,EAAvC3L,KAAuC0L,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAiBI,YAAA,0CAAoDJ,EAAA,OAAYK,OAAOC,GAAA,UAAaN,EAAA,KAAUK,OAAOE,KAAA,sBAAAC,OAAA,SAAAC,IAAA,cAArLpM,KAAsPqM,GAAA,cAAtPrM,KAAsPqM,GAAA,mCAAAV,EAAA,MAAtP3L,KAAsPqM,GAAA,KAAAV,EAAA,KAA8FK,OAAOE,KAAA,0DAAAC,OAAA,SAAAC,IAAA,cAA3VpM,KAAgcqM,GAAA,qBAAhcrM,KAAgcqM,GAAA,iBAAhcrM,KAAgcqM,GAAA,KAAAV,EAAA,OAA4EK,OAAOC,GAAA,oBCEvjB,IAcAK,EAdyBC,EAAQ,OAcjCC,CACEzJ,EACAyI,GATF,EAVA,SAAAiB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB,2CC1BhCC,EAAAI,EAAAD,EAAA,sBAAAxM,IAAA,IAAA0M,EAAAL,EAAA,QAUIrM,GAEHI,UAEC4B,UAAczB,MAAO,MACrBoM,OAAWpM,MAAO,IAAI4H,OAAS,IAAK,MACpC1I,QAAYc,MAAO,IAAI4H,OAAS,GAAK,KACrCzI,OAAWa,MAAO,MAClBZ,OAAWY,MAAO,IAInBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,uBACA,uBACA,uBACA,sBAEA,8BAEA,oBAEA,oBAEA,8CAEA,qCACA,+EAEA,sDAEA,IAEA,gBAEA,6CAEA,2DAEA,8EAEA,KAECuB,KAAM,0CCnETkK,EAAAI,EAAAD,EAAA,sBAAArF,IAMA,IAAIA,GAEH/G,UAEC4B,UAAczB,MAAO,MACrBqM,SAAarM,MAAO,IAIrBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,yBAEA,8BAEA,oBAEA,gBAEA,4CAEA,6CACA,2CACA,8BAEA,6DAEA,2CACA,qEAEA,gDAEA,iCACA,qCACA,2CAEA,2CAEA,KAECuB,KAAM,sECvCL0K,GAEHzM,UAEC4B,UAAczB,MAAO,MACrByK,MAAUzK,MAAO,GACjBuM,YAAgBvM,MAAO,IACvBwM,YAAgBxM,MAAO,KACvByM,QAAYzM,MAAO,MACnB0M,WAAe1M,MAAO,IAIvBI,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECwB,KAAM,MAERvB,gBAEC,oBAGA,sBAEA,0BAGA,4BAGA,4BAGA,wBAEA,8BAEA,oBAEA,gBAGA,sDAGA,mCAGA,0FAGA,oEAGA,2EAGA,oGAGA,sBAEA,+EAEA,MAEA,uDAEA,KAECuB,KAAM,OCnGTkK,EAAAI,EAAAD,EAAA,sBAAAU,IAOA,IAAInF,EAAW,SAAWoF,EAAgBC,EAAoBC,EAAgBJ,GAE7ErN,IAAKC,KAAMC,WAESC,IAAf8M,GACJ5M,QAAQC,MAAO,iCAEhB,IAAIC,EAAS0M,EAEb/M,KAAKM,SAAWC,MAAcC,MAAOH,EAAOC,UAE5CN,KAAKW,SAAW,IAAIC,OAEnBN,SAAUN,KAAKM,SACfO,aAAcR,EAAOQ,aACrBC,eAAgBT,EAAOS,sBAILb,IAAdkN,IAA0BnN,KAAKM,SAAS6M,UAAU1M,MAAQ0M,QACvClN,IAAnBoN,IAA+BrN,KAAKM,SAAS0M,WAAWvM,MAAQ4M,QACzCpN,IAAvBqN,IAAmCtN,KAAKM,SAAS2M,WAAWxM,MAAQ6M,QACjDrN,IAAnBsN,IAA+BvN,KAAKM,SAAS4M,OAAOzM,MAAQ8M,GAEjEvN,KAAKe,OAAS,IAAIjB,IAAKkB,eAAgBhB,KAAKW,WAI7CsH,EAAShH,UAAYC,OAAOC,OAAQD,OAAOE,OAAQtB,IAAKmB,YAEvDI,YAAa4G,EAEb3G,OAAQ,SAAWC,EAAUC,EAAaC,EAAY+L,GAErDxN,KAAKM,SAAL,SAA4BG,MAAQgB,EAAWC,QAC/C1B,KAAKM,SAAL,KAAwBG,OAAS+M,EAE5BxN,KAAK8B,gBAETP,EAASQ,gBAAiB,MAC1B/B,KAAKe,OAAOO,OAAQC,KAIpBA,EAASQ,gBAAiBP,GACrBxB,KAAKgC,OAAQT,EAASS,QAC3BhC,KAAKe,OAAOO,OAAQC","file":"static/js/1.130930b214b4860b3a97.js","sourcesContent":["import {\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { DotScreenShader } from \"../shaders/DotScreenShader.js\";\r\n\r\nvar DotScreenPass = function ( center, angle, scale ) {\r\n\r\n\tPass.call( this );\r\n\r\n\tif ( DotScreenShader === undefined )\r\n\t\tconsole.error( \"DotScreenPass relies on DotScreenShader\" );\r\n\r\n\tvar shader = DotScreenShader;\r\n\r\n\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\tif ( center !== undefined ) this.uniforms[ \"center\" ].value.copy( center );\r\n\tif ( angle !== undefined ) this.uniforms[ \"angle\" ].value = angle;\r\n\tif ( scale !== undefined ) this.uniforms[ \"scale\" ].value = scale;\r\n\r\n\tthis.material = new ShaderMaterial( {\r\n\r\n\t\tuniforms: this.uniforms,\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t} );\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\r\n\r\n};\r\n\r\nDotScreenPass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: DotScreenPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\r\n\t\tthis.uniforms[ \"tSize\" ].value.set( readBuffer.width, readBuffer.height );\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\t\tif ( this.clear ) renderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { DotScreenPass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/DotScreenPass.js","import {\r\n\tColor\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Colorify shader\r\n */\r\n\r\nvar ColorifyShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"color\": { value: new Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform vec3 color;\",\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\r\n\t\t\"\tfloat v = dot( texel.xyz, luma );\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( v * color, texel.w );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { ColorifyShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/ColorifyShader.js","/**\r\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\r\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\r\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n */\r\n\r\nvar HorizontalBlurShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"h\": { value: 1.0 / 512.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float h;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 sum = vec4( 0.0 );\",\r\n\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\",\r\n\r\n\t\t\"\tgl_FragColor = sum;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { HorizontalBlurShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/HorizontalBlurShader.js","/**\r\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\r\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\r\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n */\r\n\r\nvar VerticalBlurShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"v\": { value: 1.0 / 512.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float v;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 sum = vec4( 0.0 );\",\r\n\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\",\r\n\t\t\"\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\",\r\n\r\n\t\t\"\tgl_FragColor = sum;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { VerticalBlurShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/VerticalBlurShader.js","/**\r\n * Sepia tone shader\r\n * based on glfx.js sepia shader\r\n * https://github.com/evanw/glfx.js\r\n */\r\n\r\nvar SepiaShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"amount\": { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float amount;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\r\n\t\t\"\tvec3 c = color.rgb;\",\r\n\r\n\t\t\"\tcolor.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\",\r\n\t\t\"\tcolor.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\",\r\n\t\t\"\tcolor.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { SepiaShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/SepiaShader.js","/**\r\n * Vignette shader\r\n * based on PaintEffect postprocess from ro.me\r\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\r\n */\r\n\r\nvar VignetteShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"offset\": { value: 1.0 },\r\n\t\t\"darkness\": { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float offset;\",\r\n\t\t\"uniform float darkness;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t// Eskil's vignette\r\n\r\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\r\n\t\t\"\tvec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\",\r\n\t\t\"\tgl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\r\n\r\n\t\t/*\r\n\t\t// alternative version from glfx.js\r\n\t\t// this one makes more \"dusty\" look (as opposed to \"burned\")\r\n\r\n\t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\r\n\t\t\"\tfloat dist = distance( vUv, vec2( 0.5 ) );\",\r\n\t\t\"\tcolor.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\r\n\t\t\"\tgl_FragColor = color;\",\r\n\t\t*/\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { VignetteShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/VignetteShader.js","<template>\r\n    <div class=\"webglPostprocessingAdvanced-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl postprocessing example<br/>\r\n\t\t\t<a href=\"http://g3d.cs.williams.edu/g3d/data10/index.html#mesh19\" target=\"_blank\" rel=\"noopener\">Lee Perry-Smith</a> head\r\n\t\t</div>\r\n\r\n\t\t<div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { ShaderPass } from '@/components/jsm/postprocessing/ShaderPass.js'\r\nimport { BloomPass } from '@/components/jsm/postprocessing/BloomPass.js'\r\nimport { FilmPass } from '@/components/jsm/postprocessing/FilmPass.js'\r\nimport { DotScreenPass } from '@/components/jsm/postprocessing/DotScreenPass.js'\r\nimport { MaskPass, ClearMaskPass } from '@/components/jsm/postprocessing/MaskPass.js'\r\nimport { TexturePass } from '@/components/jsm/postprocessing/TexturePass.js'\r\nimport { BleachBypassShader } from '@/components/jsm/shaders/BleachBypassShader.js'\r\nimport { ColorifyShader } from '@/components/jsm/shaders/ColorifyShader.js'\r\nimport { HorizontalBlurShader } from '@/components/jsm/shaders/HorizontalBlurShader.js'\r\nimport { VerticalBlurShader } from '@/components/jsm/shaders/VerticalBlurShader.js'\r\nimport { SepiaShader } from '@/components/jsm/shaders/SepiaShader.js'\r\nimport { VignetteShader } from '@/components/jsm/shaders/VignetteShader.js'\r\nimport { GammaCorrectionShader } from '@/components/jsm/shaders/GammaCorrectionShader.js'\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            composerScene: null,\r\n            composer1: null,\r\n            composer2: null,\r\n            composer3: null,\r\n            composer4: null,\r\n            cameraOrtho: null,\r\n            cameraPerspective: null,\r\n            sceneModel: null,\r\n            sceneBG: null,\r\n            renderer: null,\r\n            mesh: null,\r\n            directionalLight: null,\r\n\t\t\twidth: null,\r\n\t\t\theight: null,\r\n\t\t\thalfWidth: null,\r\n\t\t\thalfHeight: null,\r\n            quadBG: null,\r\n            quadMask: null,\r\n            renderScene: null,\r\n\t\t\tdelta: 0.01\r\n        }\r\n    },\r\n    mounted() {\r\n        this.width = this.$webglInnerWidth || 2\r\n        this.height = window.innerHeight || 2\r\n        this.halfWidth = this.width / 2\r\n        this.halfHeight = this.height / 2\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById('container')\r\n            //\r\n            this.cameraOrtho = new this.$THREE.OrthographicCamera(- this.halfWidth, this.halfWidth, this.halfHeight, - this.halfHeight, - 10000, 10000)\r\n            this.cameraOrtho.position.z = 100\r\n            this.cameraPerspective = new this.$THREE.PerspectiveCamera(50, this.width / this.height, 1, 10000)\r\n            this.cameraPerspective.position.z = 900\r\n            //\r\n            this.sceneModel = new this.$THREE.Scene()\r\n            this.sceneBG = new this.$THREE.Scene()\r\n            //\r\n            this.directionalLight = new this.$THREE.DirectionalLight(0xffffff)\r\n            this.directionalLight.position.set(0, - 0.1, 1).normalize()\r\n            this.sceneModel.add(this.directionalLight)\r\n            var loader = new GLTFLoader()\r\n            loader.load(\"static/models/gltf/LeePerrySmith/LeePerrySmith.glb\", (gltf) => {\r\n                this.createMesh(gltf.scene.children[ 0 ].geometry, this.sceneModel, 100)\r\n            })\r\n            //\r\n            var diffuseMap = new this.$THREE.TextureLoader().load(\"static/textures/cube/SwedishRoyalCastle/pz.jpg\")\r\n            diffuseMap.encoding = this.$THREE.sRGBEncoding\r\n            var materialColor = new this.$THREE.MeshBasicMaterial({\r\n                map: diffuseMap,\r\n                depthTest: false\r\n            })\r\n            this.quadBG = new this.$THREE.Mesh(new this.$THREE.PlaneBufferGeometry(1, 1), materialColor)\r\n            this.quadBG.position.z = - 500\r\n            this.quadBG.scale.set(this.width, this.height, 1)\r\n            this.sceneBG.add(this.quadBG)\r\n            //\r\n            var sceneMask = new this.$THREE.Scene()\r\n            this.quadMask = new this.$THREE.Mesh(new this.$THREE.PlaneBufferGeometry(1, 1), new this.$THREE.MeshBasicMaterial({ color: 0xffaa00 }))\r\n            this.quadMask.position.z = - 300\r\n            this.quadMask.scale.set(this.width / 2, this.height / 2, 1)\r\n            sceneMask.add(this.quadMask)\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.width, this.height)\r\n            this.renderer.autoClear = false\r\n            //\r\n            this.container.appendChild(this.renderer.domElement)\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            //\r\n            var shaderBleach = BleachBypassShader\r\n            var shaderSepia = SepiaShader\r\n            var shaderVignette = VignetteShader\r\n            var effectBleach = new ShaderPass(shaderBleach)\r\n            var effectSepia = new ShaderPass(shaderSepia)\r\n            var effectVignette = new ShaderPass(shaderVignette)\r\n            var gammaCorrection = new ShaderPass(GammaCorrectionShader)\r\n            effectBleach.uniforms[ \"opacity\" ].value = 0.95\r\n            effectSepia.uniforms[ \"amount\" ].value = 0.9\r\n            effectVignette.uniforms[ \"offset\" ].value = 0.95\r\n            effectVignette.uniforms[ \"darkness\" ].value = 1.6\r\n            var effectBloom = new BloomPass(0.5)\r\n            var effectFilm = new FilmPass(0.35, 0.025, 648, false)\r\n            var effectFilmBW = new FilmPass(0.35, 0.5, 2048, true)\r\n            var effectDotScreen = new DotScreenPass(new this.$THREE.Vector2(0, 0), 0.5, 0.8)\r\n            var effectHBlur = new ShaderPass(HorizontalBlurShader)\r\n            var effectVBlur = new ShaderPass(VerticalBlurShader)\r\n            effectHBlur.uniforms[ 'h' ].value = 2 / (this.width / 2)\r\n            effectVBlur.uniforms[ 'v' ].value = 2 / (this.height / 2)\r\n            var effectColorify1 = new ShaderPass(ColorifyShader)\r\n            var effectColorify2 = new ShaderPass(ColorifyShader)\r\n            effectColorify1.uniforms[ 'color' ] = new this.$THREE.Uniform(new this.$THREE.Color(1, 0.8, 0.8))\r\n            effectColorify2.uniforms[ 'color' ] = new this.$THREE.Uniform(new this.$THREE.Color(1, 0.75, 0.5))\r\n            var clearMask = new ClearMaskPass()\r\n            var renderMask = new MaskPass(this.sceneModel, this.cameraPerspective)\r\n            var renderMaskInverse = new MaskPass(this.sceneModel, this.cameraPerspective)\r\n            renderMaskInverse.inverse = true\r\n            //\r\n            var rtParameters = {\r\n                minFilter: this.$THREE.LinearFilter,\r\n                magFilter: this.$THREE.LinearFilter,\r\n                format: this.$THREE.RGBFormat,\r\n                stencilBuffer: true\r\n            }\r\n            var rtWidth = this.width / 2\r\n            var rtHeight = this.height / 2\r\n            //\r\n            var renderBackground = new RenderPass(this.sceneBG, this.cameraOrtho)\r\n            var renderModel = new RenderPass(this.sceneModel, this.cameraPerspective)\r\n            renderModel.clear = false\r\n            this.composerScene = new EffectComposer(this.renderer, new this.$THREE.WebGLRenderTarget(rtWidth * 2, rtHeight * 2, rtParameters))\r\n            this.composerScene.addPass(renderBackground)\r\n            this.composerScene.addPass(renderModel)\r\n            this.composerScene.addPass(renderMaskInverse)\r\n            this.composerScene.addPass(effectHBlur)\r\n            this.composerScene.addPass(effectVBlur)\r\n            this.composerScene.addPass(clearMask)\r\n            //\r\n            this.renderScene = new TexturePass(this.composerScene.renderTarget2.texture)\r\n            //\r\n            this.composer1 = new EffectComposer(this.renderer, new this.$THREE.WebGLRenderTarget(rtWidth, rtHeight, rtParameters))\r\n            this.composer1.addPass(this.renderScene)\r\n            this.composer1.addPass(gammaCorrection)\r\n            this.composer1.addPass(effectFilmBW)\r\n            this.composer1.addPass(effectVignette)\r\n            //\r\n            this.composer2 = new EffectComposer(this.renderer, new this.$THREE.WebGLRenderTarget(rtWidth, rtHeight, rtParameters))\r\n            this.composer2.addPass(this.renderScene)\r\n            this.composer2.addPass(gammaCorrection)\r\n            this.composer2.addPass(effectDotScreen)\r\n            this.composer2.addPass(renderMask)\r\n            this.composer2.addPass(effectColorify1)\r\n            this.composer2.addPass(clearMask)\r\n            this.composer2.addPass(renderMaskInverse)\r\n            this.composer2.addPass(effectColorify2)\r\n            this.composer2.addPass(clearMask)\r\n            this.composer2.addPass(effectVignette)\r\n            //\r\n            this.composer3 = new EffectComposer(this.renderer, new this.$THREE.WebGLRenderTarget(rtWidth, rtHeight, rtParameters))\r\n            this.composer3.addPass(this.renderScene)\r\n            this.composer3.addPass(gammaCorrection)\r\n            this.composer3.addPass(effectSepia)\r\n            this.composer3.addPass(effectFilm)\r\n            this.composer3.addPass(effectVignette)\r\n            //\r\n            this.composer4 = new EffectComposer(this.renderer, new this.$THREE.WebGLRenderTarget(rtWidth, rtHeight, rtParameters))\r\n            this.composer4.addPass(this.renderScene)\r\n            this.composer4.addPass(gammaCorrection)\r\n            this.composer4.addPass(effectBloom)\r\n            this.composer4.addPass(effectFilm)\r\n            this.composer4.addPass(effectBleach)\r\n            this.composer4.addPass(effectVignette)\r\n            this.renderScene.uniforms[ \"tDiffuse\" ].value = this.composerScene.renderTarget2.texture\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.halfWidth = (window.innerWidth - 281) / 2\r\n            this.halfHeight = window.innerHeight / 2\r\n            this.cameraPerspective.aspect = (window.innerWidth - 281) / window.innerHeight\r\n            this.cameraPerspective.updateProjectionMatrix()\r\n            this.cameraOrtho.left = - this.halfWidth\r\n            this.cameraOrtho.right = this.halfWidth\r\n            this.cameraOrtho.top = this.halfHeight\r\n            this.cameraOrtho.bottom = - this.halfHeight\r\n            this.cameraOrtho.updateProjectionMatrix()\r\n            this.renderer.setSize((window.innerWidth - 281), window.innerHeight)\r\n            this.composerScene.setSize(this.halfWidth * 2, this.halfHeight * 2)\r\n            this.composer1.setSize(this.halfWidth, this.halfHeight)\r\n            this.composer2.setSize(this.halfWidth, this.halfHeight)\r\n            this.composer3.setSize(this.halfWidth, this.halfHeight)\r\n            this.composer4.setSize(this.halfWidth, this.halfHeight)\r\n            this.renderScene.uniforms[ \"tDiffuse\" ].value = this.composerScene.renderTarget2.texture\r\n            this.quadBG.scale.set((window.innerWidth - 281), window.innerHeight, 1)\r\n            this.quadMask.scale.set((window.innerWidth - 281) / 2, window.innerHeight / 2, 1)\r\n        },\r\n        createMesh(geometry, scene, scale) {\r\n            var diffuseMap = new this.$THREE.TextureLoader().load(\"static/models/gltf/LeePerrySmith/Map-COL.jpg\")\r\n            diffuseMap.encoding = this.$THREE.sRGBEncoding\r\n            var mat2 = new this.$THREE.MeshPhongMaterial({\r\n                color: 0x999999,\r\n                specular: 0x080808,\r\n                shininess: 20,\r\n                map: diffuseMap,\r\n                normalMap: new this.$THREE.TextureLoader().load(\"static/models/gltf/LeePerrySmith/Infinite-Level_02_Tangent_SmoothUV.jpg\"),\r\n                normalScale: new this.$THREE.Vector2(0.75, 0.75)\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(geometry, mat2)\r\n            this.mesh.position.set(0, - 50, 0)\r\n            this.mesh.scale.set(scale, scale, scale)\r\n            scene.add(this.mesh)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.stats.begin()\r\n            this.render()\r\n            this.stats.end()\r\n        },\r\n        render() {\r\n            var time = Date.now() * 0.0004\r\n            if (this.mesh) this.mesh.rotation.y = - time\r\n            this.renderer.setViewport(0, 0, this.halfWidth, this.halfHeight)\r\n            this.composerScene.render(this.delta)\r\n            this.renderer.setViewport(0, 0, this.halfWidth, this.halfHeight)\r\n            this.composer1.render(this.delta)\r\n            this.renderer.setViewport(this.halfWidth, 0, this.halfWidth, this.halfHeight)\r\n            this.composer2.render(this.delta)\r\n            this.renderer.setViewport(0, this.halfHeight, this.halfWidth, this.halfHeight)\r\n            this.composer3.render(this.delta)\r\n            this.renderer.setViewport(this.halfWidth, this.halfHeight, this.halfWidth, this.halfHeight)\r\n            this.composer4.render(this.delta)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingAdvanced-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingAdvanced.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingAdvanced-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl postprocessing example\"),_c('br'),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"http://g3d.cs.williams.edu/g3d/data10/index.html#mesh19\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Lee Perry-Smith\")]),_vm._v(\" head\\n\\t\\t\")]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"container\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-e97ad014\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingAdvanced.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-e97ad014\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingAdvanced.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingAdvanced.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingAdvanced.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-e97ad014\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingAdvanced.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-e97ad014\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingAdvanced.vue\n// module id = null\n// module chunks = ","import {\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Dot screen shader\r\n * based on glfx.js sepia shader\r\n * https://github.com/evanw/glfx.js\r\n */\r\n\r\nvar DotScreenShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"tSize\": { value: new Vector2( 256, 256 ) },\r\n\t\t\"center\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\"angle\": { value: 1.57 },\r\n\t\t\"scale\": { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform vec2 center;\",\r\n\t\t\"uniform float angle;\",\r\n\t\t\"uniform float scale;\",\r\n\t\t\"uniform vec2 tSize;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"float pattern() {\",\r\n\r\n\t\t\"\tfloat s = sin( angle ), c = cos( angle );\",\r\n\r\n\t\t\"\tvec2 tex = vUv * tSize - center;\",\r\n\t\t\"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\r\n\r\n\t\t\"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { DotScreenShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/DotScreenShader.js","/**\r\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\r\n * - based on Nvidia example\r\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\r\n */\r\n\r\nvar BleachBypassShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"opacity\": { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float opacity;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 base = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\"\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\r\n\t\t\"\tfloat lum = dot( lumCoeff, base.rgb );\",\r\n\t\t\"\tvec3 blend = vec3( lum );\",\r\n\r\n\t\t\"\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\r\n\r\n\t\t\"\tvec3 result1 = 2.0 * base.rgb * blend;\",\r\n\t\t\"\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\r\n\r\n\t\t\"\tvec3 newColor = mix( result1, result2, L );\",\r\n\r\n\t\t\"\tfloat A2 = opacity * base.a;\",\r\n\t\t\"\tvec3 mixRGB = A2 * newColor.rgb;\",\r\n\t\t\"\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( mixRGB, base.a );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { BleachBypassShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/BleachBypassShader.js","/**\r\n * Film grain & scanlines shader\r\n *\r\n * - ported from HLSL to WebGL / GLSL\r\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\r\n *\r\n * Screen Space Static Postprocessor\r\n *\r\n * Produces an analogue noise overlay similar to a film grain / TV static\r\n *\r\n * Original implementation and noise algorithm\r\n * Pat 'Hawthorne' Shearon\r\n *\r\n * Optimized scanlines + noise version with intensity scaling\r\n * Georg 'Leviathan' Steinrohder\r\n *\r\n * This version is provided under a Creative Commons Attribution 3.0 License\r\n * http://creativecommons.org/licenses/by/3.0/\r\n */\r\n\r\nvar FilmShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"time\": { value: 0.0 },\r\n\t\t\"nIntensity\": { value: 0.5 },\r\n\t\t\"sIntensity\": { value: 0.05 },\r\n\t\t\"sCount\": { value: 4096 },\r\n\t\t\"grayscale\": { value: 1 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"#include <common>\",\r\n\r\n\t\t// control parameter\r\n\t\t\"uniform float time;\",\r\n\r\n\t\t\"uniform bool grayscale;\",\r\n\r\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\r\n\t\t\"uniform float nIntensity;\",\r\n\r\n\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\r\n\t\t\"uniform float sIntensity;\",\r\n\r\n\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\r\n\t\t\"uniform float sCount;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t// sample the source\r\n\t\t\"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t// make some noise\r\n\t\t\"\tfloat dx = rand( vUv + time );\",\r\n\r\n\t\t// add noise\r\n\t\t\"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\r\n\r\n\t\t// get us a sine and cosine\r\n\t\t\"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\r\n\r\n\t\t// add scanlines\r\n\t\t\"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\r\n\r\n\t\t// interpolate between source and result by intensity\r\n\t\t\"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\r\n\r\n\t\t// convert to grayscale if desired\r\n\t\t\"\tif( grayscale ) {\",\r\n\r\n\t\t\"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { FilmShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/FilmShader.js","import {\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { FilmShader } from \"../shaders/FilmShader.js\";\r\n\r\nvar FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\r\n\r\n\tPass.call( this );\r\n\r\n\tif ( FilmShader === undefined )\r\n\t\tconsole.error( \"FilmPass relies on FilmShader\" );\r\n\r\n\tvar shader = FilmShader;\r\n\r\n\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\tthis.material = new ShaderMaterial( {\r\n\r\n\t\tuniforms: this.uniforms,\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t} );\r\n\r\n\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\r\n\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\r\n\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\r\n\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\r\n\r\n};\r\n\r\nFilmPass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: FilmPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */ ) {\r\n\r\n\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\r\n\t\tthis.uniforms[ \"time\" ].value += deltaTime;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\t\tif ( this.clear ) renderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { FilmPass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/FilmPass.js"],"sourceRoot":""}