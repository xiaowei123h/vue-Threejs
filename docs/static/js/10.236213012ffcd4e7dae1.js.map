{"version":3,"sources":["webpack:///src/views/shadowmap/webglShadowmap.vue","webpack:///./src/views/shadowmap/webglShadowmap.vue?dee4","webpack:///./src/views/shadowmap/webglShadowmap.vue","webpack:///./src/components/jsm/utils/ShadowMapViewer.js"],"names":["webglShadowmap","data","SHADOW_MAP_WIDTH","SHADOW_MAP_HEIGHT","SCREEN_WIDTH","SCREEN_HEIGHT","FLOOR","camera","controls","scene","renderer","container","stats","NEAR","FAR","mixer","morphs","light","lightShadowMapViewer","clock","showHUD","mounted","this","$webglInnerWidth","window","innerHeight","$THREE","Clock","init","animate","methods","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","position","set","Scene","background","Color","fog","Fog","ambient","AmbientLight","add","SpotLight","Math","PI","target","castShadow","shadow","near","far","bias","mapSize","width","height","createHUD","createScene","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","outputEncoding","sRGBEncoding","autoClear","shadowMap","enabled","type","PCFShadowMap","FirstPersonControls","lookSpeed","movementSpeed","noFly","lookVertical","lookAt","$Stats","addEventListener","onWindowResize","onKeyDown","innerWidth","$onWindowResize","handleResize","event","keyCode","ShadowMapViewer","x","y","size","update","_this","geometry","PlaneBufferGeometry","planeMaterial","MeshPhongMaterial","color","ground","Mesh","rotation","scale","receiveShadow","FontLoader","load","font","textGeo","TextBufferGeometry","curveSegments","bevelThickness","bevelSize","bevelEnabled","computeBoundingBox","centerOffset","boundingBox","max","min","textMaterial","specular","mesh","cubes1","BoxBufferGeometry","z","cubes2","AnimationMixer","that","addMorph","clip","speed","duration","fudgeColor","clone","material","offsetHSL","random","clipAction","setDuration","startAt","play","push","gltfloader","GLTFLoader","gltf","children","animations","requestAnimationFrame","render","delta","getDelta","i","length","morph","clear","shadowmap_webglShadowmap","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","__WEBPACK_IMPORTED_MODULE_1__shaders_UnpackDepthRGBAShader_js__","userAutoClearSetting","scope","doRenderLabel","undefined","name","frame","OrthographicCamera","labelCanvas","labelMesh","shader","UnpackDepthRGBAShader","uniforms","UniformsUtils","ShaderMaterial","vertexShader","fragmentShader","plane","context","getContext","labelWidth","measureText","fillStyle","fillText","labelTexture","Texture","magFilter","LinearFilter","minFilter","needsUpdate","labelMaterial","MeshBasicMaterial","map","side","DoubleSide","transparent","labelPlane","tDiffuse","value","texture","clearDepth","updateForWindowResize","left","right","top","bottom","updateProjectionMatrix","prototype","constructor"],"mappings":"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","file":"static/js/10.236213012ffcd4e7dae1.js","sourcesContent":["<template>\r\n    <div class=\"webglShadowmap-container\">\r\n        <div id=\"info\">\r\n            <a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - shadowmap - models by <a href=\"https://mirada.com/\" target=\"_blank\" rel=\"noopener\">mirada</a> from <a href=\"http://www.ro.me\" target=\"_blank\" rel=\"noopener\">rome</a><br />\r\n            move camera with WASD / RF + mouse<br />\r\n            t: toggle HUD\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { FirstPersonControls } from '@/components/jsm/controls/FirstPersonControls.js'\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js'\r\nimport { ShadowMapViewer } from '@/components/jsm/utils/ShadowMapViewer.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            SHADOW_MAP_WIDTH: 2048,\r\n            SHADOW_MAP_HEIGHT: 1024,\r\n\t\t\tSCREEN_WIDTH: null,\r\n\t\t\tSCREEN_HEIGHT: null,\r\n\t\t\tFLOOR: - 250,\r\n            camera: null,\r\n            controls: null,\r\n            scene: null,\r\n            renderer: null,\r\n            container: null,\r\n            stats: null,\r\n            NEAR: 10,\r\n            FAR: 3000,\r\n\t\t\tmixer: null,\r\n\t\t\tmorphs: [],\r\n\t\t\tlight: null,\r\n\t\t\tlightShadowMapViewer: null,\r\n\t\t\tclock: null,\r\n\t\t\tshowHUD: false,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.SCREEN_WIDTH = this.$webglInnerWidth\r\n        this.SCREEN_HEIGHT = window.innerHeight\r\n        this.clock = new this.$THREE.Clock()\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglShadowmap-container')[0].appendChild(this.container)\r\n            // CAMERA\r\n            this.camera = new this.$THREE.PerspectiveCamera(23, this.SCREEN_WIDTH / this.SCREEN_HEIGHT, this.NEAR, this.FAR)\r\n            this.camera.position.set(700, 50, 1900)\r\n            // SCENE\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0x59472b)\r\n            this.scene.fog = new this.$THREE.Fog(0x59472b, 1000, this.FAR)\r\n            // LIGHTS\r\n            var ambient = new this.$THREE.AmbientLight(0x444444)\r\n            this.scene.add(ambient)\r\n            this.light = new this.$THREE.SpotLight(0xffffff, 1, 0, Math.PI / 5, 0.3)\r\n            this.light.position.set(0, 1500, 1000)\r\n            this.light.target.position.set(0, 0, 0)\r\n            this.light.castShadow = true\r\n            this.light.shadow.camera.near = 1200\r\n            this.light.shadow.camera.far = 2500\r\n            this.light.shadow.bias = 0.0001\r\n            this.light.shadow.mapSize.width = this.SHADOW_MAP_WIDTH\r\n            this.light.shadow.mapSize.height = this.SHADOW_MAP_HEIGHT\r\n            this.scene.add(this.light)\r\n            this.createHUD()\r\n            this.createScene()\r\n            // RENDERER\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.SCREEN_WIDTH, this.SCREEN_HEIGHT)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.renderer.autoClear = false\r\n            //\r\n            this.renderer.shadowMap.enabled = true\r\n            this.renderer.shadowMap.type = this.$THREE.PCFShadowMap\r\n            // CONTROLS\r\n            this.controls = new FirstPersonControls(this.camera, this.renderer.domElement)\r\n            this.controls.lookSpeed = 0.0125\r\n            this.controls.movementSpeed = 500\r\n            this.controls.noFly = false\r\n            this.controls.lookVertical = true\r\n            this.controls.lookAt(this.scene.position)\r\n            // STATS\r\n            this.stats = new this.$Stats()\r\n            //container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            window.addEventListener('keydown', this.onKeyDown, false)\r\n        },\r\n        onWindowResize() {\r\n            this.SCREEN_WIDTH = window.innerWidth - 281\r\n            this.SCREEN_HEIGHT = window.innerHeight\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.controls.handleResize()\r\n        },\r\n        onKeyDown(event) {\r\n            switch (event.keyCode) {\r\n                case 84:\t/*t*/\r\n                    this.showHUD = ! this.showHUD\r\n                    break\r\n            }\r\n        },\r\n        createHUD() {\r\n            this.lightShadowMapViewer = new ShadowMapViewer(this.light)\r\n            this.lightShadowMapViewer.position.x = 10\r\n            this.lightShadowMapViewer.position.y = this.SCREEN_HEIGHT - (this.SHADOW_MAP_HEIGHT / 4) - 10\r\n            this.lightShadowMapViewer.size.width = this.SHADOW_MAP_WIDTH / 4\r\n            this.lightShadowMapViewer.size.height = this.SHADOW_MAP_HEIGHT / 4\r\n            this.lightShadowMapViewer.update()\r\n        },\r\n        createScene() {\r\n            // GROUND\r\n            var geometry = new this.$THREE.PlaneBufferGeometry(100, 100)\r\n            var planeMaterial = new this.$THREE.MeshPhongMaterial({ color: 0xffb851 })\r\n            var ground = new this.$THREE.Mesh(geometry, planeMaterial)\r\n            ground.position.set(0, this.FLOOR, 0)\r\n            ground.rotation.x = - Math.PI / 2\r\n            ground.scale.set(100, 100, 100)\r\n            ground.castShadow = false\r\n            ground.receiveShadow = true\r\n            this.scene.add(ground)\r\n            // TEXT\r\n            var loader = new this.$THREE.FontLoader()\r\n            loader.load('static/fonts/helvetiker_bold.typeface.json', (font) => {\r\n                var textGeo = new this.$THREE.TextBufferGeometry(\"this.$THREE.JS\", {\r\n                    font: font,\r\n                    size: 200,\r\n                    height: 50,\r\n                    curveSegments: 12,\r\n                    bevelThickness: 2,\r\n                    bevelSize: 5,\r\n                    bevelEnabled: true\r\n                })\r\n                textGeo.computeBoundingBox()\r\n                var centerOffset = - 0.5 * (textGeo.boundingBox.max.x - textGeo.boundingBox.min.x)\r\n                var textMaterial = new this.$THREE.MeshPhongMaterial({ color: 0xff0000, specular: 0xffffff })\r\n                var mesh = new this.$THREE.Mesh(textGeo, textMaterial)\r\n                mesh.position.x = centerOffset\r\n                mesh.position.y = this.FLOOR + 67\r\n                mesh.castShadow = true\r\n                mesh.receiveShadow = true\r\n                this.scene.add(mesh)\r\n            })\r\n            // CUBE\r\n            var cubes1 = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(1500, 220, 150), planeMaterial)\r\n            cubes1.position.y = this.FLOOR - 50\r\n            cubes1.position.z = 20\r\n            cubes1.castShadow = true\r\n            cubes1.receiveShadow = true\r\n            this.scene.add(cubes1)\r\n            var cubes2 = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(1600, 170, 250), planeMaterial)\r\n            cubes2.position.y = this.FLOOR - 50\r\n            cubes2.position.z = 20\r\n            cubes2.castShadow = true\r\n            cubes2.receiveShadow = true\r\n            this.scene.add(cubes2)\r\n            // MORPHS\r\n            this.mixer = new this.$THREE.AnimationMixer(this.scene)\r\n            var that = this\r\n            function addMorph(mesh, clip, speed, duration, x, y, z, fudgeColor) {\r\n                mesh = mesh.clone()\r\n                mesh.material = mesh.material.clone()\r\n                if (fudgeColor) {\r\n                    mesh.material.color.offsetHSL(0, Math.random() * 0.5 - 0.25, Math.random() * 0.5 - 0.25)\r\n                }\r\n                mesh.speed = speed\r\n                that.mixer.clipAction(clip, mesh).\r\n                    setDuration(duration).\r\n                // to shift the playback out of phase:\r\n                    startAt(- duration * Math.random()).\r\n                    play()\r\n                mesh.position.set(x, y, z)\r\n                mesh.rotation.y = Math.PI / 2\r\n                mesh.castShadow = true\r\n                mesh.receiveShadow = true\r\n                that.scene.add(mesh)\r\n                that.morphs.push(mesh)\r\n            }\r\n            var gltfloader = new GLTFLoader()\r\n            gltfloader.load(\"static/models/gltf/Horse.glb\", (gltf) => {\r\n                var mesh = gltf.scene.children[ 0 ]\r\n                var clip = gltf.animations[ 0 ]\r\n                addMorph(mesh, clip, 550, 1, 100 - Math.random() * 1000, this.FLOOR, 300, true)\r\n                addMorph(mesh, clip, 550, 1, 100 - Math.random() * 1000, this.FLOOR, 450, true)\r\n                addMorph(mesh, clip, 550, 1, 100 - Math.random() * 1000, this.FLOOR, 600, true)\r\n                addMorph(mesh, clip, 550, 1, 100 - Math.random() * 1000, this.FLOOR, - 300, true)\r\n                addMorph(mesh, clip, 550, 1, 100 - Math.random() * 1000, this.FLOOR, - 450, true)\r\n                addMorph(mesh, clip, 550, 1, 100 - Math.random() * 1000, this.FLOOR, - 600, true)\r\n            })\r\n            gltfloader.load(\"static/models/gltf/Flamingo.glb\", (gltf) => {\r\n                var mesh = gltf.scene.children[ 0 ]\r\n                var clip = gltf.animations[ 0 ]\r\n                addMorph(mesh, clip, 500, 1, 500 - Math.random() * 500, this.FLOOR + 350, 40)\r\n            })\r\n            gltfloader.load(\"static/models/gltf/Stork.glb\", (gltf) => {\r\n                var mesh = gltf.scene.children[ 0 ]\r\n                var clip = gltf.animations[ 0 ]\r\n                addMorph(mesh, clip, 350, 1, 500 - Math.random() * 500, this.FLOOR + 350, 340)\r\n            })\r\n            gltfloader.load(\"static/models/gltf/Parrot.glb\", (gltf) => {\r\n                var mesh = gltf.scene.children[ 0 ]\r\n                var clip = gltf.animations[ 0 ]\r\n                addMorph(mesh, clip, 450, 0.5, 500 - Math.random() * 500, this.FLOOR + 300, 700)\r\n            })\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var delta = this.clock.getDelta()\r\n            this.mixer.update(delta)\r\n            for (var i = 0; i < this.morphs.length; i ++) {\r\n                var morph = this.morphs[ i ]\r\n                morph.position.x += morph.speed * delta\r\n                if (morph.position.x > 2000) {\r\n                    morph.position.x = - 1000 - Math.random() * 500\r\n                }\r\n            }\r\n            this.controls.update(delta)\r\n            this.renderer.clear()\r\n            this.renderer.render(this.scene, this.camera)\r\n            // Render debug HUD with shadow map\r\n            if (this.showHUD) {\r\n                this.lightShadowMapViewer.render(this.renderer)\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglShadowmap-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/shadowmap/webglShadowmap.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglShadowmap-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - shadowmap - models by \"),_c('a',{attrs:{\"href\":\"https://mirada.com/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"mirada\")]),_vm._v(\" from \"),_c('a',{attrs:{\"href\":\"http://www.ro.me\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"rome\")]),_c('br'),_vm._v(\"\\n            move camera with WASD / RF + mouse\"),_c('br'),_vm._v(\"\\n            t: toggle HUD\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-499c4514\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/shadowmap/webglShadowmap.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-499c4514\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglShadowmap.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadowmap.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadowmap.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-499c4514\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglShadowmap.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-499c4514\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/shadowmap/webglShadowmap.vue\n// module id = null\n// module chunks = ","import {\r\n\tDoubleSide,\r\n\tLinearFilter,\r\n\tMesh,\r\n\tMeshBasicMaterial,\r\n\tOrthographicCamera,\r\n\tPlaneBufferGeometry,\r\n\tScene,\r\n\tShaderMaterial,\r\n\tTexture,\r\n\tUniformsUtils\r\n} from \"@/components/build/three.module.js\";\r\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\r\n\r\n/**\r\n * This is a helper for visualising a given light's shadow map.\r\n * It works for shadow casting lights: DirectionalLight and SpotLight.\r\n * It renders out the shadow map and displays it on a HUD.\r\n *\r\n * Example usage:\r\n *\t1) Import ShadowMapViewer into your app.\r\n *\r\n *\t2) Create a shadow casting light and name it optionally:\r\n *\t\tvar light = new DirectionalLight( 0xffffff, 1 );\r\n *\t\tlight.castShadow = true;\r\n *\t\tlight.name = 'Sun';\r\n *\r\n *\t3) Create a shadow map viewer for that light and set its size and position optionally:\r\n *\t\tvar shadowMapViewer = new ShadowMapViewer( light );\r\n *\t\tshadowMapViewer.size.set( 128, 128 );\t//width, height  default: 256, 256\r\n *\t\tshadowMapViewer.position.set( 10, 10 );\t//x, y in pixel\t default: 0, 0 (top left corner)\r\n *\r\n *\t4) Render the shadow map viewer in your render loop:\r\n *\t\tshadowMapViewer.render( renderer );\r\n *\r\n *\t5) Optionally: Update the shadow map viewer on window resize:\r\n *\t\tshadowMapViewer.updateForWindowResize();\r\n *\r\n *\t6) If you set the position or size members directly, you need to call shadowMapViewer.update();\r\n */\r\n\r\nvar ShadowMapViewer = function ( light ) {\r\n\r\n\t//- Internals\r\n\tvar scope = this;\r\n\tvar doRenderLabel = ( light.name !== undefined && light.name !== '' );\r\n\tvar userAutoClearSetting;\r\n\r\n\t//Holds the initial position and dimension of the HUD\r\n\tvar frame = {\r\n\t\tx: 10,\r\n\t\ty: 10,\r\n\t\twidth: 256,\r\n\t\theight: 256\r\n\t};\r\n\r\n\tvar camera = new OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, 1, 10 );\r\n\tcamera.position.set( 0, 0, 2 );\r\n\tvar scene = new Scene();\r\n\r\n\t//HUD for shadow map\r\n\tvar shader = UnpackDepthRGBAShader;\r\n\r\n\tvar uniforms = UniformsUtils.clone( shader.uniforms );\r\n\tvar material = new ShaderMaterial( {\r\n\t\tuniforms: uniforms,\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tfragmentShader: shader.fragmentShader\r\n\t} );\r\n\tvar plane = new PlaneBufferGeometry( frame.width, frame.height );\r\n\tvar mesh = new Mesh( plane, material );\r\n\r\n\tscene.add( mesh );\r\n\r\n\r\n\t//Label for light's name\r\n\tvar labelCanvas, labelMesh;\r\n\r\n\tif ( doRenderLabel ) {\r\n\r\n\t\tlabelCanvas = document.createElement( 'canvas' );\r\n\r\n\t\tvar context = labelCanvas.getContext( '2d' );\r\n\t\tcontext.font = 'Bold 20px Arial';\r\n\r\n\t\tvar labelWidth = context.measureText( light.name ).width;\r\n\t\tlabelCanvas.width = labelWidth;\r\n\t\tlabelCanvas.height = 25;\t//25 to account for g, p, etc.\r\n\r\n\t\tcontext.font = 'Bold 20px Arial';\r\n\t\tcontext.fillStyle = 'rgba( 255, 0, 0, 1 )';\r\n\t\tcontext.fillText( light.name, 0, 20 );\r\n\r\n\t\tvar labelTexture = new Texture( labelCanvas );\r\n\t\tlabelTexture.magFilter = LinearFilter;\r\n\t\tlabelTexture.minFilter = LinearFilter;\r\n\t\tlabelTexture.needsUpdate = true;\r\n\r\n\t\tvar labelMaterial = new MeshBasicMaterial( { map: labelTexture, side: DoubleSide } );\r\n\t\tlabelMaterial.transparent = true;\r\n\r\n\t\tvar labelPlane = new PlaneBufferGeometry( labelCanvas.width, labelCanvas.height );\r\n\t\tlabelMesh = new Mesh( labelPlane, labelMaterial );\r\n\r\n\t\tscene.add( labelMesh );\r\n\r\n\t}\r\n\r\n\r\n\tfunction resetPosition() {\r\n\r\n\t\tscope.position.set( scope.position.x, scope.position.y );\r\n\r\n\t}\r\n\r\n\t//- API\r\n\t// Set to false to disable displaying this shadow map\r\n\tthis.enabled = true;\r\n\r\n\t// Set the size of the displayed shadow map on the HUD\r\n\tthis.size = {\r\n\t\twidth: frame.width,\r\n\t\theight: frame.height,\r\n\t\tset: function ( width, height ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tmesh.scale.set( this.width / frame.width, this.height / frame.height, 1 );\r\n\r\n\t\t\t//Reset the position as it is off when we scale stuff\r\n\t\t\tresetPosition();\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t// Set the position of the displayed shadow map on the HUD\r\n\tthis.position = {\r\n\t\tx: frame.x,\r\n\t\ty: frame.y,\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\tvar width = scope.size.width;\r\n\t\t\tvar height = scope.size.height;\r\n\r\n\t\t\tmesh.position.set( - window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0 );\r\n\r\n\t\t\tif ( doRenderLabel ) labelMesh.position.set( mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0 );\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tthis.render = function ( renderer ) {\r\n\r\n\t\tif ( this.enabled ) {\r\n\r\n\t\t\t//Because a light's .shadowMap is only initialised after the first render pass\r\n\t\t\t//we have to make sure the correct map is sent into the shader, otherwise we\r\n\t\t\t//always end up with the scene's first added shadow casting light's shadowMap\r\n\t\t\t//in the shader\r\n\t\t\t//See: https://github.com/mrdoob/three.js/issues/5932\r\n\t\t\tuniforms.tDiffuse.value = light.shadow.map.texture;\r\n\r\n\t\t\tuserAutoClearSetting = renderer.autoClear;\r\n\t\t\trenderer.autoClear = false; // To allow render overlay\r\n\t\t\trenderer.clearDepth();\r\n\t\t\trenderer.render( scene, camera );\r\n\t\t\trenderer.autoClear = userAutoClearSetting;\t//Restore user's setting\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.updateForWindowResize = function () {\r\n\r\n\t\tif ( this.enabled ) {\r\n\r\n\t\t\t camera.left = window.innerWidth / - 2;\r\n\t\t\t camera.right = window.innerWidth / 2;\r\n\t\t\t camera.top = window.innerHeight / 2;\r\n\t\t\t camera.bottom = window.innerHeight / - 2;\r\n\t\t\t camera.updateProjectionMatrix();\r\n\r\n\t\t\t this.update();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.update = function () {\r\n\r\n\t\tthis.position.set( this.position.x, this.position.y );\r\n\t\tthis.size.set( this.size.width, this.size.height );\r\n\r\n\t};\r\n\r\n\t//Force an update to set position/size\r\n\tthis.update();\r\n\r\n};\r\n\r\nShadowMapViewer.prototype.constructor = ShadowMapViewer;\r\n\r\nexport { ShadowMapViewer };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/utils/ShadowMapViewer.js"],"sourceRoot":""}