{"version":3,"sources":["webpack:///./src/components/jsm/misc/GPUComputationRenderer.js","webpack:///src/views/gpgpu/webglGpgpuBirdsGltf.vue","webpack:///./src/views/gpgpu/webglGpgpuBirdsGltf.vue?3f5b","webpack:///./src/views/gpgpu/webglGpgpuBirdsGltf.vue"],"names":["__webpack_require__","d","__webpack_exports__","GPUComputationRenderer","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","sizeX","sizeY","renderer","this","variables","currentTextureIndex","dataType","FloatType","scene","Scene","camera","Camera","position","z","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","mesh","Mesh","PlaneBufferGeometry","addResolutionDefine","materialShader","defines","resolution","toFixed","computeFragmentShader","uniforms","material","ShaderMaterial","vertexShader","fragmentShader","add","setDataType","type","addVariable","variableName","initialValueTexture","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","NearestFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","has","maxVertexTextures","i","length","createRenderTarget","renderTexture","depVar","found","j","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","ClampToEdgeWrapping","WebGLRenderTarget","format","RGBAFormat","depthBuffer","createTexture","data","Float32Array","DataTexture","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","render","webglGpgpuBirdsGltf","fragmentShaderPosition","fragmentShaderVelocity","WIDTH","BIRDS","BirdGeometry","textureAnimation","durationAnimation","birdMesh","vertexPerBird","gltfs","colors","sizes","selectModel","container","stats","mouseX","mouseY","windowHalfX","windowHalfY","BOUNDS","BOUNDS_HALF","last","gpuCompute","velocityVariable","positionVariable","positionUniforms","velocityUniforms","gui","mounted","_this","$THREE","BufferGeometry","Math","lerp","value1","value2","amount","max","min","floor","random","$webglInnerWidth","window","innerHeight","performance","now","GLTFLoader","load","gltf","animations","round","duration","birdGeo","children","geometry","morphAttributes","tHeight","nextPowerOf2","tWidth","getAttribute","count","tData","d0","d1","offset","curMorph","nextMorph","lerpAmount","array","undefined","RGBFormat","needsUpdate","vertices","color","reference","seeds","indices","totalVertices","bIndex","r","bird","x","y","index","setAttribute","BufferAttribute","setIndex","animate","beforeDestroy","hide","methods","n","pow","ceil","log","_this2","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","background","Color","fog","Fog","hemiLight","HemisphereLight","setHSL","groundColor","set","dirLight","DirectionalLight","multiplyScalar","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","initComputeRenderer","$Stats","dom","style","left","touchAction","addEventListener","onPointerMove","onWindowResize","dat_gui_module","effectController","separation","alignment","cohesion","freedom","size","valuesChanger","setDrawRange","onChange","close","initBirds","isSafari","HalfFloatType","dtPosition","dtVelocity","fillPositionTexture","fillVelocityTexture","Vector3","RepeatWrapping","error","console","navigator","userAgent","match","_this3","m","MeshStandardMaterial","vertexColors","flatShading","roughness","metalness","onBeforeCompile","shader","texturePosition","textureVelocity","time","delta","token","insert","replace","rotation","PI","castShadow","receiveShadow","theArray","image","k","kl","innerWidth","$onWindowResize","event","isPrimary","clientX","clientY","requestAnimationFrame","update","gpgpu_webglGpgpuBirdsGltf","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","normalizeComponent","ssrContext"],"mappings":"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","file":"static/js/10.738169b6e812f7bc3233.js","sourcesContent":["import {\r\n\tCamera,\r\n\tClampToEdgeWrapping,\r\n\tDataTexture,\r\n\tFloatType,\r\n\tMesh,\r\n\tNearestFilter,\r\n\tPlaneBufferGeometry,\r\n\tRGBAFormat,\r\n\tScene,\r\n\tShaderMaterial,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * GPUComputationRenderer, based on SimulationRenderer by zz85\r\n *\r\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\r\n * for each compute element (texel)\r\n *\r\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\r\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\r\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\r\n *\r\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\r\n * as inputs to render the textures of the next frame.\r\n *\r\n * The render targets of the variables can be used as input textures for your visualization shaders.\r\n *\r\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\r\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\r\n *\r\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\r\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\r\n *\r\n * -------------\r\n *\r\n * Basic use:\r\n *\r\n * // Initialization...\r\n *\r\n * // Create computation renderer\r\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\r\n *\r\n * // Create initial state float textures\r\n * var pos0 = gpuCompute.createTexture();\r\n * var vel0 = gpuCompute.createTexture();\r\n * // and fill in here the texture data...\r\n *\r\n * // Add texture variables\r\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\r\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\r\n *\r\n * // Add variable dependencies\r\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\r\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\r\n *\r\n * // Add custom uniforms\r\n * velVar.material.uniforms.time = { value: 0.0 };\r\n *\r\n * // Check for completeness\r\n * var error = gpuCompute.init();\r\n * if ( error !== null ) {\r\n *\t\tconsole.error( error );\r\n  * }\r\n *\r\n *\r\n * // In each frame...\r\n *\r\n * // Compute!\r\n * gpuCompute.compute();\r\n *\r\n * // Update texture uniforms in your visualization materials with the gpu renderer output\r\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\r\n *\r\n * // Do your rendering\r\n * renderer.render( myScene, myCamera );\r\n *\r\n * -------------\r\n *\r\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\r\n * Note that the shaders can have multiple input textures.\r\n *\r\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\r\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\r\n *\r\n * var inputTexture = gpuCompute.createTexture();\r\n *\r\n * // Fill in here inputTexture...\r\n *\r\n * myFilter1.uniforms.theTexture.value = inputTexture;\r\n *\r\n * var myRenderTarget = gpuCompute.createRenderTarget();\r\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\r\n *\r\n * var outputRenderTarget = gpuCompute.createRenderTarget();\r\n *\r\n * // Now use the output texture where you want:\r\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\r\n *\r\n * // And compute each frame, before rendering to screen:\r\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\r\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\r\n *\r\n *\r\n *\r\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {WebGLRenderer} renderer The renderer\r\n  */\r\n\r\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\r\n\r\n\tthis.variables = [];\r\n\r\n\tthis.currentTextureIndex = 0;\r\n\r\n\tvar dataType = FloatType;\r\n\r\n\tvar scene = new Scene();\r\n\r\n\tvar camera = new Camera();\r\n\tcamera.position.z = 1;\r\n\r\n\tvar passThruUniforms = {\r\n\t\tpassThruTexture: { value: null }\r\n\t};\r\n\r\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\r\n\r\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\r\n\tscene.add( mesh );\r\n\r\n\r\n\tthis.setDataType = function ( type ) {\r\n\r\n\t\tdataType = type;\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\r\n\r\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\r\n\r\n\t\tvar variable = {\r\n\t\t\tname: variableName,\r\n\t\t\tinitialValueTexture: initialValueTexture,\r\n\t\t\tmaterial: material,\r\n\t\t\tdependencies: null,\r\n\t\t\trenderTargets: [],\r\n\t\t\twrapS: null,\r\n\t\t\twrapT: null,\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter\r\n\t\t};\r\n\r\n\t\tthis.variables.push( variable );\r\n\r\n\t\treturn variable;\r\n\r\n\t};\r\n\r\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\r\n\r\n\t\tvariable.dependencies = dependencies;\r\n\r\n\t};\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tif ( renderer.capabilities.isWebGL2 === false && renderer.extensions.has( 'OES_texture_float' ) === false ) {\r\n\r\n\t\t\treturn 'No OES_texture_float support for float textures.';\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\r\n\r\n\t\t\treturn 'No support for vertex shader textures.';\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\r\n\r\n\t\t\tvar variable = this.variables[ i ];\r\n\r\n\t\t\t// Creates rendertargets and initialize them with input texture\r\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\r\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\r\n\r\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\r\n\t\t\tvar material = variable.material;\r\n\t\t\tvar uniforms = material.uniforms;\r\n\r\n\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\r\n\r\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\r\n\r\n\t\t\t\t\t\t// Checks if variable exists\r\n\t\t\t\t\t\tvar found = false;\r\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\r\n\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! found ) {\r\n\r\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\r\n\r\n\t\t\t\t\tmaterial.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.currentTextureIndex = 0;\r\n\r\n\t\treturn null;\r\n\r\n\t};\r\n\r\n\tthis.compute = function () {\r\n\r\n\t\tvar currentTextureIndex = this.currentTextureIndex;\r\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\r\n\r\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar variable = this.variables[ i ];\r\n\r\n\t\t\t// Sets texture dependencies uniforms\r\n\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\tvar uniforms = variable.material.uniforms;\r\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\r\n\r\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Performs the computation for this variable\r\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.currentTextureIndex = nextTextureIndex;\r\n\r\n\t};\r\n\r\n\tthis.getCurrentRenderTarget = function ( variable ) {\r\n\r\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\r\n\r\n\t};\r\n\r\n\tthis.getAlternateRenderTarget = function ( variable ) {\r\n\r\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\r\n\r\n\t};\r\n\r\n\tfunction addResolutionDefine( materialShader ) {\r\n\r\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\r\n\r\n\t}\r\n\r\n\tthis.addResolutionDefine = addResolutionDefine;\r\n\r\n\r\n\t// The following functions can be used to compute things manually\r\n\r\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\r\n\r\n\t\tuniforms = uniforms || {};\r\n\r\n\t\tvar material = new ShaderMaterial( {\r\n\t\t\tuniforms: uniforms,\r\n\t\t\tvertexShader: getPassThroughVertexShader(),\r\n\t\t\tfragmentShader: computeFragmentShader\r\n\t\t} );\r\n\r\n\t\taddResolutionDefine( material );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tthis.createShaderMaterial = createShaderMaterial;\r\n\r\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\r\n\r\n\t\tsizeXTexture = sizeXTexture || sizeX;\r\n\t\tsizeYTexture = sizeYTexture || sizeY;\r\n\r\n\t\twrapS = wrapS || ClampToEdgeWrapping;\r\n\t\twrapT = wrapT || ClampToEdgeWrapping;\r\n\r\n\t\tminFilter = minFilter || NearestFilter;\r\n\t\tmagFilter = magFilter || NearestFilter;\r\n\r\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\r\n\t\t\twrapS: wrapS,\r\n\t\t\twrapT: wrapT,\r\n\t\t\tminFilter: minFilter,\r\n\t\t\tmagFilter: magFilter,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\ttype: dataType,\r\n\t\t\tdepthBuffer: false\r\n\t\t} );\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t};\r\n\r\n\tthis.createTexture = function () {\r\n\r\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\r\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\r\n\r\n\t};\r\n\r\n\tthis.renderTexture = function ( input, output ) {\r\n\r\n\t\t// Takes a texture, and render out in rendertarget\r\n\t\t// input = Texture\r\n\t\t// output = RenderTarget\r\n\r\n\t\tpassThruUniforms.passThruTexture.value = input;\r\n\r\n\t\tthis.doRenderTarget( passThruShader, output );\r\n\r\n\t\tpassThruUniforms.passThruTexture.value = null;\r\n\r\n\t};\r\n\r\n\tthis.doRenderTarget = function ( material, output ) {\r\n\r\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tmesh.material = material;\r\n\t\trenderer.setRenderTarget( output );\r\n\t\trenderer.render( scene, camera );\r\n\t\tmesh.material = passThruShader;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t};\r\n\r\n\t// Shaders\r\n\r\n\tfunction getPassThroughVertexShader() {\r\n\r\n\t\treturn\t\"void main()\t{\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t}\r\n\r\n\tfunction getPassThroughFragmentShader() {\r\n\r\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"void main() {\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { GPUComputationRenderer };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/misc/GPUComputationRenderer.js","<template>\r\n    <div class=\"webglGpgpuBirdsGltf-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl gpgpu birds + GLTF mesh<br/>\r\n\t\t\tFlamingo by <a href=\"https://mirada.com/\" target=\"_blank\" rel=\"noopener\">mirada</a> from <a href=\"http://www.ro.me/\" target=\"_blank\" rel=\"noopener\">rome</a><br/>\r\n\t\t\tMove mouse to disturb birds.\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js'\r\nimport { GPUComputationRenderer } from '@/components/jsm/misc/GPUComputationRenderer.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            fragmentShaderPosition: null,\r\n            fragmentShaderVelocity: null,\r\n            /* TEXTURE WIDTH FOR SIMULATION */\r\n\t\t\tWIDTH: 64,\r\n\t\t\tBIRDS: null,\r\n\t\t\tBirdGeometry: null,\r\n            textureAnimation: null,\r\n            durationAnimation: null,\r\n            birdMesh: null,\r\n            materialShader: null,\r\n            vertexPerBird: null,\r\n            gltfs: null,\r\n\t\t\tcolors: null,\r\n\t\t\tsizes: null,\r\n            selectModel: null,\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            mouseX: 0,\r\n            mouseY: 0,\r\n\t\t\twindowHalfX: null,\r\n\t\t\twindowHalfY: null,\r\n            BOUNDS: 800,\r\n            BOUNDS_HALF: null,\r\n\t\t\tlast: null,\r\n\t\t\tgpuCompute: null,\r\n\t\t\tvelocityVariable: null,\r\n\t\t\tpositionVariable: null,\r\n\t\t\tpositionUniforms: null,\r\n            velocityUniforms: null,\r\n            gui: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.fragmentShaderPosition = `\r\n            uniform float time;\r\n\t\t\tuniform float delta;\r\n\t\t\tvoid main()\t{\r\n\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\t\t\t\tvec4 tmpPos = texture2D(texturePosition, uv);\r\n\t\t\t\tvec3 position = tmpPos.xyz;\r\n\t\t\t\tvec3 velocity = texture2D(textureVelocity, uv).xyz;\r\n\t\t\t\tfloat phase = tmpPos.w;\r\n\t\t\t\tphase = mod((phase + delta +\r\n\t\t\t\t\tlength(velocity.xz) * delta * 3. +\r\n\t\t\t\t\tmax(velocity.y, 0.0) * delta * 6.), 62.83);\r\n\t\t\t\tgl_FragColor = vec4(position + velocity * delta * 15. , phase);\r\n            }`\r\n        this.fragmentShaderVelocity = `\r\n            uniform float time;\r\n\t\t\tuniform float testing;\r\n\t\t\tuniform float delta; // about 0.016\r\n\t\t\tuniform float separationDistance; // 20\r\n\t\t\tuniform float alignmentDistance; // 40\r\n\t\t\tuniform float cohesionDistance; //\r\n\t\t\tuniform float freedomFactor;\r\n\t\t\tuniform vec3 predator;\r\n\t\t\tconst float width = resolution.x;\r\n\t\t\tconst float height = resolution.y;\r\n\t\t\tconst float PI = 3.141592653589793;\r\n\t\t\tconst float PI_2 = PI * 2.0;\r\n\t\t\t// const float VISION = PI * 0.55;\r\n\t\t\tfloat zoneRadius = 40.0;\r\n\t\t\tfloat zoneRadiusSquared = 1600.0;\r\n\t\t\tfloat separationThresh = 0.45;\r\n\t\t\tfloat alignmentThresh = 0.65;\r\n\t\t\tconst float UPPER_BOUNDS = BOUNDS;\r\n\t\t\tconst float LOWER_BOUNDS = -UPPER_BOUNDS;\r\n\t\t\tconst float SPEED_LIMIT = 9.0;\r\n\t\t\tfloat rand(vec2 co){\r\n\t\t\t\treturn fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\r\n\t\t\t}\r\n\t\t\tvoid main() {\r\n\t\t\t\tzoneRadius = separationDistance + alignmentDistance + cohesionDistance;\r\n\t\t\t\tseparationThresh = separationDistance / zoneRadius;\r\n\t\t\t\talignmentThresh = (separationDistance + alignmentDistance) / zoneRadius;\r\n\t\t\t\tzoneRadiusSquared = zoneRadius * zoneRadius;\r\n\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\t\t\t\tvec3 birdPosition, birdVelocity;\r\n\t\t\t\tvec3 selfPosition = texture2D(texturePosition, uv).xyz;\r\n\t\t\t\tvec3 selfVelocity = texture2D(textureVelocity, uv).xyz;\r\n\t\t\t\tfloat dist;\r\n\t\t\t\tvec3 dir; // direction\r\n\t\t\t\tfloat distSquared;\r\n\t\t\t\tfloat separationSquared = separationDistance * separationDistance;\r\n\t\t\t\tfloat cohesionSquared = cohesionDistance * cohesionDistance;\r\n\t\t\t\tfloat f;\r\n\t\t\t\tfloat percent;\r\n\t\t\t\tvec3 velocity = selfVelocity;\r\n\t\t\t\tfloat limit = SPEED_LIMIT;\r\n\t\t\t\tdir = predator * UPPER_BOUNDS - selfPosition;\r\n\t\t\t\tdir.z = 0.;\r\n\t\t\t\t// dir.z *= 0.6;\r\n\t\t\t\tdist = length(dir);\r\n\t\t\t\tdistSquared = dist * dist;\r\n\t\t\t\tfloat preyRadius = 150.0;\r\n\t\t\t\tfloat preyRadiusSq = preyRadius * preyRadius;\r\n\t\t\t\t// move birds away from predator\r\n\t\t\t\tif (dist < preyRadius) {\r\n\t\t\t\t\tf = (distSquared / preyRadiusSq - 1.0) * delta * 100.;\r\n\t\t\t\t\tvelocity += normalize(dir) * f;\r\n\t\t\t\t\tlimit += 5.0;\r\n\t\t\t\t}\r\n\t\t\t\t// if (testing == 0.0) {}\r\n\t\t\t\t// if (rand(uv + time) < freedomFactor) {}\r\n\t\t\t\t// Attract flocks to the center\r\n\t\t\t\tvec3 central = vec3(0., 0., 0.);\r\n\t\t\t\tdir = selfPosition - central;\r\n\t\t\t\tdist = length(dir);\r\n\t\t\t\tdir.y *= 2.5;\r\n\t\t\t\tvelocity -= normalize(dir) * delta * 5.;\r\n\t\t\t\tfor (float y = 0.0; y < height; y++) {\r\n\t\t\t\t\tfor (float x = 0.0; x < width; x++) {\r\n\t\t\t\t\t\tvec2 ref = vec2(x + 0.5, y + 0.5) / resolution.xy;\r\n\t\t\t\t\t\tbirdPosition = texture2D(texturePosition, ref).xyz;\r\n\t\t\t\t\t\tdir = birdPosition - selfPosition;\r\n\t\t\t\t\t\tdist = length(dir);\r\n\t\t\t\t\t\tif (dist < 0.0001) continue;\r\n\t\t\t\t\t\tdistSquared = dist * dist;\r\n\t\t\t\t\t\tif (distSquared > zoneRadiusSquared) continue;\r\n\t\t\t\t\t\tpercent = distSquared / zoneRadiusSquared;\r\n\t\t\t\t\t\tif (percent < separationThresh) { // low\r\n\t\t\t\t\t\t\t// Separation - Move apart for comfort\r\n\t\t\t\t\t\t\tf = (separationThresh / percent - 1.0) * delta;\r\n\t\t\t\t\t\t\tvelocity -= normalize(dir) * f;\r\n\t\t\t\t\t\t} else if (percent < alignmentThresh) { // high\r\n\t\t\t\t\t\t\t// Alignment - fly the same direction\r\n\t\t\t\t\t\t\tfloat threshDelta = alignmentThresh - separationThresh;\r\n\t\t\t\t\t\t\tfloat adjustedPercent = (percent - separationThresh) / threshDelta;\r\n\t\t\t\t\t\t\tbirdVelocity = texture2D(textureVelocity, ref).xyz;\r\n\t\t\t\t\t\t\tf = (0.5 - cos(adjustedPercent * PI_2) * 0.5 + 0.5) * delta;\r\n\t\t\t\t\t\t\tvelocity += normalize(birdVelocity) * f;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Attraction / Cohesion - move closer\r\n\t\t\t\t\t\t\tfloat threshDelta = 1.0 - alignmentThresh;\r\n\t\t\t\t\t\t\tfloat adjustedPercent;\r\n\t\t\t\t\t\t\tif(threshDelta == 0.) adjustedPercent = 1.;\r\n\t\t\t\t\t\t\telse adjustedPercent = (percent - alignmentThresh) / threshDelta;\r\n\t\t\t\t\t\t\tf = (0.5 - (cos(adjustedPercent * PI_2) * -0.5 + 0.5)) * delta;\r\n\t\t\t\t\t\t\tvelocity += normalize(dir) * f;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// this make tends to fly around than down or up\r\n\t\t\t\t// if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);\r\n\t\t\t\t// Speed Limits\r\n\t\t\t\tif (length(velocity) > limit) {\r\n\t\t\t\t\tvelocity = normalize(velocity) * limit;\r\n\t\t\t\t}\r\n\t\t\t\tgl_FragColor = vec4(velocity, 1.0);\r\n            }`\r\n        this.BIRDS = this.WIDTH * this.WIDTH\r\n        /* BAKE ANIMATION INTO TEXTURE and CREATE GEOMETRY FROM BASE MODEL */\r\n        this.BirdGeometry = new this.$THREE.BufferGeometry()\r\n        Math.lerp = (value1, value2, amount) => {\r\n            amount = Math.max(Math.min(amount, 1), 0)\r\n            return value1 + (value2 - value1) * amount\r\n        }\r\n        this.gltfs = ['static/models/gltf/Parrot.glb', 'static/models/gltf/Flamingo.glb']\r\n        this.colors = [0xccFFFF, 0xffdeff]\r\n        this.sizes = [0.2, 0.1]\r\n        this.selectModel = Math.floor(Math.random() * this.gltfs.length)\r\n        this.windowHalfX = this.$webglInnerWidth / 2\r\n        this.windowHalfY = window.innerHeight / 2\r\n        this.BOUNDS_HALF = this.BOUNDS / 2\r\n\t\tthis.last = performance.now()\r\n        new GLTFLoader().load(this.gltfs[this.selectModel], (gltf) => {\r\n            var animations = gltf.animations\r\n            this.durationAnimation = Math.round(animations[0].duration * 60)\r\n            var birdGeo = gltf.scene.children[0].geometry\r\n            var morphAttributes = birdGeo.morphAttributes.position\r\n            var tHeight = this.nextPowerOf2(this.durationAnimation)\r\n            var tWidth = this.nextPowerOf2(birdGeo.getAttribute('position').count)\r\n            this.vertexPerBird = birdGeo.getAttribute('position').count\r\n            var tData = new Float32Array(3 * tWidth * tHeight)\r\n            for (var i = 0; i < tWidth; i ++) {\r\n                for (var j = 0; j < tHeight; j ++) {\r\n                    var offset = j * tWidth * 3\r\n                    var curMorph = Math.floor(j / this.durationAnimation * morphAttributes.length)\r\n                    var nextMorph = (Math.floor(j / this.durationAnimation * morphAttributes.length) + 1) % morphAttributes.length\r\n                    var lerpAmount = j / this.durationAnimation * morphAttributes.length % 1\r\n                    if (j < this.durationAnimation) {\r\n                        var d0, d1\r\n                        d0 = morphAttributes[curMorph].array[i * 3]\r\n                        d1 = morphAttributes[nextMorph].array[i * 3]\r\n                        if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3] = Math.lerp(d0, d1, lerpAmount)\r\n                        d0 = morphAttributes[curMorph].array[i * 3 + 1]\r\n                        d1 = morphAttributes[nextMorph].array[i * 3 + 1]\r\n                        if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3 + 1] = Math.lerp(d0, d1, lerpAmount)\r\n                        d0 = morphAttributes[curMorph].array[i * 3 + 2]\r\n                        d1 = morphAttributes[nextMorph].array[i * 3 + 2]\r\n                        if (d0 !== undefined && d1 !== undefined) tData[offset + i * 3 + 2] = Math.lerp(d0, d1, lerpAmount)\r\n                    }\r\n                }\r\n            }\r\n            this.textureAnimation = new this.$THREE.DataTexture(tData, tWidth, tHeight, this.$THREE.RGBFormat, this.$THREE.FloatType)\r\n            this.textureAnimation.needsUpdate = true\r\n            var vertices = [], color = [], reference = [], seeds = [], indices = []\r\n            var totalVertices = birdGeo.getAttribute('position').count * 3 * this.BIRDS\r\n            for (var i = 0; i < totalVertices; i ++) {\r\n                var bIndex = i % (birdGeo.getAttribute('position').count * 3)\r\n                vertices.push(birdGeo.getAttribute('position').array[bIndex])\r\n                color.push(birdGeo.getAttribute('color').array[bIndex])\r\n            }\r\n            var r = Math.random()\r\n            for (var i = 0; i < birdGeo.getAttribute('position').count * this.BIRDS; i ++) {\r\n                var bIndex = i % (birdGeo.getAttribute('position').count)\r\n                var bird = Math.floor(i / birdGeo.getAttribute('position').count)\r\n                if (bIndex == 0) r = Math.random()\r\n                var j = ~ ~ bird\r\n                var x = (j % this.WIDTH) / this.WIDTH\r\n                var y = ~ ~ (j / this.WIDTH) / this.WIDTH\r\n                reference.push(x, y, bIndex / tWidth, this.durationAnimation / tHeight)\r\n                seeds.push(bird, r, Math.random(), Math.random())\r\n            }\r\n            for (var i = 0; i < birdGeo.index.array.length * this.BIRDS; i ++) {\r\n                var offset = Math.floor(i / birdGeo.index.array.length) * (birdGeo.getAttribute('position').count)\r\n                indices.push(birdGeo.index.array[i % birdGeo.index.array.length] + offset)\r\n            }\r\n            this.BirdGeometry.setAttribute('position', new this.$THREE.BufferAttribute(new Float32Array(vertices), 3))\r\n            this.BirdGeometry.setAttribute('birdColor', new this.$THREE.BufferAttribute(new Float32Array(color), 3))\r\n            this.BirdGeometry.setAttribute('color', new this.$THREE.BufferAttribute(new Float32Array(color), 3))\r\n            this.BirdGeometry.setAttribute('reference', new this.$THREE.BufferAttribute(new Float32Array(reference), 4))\r\n            this.BirdGeometry.setAttribute('seeds', new this.$THREE.BufferAttribute(new Float32Array(seeds), 4))\r\n            this.BirdGeometry.setIndex(indices)\r\n            this.init()\r\n            this.animate()\r\n        })\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.hide()\r\n    },\r\n    methods: {\r\n        nextPowerOf2(n) {\r\n            return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)))\r\n        },\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglGpgpuBirdsGltf-container')[0].appendChild(this.container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(75, this.$webglInnerWidth / window.innerHeight, 1, 3000)\r\n            this.camera.position.z = 350\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(this.colors[this.selectModel])\r\n            this.scene.fog = new this.$THREE.Fog(this.colors[this.selectModel], 100, 1000)\r\n            // LIGHTS\r\n            var hemiLight = new this.$THREE.HemisphereLight(this.colors[this.selectModel], 0xffffff, 1.6)\r\n            hemiLight.color.setHSL(0.6, 1, 0.6)\r\n            hemiLight.groundColor.setHSL(0.095, 1, 0.75)\r\n            hemiLight.position.set(0, 50, 0)\r\n            this.scene.add(hemiLight)\r\n            var dirLight = new this.$THREE.DirectionalLight(0x00CED1, 0.6)\r\n            dirLight.color.setHSL(0.1, 1, 0.95)\r\n            dirLight.position.set(- 1, 1.75, 1)\r\n            dirLight.position.multiplyScalar(30)\r\n            this.scene.add(dirLight)\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.initComputeRenderer()\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.container.style.touchAction = 'none'\r\n            this.container.addEventListener('pointermove', this.onPointerMove, false)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.gui = new GUI()\r\n            var effectController = {\r\n                separation: 20.0,\r\n                alignment: 20.0,\r\n                cohesion: 20.0,\r\n                freedom: 0.75,\r\n                size: this.sizes[this.selectModel],\r\n                count: this.BIRDS\r\n            }\r\n            var valuesChanger = () => {\r\n                this.velocityUniforms[\"separationDistance\"].value = effectController.separation\r\n                this.velocityUniforms[\"alignmentDistance\"].value = effectController.alignment\r\n                this.velocityUniforms[\"cohesionDistance\"].value = effectController.cohesion\r\n                this.velocityUniforms[\"freedomFactor\"].value = effectController.freedom\r\n                if (this.materialShader) this.materialShader.uniforms[\"size\"].value = effectController.size\r\n                this.BirdGeometry.setDrawRange(0, this.vertexPerBird * effectController.count)\r\n            }\r\n            valuesChanger()\r\n            this.gui.add(effectController, \"separation\", 0.0, 100.0, 1.0).onChange(valuesChanger)\r\n            this.gui.add(effectController, \"alignment\", 0.0, 100, 0.001).onChange(valuesChanger)\r\n            this.gui.add(effectController, \"cohesion\", 0.0, 100, 0.025).onChange(valuesChanger)\r\n            this.gui.add(effectController, \"size\", 0, 1, 0.01).onChange(valuesChanger)\r\n            this.gui.add(effectController, \"count\", 0, this.BIRDS, 1).onChange(valuesChanger)\r\n            this.gui.close()\r\n            this.initBirds(effectController)\r\n        },\r\n        initComputeRenderer() {\r\n            this.gpuCompute = new GPUComputationRenderer(this.WIDTH, this.WIDTH, this.renderer)\r\n            if (this.isSafari()) {\r\n                this.gpuCompute.setDataType(this.$THREE.HalfFloatType)\r\n            }\r\n            var dtPosition = this.gpuCompute.createTexture()\r\n            var dtVelocity = this.gpuCompute.createTexture()\r\n            this.fillPositionTexture(dtPosition)\r\n            this.fillVelocityTexture(dtVelocity)\r\n            this.velocityVariable = this.gpuCompute.addVariable(\"textureVelocity\", this.fragmentShaderVelocity, dtVelocity)\r\n            this.positionVariable = this.gpuCompute.addVariable(\"texturePosition\", this.fragmentShaderPosition, dtPosition)\r\n            this.gpuCompute.setVariableDependencies(this.velocityVariable, [this.positionVariable, this.velocityVariable])\r\n            this.gpuCompute.setVariableDependencies(this.positionVariable, [this.positionVariable, this.velocityVariable])\r\n            this.positionUniforms = this.positionVariable.material.uniforms\r\n            this.velocityUniforms = this.velocityVariable.material.uniforms\r\n            this.positionUniforms[\"time\"] = { value: 0.0 }\r\n            this.positionUniforms[\"delta\"] = { value: 0.0 }\r\n            this.velocityUniforms[\"time\"] = { value: 1.0 }\r\n            this.velocityUniforms[\"delta\"] = { value: 0.0 }\r\n            this.velocityUniforms[\"testing\"] = { value: 1.0 }\r\n            this.velocityUniforms[\"separationDistance\"] = { value: 1.0 }\r\n            this.velocityUniforms[\"alignmentDistance\"] = { value: 1.0 }\r\n            this.velocityUniforms[\"cohesionDistance\"] = { value: 1.0 }\r\n            this.velocityUniforms[\"freedomFactor\"] = { value: 1.0 }\r\n            this.velocityUniforms[\"predator\"] = { value: new this.$THREE.Vector3() }\r\n            this.velocityVariable.material.defines.BOUNDS = this.BOUNDS.toFixed(2)\r\n            this.velocityVariable.wrapS = this.$THREE.RepeatWrapping\r\n            this.velocityVariable.wrapT = this.$THREE.RepeatWrapping\r\n            this.positionVariable.wrapS = this.$THREE.RepeatWrapping\r\n            this.positionVariable.wrapT = this.$THREE.RepeatWrapping\r\n            var error = this.gpuCompute.init()\r\n            if (error !== null) {\r\n                console.error(error)\r\n            }\r\n        },\r\n        isSafari() {\r\n            return !! navigator.userAgent.match(/Safari/i) && ! navigator.userAgent.match(/Chrome/i)\r\n        },\r\n        initBirds(effectController) {\r\n            var geometry = this.BirdGeometry\r\n            var m = new this.$THREE.MeshStandardMaterial({\r\n                vertexColors: true,\r\n                flatShading: true,\r\n                roughness: 1,\r\n                metalness: 0\r\n            })\r\n            m.onBeforeCompile = (shader) => {\r\n                shader.uniforms.texturePosition = { value: null }\r\n                shader.uniforms.textureVelocity = { value: null }\r\n                shader.uniforms.textureAnimation = { value: this.textureAnimation }\r\n                shader.uniforms.time = { value: 1.0 }\r\n                shader.uniforms.size = { value: effectController.size }\r\n                shader.uniforms.delta = { value: 0.0 }\r\n                var token = '#define STANDARD'\r\n                var insert = /* glsl */`\r\n                    attribute vec4 reference;\r\n                    attribute vec4 seeds;\r\n                    attribute vec3 birdColor;\r\n                    uniform sampler2D texturePosition;\r\n                    uniform sampler2D textureVelocity;\r\n                    uniform sampler2D textureAnimation;\r\n                    uniform float size;\r\n                    uniform float time;\r\n                `\r\n                shader.vertexShader = shader.vertexShader.replace(token, token + insert)\r\n                token = '#include <begin_vertex>'\r\n                insert = /* glsl */`\r\n                    vec4 tmpPos = texture2D(texturePosition, reference.xy);\r\n                    vec3 pos = tmpPos.xyz;\r\n                    vec3 velocity = normalize(texture2D(textureVelocity, reference.xy).xyz);\r\n                    vec3 aniPos = texture2D(textureAnimation, vec2(reference.z, mod(time + (seeds.x) * ((0.0004 + seeds.y / 10000.0) + normalize(velocity) / 20000.0), reference.w))).xyz;\r\n                    vec3 newPosition = position;\r\n                    newPosition = mat3(modelMatrix) * (newPosition + aniPos);\r\n                    newPosition *= size + seeds.y * size * 0.2;\r\n                    velocity.z *= -1.;\r\n                    float xz = length(velocity.xz);\r\n                    float xyz = 1.;\r\n                    float x = sqrt(1. - velocity.y * velocity.y);\r\n                    float cosry = velocity.x / xz;\r\n                    float sinry = velocity.z / xz;\r\n                    float cosrz = x / xyz;\r\n                    float sinrz = velocity.y / xyz;\r\n                    mat3 maty =  mat3(cosry, 0, -sinry, 0    , 1, 0     , sinry, 0, cosry);\r\n                    mat3 matz =  mat3(cosrz , sinrz, 0, -sinrz, cosrz, 0, 0     , 0    , 1);\r\n                    newPosition =  maty * matz * newPosition;\r\n                    newPosition += pos;\r\n                    vec3 transformed = vec3(newPosition);\r\n                `\r\n                shader.vertexShader = shader.vertexShader.replace(token, insert)\r\n                this.materialShader = shader\r\n            }\r\n            this.birdMesh = new this.$THREE.Mesh(geometry, m)\r\n            this.birdMesh.rotation.y = Math.PI / 2\r\n            this.birdMesh.castShadow = true\r\n            this.birdMesh.receiveShadow = true\r\n            this.scene.add(this.birdMesh)\r\n        },\r\n        fillPositionTexture(texture) {\r\n            var theArray = texture.image.data\r\n            for (var k = 0, kl = theArray.length; k < kl; k += 4) {\r\n                var x = Math.random() * this.BOUNDS - this.BOUNDS_HALF\r\n                var y = Math.random() * this.BOUNDS - this.BOUNDS_HALF\r\n                var z = Math.random() * this.BOUNDS - this.BOUNDS_HALF\r\n                theArray[k + 0] = x\r\n                theArray[k + 1] = y\r\n                theArray[k + 2] = z\r\n                theArray[k + 3] = 1\r\n            }\r\n        },\r\n        fillVelocityTexture(texture) {\r\n            var theArray = texture.image.data\r\n            for (var k = 0, kl = theArray.length; k < kl; k += 4) {\r\n                var x = Math.random() - 0.5\r\n                var y = Math.random() - 0.5\r\n                var z = Math.random() - 0.5\r\n                theArray[k + 0] = x * 10\r\n                theArray[k + 1] = y * 10\r\n                theArray[k + 2] = z * 10\r\n                theArray[k + 3] = 1\r\n            }\r\n        },\r\n        onWindowResize() {\r\n            this.windowHalfX = (window.innerWidth - 281) / 2\r\n            this.windowHalfY = window.innerHeight / 2\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        onPointerMove(event) {\r\n            if (event.isPrimary === false) return\r\n            this.mouseX = event.clientX - this.windowHalfX\r\n            this.mouseY = event.clientY - this.windowHalfY\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var now = performance.now()\r\n            var delta = (now - this.last) / 1000\r\n            if (delta > 1) delta = 1 // safety cap on large deltas\r\n            this.last = now\r\n            this.positionUniforms[\"time\"].value = now\r\n            this.positionUniforms[\"delta\"].value = delta\r\n            this.velocityUniforms[\"time\"].value = now\r\n            this.velocityUniforms[\"delta\"].value = delta\r\n            if (this.materialShader) this.materialShader.uniforms[\"time\"].value = now / 1000\r\n            if (this.materialShader) this.materialShader.uniforms[\"delta\"].value = delta\r\n            this.velocityUniforms[\"predator\"].value.set(0.5 * this.mouseX / this.windowHalfX, - 0.5 * this.mouseY / this.windowHalfY, 0)\r\n            this.mouseX = 10000\r\n            this.mouseY = 10000\r\n            this.gpuCompute.compute()\r\n            if (this.materialShader) this.materialShader.uniforms[\"texturePosition\"].value = this.gpuCompute.getCurrentRenderTarget(this.positionVariable).texture\r\n            if (this.materialShader) this.materialShader.uniforms[\"textureVelocity\"].value = this.gpuCompute.getCurrentRenderTarget(this.velocityVariable).texture\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglGpgpuBirdsGltf-container {\r\n    width: 100%;\r\n    background-color: #fff;\r\n}\r\n#info {\r\n    color: #444;\r\n}\r\n#info a {\r\n    color:#08f;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/gpgpu/webglGpgpuBirdsGltf.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglGpgpuBirdsGltf-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl gpgpu birds + GLTF mesh\"),_c('br'),_vm._v(\"\\n\\t\\t\\tFlamingo by \"),_c('a',{attrs:{\"href\":\"https://mirada.com/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"mirada\")]),_vm._v(\" from \"),_c('a',{attrs:{\"href\":\"http://www.ro.me/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"rome\")]),_c('br'),_vm._v(\"\\n\\t\\t\\tMove mouse to disturb birds.\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1bf61302\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/gpgpu/webglGpgpuBirdsGltf.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1bf61302\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglGpgpuBirdsGltf.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGpgpuBirdsGltf.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGpgpuBirdsGltf.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1bf61302\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglGpgpuBirdsGltf.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1bf61302\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/gpgpu/webglGpgpuBirdsGltf.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}