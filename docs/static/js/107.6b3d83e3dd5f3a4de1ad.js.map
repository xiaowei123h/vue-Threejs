{"version":3,"sources":["webpack:///./src/components/jsm/geometries/DecalGeometry.js","webpack:///src/views/decals/webglDecals.vue","webpack:///./src/views/decals/webglDecals.vue?6f18","webpack:///./src/views/decals/webglDecals.vue"],"names":["DecalGeometry","mesh","position","orientation","size","BufferGeometry","call","this","vertices","normals","uvs","plane","Vector3","projectorMatrix","Matrix4","makeRotationFromEuler","setPosition","projectorMatrixInverse","pushDecalVertex","decalVertices","vertex","normal","applyMatrix4","matrixWorld","transformDirection","push","DecalVertex","clone","clipGeometry","inVertices","outVertices","s","Math","abs","dot","i","length","v1Out","v2Out","v3Out","nV1","nV2","nV3","nV4","d1","clip","v0","v1","p","d0","s0","x","y","z","copy","invert","geometry","isGeometry","fromGeometry","positionAttribute","attributes","normalAttribute","index","count","fromBufferAttribute","getX","set","decalVertex","generate","setAttribute","Float32BufferAttribute","prototype","Object","create","constructor","webglDecals","data","container","renderer","scene","camera","stats","raycaster","line","intersection","mouse","intersects","textureLoader","decalDiffuse","decalNormal","decalMaterial","decals","mouseHelper","params","gui","mounted","_this","document","getElementById","point","$THREE","Vector2","TextureLoader","load","MeshPhongMaterial","specular","map","normalMap","normalScale","shininess","transparent","depthTest","depthWrite","polygonOffset","polygonOffsetFactor","wireframe","Euler","minScale","maxScale","rotate","clear","removeDecals","init","beforeDestroy","destroy","methods","_this2","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","appendChild","domElement","$Stats","dom","style","left","Scene","PerspectiveCamera","target","controls","OrbitControls","minDistance","maxDistance","add","AmbientLight","dirLight1","DirectionalLight","dirLight2","setFromPoints","Line","LineBasicMaterial","loadLeePerrySmith","Raycaster","Mesh","BoxBufferGeometry","MeshNormalMaterial","visible","addEventListener","onWindowResize","moved","event","checkIntersection","clientX","clientY","shoot","isPrimary","that","undefined","setFromCamera","intersectObject","n","face","multiplyScalar","lookAt","positions","setXYZ","needsUpdate","dat_gui_module","open","animate","GLTFLoader","gltf","children","material","specularMap","scale","rotation","random","PI","color","setHex","m","DecalGeometry_DecalGeometry","_this3","forEach","d","remove","$onWindowResize","requestAnimationFrame","render","update","decals_webglDecals","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/107.6b3d83e3dd5f3a4de1ad.js","sourcesContent":["import {\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute,\r\n\tMatrix4,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\r\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\r\n *\r\n * Constructor parameter:\r\n *\r\n * mesh — Any mesh object\r\n * position — Position of the decal projector\r\n * orientation — Orientation of the decal projector\r\n * size — Size of the decal projector\r\n *\r\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\r\n *\r\n */\r\n\r\nvar DecalGeometry = function ( mesh, position, orientation, size ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\t// buffers\r\n\r\n\tvar vertices = [];\r\n\tvar normals = [];\r\n\tvar uvs = [];\r\n\r\n\t// helpers\r\n\r\n\tvar plane = new Vector3();\r\n\r\n\t// this matrix represents the transformation of the decal projector\r\n\r\n\tvar projectorMatrix = new Matrix4();\r\n\tprojectorMatrix.makeRotationFromEuler( orientation );\r\n\tprojectorMatrix.setPosition( position );\r\n\r\n\tvar projectorMatrixInverse = new Matrix4();\r\n\tprojectorMatrixInverse.copy( projectorMatrix ).invert();\r\n\r\n\t// generate buffers\r\n\r\n\tgenerate();\r\n\r\n\t// build geometry\r\n\r\n\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\tfunction generate() {\r\n\r\n\t\tvar i;\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar decalVertices = [];\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\t// handle different geometry types\r\n\r\n\t\tif ( mesh.geometry.isGeometry ) {\r\n\r\n\t\t\tgeometry.fromGeometry( mesh.geometry );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgeometry.copy( mesh.geometry );\r\n\r\n\t\t}\r\n\r\n\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\tvar normalAttribute = geometry.attributes.normal;\r\n\r\n\t\t// first, create an array of 'DecalVertex' objects\r\n\t\t// three consecutive 'DecalVertex' objects represent a single face\r\n\t\t//\r\n\t\t// this data structure will be later used to perform the clipping\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\tvar index = geometry.index;\r\n\r\n\t\t\tfor ( i = 0; i < index.count; i ++ ) {\r\n\r\n\t\t\t\tvertex.fromBufferAttribute( positionAttribute, index.getX( i ) );\r\n\t\t\t\tnormal.fromBufferAttribute( normalAttribute, index.getX( i ) );\r\n\r\n\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\tfor ( i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\t\tvertex.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\tnormal.fromBufferAttribute( normalAttribute, i );\r\n\r\n\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// second, clip the geometry so that it doesn't extend out from the projector\r\n\r\n\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 1, 0, 0 ) );\r\n\t\tdecalVertices = clipGeometry( decalVertices, plane.set( - 1, 0, 0 ) );\r\n\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 1, 0 ) );\r\n\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, - 1, 0 ) );\r\n\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, 1 ) );\r\n\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, - 1 ) );\r\n\r\n\t\t// third, generate final vertices, normals and uvs\r\n\r\n\t\tfor ( i = 0; i < decalVertices.length; i ++ ) {\r\n\r\n\t\t\tvar decalVertex = decalVertices[ i ];\r\n\r\n\t\t\t// create texture coordinates (we are still in projector space)\r\n\r\n\t\t\tuvs.push(\r\n\t\t\t\t0.5 + ( decalVertex.position.x / size.x ),\r\n\t\t\t\t0.5 + ( decalVertex.position.y / size.y )\r\n\t\t\t);\r\n\r\n\t\t\t// transform the vertex back to world space\r\n\r\n\t\t\tdecalVertex.position.applyMatrix4( projectorMatrix );\r\n\r\n\t\t\t// now create vertex and normal buffer data\r\n\r\n\t\t\tvertices.push( decalVertex.position.x, decalVertex.position.y, decalVertex.position.z );\r\n\t\t\tnormals.push( decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction pushDecalVertex( decalVertices, vertex, normal ) {\r\n\r\n\t\t// transform the vertex to world space, then to projector space\r\n\r\n\t\tvertex.applyMatrix4( mesh.matrixWorld );\r\n\t\tvertex.applyMatrix4( projectorMatrixInverse );\r\n\r\n\t\tnormal.transformDirection( mesh.matrixWorld );\r\n\r\n\t\tdecalVertices.push( new DecalVertex( vertex.clone(), normal.clone() ) );\r\n\r\n\t}\r\n\r\n\tfunction clipGeometry( inVertices, plane ) {\r\n\r\n\t\tvar outVertices = [];\r\n\r\n\t\tvar s = 0.5 * Math.abs( size.dot( plane ) );\r\n\r\n\t\t// a single iteration clips one face,\r\n\t\t// which consists of three consecutive 'DecalVertex' objects\r\n\r\n\t\tfor ( var i = 0; i < inVertices.length; i += 3 ) {\r\n\r\n\t\t\tvar v1Out, v2Out, v3Out, total = 0;\r\n\t\t\tvar nV1, nV2, nV3, nV4;\r\n\r\n\t\t\tvar d1 = inVertices[ i + 0 ].position.dot( plane ) - s;\r\n\t\t\tvar d2 = inVertices[ i + 1 ].position.dot( plane ) - s;\r\n\t\t\tvar d3 = inVertices[ i + 2 ].position.dot( plane ) - s;\r\n\r\n\t\t\tv1Out = d1 > 0;\r\n\t\t\tv2Out = d2 > 0;\r\n\t\t\tv3Out = d3 > 0;\r\n\r\n\t\t\t// calculate, how many vertices of the face lie outside of the clipping plane\r\n\r\n\t\t\ttotal = ( v1Out ? 1 : 0 ) + ( v2Out ? 1 : 0 ) + ( v3Out ? 1 : 0 );\r\n\r\n\t\t\tswitch ( total ) {\r\n\r\n\t\t\t\tcase 0: {\r\n\r\n\t\t\t\t\t// the entire face lies inside of the plane, no clipping needed\r\n\r\n\t\t\t\t\toutVertices.push( inVertices[ i ] );\r\n\t\t\t\t\toutVertices.push( inVertices[ i + 1 ] );\r\n\t\t\t\t\toutVertices.push( inVertices[ i + 2 ] );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 1: {\r\n\r\n\t\t\t\t\t// one vertex lies outside of the plane, perform clipping\r\n\r\n\t\t\t\t\tif ( v1Out ) {\r\n\r\n\t\t\t\t\t\tnV1 = inVertices[ i + 1 ];\r\n\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\r\n\t\t\t\t\t\tnV3 = clip( inVertices[ i ], nV1, plane, s );\r\n\t\t\t\t\t\tnV4 = clip( inVertices[ i ], nV2, plane, s );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( v2Out ) {\r\n\r\n\t\t\t\t\t\tnV1 = inVertices[ i ];\r\n\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\r\n\t\t\t\t\t\tnV3 = clip( inVertices[ i + 1 ], nV1, plane, s );\r\n\t\t\t\t\t\tnV4 = clip( inVertices[ i + 1 ], nV2, plane, s );\r\n\r\n\t\t\t\t\t\toutVertices.push( nV3 );\r\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\t\t\t\t\t\toutVertices.push( nV1.clone() );\r\n\r\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\t\t\t\t\t\toutVertices.push( nV3.clone() );\r\n\t\t\t\t\t\toutVertices.push( nV4 );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( v3Out ) {\r\n\r\n\t\t\t\t\t\tnV1 = inVertices[ i ];\r\n\t\t\t\t\t\tnV2 = inVertices[ i + 1 ];\r\n\t\t\t\t\t\tnV3 = clip( inVertices[ i + 2 ], nV1, plane, s );\r\n\t\t\t\t\t\tnV4 = clip( inVertices[ i + 2 ], nV2, plane, s );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\toutVertices.push( nV1.clone() );\r\n\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\toutVertices.push( nV4 );\r\n\t\t\t\t\toutVertices.push( nV3.clone() );\r\n\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 2: {\r\n\r\n\t\t\t\t\t// two vertices lies outside of the plane, perform clipping\r\n\r\n\t\t\t\t\tif ( ! v1Out ) {\r\n\r\n\t\t\t\t\t\tnV1 = inVertices[ i ].clone();\r\n\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 1 ], plane, s );\r\n\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 2 ], plane, s );\r\n\t\t\t\t\t\toutVertices.push( nV1 );\r\n\t\t\t\t\t\toutVertices.push( nV2 );\r\n\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! v2Out ) {\r\n\r\n\t\t\t\t\t\tnV1 = inVertices[ i + 1 ].clone();\r\n\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 2 ], plane, s );\r\n\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i ], plane, s );\r\n\t\t\t\t\t\toutVertices.push( nV1 );\r\n\t\t\t\t\t\toutVertices.push( nV2 );\r\n\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! v3Out ) {\r\n\r\n\t\t\t\t\t\tnV1 = inVertices[ i + 2 ].clone();\r\n\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i ], plane, s );\r\n\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 1 ], plane, s );\r\n\t\t\t\t\t\toutVertices.push( nV1 );\r\n\t\t\t\t\t\toutVertices.push( nV2 );\r\n\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 3: {\r\n\r\n\t\t\t\t\t// the entire face lies outside of the plane, so let's discard the corresponding vertices\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn outVertices;\r\n\r\n\t}\r\n\r\n\tfunction clip( v0, v1, p, s ) {\r\n\r\n\t\tvar d0 = v0.position.dot( p ) - s;\r\n\t\tvar d1 = v1.position.dot( p ) - s;\r\n\r\n\t\tvar s0 = d0 / ( d0 - d1 );\r\n\r\n\t\tvar v = new DecalVertex(\r\n\t\t\tnew Vector3(\r\n\t\t\t\tv0.position.x + s0 * ( v1.position.x - v0.position.x ),\r\n\t\t\t\tv0.position.y + s0 * ( v1.position.y - v0.position.y ),\r\n\t\t\t\tv0.position.z + s0 * ( v1.position.z - v0.position.z )\r\n\t\t\t),\r\n\t\t\tnew Vector3(\r\n\t\t\t\tv0.normal.x + s0 * ( v1.normal.x - v0.normal.x ),\r\n\t\t\t\tv0.normal.y + s0 * ( v1.normal.y - v0.normal.y ),\r\n\t\t\t\tv0.normal.z + s0 * ( v1.normal.z - v0.normal.z )\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\t// need to clip more values (texture coordinates)? do it this way:\r\n\t\t// intersectpoint.value = a.value + s * ( b.value - a.value );\r\n\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n};\r\n\r\nDecalGeometry.prototype = Object.create( BufferGeometry.prototype );\r\nDecalGeometry.prototype.constructor = DecalGeometry;\r\n\r\n// helper\r\n\r\nvar DecalVertex = function ( position, normal ) {\r\n\r\n\tthis.position = position;\r\n\tthis.normal = normal;\r\n\r\n};\r\n\r\nDecalVertex.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.position.clone(), this.normal.clone() );\r\n\r\n};\r\n\r\nexport { DecalGeometry, DecalVertex };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/geometries/DecalGeometry.js","<template>\r\n    <div class=\"webglDecals-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - decal splatter<br/>\r\n\t\t\tclick to shoot\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js'\r\nimport { DecalGeometry } from '@/components/jsm/geometries/DecalGeometry.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            renderer: null,\r\n            scene: null,camera: null,\r\n            stats: null,\r\n\t\t\tmesh: null,\r\n\t\t\traycaster: null,\r\n\t\t\tline: null,\r\n\t\t\tintersection: null,\r\n\t\t\tmouse: null,\r\n\t\t\tintersects: [],\r\n\t\t\ttextureLoader: null,\r\n\t\t\tdecalDiffuse: null,\r\n\t\t\tdecalNormal: null,\r\n\t\t\tdecalMaterial: null,\r\n\t\t\tdecals: [],\r\n\t\t\tmouseHelper: null,\r\n\t\t\tposition: null,\r\n\t\t\torientation: null,\r\n\t\t\tsize: null,\r\n            params: null,\r\n            gui: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.container = document.getElementById('container')\r\n        this.intersection = {\r\n            intersects: false,\r\n            point: new this.$THREE.Vector3(),\r\n            normal: new this.$THREE.Vector3()\r\n        }\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.textureLoader = new this.$THREE.TextureLoader()\r\n        this.decalDiffuse = this.textureLoader.load('static/textures/decal/decal-diffuse.png')\r\n        this.decalNormal = this.textureLoader.load('static/textures/decal/decal-normal.jpg')\r\n        this.decalMaterial = new this.$THREE.MeshPhongMaterial({\r\n            specular: 0x444444,\r\n            map: this.decalDiffuse,\r\n            normalMap: this.decalNormal,\r\n            normalScale: new this.$THREE.Vector2(1, 1),\r\n            shininess: 30,\r\n            transparent: true,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            polygonOffset: true,\r\n            polygonOffsetFactor: - 4,\r\n            wireframe: false\r\n        })\r\n        this.position = new this.$THREE.Vector3()\r\n        this.orientation = new this.$THREE.Euler()\r\n        this.size = new this.$THREE.Vector3(10, 10, 10)\r\n        this.params = {\r\n            minScale: 10,\r\n            maxScale: 20,\r\n            rotate: true,\r\n            clear: () => {\r\n                this.removeDecals()\r\n            }\r\n        }\r\n        this.init()\r\n        // window.addEventListener('load', this.init)\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.z = 120\r\n            this.camera.target = new this.$THREE.Vector3()\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 50\r\n            controls.maxDistance = 200\r\n            this.scene.add(new this.$THREE.AmbientLight(0x443333))\r\n            var dirLight1 = new this.$THREE.DirectionalLight(0xffddcc, 1)\r\n            dirLight1.position.set(1, 0.75, 0.5)\r\n            this.scene.add(dirLight1)\r\n            var dirLight2 = new this.$THREE.DirectionalLight(0xccccff, 1)\r\n            dirLight2.position.set(- 1, 0.75, - 0.5)\r\n            this.scene.add(dirLight2)\r\n            var geometry = new this.$THREE.BufferGeometry()\r\n            geometry.setFromPoints([new this.$THREE.Vector3(), new this.$THREE.Vector3()])\r\n            this.line = new this.$THREE.Line(geometry, new this.$THREE.LineBasicMaterial())\r\n            this.scene.add(this.line)\r\n            this.loadLeePerrySmith()\r\n            this.raycaster = new this.$THREE.Raycaster()\r\n            this.mouseHelper = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(1, 1, 10), new this.$THREE.MeshNormalMaterial())\r\n            this.mouseHelper.visible = false\r\n            this.scene.add(this.mouseHelper)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            var moved = false\r\n            controls.addEventListener('change', () => {\r\n                moved = true\r\n            })\r\n            window.addEventListener('pointerdown', () => {\r\n                moved = false\r\n            }, false)\r\n            window.addEventListener('pointerup', (event) => {\r\n                if (moved === false) {\r\n                    checkIntersection(event.clientX, event.clientY)\r\n                    if (this.intersection.intersects) this.shoot()\r\n                }\r\n            })\r\n            window.addEventListener('pointermove', onPointerMove)\r\n            function onPointerMove(event) {\r\n                if (event.isPrimary) {\r\n                    checkIntersection(event.clientX, event.clientY)\r\n                }\r\n            }\r\n            var that = this\r\n            function checkIntersection(x, y) {\r\n                if (that.mesh === undefined) return\r\n                that.mouse.x = ((x - 281) / that.$webglInnerWidth) * 2 - 1\r\n                that.mouse.y = - (y / window.innerHeight) * 2 + 1\r\n                that.raycaster.setFromCamera(that.mouse, that.camera)\r\n                that.raycaster.intersectObject(that.mesh, false, that.intersects)\r\n                if (that.intersects.length > 0) {\r\n                    var p = that.intersects[0].point\r\n                    that.mouseHelper.position.copy(p)\r\n                    that.intersection.point.copy(p)\r\n                    var n = that.intersects[0].face.normal.clone()\r\n                    n.transformDirection(that.mesh.matrixWorld)\r\n                    n.multiplyScalar(10)\r\n                    n.add(that.intersects[0].point)\r\n                    that.intersection.normal.copy(that.intersects[0].face.normal)\r\n                    that.mouseHelper.lookAt(n)\r\n                    var positions = that.line.geometry.attributes.position\r\n                    positions.setXYZ(0, p.x, p.y, p.z)\r\n                    positions.setXYZ(1, n.x, n.y, n.z)\r\n                    positions.needsUpdate = true\r\n                    that.intersection.intersects = true\r\n                    that.intersects.length = 0\r\n                } else {\r\n                    that.intersection.intersects = false\r\n                }\r\n            }\r\n            this.gui = new GUI()\r\n            this.gui.add(this.params, 'minScale', 1, 30)\r\n            this.gui.add(this.params, 'maxScale', 1, 30)\r\n            this.gui.add(this.params, 'rotate')\r\n            this.gui.add(this.params, 'clear')\r\n            this.gui.open()\r\n            this.onWindowResize()\r\n            this.animate()\r\n        },\r\n        loadLeePerrySmith() {\r\n            var that = this\r\n            var loader = new GLTFLoader()\r\n            loader.load('static/models/gltf/LeePerrySmith/LeePerrySmith.glb', (gltf) => {\r\n                that.mesh = gltf.scene.children[0]\r\n                that.mesh.material = new that.$THREE.MeshPhongMaterial({\r\n                    specular: 0x111111,\r\n                    map: that.textureLoader.load('static/models/gltf/LeePerrySmith/Map-COL.jpg'),\r\n                    specularMap: that.textureLoader.load('static/models/gltf/LeePerrySmith/Map-SPEC.jpg'),\r\n                    normalMap: that.textureLoader.load('static/models/gltf/LeePerrySmith/Infinite-Level_02_Tangent_SmoothUV.jpg'),\r\n                    shininess: 25\r\n                })\r\n                that.scene.add(that.mesh)\r\n                that.mesh.scale.set(10, 10, 10)\r\n            })\r\n        },\r\n        shoot() {\r\n            this.position.copy(this.intersection.point)\r\n            this.orientation.copy(this.mouseHelper.rotation)\r\n            if (this.params.rotate) this.orientation.z = Math.random() * 2 * Math.PI\r\n            var scale = this.params.minScale + Math.random() * (this.params.maxScale - this.params.minScale)\r\n            this.size.set(scale, scale, scale)\r\n            var material = this.decalMaterial.clone()\r\n            material.color.setHex(Math.random() * 0xffffff)\r\n            var m = new this.$THREE.Mesh(new DecalGeometry(this.mesh, this.position, this.orientation, this.size), material)\r\n            this.decals.push(m)\r\n            this.scene.add(m)\r\n        },\r\n        removeDecals() {\r\n            this.decals.forEach((d) => {\r\n                this.scene.remove(d)\r\n            })\r\n            this.decals.length = 0\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.stats.update()\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglDecals-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    margin-left: 0;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/decals/webglDecals.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglDecals-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - decal splatter\"),_c('br'),_vm._v(\"\\n\\t\\t\\tclick to shoot\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-b441a15c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/decals/webglDecals.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-b441a15c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglDecals.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglDecals.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglDecals.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-b441a15c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglDecals.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-b441a15c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/decals/webglDecals.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}