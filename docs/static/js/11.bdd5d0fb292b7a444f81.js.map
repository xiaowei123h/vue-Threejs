{"version":3,"sources":["webpack:///./src/components/jsm/misc/GPUComputationRenderer.js","webpack:///./src/components/jsm/math/SimplexNoise.js","webpack:///src/views/gpgpu/webglGpgpuWater.vue","webpack:///./src/views/gpgpu/webglGpgpuWater.vue?ba5f","webpack:///./src/views/gpgpu/webglGpgpuWater.vue"],"names":["__webpack_require__","d","__webpack_exports__","GPUComputationRenderer","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","sizeX","sizeY","renderer","this","variables","currentTextureIndex","dataType","FloatType","scene","Scene","camera","Camera","position","z","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","mesh","Mesh","PlaneBufferGeometry","addResolutionDefine","materialShader","defines","resolution","toFixed","computeFragmentShader","uniforms","material","ShaderMaterial","vertexShader","fragmentShader","add","setDataType","type","addVariable","variableName","initialValueTexture","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","NearestFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","has","maxVertexTextures","i","length","createRenderTarget","renderTexture","depVar","found","j","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","ClampToEdgeWrapping","WebGLRenderTarget","format","RGBAFormat","depthBuffer","createTexture","data","Float32Array","DataTexture","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","render","SimplexNoise","r","undefined","Math","grad3","grad4","p","floor","random","perm","simplex","prototype","dot","g","x","y","dot3","dot4","w","noise","xin","yin","i1","j1","s","sqrt","G2","t","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","webglGpgpuWater","heightmapFragmentShader","smoothFragmentShader","readWaterLevelFragmentShader","waterVertexShader","gui","WIDTH","BOUNDS","BOUNDS_HALF","container","stats","mouseMoved","mouseCoords","raycaster","waterMesh","meshRay","gpuCompute","heightmapVariable","waterUniforms","smoothShader","readWaterLevelShader","readWaterLevelRenderTarget","readWaterLevelImage","waterNormal","NUM_SPHERES","spheres","spheresEnabled","mounted","$THREE","Vector2","Raycaster","Vector3","animate","beforeDestroy","hide","methods","_this","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","$webglInnerWidth","window","innerHeight","set","lookAt","sun","DirectionalLight","sun2","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","domElement","$Stats","dom","style","left","touchAction","addEventListener","onPointerMove","event","keyCode","wireframe","needsUpdate","onWindowResize","dat_gui_module","effectController","mouseSize","viscosity","valuesChanger","visible","onChange","buttonSmooth","smoothWater","initWater","createSpheres","geometry","UniformsUtils","merge","ShaderLib","heightmap","ShaderChunk","lights","color","Color","specular","shininess","max","opacity","rotation","PI","matrixAutoUpdate","updateMatrix","geometryRay","MeshBasicMaterial","isSafari","HalfFloatType","heightmap0","fillTexture","error","console","smoothTexture","point1","levelTexture","Uint8Array","UnsignedByteType","navigator","userAgent","match","waterMaxHeight","that","multR","mult","pixels","image","alternateRenderTarget","sphereTemplate","SphereBufferGeometry","MeshPhongMaterial","sphere","clone","userData","velocity","sphereDynamics","u","v","readRenderTargetPixels","buffer","pos","multiplyScalar","$onWindowResize","setMouseCoords","clientWidth","clientHeight","isPrimary","clientX","clientY","requestAnimationFrame","update","setFromCamera","intersects","intersectObject","point","gpgpu_webglGpgpuWater","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","normalizeComponent","ssrContext"],"mappings":"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","file":"static/js/11.bdd5d0fb292b7a444f81.js","sourcesContent":["import {\r\n\tCamera,\r\n\tClampToEdgeWrapping,\r\n\tDataTexture,\r\n\tFloatType,\r\n\tMesh,\r\n\tNearestFilter,\r\n\tPlaneBufferGeometry,\r\n\tRGBAFormat,\r\n\tScene,\r\n\tShaderMaterial,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * GPUComputationRenderer, based on SimulationRenderer by zz85\r\n *\r\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\r\n * for each compute element (texel)\r\n *\r\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\r\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\r\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\r\n *\r\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\r\n * as inputs to render the textures of the next frame.\r\n *\r\n * The render targets of the variables can be used as input textures for your visualization shaders.\r\n *\r\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\r\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\r\n *\r\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\r\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\r\n *\r\n * -------------\r\n *\r\n * Basic use:\r\n *\r\n * // Initialization...\r\n *\r\n * // Create computation renderer\r\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\r\n *\r\n * // Create initial state float textures\r\n * var pos0 = gpuCompute.createTexture();\r\n * var vel0 = gpuCompute.createTexture();\r\n * // and fill in here the texture data...\r\n *\r\n * // Add texture variables\r\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\r\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\r\n *\r\n * // Add variable dependencies\r\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\r\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\r\n *\r\n * // Add custom uniforms\r\n * velVar.material.uniforms.time = { value: 0.0 };\r\n *\r\n * // Check for completeness\r\n * var error = gpuCompute.init();\r\n * if ( error !== null ) {\r\n *\t\tconsole.error( error );\r\n  * }\r\n *\r\n *\r\n * // In each frame...\r\n *\r\n * // Compute!\r\n * gpuCompute.compute();\r\n *\r\n * // Update texture uniforms in your visualization materials with the gpu renderer output\r\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\r\n *\r\n * // Do your rendering\r\n * renderer.render( myScene, myCamera );\r\n *\r\n * -------------\r\n *\r\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\r\n * Note that the shaders can have multiple input textures.\r\n *\r\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\r\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\r\n *\r\n * var inputTexture = gpuCompute.createTexture();\r\n *\r\n * // Fill in here inputTexture...\r\n *\r\n * myFilter1.uniforms.theTexture.value = inputTexture;\r\n *\r\n * var myRenderTarget = gpuCompute.createRenderTarget();\r\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\r\n *\r\n * var outputRenderTarget = gpuCompute.createRenderTarget();\r\n *\r\n * // Now use the output texture where you want:\r\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\r\n *\r\n * // And compute each frame, before rendering to screen:\r\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\r\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\r\n *\r\n *\r\n *\r\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {WebGLRenderer} renderer The renderer\r\n  */\r\n\r\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\r\n\r\n\tthis.variables = [];\r\n\r\n\tthis.currentTextureIndex = 0;\r\n\r\n\tvar dataType = FloatType;\r\n\r\n\tvar scene = new Scene();\r\n\r\n\tvar camera = new Camera();\r\n\tcamera.position.z = 1;\r\n\r\n\tvar passThruUniforms = {\r\n\t\tpassThruTexture: { value: null }\r\n\t};\r\n\r\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\r\n\r\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\r\n\tscene.add( mesh );\r\n\r\n\r\n\tthis.setDataType = function ( type ) {\r\n\r\n\t\tdataType = type;\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\r\n\r\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\r\n\r\n\t\tvar variable = {\r\n\t\t\tname: variableName,\r\n\t\t\tinitialValueTexture: initialValueTexture,\r\n\t\t\tmaterial: material,\r\n\t\t\tdependencies: null,\r\n\t\t\trenderTargets: [],\r\n\t\t\twrapS: null,\r\n\t\t\twrapT: null,\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter\r\n\t\t};\r\n\r\n\t\tthis.variables.push( variable );\r\n\r\n\t\treturn variable;\r\n\r\n\t};\r\n\r\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\r\n\r\n\t\tvariable.dependencies = dependencies;\r\n\r\n\t};\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tif ( renderer.capabilities.isWebGL2 === false && renderer.extensions.has( 'OES_texture_float' ) === false ) {\r\n\r\n\t\t\treturn 'No OES_texture_float support for float textures.';\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\r\n\r\n\t\t\treturn 'No support for vertex shader textures.';\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\r\n\r\n\t\t\tvar variable = this.variables[ i ];\r\n\r\n\t\t\t// Creates rendertargets and initialize them with input texture\r\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\r\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\r\n\r\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\r\n\t\t\tvar material = variable.material;\r\n\t\t\tvar uniforms = material.uniforms;\r\n\r\n\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\r\n\r\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\r\n\r\n\t\t\t\t\t\t// Checks if variable exists\r\n\t\t\t\t\t\tvar found = false;\r\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\r\n\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! found ) {\r\n\r\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\r\n\r\n\t\t\t\t\tmaterial.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.currentTextureIndex = 0;\r\n\r\n\t\treturn null;\r\n\r\n\t};\r\n\r\n\tthis.compute = function () {\r\n\r\n\t\tvar currentTextureIndex = this.currentTextureIndex;\r\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\r\n\r\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar variable = this.variables[ i ];\r\n\r\n\t\t\t// Sets texture dependencies uniforms\r\n\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\tvar uniforms = variable.material.uniforms;\r\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\r\n\r\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Performs the computation for this variable\r\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.currentTextureIndex = nextTextureIndex;\r\n\r\n\t};\r\n\r\n\tthis.getCurrentRenderTarget = function ( variable ) {\r\n\r\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\r\n\r\n\t};\r\n\r\n\tthis.getAlternateRenderTarget = function ( variable ) {\r\n\r\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\r\n\r\n\t};\r\n\r\n\tfunction addResolutionDefine( materialShader ) {\r\n\r\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\r\n\r\n\t}\r\n\r\n\tthis.addResolutionDefine = addResolutionDefine;\r\n\r\n\r\n\t// The following functions can be used to compute things manually\r\n\r\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\r\n\r\n\t\tuniforms = uniforms || {};\r\n\r\n\t\tvar material = new ShaderMaterial( {\r\n\t\t\tuniforms: uniforms,\r\n\t\t\tvertexShader: getPassThroughVertexShader(),\r\n\t\t\tfragmentShader: computeFragmentShader\r\n\t\t} );\r\n\r\n\t\taddResolutionDefine( material );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tthis.createShaderMaterial = createShaderMaterial;\r\n\r\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\r\n\r\n\t\tsizeXTexture = sizeXTexture || sizeX;\r\n\t\tsizeYTexture = sizeYTexture || sizeY;\r\n\r\n\t\twrapS = wrapS || ClampToEdgeWrapping;\r\n\t\twrapT = wrapT || ClampToEdgeWrapping;\r\n\r\n\t\tminFilter = minFilter || NearestFilter;\r\n\t\tmagFilter = magFilter || NearestFilter;\r\n\r\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\r\n\t\t\twrapS: wrapS,\r\n\t\t\twrapT: wrapT,\r\n\t\t\tminFilter: minFilter,\r\n\t\t\tmagFilter: magFilter,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\ttype: dataType,\r\n\t\t\tdepthBuffer: false\r\n\t\t} );\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t};\r\n\r\n\tthis.createTexture = function () {\r\n\r\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\r\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\r\n\r\n\t};\r\n\r\n\tthis.renderTexture = function ( input, output ) {\r\n\r\n\t\t// Takes a texture, and render out in rendertarget\r\n\t\t// input = Texture\r\n\t\t// output = RenderTarget\r\n\r\n\t\tpassThruUniforms.passThruTexture.value = input;\r\n\r\n\t\tthis.doRenderTarget( passThruShader, output );\r\n\r\n\t\tpassThruUniforms.passThruTexture.value = null;\r\n\r\n\t};\r\n\r\n\tthis.doRenderTarget = function ( material, output ) {\r\n\r\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tmesh.material = material;\r\n\t\trenderer.setRenderTarget( output );\r\n\t\trenderer.render( scene, camera );\r\n\t\tmesh.material = passThruShader;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t};\r\n\r\n\t// Shaders\r\n\r\n\tfunction getPassThroughVertexShader() {\r\n\r\n\t\treturn\t\"void main()\t{\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t}\r\n\r\n\tfunction getPassThroughFragmentShader() {\r\n\r\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"void main() {\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { GPUComputationRenderer };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/misc/GPUComputationRenderer.js","// Ported from Stefan Gustavson's java implementation\r\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\r\n// Read Stefan's excellent paper for details on how this code works.\r\n//\r\n// Sean McCullough banksean@gmail.com\r\n//\r\n// Added 4D noise\r\n\r\n/**\r\n * You can pass in a random number generator object if you like.\r\n * It is assumed to have a random() method.\r\n */\r\nvar SimplexNoise = function ( r ) {\r\n\r\n\tif ( r == undefined ) r = Math;\r\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\r\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\r\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\r\n\r\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\r\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\r\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\r\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\r\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\r\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\r\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\r\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\r\n\r\n\tthis.p = [];\r\n\r\n\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\r\n\r\n\t}\r\n\r\n\t// To remove the need for index wrapping, double the permutation table length\r\n\tthis.perm = [];\r\n\r\n\tfor ( var i = 0; i < 512; i ++ ) {\r\n\r\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\r\n\r\n\t}\r\n\r\n\t// A lookup table to traverse the simplex around a given point in 4D.\r\n\t// Details can be found where this table is used, in the 4D noise method.\r\n\tthis.simplex = [\r\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\r\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\r\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\r\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\r\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\r\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\r\n\r\n};\r\n\r\nSimplexNoise.prototype.dot = function ( g, x, y ) {\r\n\r\n\treturn g[ 0 ] * x + g[ 1 ] * y;\r\n\r\n};\r\n\r\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\r\n\r\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\r\n\r\n};\r\n\r\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\r\n\r\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\r\n\r\n};\r\n\r\nSimplexNoise.prototype.noise = function ( xin, yin ) {\r\n\r\n\tvar n0, n1, n2; // Noise contributions from the three corners\r\n\t// Skew the input space to determine which simplex cell we're in\r\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\r\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\r\n\tvar i = Math.floor( xin + s );\r\n\tvar j = Math.floor( yin + s );\r\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\r\n\tvar t = ( i + j ) * G2;\r\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\r\n\tvar Y0 = j - t;\r\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\r\n\tvar y0 = yin - Y0;\r\n\t// For the 2D case, the simplex shape is an equilateral triangle.\r\n\t// Determine which simplex we are in.\r\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n\tif ( x0 > y0 ) {\r\n\r\n\t\ti1 = 1; j1 = 0;\r\n\r\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n\r\n\t}\telse {\r\n\r\n\t\ti1 = 0; j1 = 1;\r\n\r\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n\r\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n\t// c = (3-sqrt(3))/6\r\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n\tvar y1 = y0 - j1 + G2;\r\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\r\n\t// Work out the hashed gradient indices of the three simplex corners\r\n\tvar ii = i & 255;\r\n\tvar jj = j & 255;\r\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\r\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\r\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\r\n\t// Calculate the contribution from the three corners\r\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\r\n\tif ( t0 < 0 ) n0 = 0.0;\r\n\telse {\r\n\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\r\n\r\n\t}\r\n\r\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\r\n\tif ( t1 < 0 ) n1 = 0.0;\r\n\telse {\r\n\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\r\n\r\n\t}\r\n\r\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\r\n\tif ( t2 < 0 ) n2 = 0.0;\r\n\telse {\r\n\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\r\n\r\n\t}\r\n\r\n\t// Add contributions from each corner to get the final noise value.\r\n\t// The result is scaled to return values in the interval [-1,1].\r\n\treturn 70.0 * ( n0 + n1 + n2 );\r\n\r\n};\r\n\r\n// 3D simplex noise\r\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\r\n\r\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\r\n\t// Skew the input space to determine which simplex cell we're in\r\n\tvar F3 = 1.0 / 3.0;\r\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\r\n\tvar i = Math.floor( xin + s );\r\n\tvar j = Math.floor( yin + s );\r\n\tvar k = Math.floor( zin + s );\r\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\r\n\tvar t = ( i + j + k ) * G3;\r\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\r\n\tvar Y0 = j - t;\r\n\tvar Z0 = k - t;\r\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\r\n\tvar y0 = yin - Y0;\r\n\tvar z0 = zin - Z0;\r\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n\t// Determine which simplex we are in.\r\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n\tif ( x0 >= y0 ) {\r\n\r\n\t\tif ( y0 >= z0 ) {\r\n\r\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t\t// X Y Z order\r\n\r\n\t\t} else if ( x0 >= z0 ) {\r\n\r\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t\t// X Z Y order\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t} // Z X Y order\r\n\r\n\t} else { // x0<y0\r\n\r\n\t\tif ( y0 < z0 ) {\r\n\r\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t// Z Y X order\r\n\r\n\t\t} else if ( x0 < z0 ) {\r\n\r\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t// Y Z X order\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t} // Y X Z order\r\n\r\n\t}\r\n\r\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n\t// c = 1/6.\r\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\r\n\tvar y1 = y0 - j1 + G3;\r\n\tvar z1 = z0 - k1 + G3;\r\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\r\n\tvar y2 = y0 - j2 + 2.0 * G3;\r\n\tvar z2 = z0 - k2 + 2.0 * G3;\r\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\r\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\r\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\r\n\t// Work out the hashed gradient indices of the four simplex corners\r\n\tvar ii = i & 255;\r\n\tvar jj = j & 255;\r\n\tvar kk = k & 255;\r\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\r\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\r\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\r\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\r\n\t// Calculate the contribution from the four corners\r\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n\tif ( t0 < 0 ) n0 = 0.0;\r\n\telse {\r\n\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\r\n\r\n\t}\r\n\r\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n\tif ( t1 < 0 ) n1 = 0.0;\r\n\telse {\r\n\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\r\n\r\n\t}\r\n\r\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n\tif ( t2 < 0 ) n2 = 0.0;\r\n\telse {\r\n\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\r\n\r\n\t}\r\n\r\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n\tif ( t3 < 0 ) n3 = 0.0;\r\n\telse {\r\n\r\n\t\tt3 *= t3;\r\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\r\n\r\n\t}\r\n\r\n\t// Add contributions from each corner to get the final noise value.\r\n\t// The result is scaled to stay just inside [-1,1]\r\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\r\n\r\n};\r\n\r\n// 4D simplex noise\r\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\r\n\r\n\t// For faster and easier lookups\r\n\tvar grad4 = this.grad4;\r\n\tvar simplex = this.simplex;\r\n\tvar perm = this.perm;\r\n\r\n\t// The skewing and unskewing factors are hairy again for the 4D case\r\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\r\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\r\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\r\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\r\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\r\n\tvar i = Math.floor( x + s );\r\n\tvar j = Math.floor( y + s );\r\n\tvar k = Math.floor( z + s );\r\n\tvar l = Math.floor( w + s );\r\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\r\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\r\n\tvar Y0 = j - t;\r\n\tvar Z0 = k - t;\r\n\tvar W0 = l - t;\r\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\r\n\tvar y0 = y - Y0;\r\n\tvar z0 = z - Z0;\r\n\tvar w0 = w - W0;\r\n\r\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\r\n\t// To find out which of the 24 possible simplices we're in, we need to\r\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\r\n\t// The method below is a good way of finding the ordering of x,y,z,w and\r\n\t// then find the correct traversal order for the simplex we’re in.\r\n\t// First, six pair-wise comparisons are performed between each possible pair\r\n\t// of the four coordinates, and the results are used to add up binary bits\r\n\t// for an integer index.\r\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\r\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\r\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\r\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\r\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\r\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\r\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\r\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\r\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\r\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\r\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\r\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\r\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\r\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\r\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\r\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\r\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\r\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\r\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\r\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\r\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\r\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\r\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\r\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\r\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\r\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\r\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\r\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\r\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\r\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\r\n\tvar y1 = y0 - j1 + G4;\r\n\tvar z1 = z0 - k1 + G4;\r\n\tvar w1 = w0 - l1 + G4;\r\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\r\n\tvar y2 = y0 - j2 + 2.0 * G4;\r\n\tvar z2 = z0 - k2 + 2.0 * G4;\r\n\tvar w2 = w0 - l2 + 2.0 * G4;\r\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\r\n\tvar y3 = y0 - j3 + 3.0 * G4;\r\n\tvar z3 = z0 - k3 + 3.0 * G4;\r\n\tvar w3 = w0 - l3 + 3.0 * G4;\r\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\r\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\r\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\r\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\r\n\t// Work out the hashed gradient indices of the five simplex corners\r\n\tvar ii = i & 255;\r\n\tvar jj = j & 255;\r\n\tvar kk = k & 255;\r\n\tvar ll = l & 255;\r\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\r\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\r\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\r\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\r\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\r\n\t// Calculate the contribution from the five corners\r\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\r\n\tif ( t0 < 0 ) n0 = 0.0;\r\n\telse {\r\n\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\r\n\r\n\t}\r\n\r\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\r\n\tif ( t1 < 0 ) n1 = 0.0;\r\n\telse {\r\n\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\r\n\r\n\t}\r\n\r\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\r\n\tif ( t2 < 0 ) n2 = 0.0;\r\n\telse {\r\n\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\r\n\r\n\t}\r\n\r\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\r\n\tif ( t3 < 0 ) n3 = 0.0;\r\n\telse {\r\n\r\n\t\tt3 *= t3;\r\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\r\n\r\n\t}\r\n\r\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\r\n\tif ( t4 < 0 ) n4 = 0.0;\r\n\telse {\r\n\r\n\t\tt4 *= t4;\r\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\r\n\r\n\t}\r\n\r\n\t// Sum up and scale the result to cover the range [-1,1]\r\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\r\n\r\n};\r\n\r\nexport { SimplexNoise };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/math/SimplexNoise.js","<template>\r\n    <div class=\"webglGpgpuWater-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - <span id=\"waterSize\"></span> webgl gpgpu water<br/>\r\n\t\t\tMove mouse to disturb water.<br>\r\n\t\t\tPress mouse button to orbit around. 'W' key toggles wireframe.\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { GPUComputationRenderer } from '@/components/jsm/misc/GPUComputationRenderer.js'\r\nimport { SimplexNoise } from '@/components/jsm/math/SimplexNoise.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            heightmapFragmentShader: null,\r\n            smoothFragmentShader: null,\r\n            readWaterLevelFragmentShader: null,\r\n            waterVertexShader: null,\r\n            gui: null,\r\n            WIDTH: 128,\r\n\t\t\t// Water size in system units\r\n\t\t\tBOUNDS: 512,\r\n\t\t\tBOUNDS_HALF: null,\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tmouseMoved: false,\r\n\t\t\tmouseCoords: null,\r\n\t\t\traycaster: null,\r\n\t\t\twaterMesh: null,\r\n\t\t\tmeshRay: null,\r\n\t\t\tgpuCompute: null,\r\n\t\t\theightmapVariable: null,\r\n\t\t\twaterUniforms: null,\r\n\t\t\tsmoothShader: null,\r\n\t\t\treadWaterLevelShader: null,\r\n\t\t\treadWaterLevelRenderTarget: null,\r\n\t\t\treadWaterLevelImage: null,\r\n\t\t\twaterNormal: null,\r\n\t\t\tNUM_SPHERES: 5,\r\n\t\t\tspheres: [],\r\n\t\t\tspheresEnabled: true,\r\n\t\t\tsimplex: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.heightmapFragmentShader = `\r\n            #include <common>\r\n\t\t\tuniform vec2 mousePos;\r\n\t\t\tuniform float mouseSize;\r\n\t\t\tuniform float viscosityConstant;\r\n\t\t\tuniform float heightCompensation;\r\n\t\t\tvoid main()\t{\r\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\r\n\t\t\t\tvec2 uv = gl_FragCoord.xy * cellSize;\r\n\t\t\t\t// heightmapValue.x == height from previous frame\r\n\t\t\t\t// heightmapValue.y == height from penultimate frame\r\n\t\t\t\t// heightmapValue.z, heightmapValue.w not used\r\n\t\t\t\tvec4 heightmapValue = texture2D(heightmap, uv);\r\n\t\t\t\t// Get neighbours\r\n\t\t\t\tvec4 north = texture2D(heightmap, uv + vec2(0.0, cellSize.y));\r\n\t\t\t\tvec4 south = texture2D(heightmap, uv + vec2(0.0, - cellSize.y));\r\n\t\t\t\tvec4 east = texture2D(heightmap, uv + vec2(cellSize.x, 0.0));\r\n\t\t\t\tvec4 west = texture2D(heightmap, uv + vec2(- cellSize.x, 0.0));\r\n\t\t\t\t// https://web.archive.org/web/20080618181901/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\r\n\t\t\t\tfloat newHeight = ((north.x + south.x + east.x + west.x) * 0.5 - heightmapValue.y) * viscosityConstant;\r\n\t\t\t\t// Mouse influence\r\n\t\t\t\tfloat mousePhase = clamp(length((uv - vec2(0.5)) * BOUNDS - vec2(mousePos.x, - mousePos.y)) * PI / mouseSize, 0.0, PI);\r\n\t\t\t\tnewHeight += (cos(mousePhase) + 1.0) * 0.28;\r\n\t\t\t\theightmapValue.y = heightmapValue.x;\r\n\t\t\t\theightmapValue.x = newHeight;\r\n\t\t\t\tgl_FragColor = heightmapValue;\r\n            }`\r\n        this.smoothFragmentShader = `\r\n            uniform sampler2D smoothTexture;\r\n\t\t\tvoid main()\t{\r\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\r\n\t\t\t\tvec2 uv = gl_FragCoord.xy * cellSize;\r\n\t\t\t\t// Computes the mean of texel and 4 neighbours\r\n\t\t\t\tvec4 textureValue = texture2D(smoothTexture, uv);\r\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(0.0, cellSize.y));\r\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(0.0, - cellSize.y));\r\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(cellSize.x, 0.0));\r\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(- cellSize.x, 0.0));\r\n\t\t\t\ttextureValue /= 5.0;\r\n\t\t\t\tgl_FragColor = textureValue;\r\n            }`\r\n        this.readWaterLevelFragmentShader = `\r\n            uniform vec2 point1;\r\n\t\t\tuniform sampler2D levelTexture;\r\n\t\t\t// Integer to float conversion from https://stackoverflow.com/questions/17981163/webgl-read-pixels-from-floating-point-render-target\r\n\t\t\tfloat shift_right(float v, float amt) {\r\n\t\t\t\tv = floor(v) + 0.5;\r\n\t\t\t\treturn floor(v / exp2(amt));\r\n\t\t\t}\r\n\t\t\tfloat shift_left(float v, float amt) {\r\n\t\t\t\treturn floor(v * exp2(amt) + 0.5);\r\n\t\t\t}\r\n\t\t\tfloat mask_last(float v, float bits) {\r\n\t\t\t\treturn mod(v, shift_left(1.0, bits));\r\n\t\t\t}\r\n\t\t\tfloat extract_bits(float num, float from, float to) {\r\n\t\t\t\tfrom = floor(from + 0.5); to = floor(to + 0.5);\r\n\t\t\t\treturn mask_last(shift_right(num, from), to - from);\r\n\t\t\t}\r\n\t\t\tvec4 encode_float(float val) {\r\n\t\t\t\tif (val == 0.0) return vec4(0, 0, 0, 0);\r\n\t\t\t\tfloat sign = val > 0.0 ? 0.0 : 1.0;\r\n\t\t\t\tval = abs(val);\r\n\t\t\t\tfloat exponent = floor(log2(val));\r\n\t\t\t\tfloat biased_exponent = exponent + 127.0;\r\n\t\t\t\tfloat fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;\r\n\t\t\t\tfloat t = biased_exponent / 2.0;\r\n\t\t\t\tfloat last_bit_of_biased_exponent = fract(t) * 2.0;\r\n\t\t\t\tfloat remaining_bits_of_biased_exponent = floor(t);\r\n\t\t\t\tfloat byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;\r\n\t\t\t\tfloat byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;\r\n\t\t\t\tfloat byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;\r\n\t\t\t\tfloat byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;\r\n\t\t\t\treturn vec4(byte4, byte3, byte2, byte1);\r\n\t\t\t}\r\n\t\t\tvoid main()\t{\r\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\r\n\t\t\t\tfloat waterLevel = texture2D(levelTexture, point1).x;\r\n\t\t\t\tvec2 normal = vec2(\r\n\t\t\t\t\t(texture2D(levelTexture, point1 + vec2(- cellSize.x, 0)).x - texture2D(levelTexture, point1 + vec2(cellSize.x, 0)).x) * WIDTH / BOUNDS,\r\n\t\t\t\t\t(texture2D(levelTexture, point1 + vec2(0, - cellSize.y)).x - texture2D(levelTexture, point1 + vec2(0, cellSize.y)).x) * WIDTH / BOUNDS);\r\n\t\t\t\tif (gl_FragCoord.x < 1.5) {\r\n\t\t\t\t\tgl_FragColor = encode_float(waterLevel);\r\n\t\t\t\t} else if (gl_FragCoord.x < 2.5) {\r\n\t\t\t\t\tgl_FragColor = encode_float(normal.x);\r\n\t\t\t\t} else if (gl_FragCoord.x < 3.5) {\r\n\t\t\t\t\tgl_FragColor = encode_float(normal.y);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgl_FragColor = encode_float(0.0);\r\n\t\t\t\t}\r\n            }`\r\n        this.waterVertexShader = `\r\n            uniform sampler2D heightmap;\r\n\t\t\t#define PHONG\r\n\t\t\tvarying vec3 vViewPosition;\r\n\t\t\t#ifndef FLAT_SHADED\r\n\t\t\t\tvarying vec3 vNormal;\r\n\t\t\t#endif\r\n\t\t\t#include <common>\r\n\t\t\t#include <uv_pars_vertex>\r\n\t\t\t#include <uv2_pars_vertex>\r\n\t\t\t#include <displacementmap_pars_vertex>\r\n\t\t\t#include <envmap_pars_vertex>\r\n\t\t\t#include <color_pars_vertex>\r\n\t\t\t#include <morphtarget_pars_vertex>\r\n\t\t\t#include <skinning_pars_vertex>\r\n\t\t\t#include <shadowmap_pars_vertex>\r\n\t\t\t#include <logdepthbuf_pars_vertex>\r\n\t\t\t#include <clipping_planes_pars_vertex>\r\n\t\t\tvoid main() {\r\n\t\t\t\tvec2 cellSize = vec2(1.0 / WIDTH, 1.0 / WIDTH);\r\n\t\t\t\t#include <uv_vertex>\r\n\t\t\t\t#include <uv2_vertex>\r\n\t\t\t\t#include <color_vertex>\r\n\t\t\t\t// # include <beginnormal_vertex>\r\n\t\t\t\t// Compute normal from heightmap\r\n\t\t\t\tvec3 objectNormal = vec3(\r\n\t\t\t\t\t(texture2D(heightmap, uv + vec2(- cellSize.x, 0)).x - texture2D(heightmap, uv + vec2(cellSize.x, 0)).x) * WIDTH / BOUNDS,\r\n\t\t\t\t\t(texture2D(heightmap, uv + vec2(0, - cellSize.y)).x - texture2D(heightmap, uv + vec2(0, cellSize.y)).x) * WIDTH / BOUNDS,\r\n\t\t\t\t\t1.0);\r\n\t\t\t\t//<beginnormal_vertex>\r\n\t\t\t\t#include <morphnormal_vertex>\r\n\t\t\t\t#include <skinbase_vertex>\r\n\t\t\t\t#include <skinnormal_vertex>\r\n\t\t\t\t#include <defaultnormal_vertex>\r\n\t\t\t#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\t\t\t\tvNormal = normalize(transformedNormal);\r\n\t\t\t#endif\r\n\t\t\t\t//# include <begin_vertex>\r\n\t\t\t\tfloat heightValue = texture2D(heightmap, uv).x;\r\n\t\t\t\tvec3 transformed = vec3(position.x, position.y, heightValue);\r\n\t\t\t\t//<begin_vertex>\r\n\t\t\t\t#include <morphtarget_vertex>\r\n\t\t\t\t#include <skinning_vertex>\r\n\t\t\t\t#include <displacementmap_vertex>\r\n\t\t\t\t#include <project_vertex>\r\n\t\t\t\t#include <logdepthbuf_vertex>\r\n\t\t\t\t#include <clipping_planes_vertex>\r\n\t\t\t\tvViewPosition = - mvPosition.xyz;\r\n\t\t\t\t#include <worldpos_vertex>\r\n\t\t\t\t#include <envmap_vertex>\r\n\t\t\t\t#include <shadowmap_vertex>\r\n            }`\r\n        this.BOUNDS_HALF = this.BOUNDS * 0.5\r\n        this.mouseCoords = new this.$THREE.Vector2()\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.waterNormal = new this.$THREE.Vector3()\r\n        this.simplex = new SimplexNoise()\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglGpgpuWater-container')[0].appendChild(this.container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(75, this.$webglInnerWidth / window.innerHeight, 1, 3000)\r\n            this.camera.position.set(0, 200, 350)\r\n            this.camera.lookAt(0, 0, 0)\r\n            this.scene = new this.$THREE.Scene()\r\n            var sun = new this.$THREE.DirectionalLight(0xFFFFFF, 1.0)\r\n            sun.position.set(300, 400, 175)\r\n            this.scene.add(sun)\r\n            var sun2 = new this.$THREE.DirectionalLight(0x40A040, 0.6)\r\n            sun2.position.set(- 100, 350, - 200)\r\n            this.scene.add(sun2)\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.container.style.touchAction = 'none'\r\n            this.container.addEventListener('pointermove', this.onPointerMove, false)\r\n            document.addEventListener('keydown', (event) => {\r\n                // W Pressed: Toggle wireframe\r\n                if (event.keyCode === 87) {\r\n                    this.waterMesh.material.wireframe = ! this.waterMesh.material.wireframe\r\n                    this.waterMesh.material.needsUpdate = true\r\n                }\r\n            }, false)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.gui = new GUI()\r\n            var effectController = {\r\n                mouseSize: 20.0,\r\n                viscosity: 0.98,\r\n                spheresEnabled: this.spheresEnabled\r\n            }\r\n            var valuesChanger = () => {\r\n                this.heightmapVariable.material.uniforms[\"mouseSize\"].value = effectController.mouseSize\r\n                this.heightmapVariable.material.uniforms[\"viscosityConstant\"].value = effectController.viscosity\r\n                this.spheresEnabled = effectController.spheresEnabled\r\n                for (var i = 0; i < this.NUM_SPHERES; i ++) {\r\n                    if (this.spheres[i]) {\r\n                        this.spheres[i].visible = this.spheresEnabled\r\n                    }\r\n                }\r\n            }\r\n            this.gui.add(effectController, \"mouseSize\", 1.0, 100.0, 1.0).onChange(valuesChanger)\r\n            this.gui.add(effectController, \"viscosity\", 0.9, 0.999, 0.001).onChange(valuesChanger)\r\n            this.gui.add(effectController, \"spheresEnabled\", 0, 1, 1).onChange(valuesChanger)\r\n            var buttonSmooth = {\r\n                smoothWater: () => {\r\n                    this.smoothWater()\r\n                }\r\n            }\r\n            this.gui.add(buttonSmooth, 'smoothWater')\r\n            this.initWater()\r\n            this.createSpheres()\r\n            valuesChanger()\r\n        },\r\n        initWater() {\r\n            var materialColor = 0x0040C0\r\n            var geometry = new this.$THREE.PlaneBufferGeometry(this.BOUNDS, this.BOUNDS, this.WIDTH - 1, this.WIDTH - 1)\r\n            // material: make a this.$THREE.ShaderMaterial clone of this.$THREE.MeshPhongMaterial, with customized vertex shader\r\n            var material = new this.$THREE.ShaderMaterial({\r\n                uniforms: this.$THREE.UniformsUtils.merge([\r\n                    this.$THREE.ShaderLib['phong'].uniforms,\r\n                    {\r\n                        \"heightmap\": { value: null }\r\n                    }\r\n            ]),\r\n                vertexShader: this.waterVertexShader,\r\n                fragmentShader: this.$THREE.ShaderChunk['meshphong_frag']\r\n            })\r\n            material.lights = true\r\n            // Material attributes from this.$THREE.MeshPhongMaterial\r\n            material.color = new this.$THREE.Color(materialColor)\r\n            material.specular = new this.$THREE.Color(0x111111)\r\n            material.shininess = 50\r\n            // Sets the uniforms with the material values\r\n            material.uniforms[\"diffuse\"].value = material.color\r\n            material.uniforms[\"specular\"].value = material.specular\r\n            material.uniforms[\"shininess\"].value = Math.max(material.shininess, 1e-4)\r\n            material.uniforms[\"opacity\"].value = material.opacity\r\n            // Defines\r\n            material.defines.WIDTH = this.WIDTH.toFixed(1)\r\n            material.defines.BOUNDS = this.BOUNDS.toFixed(1)\r\n            this.waterUniforms = material.uniforms\r\n            this.waterMesh = new this.$THREE.Mesh(geometry, material)\r\n            this.waterMesh.rotation.x = - Math.PI / 2\r\n            this.waterMesh.matrixAutoUpdate = false\r\n            this.waterMesh.updateMatrix()\r\n            this.scene.add(this.waterMesh)\r\n            // this.$THREE.Mesh just for mouse raycasting\r\n            var geometryRay = new this.$THREE.PlaneBufferGeometry(this.BOUNDS, this.BOUNDS, 1, 1)\r\n            this.meshRay = new this.$THREE.Mesh(geometryRay, new this.$THREE.MeshBasicMaterial({ color: 0xFFFFFF, visible: false }))\r\n            this.meshRay.rotation.x = - Math.PI / 2\r\n            this.meshRay.matrixAutoUpdate = false\r\n            this.meshRay.updateMatrix()\r\n            this.scene.add(this.meshRay)\r\n            // Creates the gpu computation class and sets it up\r\n            this.gpuCompute = new GPUComputationRenderer(this.WIDTH, this.WIDTH, this.renderer)\r\n            if (this.isSafari()) {\r\n                this.gpuCompute.setDataType(this.$THREE.HalfFloatType)\r\n            }\r\n            var heightmap0 = this.gpuCompute.createTexture()\r\n            this.fillTexture(heightmap0)\r\n            this.heightmapVariable = this.gpuCompute.addVariable(\"heightmap\", this.heightmapFragmentShader, heightmap0)\r\n            this.gpuCompute.setVariableDependencies(this.heightmapVariable, [this.heightmapVariable])\r\n            this.heightmapVariable.material.uniforms[\"mousePos\"] = { value: new this.$THREE.Vector2(10000, 10000) }\r\n            this.heightmapVariable.material.uniforms[\"mouseSize\"] = { value: 20.0 }\r\n            this.heightmapVariable.material.uniforms[\"viscosityConstant\"] = { value: 0.98 }\r\n            this.heightmapVariable.material.uniforms[\"heightCompensation\"] = { value: 0 }\r\n            this.heightmapVariable.material.defines.BOUNDS = this.BOUNDS.toFixed(1)\r\n            var error = this.gpuCompute.init()\r\n            if (error !== null) {\r\n                console.error(error)\r\n            }\r\n            // Create compute shader to smooth the water surface and velocity\r\n            this.smoothShader = this.gpuCompute.createShaderMaterial(this.smoothFragmentShader, { smoothTexture: { value: null } })\r\n            // Create compute shader to read water level\r\n            this.readWaterLevelShader = this.gpuCompute.createShaderMaterial(this.readWaterLevelFragmentShader, {\r\n                point1: { value: new this.$THREE.Vector2() },\r\n                levelTexture: { value: null }\r\n            })\r\n            this.readWaterLevelShader.defines.WIDTH = this.WIDTH.toFixed(1)\r\n            this.readWaterLevelShader.defines.BOUNDS = this.BOUNDS.toFixed(1)\r\n            // Create a 4x1 pixel image and a render target (Uint8, 4 channels, 1 byte per channel) to read water height and orientation\r\n            this.readWaterLevelImage = new Uint8Array(4 * 1 * 4)\r\n            this.readWaterLevelRenderTarget = new this.$THREE.WebGLRenderTarget(4, 1, {\r\n                wrapS: this.$THREE.ClampToEdgeWrapping,\r\n                wrapT: this.$THREE.ClampToEdgeWrapping,\r\n                minFilter: this.$THREE.NearestFilter,\r\n                magFilter: this.$THREE.NearestFilter,\r\n                format: this.$THREE.RGBAFormat,\r\n                type: this.$THREE.UnsignedByteType,\r\n                depthBuffer: false\r\n            })\r\n        },\r\n        isSafari() {\r\n            return !! navigator.userAgent.match(/Safari/i) && ! navigator.userAgent.match(/Chrome/i)\r\n        },\r\n        fillTexture(texture) {\r\n            var waterMaxHeight = 10\r\n            var that = this\r\n            function noise(x, y) {\r\n                var multR = waterMaxHeight\r\n                var mult = 0.025\r\n                var r = 0\r\n                for (var i = 0; i < 15; i ++) {\r\n                    r += multR * that.simplex.noise(x * mult, y * mult)\r\n                    multR *= 0.53 + 0.025 * i\r\n                    mult *= 1.25\r\n                }\r\n                return r\r\n            }\r\n            var pixels = texture.image.data\r\n            var p = 0\r\n            for (var j = 0; j < this.WIDTH; j ++) {\r\n                for (var i = 0; i < this.WIDTH; i ++) {\r\n                    var x = i * 128 / this.WIDTH\r\n                    var y = j * 128 / this.WIDTH\r\n                    pixels[p + 0] = noise(x, y)\r\n                    pixels[p + 1] = pixels[p + 0]\r\n                    pixels[p + 2] = 0\r\n                    pixels[p + 3] = 1\r\n                    p += 4\r\n                }\r\n            }\r\n        },\r\n        smoothWater() {\r\n            var currentRenderTarget = this.gpuCompute.getCurrentRenderTarget(this.heightmapVariable)\r\n            var alternateRenderTarget = this.gpuCompute.getAlternateRenderTarget(this.heightmapVariable)\r\n            for (var i = 0; i < 10; i ++) {\r\n                this.smoothShader.uniforms[\"smoothTexture\"].value = currentRenderTarget.texture\r\n                this.gpuCompute.doRenderTarget(this.smoothShader, alternateRenderTarget)\r\n                this.smoothShader.uniforms[\"smoothTexture\"].value = alternateRenderTarget.texture\r\n                this.gpuCompute.doRenderTarget(this.smoothShader, currentRenderTarget)\r\n            }\r\n        },\r\n        createSpheres() {\r\n            var sphereTemplate = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(4, 24, 12), new this.$THREE.MeshPhongMaterial({ color: 0xFFFF00 }))\r\n            for (var i = 0; i < this.NUM_SPHERES; i ++) {\r\n                var sphere = sphereTemplate\r\n                if (i < this.NUM_SPHERES - 1) {\r\n                    sphere = sphereTemplate.clone()\r\n                }\r\n                sphere.position.x = (Math.random() - 0.5) * this.BOUNDS * 0.7\r\n                sphere.position.z = (Math.random() - 0.5) * this.BOUNDS * 0.7\r\n                sphere.userData.velocity = new this.$THREE.Vector3()\r\n                this.scene.add(sphere)\r\n                this.spheres[i] = sphere\r\n            }\r\n\r\n        },\r\n        sphereDynamics() {\r\n            var currentRenderTarget = this.gpuCompute.getCurrentRenderTarget(this.heightmapVariable)\r\n            this.readWaterLevelShader.uniforms[\"levelTexture\"].value = currentRenderTarget.texture\r\n            for (var i = 0; i < this.NUM_SPHERES; i ++) {\r\n                var sphere = this.spheres[i]\r\n                if (sphere) {\r\n                    // Read water level and orientation\r\n                    var u = 0.5 * sphere.position.x / this.BOUNDS_HALF + 0.5\r\n                    var v = 1 - (0.5 * sphere.position.z / this.BOUNDS_HALF + 0.5)\r\n                    this.readWaterLevelShader.uniforms[\"point1\"].value.set(u, v)\r\n                    this.gpuCompute.doRenderTarget(this.readWaterLevelShader, this.readWaterLevelRenderTarget)\r\n                    this.renderer.readRenderTargetPixels(this.readWaterLevelRenderTarget, 0, 0, 4, 1, this.readWaterLevelImage)\r\n                    var pixels = new Float32Array(this.readWaterLevelImage.buffer)\r\n                    // Get orientation\r\n                    this.waterNormal.set(pixels[1], 0, - pixels[2])\r\n                    var pos = sphere.position\r\n                    // Set height\r\n                    pos.y = pixels[0]\r\n                    // Move sphere\r\n                    this.waterNormal.multiplyScalar(0.1)\r\n                    sphere.userData.velocity.add(this.waterNormal)\r\n                    sphere.userData.velocity.multiplyScalar(0.998)\r\n                    pos.add(sphere.userData.velocity)\r\n                    if (pos.x < - this.BOUNDS_HALF) {\r\n                        pos.x = - this.BOUNDS_HALF + 0.001\r\n                        sphere.userData.velocity.x *= - 0.3\r\n                    } else if (pos.x > this.BOUNDS_HALF) {\r\n                        pos.x = this.BOUNDS_HALF - 0.001\r\n                        sphere.userData.velocity.x *= - 0.3\r\n                    }\r\n                    if (pos.z < - this.BOUNDS_HALF) {\r\n                        pos.z = - this.BOUNDS_HALF + 0.001\r\n                        sphere.userData.velocity.z *= - 0.3\r\n                    } else if (pos.z > this.BOUNDS_HALF) {\r\n                        pos.z = this.BOUNDS_HALF - 0.001\r\n                        sphere.userData.velocity.z *= - 0.3\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        setMouseCoords(x, y) {\r\n            this.mouseCoords.set((x / this.renderer.domElement.clientWidth) * 2 - 1, - (y / this.renderer.domElement.clientHeight) * 2 + 1)\r\n            this.mouseMoved = true\r\n        },\r\n        onPointerMove(event) {\r\n            if (event.isPrimary === false) return\r\n            this.setMouseCoords(event.clientX, event.clientY)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            // Set uniforms: mouse interaction\r\n            var uniforms = this.heightmapVariable.material.uniforms\r\n            if (this.mouseMoved) {\r\n                this.raycaster.setFromCamera(this.mouseCoords, this.camera)\r\n                var intersects = this.raycaster.intersectObject(this.meshRay)\r\n                if (intersects.length > 0) {\r\n                    var point = intersects[ 0 ].point\r\n                    uniforms[ \"mousePos\" ].value.set(point.x, point.z)\r\n                } else {\r\n                    uniforms[ \"mousePos\" ].value.set(10000, 10000)\r\n                }\r\n                this.mouseMoved = false\r\n            } else {\r\n                uniforms[ \"mousePos\" ].value.set(10000, 10000)\r\n            }\r\n            // Do the gpu computation\r\n            this.gpuCompute.compute()\r\n            if (this.spheresEnabled) {\r\n                this.sphereDynamics()\r\n            }\r\n            // Get compute output in custom uniform\r\n            this.waterUniforms[\"heightmap\"].value = this.gpuCompute.getCurrentRenderTarget(this.heightmapVariable).texture\r\n            // Render\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglGpgpuWater-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/gpgpu/webglGpgpuWater.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglGpgpuWater-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - \"),_c('span',{attrs:{\"id\":\"waterSize\"}}),_vm._v(\" webgl gpgpu water\"),_c('br'),_vm._v(\"\\n\\t\\t\\tMove mouse to disturb water.\"),_c('br'),_vm._v(\"\\n\\t\\t\\tPress mouse button to orbit around. 'W' key toggles wireframe.\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-11257774\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/gpgpu/webglGpgpuWater.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-11257774\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglGpgpuWater.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGpgpuWater.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGpgpuWater.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-11257774\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglGpgpuWater.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-11257774\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/gpgpu/webglGpgpuWater.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}