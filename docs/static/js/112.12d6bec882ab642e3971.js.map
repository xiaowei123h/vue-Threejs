{"version":3,"sources":["webpack:///src/views/materials/webglMaterialsEnvmapsHdrNodes.vue","webpack:///./src/views/materials/webglMaterialsEnvmapsHdrNodes.vue?3678","webpack:///./src/views/materials/webglMaterialsEnvmapsHdrNodes.vue"],"names":["webglMaterialsEnvmapsHdrNodes","data","params","envMap","roughness","metalness","exposure","nodes","animate","debug","container","stats","camera","scene","renderer","controls","torusMesh","torusMeshNode","planeMesh","generatedCubeRenderTarget","ldrCubeRenderTarget","hdrCubeRenderTarget","rgbmCubeRenderTarget","ldrCubeMap","hdrCubeMap","rgbmCubeMap","gui","mounted","this","init","beforeDestroy","destroy","methods","getEnvScene","envScene","$THREE","Scene","geometry","BoxBufferGeometry","deleteAttribute","roomMaterial","MeshStandardMaterial","side","BackSide","room","Mesh","scale","setScalar","add","mainLight","PointLight","lightMaterial","MeshLambertMaterial","color","emissive","emissiveIntensity","light1","position","set","light2","light3","_this","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","$webglInnerWidth","window","innerHeight","background","Color","WebGLRenderer","physicallyCorrectLights","TorusKnotBufferGeometry","material","roguhness","Nodes","PlaneBufferGeometry","MeshBasicMaterial","y","rotation","x","Math","PI","DefaultLoadingManager","onLoad","pmremGenerator","dispose","HDRCubeTextureLoader","setPath","setDataType","UnsignedByteType","load","fromCubemap","magFilter","LinearFilter","needsUpdate","CubeTextureLoader","encoding","sRGBEncoding","RGBM16Encoding","format","RGBAFormat","PMREMGenerator","compileCubemapShader","fromScene","setPixelRatio","devicePixelRatio","setSize","domElement","toneMapping","ACESFilmicToneMapping","outputEncoding","$Stats","dom","style","left","OrbitControls","minDistance","maxDistance","addEventListener","onWindowResize","dat_gui_module","open","$onWindowResize","requestAnimationFrame","begin","render","end","renderTarget","cubeMap","visible","texture","newEnvMap","map","toneMappingExposure","materials_webglMaterialsEnvmapsHdrNodes","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/112.12d6bec882ab642e3971.js","sourcesContent":["<template>\r\n    <div class=\"webglMaterialsEnvmapsHdrNodes-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">threejs</a> - High dynamic range (RGBE) Image-based Lighting (IBL)<br />using run-time generated pre-filtered roughness mipmaps (PMREM)<br/>\r\n\t\t\tCreated by Prashant Sharma and <a href=\"http://clara.io/\" target=\"_blank\" rel=\"noopener\">Ben Houston</a>.\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { HDRCubeTextureLoader } from '@/components/jsm/loaders/HDRCubeTextureLoader.js'\r\nimport { MeshStandardNodeMaterial } from '@/components/jsm/nodes/Nodes.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            params: {\r\n\t\t\t\tenvMap: 'HDR',\r\n\t\t\t\troughness: 0.0,\r\n\t\t\t\tmetalness: 0.0,\r\n\t\t\t\texposure: 1.0,\r\n\t\t\t\tnodes: true,\r\n\t\t\t\tanimate: true,\r\n\t\t\t\tdebug: false\r\n\t\t\t},\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            controls: null,\r\n            torusMesh: null,\r\n            torusMeshNode: null,\r\n            planeMesh: null,\r\n            generatedCubeRenderTarget: null,\r\n            ldrCubeRenderTarget: null,\r\n            hdrCubeRenderTarget: null,\r\n            rgbmCubeRenderTarget: null,\r\n            ldrCubeMap: null,\r\n            hdrCubeMap: null,\r\n            rgbmCubeMap: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        getEnvScene() {\r\n            var envScene = new this.$THREE.Scene()\r\n            var geometry = new this.$THREE.BoxBufferGeometry()\r\n            geometry.deleteAttribute('uv')\r\n            var roomMaterial = new this.$THREE.MeshStandardMaterial({ metalness: 0, side: this.$THREE.BackSide })\r\n            var room = new this.$THREE.Mesh(geometry, roomMaterial)\r\n            room.scale.setScalar(10)\r\n            envScene.add(room)\r\n            var mainLight = new this.$THREE.PointLight(0xffffff, 50, 0, 2)\r\n            envScene.add(mainLight)\r\n            var lightMaterial = new this.$THREE.MeshLambertMaterial({ color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 })\r\n            var light1 = new this.$THREE.Mesh(geometry, lightMaterial)\r\n            light1.position.set(- 5, 2, 0)\r\n            light1.scale.set(0.1, 1, 1)\r\n            envScene.add(light1)\r\n            var light2 = new this.$THREE.Mesh(geometry, lightMaterial)\r\n            light2.position.set(0, 5, 0)\r\n            light2.scale.set(1, 0.1, 1)\r\n            envScene.add(light2)\r\n            var light3 = new this.$THREE.Mesh(geometry, lightMaterial)\r\n            light3.position.set(2, 1, 5)\r\n            light3.scale.set(1.5, 2, 0.1)\r\n            envScene.add(light3)\r\n            return envScene\r\n        },\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglMaterialsEnvmapsHdrNodes-container')[0].appendChild(this.container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(40, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.set(0, 0, 120)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0x000000)\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.physicallyCorrectLights = true\r\n            //\r\n            var geometry = new this.$THREE.TorusKnotBufferGeometry(18, 8, 150, 20)\r\n            var material = new this.$THREE.MeshStandardMaterial()\r\n            material.color = new this.$THREE.Color(0xffffff)\r\n            material.roughness = this.params.metalness\r\n            material.metalness = this.params.roguhness\r\n            this.torusMesh = new this.$THREE.Mesh(geometry, material)\r\n            this.scene.add(this.torusMesh)\r\n            material = new MeshStandardNodeMaterial()\r\n            material.color = new this.$THREE.Color(0xffffff)\r\n            material.roughness = this.params.metalness\r\n            material.metalness = this.params.roguhness\r\n            this.torusMeshNode = new this.$THREE.Mesh(geometry, material)\r\n            this.scene.add(this.torusMeshNode)\r\n            geometry = new this.$THREE.PlaneBufferGeometry(200, 200)\r\n            material = new this.$THREE.MeshBasicMaterial()\r\n            this.planeMesh = new this.$THREE.Mesh(geometry, material)\r\n            this.planeMesh.position.y = - 50\r\n            this.planeMesh.rotation.x = - Math.PI * 0.5\r\n            this.scene.add(this.planeMesh)\r\n            this.$THREE.DefaultLoadingManager.onLoad = () => {\r\n                pmremGenerator.dispose()\r\n            }\r\n            var hdrUrls = [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ]\r\n            this.hdrCubeMap = new HDRCubeTextureLoader()\r\n                .setPath('static/textures/cube/pisaHDR/')\r\n                .setDataType(this.$THREE.UnsignedByteType)\r\n                .load(hdrUrls, () => {\r\n                    this.hdrCubeRenderTarget = pmremGenerator.fromCubemap(this.hdrCubeMap)\r\n                    this.hdrCubeMap.magFilter = this.$THREE.LinearFilter\r\n                    this.hdrCubeMap.needsUpdate = true\r\n                })\r\n            var ldrUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ]\r\n            this.ldrCubeMap = new this.$THREE.CubeTextureLoader()\r\n                .setPath('static/textures/cube/pisa/')\r\n                .load(ldrUrls, () => {\r\n                    this.ldrCubeMap.encoding = this.$THREE.sRGBEncoding\r\n                    this.ldrCubeRenderTarget = pmremGenerator.fromCubemap(this.ldrCubeMap)\r\n                })\r\n            var rgbmUrls = [ 'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png' ]\r\n            this.rgbmCubeMap = new this.$THREE.CubeTextureLoader()\r\n                .setPath('static/textures/cube/pisaRGBM16/')\r\n                .load(rgbmUrls, () => {\r\n                    this.rgbmCubeMap.encoding = this.$THREE.RGBM16Encoding\r\n                    this.rgbmCubeMap.format = this.$THREE.RGBAFormat\r\n                    this.rgbmCubeRenderTarget = pmremGenerator.fromCubemap(this.rgbmCubeMap)\r\n                    this.rgbmCubeMap.magFilter = this.$THREE.LinearFilter\r\n                    this.rgbmCubeMap.needsUpdate = true\r\n                })\r\n            var pmremGenerator = new this.$THREE.PMREMGenerator(this.renderer)\r\n            pmremGenerator.compileCubemapShader()\r\n            var envScene = this.getEnvScene()\r\n            this.generatedCubeRenderTarget = pmremGenerator.fromScene(envScene, 0.04)\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.renderer.toneMapping = this.$THREE.ACESFilmicToneMapping\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.controls.minDistance = 50\r\n            this.controls.maxDistance = 300\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.gui = new GUI()\r\n            this.gui.add(this.params, 'envMap', [ 'Generated', 'LDR', 'HDR', 'RGBM16' ])\r\n            this.gui.add(this.params, 'roughness', 0, 1, 0.01)\r\n            this.gui.add(this.params, 'metalness', 0, 1, 0.01)\r\n            this.gui.add(this.params, 'exposure', 0, 2, 0.01)\r\n            this.gui.add(this.params, 'nodes', true)\r\n            this.gui.add(this.params, 'animate', true)\r\n            this.gui.add(this.params, 'debug', false)\r\n            this.gui.open()\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.stats.begin()\r\n            this.render()\r\n            this.stats.end()\r\n        },\r\n        render() {\r\n            this.torusMesh.visible = ! this.params.nodes\r\n            this.torusMeshNode.visible = this.params.nodes\r\n            this.torusMesh.material.roughness = this.params.roughness\r\n            this.torusMesh.material.metalness = this.params.metalness\r\n            this.torusMeshNode.material.roughness = this.params.roughness\r\n            this.torusMeshNode.material.metalness = this.params.metalness\r\n            var renderTarget, cubeMap\r\n            switch (this.params.envMap) {\r\n                case 'Generated':\r\n                    renderTarget = this.generatedCubeRenderTarget\r\n                    cubeMap = this.generatedCubeRenderTarget.texture\r\n                    break\r\n                case 'LDR':\r\n                    renderTarget = this.ldrCubeRenderTarget\r\n                    cubeMap = this.ldrCubeMap\r\n                    break\r\n                case 'HDR':\r\n                    renderTarget = this.hdrCubeRenderTarget\r\n                    cubeMap = this.hdrCubeMap\r\n                    break\r\n                case 'RGBM16':\r\n                    renderTarget = this.rgbmCubeRenderTarget\r\n                    cubeMap = this.rgbmCubeMap\r\n                    break\r\n            }\r\n            var newEnvMap = renderTarget ? renderTarget.texture : null\r\n            if (newEnvMap && newEnvMap !== this.torusMesh.material.envMap) {\r\n                this.torusMesh.material.envMap = newEnvMap\r\n                this.torusMesh.material.needsUpdate = true\r\n                this.torusMeshNode.material.envMap = newEnvMap\r\n                this.torusMeshNode.material.needsUpdate = true\r\n                this.planeMesh.material.map = newEnvMap\r\n                this.planeMesh.material.needsUpdate = true\r\n            }\r\n            if (this.params.animate) {\r\n                this.torusMesh.rotation.y += 0.005\r\n                this.torusMeshNode.rotation.y = this.torusMesh.rotation.y\r\n            }\r\n            this.planeMesh.visible = this.params.debug\r\n            this.scene.background = cubeMap\r\n            this.renderer.toneMappingExposure = this.params.exposure\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglMaterialsEnvmapsHdrNodes-container {\r\n    width: 100%;\r\n}\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/materials/webglMaterialsEnvmapsHdrNodes.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglMaterialsEnvmapsHdrNodes-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"threejs\")]),_vm._v(\" - High dynamic range (RGBE) Image-based Lighting (IBL)\"),_c('br'),_vm._v(\"using run-time generated pre-filtered roughness mipmaps (PMREM)\"),_c('br'),_vm._v(\"\\n\\t\\t\\tCreated by Prashant Sharma and \"),_c('a',{attrs:{\"href\":\"http://clara.io/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Ben Houston\")]),_vm._v(\".\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ac2c01ee\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/materials/webglMaterialsEnvmapsHdrNodes.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ac2c01ee\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglMaterialsEnvmapsHdrNodes.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMaterialsEnvmapsHdrNodes.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMaterialsEnvmapsHdrNodes.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ac2c01ee\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglMaterialsEnvmapsHdrNodes.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-ac2c01ee\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/materials/webglMaterialsEnvmapsHdrNodes.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}