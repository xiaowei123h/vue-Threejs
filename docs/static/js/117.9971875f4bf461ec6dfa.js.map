{"version":3,"sources":["webpack:///src/views/tiled/webglTiledForward.vue","webpack:///./src/views/tiled/webglTiledForward.vue?6fe2","webpack:///./src/views/tiled/webglTiledForward.vue"],"names":["webglTiledForward","data","RADIUS","lights","State","lightBounds","container","camera","scene","renderer","renderTarget","bloom","stats","controls","materials","Heads","loader","mounted","_this","this","$THREE","ShaderChunk","join","rows","cols","width","height","tileData","value","tileTexture","lightTexture","DataTexture","Float32Array","RGBAFormat","FloatType","v","Vector3","pos","r","minX","maxX","minY","maxY","hw","hh","i","copy","x","y","z","vector","project","Math","min","max","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","Scene","background","Color","WebGLRenderer","toneMapping","NoToneMapping","domElement","WebGLRenderTarget","add","AmbientLight","PointLight","UnrealBloomPass","Vector2","renderToScreen","$Stats","dom","style","left","OrbitControls","minDistance","maxDistance","type","uniforms","diffuse","metalness","roughness","defines","shininess","TOON","onBeforeRender","tileLights","onAfterRender","postEffect","OBJLoader","load","object","geometry","children","addEventListener","resize","init","setAnimationLoop","time","update","begin","setRenderTarget","render","end","methods","resizeTiles","innerWidth","ceil","Uint8Array","_this2","projectionMatrix","d","image","ld","viewMatrix","matrixWorldInverse","fill","forEach","light","index","setFromMatrixPosition","matrixWorld","bs","_light","radius","applyMatrix4","toArray","color","decay","i4","floor","i8","j","needsUpdate","geom","_this3","sphereGeom","SphereBufferGeometry","tIndex","round","random","Object","keys","t","g","Group","conf","ml","ShaderLib","mtl","ShaderMaterial","fragmentShader","vertexShader","UniformsUtils","clone","transparent","u","extensions","derivatives","vu","push","obj","Mesh","side","FrontSide","DoubleSide","rotation","PI","sin","cos","setHSL","l","MeshBasicMaterial","opacity","scale","sy","sr","sc","py","pr","pc","dir","now","_this4","setPixelRatio","devicePixelRatio","setSize","$onWindowResize","tiled_webglTiledForward","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/117.9971875f4bf461ec6dfa.js","sourcesContent":["<template>\r\n    <div class=\"webglTiledForward-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">threejs</a> - Tiled forward lighting<br/>\r\n\t\t\tCreated by <a href=\"https://github.com/wizgrav\" target=\"_blank\" rel=\"noopener\">wizgrav</a>.\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { OBJLoader } from '@/components/jsm/loaders/OBJLoader.js'\r\nimport { UnrealBloomPass } from '@/components/jsm/postprocessing/UnrealBloomPass.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            RADIUS: 75,\r\n            lights: [],\r\n            State: null,\r\n            lightBounds: null,\r\n            container: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            renderTarget: null,\r\n            bloom: null,\r\n            stats: null,\r\n            controls: null,\r\n            materials: [],\r\n            Heads: null,\r\n            loader: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.$THREE.ShaderChunk[ 'lights_pars_begin' ] += [\r\n            '',\r\n            '#if defined TILED_FORWARD',\r\n            'uniform vec4 tileData;',\r\n            'uniform sampler2D tileTexture;',\r\n            'uniform sampler2D lightTexture;',\r\n            '#endif'\r\n        ].join('\\n')\r\n        this.$THREE.ShaderChunk[ 'lights_fragment_end' ] += [\r\n            '',\r\n            '#if defined TILED_FORWARD',\r\n            'vec2 tUv = floor(gl_FragCoord.xy / tileData.xy * 32.) / 32. + tileData.zw;',\r\n            'vec4 tile = texture2D(tileTexture, tUv);',\r\n            'for (int i=0; i < 4; i++) {',\r\n            '\tfloat tileVal = tile.x * 255.;',\r\n            '  \ttile.xyzw = tile.yzwx;',\r\n            '\tif(tileVal == 0.){ continue; }',\r\n            '  \tfloat tileDiv = 128.;',\r\n            '\tfor (int j=0; j < 8; j++) {',\r\n            '  \t\tif (tileVal < tileDiv) {  tileDiv *= 0.5; continue; }',\r\n            '\t\ttileVal -= tileDiv;',\r\n            '\t\ttileDiv *= 0.5;',\r\n            '  \t\tPointLight pointlight;',\r\n            '\t\tfloat uvx = (float(8 * i + j) + 0.5) / 32.;',\r\n            '  \t\tvec4 lightData = texture2D(lightTexture, vec2(uvx, 0.));',\r\n            '  \t\tvec4 lightColor = texture2D(lightTexture, vec2(uvx, 1.));',\r\n            '  \t\tpointlight.position = lightData.xyz;',\r\n            '  \t\tpointlight.distance = lightData.w;',\r\n            '  \t\tpointlight.color = lightColor.rgb;',\r\n            '  \t\tpointlight.decay = lightColor.a;',\r\n            '  \t\tgetPointDirectLightIrradiance(pointlight, geometry, directLight);',\r\n            '\t\tRE_Direct(directLight, geometry, material, reflectedLight);',\r\n            '\t}',\r\n            '}',\r\n            '#endif'\r\n        ].join('\\n')\r\n        this.State = {\r\n            rows: 0,\r\n            cols: 0,\r\n            width: 0,\r\n            height: 0,\r\n            tileData: { value: null },\r\n            tileTexture: { value: null },\r\n            lightTexture: {\r\n                value: new this.$THREE.DataTexture(new Float32Array(32 * 2 * 4), 32, 2, this.$THREE.RGBAFormat, this.$THREE.FloatType)\r\n            },\r\n        }\r\n        this.lightBounds = () => {\r\n            var v = new this.$THREE.Vector3()\r\n            return (camera, pos, r) => {\r\n                var minX = this.State.width, maxX = 0, minY = this.State.height, maxY = 0\r\n                var hw = this.State.width / 2, hh = this.State.height / 2\r\n                for (var i = 0; i < 8; i ++) {\r\n                    v.copy(pos)\r\n                    v.x += i & 1 ? r : - r\r\n                    v.y += i & 2 ? r : - r\r\n                    v.z += i & 4 ? r : - r\r\n                    var vector = v.project(camera)\r\n                    var x = (vector.x * hw) + hw\r\n                    var y = (vector.y * hh) + hh\r\n                    minX = Math.min(minX, x)\r\n                    maxX = Math.max(maxX, x)\r\n                    minY = Math.min(minY, y)\r\n                    maxY = Math.max(maxY, y)\r\n                }\r\n                return [ minX, maxX, minY, maxY ]\r\n            }\r\n        }\r\n        this.lightBounds()\r\n        this.container = document.createElement('div')\r\n        document.getElementsByClassName('webglTiledForward-container')[0].appendChild(this.container)\r\n        this.camera = new this.$THREE.PerspectiveCamera(40, this.$webglInnerWidth / window.innerHeight, 1, 2000)\r\n        this.camera.position.set(0.0, 0.0, 240.0)\r\n        this.scene = new this.$THREE.Scene()\r\n        this.scene.background = new this.$THREE.Color(0x111111)\r\n        this.renderer = new this.$THREE.WebGLRenderer()\r\n        this.renderer.toneMapping = this.$THREE.NoToneMapping\r\n        this.container.appendChild(this.renderer.domElement)\r\n        this.renderTarget = new this.$THREE.WebGLRenderTarget()\r\n        this.scene.add(new this.$THREE.AmbientLight(0xffffff, 0.33))\r\n        // At least one regular Pointlight is needed to activate light support\r\n        this.scene.add(new this.$THREE.PointLight(0xff0000, 0.1, 0.1))\r\n        this.bloom = new UnrealBloomPass(new this.$THREE.Vector2(this.$webglInnerWidth, window.innerHeight), 0.8, 0.6, 0.8)\r\n        this.bloom.renderToScreen = true\r\n        this.stats = new this.$Stats()\r\n        this.stats.dom.style.left = '280px'\r\n        this.container.appendChild(this.stats.dom)\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n        this.controls.minDistance = 120\r\n        this.controls.maxDistance = 320\r\n        this.Heads = [\r\n            { type: 'physical', uniforms: { \"diffuse\": 0x888888, \"metalness\": 1.0, \"roughness\": 0.66 }, defines: {} },\r\n            { type: 'standard', uniforms: { \"diffuse\": 0x666666, \"metalness\": 0.1, \"roughness\": 0.33 }, defines: {} },\r\n            { type: 'phong', uniforms: { \"diffuse\": 0x777777, \"shininess\": 20 }, defines: {} },\r\n            { type: 'phong', uniforms: { \"diffuse\": 0x555555, \"shininess\": 10 }, defines: { TOON: 1 } }\r\n        ]\r\n        this.scene.onBeforeRender = this.tileLights\r\n        this.scene.onAfterRender = this.postEffect\r\n        this.loader = new OBJLoader()\r\n        this.loader.load('static/models/obj/walt/WaltHead.obj', (object) => {\r\n            var geometry = object.children[ 0 ].geometry\r\n            window.addEventListener('resize', this.resize)\r\n            this.init(geometry)\r\n            this.resize()\r\n            this.renderer.setAnimationLoop((time) => {\r\n                this.update(time / 1000)\r\n                this.stats.begin()\r\n                this.renderer.setRenderTarget(this.renderTarget)\r\n                this.renderer.render(this.scene, this.camera)\r\n                this.stats.end()\r\n            })\r\n        })\r\n    },\r\n    methods: {\r\n        resizeTiles() {\r\n            var width = window.innerWidth - 281\r\n            var height = window.innerHeight\r\n            this.State.width = width\r\n            this.State.height = height\r\n            this.State.cols = Math.ceil(width / 32)\r\n            this.State.rows = Math.ceil(height / 32)\r\n            this.State.tileData.value = [ width, height, 0.5 / Math.ceil(width / 32), 0.5 / Math.ceil(height / 32) ]\r\n            this.State.tileTexture.value = new this.$THREE.DataTexture(new Uint8Array(this.State.cols * this.State.rows * 4), this.State.cols, this.State.rows)\r\n        },\r\n        tileLights(renderer, scene, camera) {\r\n            if (! camera.projectionMatrix) return\r\n            var d = this.State.tileTexture.value.image.data\r\n            var ld = this.State.lightTexture.value.image.data\r\n            var viewMatrix = camera.matrixWorldInverse\r\n            d.fill(0)\r\n            var vector = new this.$THREE.Vector3()\r\n            this.lights.forEach((light, index) => {\r\n                vector.setFromMatrixPosition(light.matrixWorld)\r\n                var bs = this.lightBounds(camera, vector, light._light.radius)\r\n                vector.applyMatrix4(viewMatrix)\r\n                vector.toArray(ld, 4 * index)\r\n                ld[ 4 * index + 3 ] = light._light.radius\r\n                light._light.color.toArray(ld, 32 * 4 + 4 * index)\r\n                ld[ 32 * 4 + 4 * index + 3 ] = light._light.decay\r\n                if (bs[ 1 ] < 0 || bs[ 0 ] > this.State.width || bs[ 3 ] < 0 || bs[ 2 ] > this.State.height) return\r\n                if (bs[ 0 ] < 0) bs[ 0 ] = 0\r\n                if (bs[ 1 ] > this.State.width) bs[ 1 ] = this.State.width\r\n                if (bs[ 2 ] < 0) bs[ 2 ] = 0\r\n                if (bs[ 3 ] > this.State.height) bs[ 3 ] = this.State.height\r\n                var i4 = Math.floor(index / 8), i8 = 7 - (index % 8)\r\n                for (var i = Math.floor(bs[ 2 ] / 32); i <= Math.ceil(bs[ 3 ] / 32); i ++) {\r\n                    for (var j = Math.floor(bs[ 0 ] / 32); j <= Math.ceil(bs[ 1 ] / 32); j ++) {\r\n                        d[ (this.State.cols * i + j) * 4 + i4 ] |= 1 << i8\r\n                    }\r\n                }\r\n            })\r\n            this.State.tileTexture.value.needsUpdate = true\r\n            this.State.lightTexture.value.needsUpdate = true\r\n        },\r\n        init(geom) {\r\n            var sphereGeom = new this.$THREE.SphereBufferGeometry(0.5, 32, 32)\r\n            var tIndex = Math.round(Math.random() * 3)\r\n            Object.keys(this.Heads).forEach((t, index) => {\r\n                var g = new this.$THREE.Group()\r\n                var conf = this.Heads[ t ]\r\n                var ml = this.$THREE.ShaderLib[ conf.type ]\r\n                var mtl = new this.$THREE.ShaderMaterial({\r\n                    lights: true,\r\n                    fragmentShader: ml.fragmentShader,\r\n                    vertexShader: ml.vertexShader,\r\n                    uniforms: this.$THREE.UniformsUtils.clone(ml.uniforms),\r\n                    defines: conf.defines,\r\n                    transparent: tIndex === index ? true : false,\r\n                })\r\n                mtl.extensions.derivatives = true\r\n                mtl.uniforms[ \"opacity\" ].value = tIndex === index ? 0.9 : 1\r\n                mtl.uniforms[ \"tileData\" ] = this.State.tileData\r\n                mtl.uniforms[ \"tileTexture\" ] = this.State.tileTexture\r\n                mtl.uniforms[ \"lightTexture\" ] = this.State.lightTexture\r\n                for (var u in conf.uniforms) {\r\n                    var vu = conf.uniforms[ u ]\r\n                    if (mtl.uniforms[ u ].value.set) {\r\n                        mtl.uniforms[ u ].value.set(vu)\r\n                    } else {\r\n                        mtl.uniforms[ u ].value = vu\r\n                    }\r\n                }\r\n                mtl.defines[ 'TILED_FORWARD' ] = 1\r\n                this.materials.push(mtl)\r\n                var obj = new this.$THREE.Mesh(geom, mtl)\r\n                obj.position.y = - 37\r\n                mtl.side = tIndex === index ? this.$THREE.FrontSide : this.$THREE.DoubleSide\r\n                g.rotation.y = index * Math.PI / 2\r\n                g.position.x = Math.sin(index * Math.PI / 2) * this.RADIUS\r\n                g.position.z = Math.cos(index * Math.PI / 2) * this.RADIUS\r\n                g.add(obj)\r\n                for (var i = 0; i < 8; i ++) {\r\n                    var color = new this.$THREE.Color().setHSL(Math.random(), 1.0, 0.5)\r\n                    var l = new this.$THREE.Group()\r\n                    l.add(new this.$THREE.Mesh(\r\n                        sphereGeom,\r\n                        new this.$THREE.MeshBasicMaterial({\r\n                            color: color\r\n                        })\r\n                    ))\r\n                    l.add(new this.$THREE.Mesh(\r\n                        sphereGeom,\r\n                        new this.$THREE.MeshBasicMaterial({\r\n                            color: color,\r\n                            transparent: true,\r\n                            opacity: 0.033\r\n                        })\r\n                    ))\r\n                    l.children[ 1 ].scale.set(6.66, 6.66, 6.66)\r\n                    l._light = {\r\n                        color: color,\r\n                        radius: this.RADIUS,\r\n                        decay: 1,\r\n                        sy: Math.random(),\r\n                        sr: Math.random(),\r\n                        sc: Math.random(),\r\n                        py: Math.random() * Math.PI,\r\n                        pr: Math.random() * Math.PI,\r\n                        pc: Math.random() * Math.PI,\r\n                        dir: Math.random() > 0.5 ? 1 : - 1\r\n                    }\r\n                    this.lights.push(l)\r\n                    g.add(l)\r\n                }\r\n                this.scene.add(g)\r\n            })\r\n        },\r\n        update(now) {\r\n            this.lights.forEach((l) => {\r\n                var ld = l._light\r\n                var radius = 0.8 + 0.2 * Math.sin(ld.pr + (0.6 + 0.3 * ld.sr) * now)\r\n                l.position.x = (Math.sin(ld.pc + (0.8 + 0.2 * ld.sc) * now * ld.dir)) * radius * this.RADIUS\r\n                l.position.z = (Math.cos(ld.pc + (0.8 + 0.2 * ld.sc) * now * ld.dir)) * radius * this.RADIUS\r\n                l.position.y = Math.sin(ld.py + (0.8 + 0.2 * ld.sy) * now) * radius * 32\r\n            })\r\n        },\r\n        resize() {\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderTarget.setSize(window.innerWidth - 281, window.innerHeight)\r\n            this.bloom.setSize(window.innerWidth - 281, window.innerHeight)\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.resizeTiles()\r\n        },\r\n        postEffect(renderer) {\r\n            this.bloom.render(renderer, null, this.renderTarget)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglTiledForward-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/tiled/webglTiledForward.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglTiledForward-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"threejs\")]),_vm._v(\" - Tiled forward lighting\"),_c('br'),_vm._v(\"\\n\\t\\t\\tCreated by \"),_c('a',{attrs:{\"href\":\"https://github.com/wizgrav\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"wizgrav\")]),_vm._v(\".\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-620106e1\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/tiled/webglTiledForward.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-620106e1\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglTiledForward.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglTiledForward.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglTiledForward.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-620106e1\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglTiledForward.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-620106e1\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/tiled/webglTiledForward.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}