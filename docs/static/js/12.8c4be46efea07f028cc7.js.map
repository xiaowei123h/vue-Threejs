{"version":3,"sources":["webpack:///./src/components/jsm/postprocessing/OutlinePass.js","webpack:///src/views/postprocessing/webglPostprocessingOutline.vue","webpack:///./src/views/postprocessing/webglPostprocessingOutline.vue?b1d5","webpack:///./src/views/postprocessing/webglPostprocessingOutline.vue","webpack:///./src/components/jsm/shaders/FXAAShader.js"],"names":["OutlinePass","resolution","scene","camera","selectedObjects","this","renderScene","renderCamera","undefined","visibleEdgeColor","Color","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","Pass","call","Vector2","x","y","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","resx","Math","round","resy","maskBufferMaterial","MeshBasicMaterial","color","side","DoubleSide","renderTargetMaskBuffer","WebGLRenderTarget","texture","name","generateMipmaps","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","string","type","isPerspectiveCamera","replace","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","value","set","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","CopyShader","console","error","copyShader","copyUniforms","UniformsUtils","clone","materialCopy","ShaderMaterial","vertexShader","depthTest","depthWrite","transparent","enabled","needsSwap","oldClearColor","oldClearAlpha","fsQuad","FullScreenQuad","tempPulseColor1","tempPulseColor2","textureMatrix","Matrix4","prototype","Object","assign","create","constructor","dispose","setSize","width","height","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","get","i","length","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","push","isSprite","bFound","id","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","state","buffers","stencil","setTest","setClearColor","currentBackground","background","overrideMaterial","setRenderTarget","clear","near","far","material","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","depthTexture","cameraNearFar","join","maskTexture","texSize","Vector3","three_module","OutlinePass_OutlinePass","FXAAShader","__webpack_require__","webglPostprocessingOutline","data","container","stats","controls","composer","effectFXAA","outlinePass","raycaster","mouse","obj3d","group","params","rotate","gui","mounted","_this","$THREE","Raycaster","Object3D","Group","dat_gui_module","add","onChange","Number","conf","addColor","init","animate","beforeDestroy","destroy","methods","_this2","document","createElement","getElementsByClassName","appendChild","$webglInnerWidth","window","innerHeight","WebGLRenderer","shadowMap","domElement","Scene","PerspectiveCamera","position","OrbitControls","minDistance","maxDistance","enablePan","enableDamping","dampingFactor","AmbientLight","light","DirectionalLight","castShadow","shadow","mapSize","left","right","top","bottom","manager","LoadingManager","onProgress","item","loaded","total","log","OBJLoader","load","scale","child","Mesh","geometry","center","computeBoundingSphere","boundingSphere","radius","phongMaterial","MeshPhongMaterial","specular","shininess","receiveShadow","divideScalar","SphereBufferGeometry","MeshLambertMaterial","setHSL","random","mesh","z","floorMesh","floorGeometry","floorMaterial","rotation","PI","torusGeometry","TorusBufferGeometry","torusMaterial","torus","$Stats","dom","style","EffectComposer","renderPass","RenderPass","addPass","TextureLoader","wrapS","RepeatWrapping","wrapT","ShaderPass","addEventListener","onWindowResize","that","innerWidth","$onWindowResize"],"mappings":"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","file":"static/js/12.8c4be46efea07f028cc7.js","sourcesContent":["import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tDoubleSide,\r\n\tLinearFilter,\r\n\tMatrix4,\r\n\tMeshBasicMaterial,\r\n\tMeshDepthMaterial,\r\n\tNoBlending,\r\n\tRGBADepthPacking,\r\n\tRGBAFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { CopyShader } from \"../shaders/CopyShader.js\";\r\n\r\nvar OutlinePass = function ( resolution, scene, camera, selectedObjects ) {\r\n\r\n\tthis.renderScene = scene;\r\n\tthis.renderCamera = camera;\r\n\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\r\n\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\r\n\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\r\n\tthis.edgeGlow = 0.0;\r\n\tthis.usePatternTexture = false;\r\n\tthis.edgeThickness = 1.0;\r\n\tthis.edgeStrength = 3.0;\r\n\tthis.downSampleRatio = 2;\r\n\tthis.pulsePeriod = 0;\r\n\r\n\tthis._visibilityCache = new Map();\r\n\r\n\tPass.call( this );\r\n\r\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\r\n\r\n\tvar resx = Math.round( this.resolution.x / this.downSampleRatio );\r\n\tvar resy = Math.round( this.resolution.y / this.downSampleRatio );\r\n\r\n\tthis.maskBufferMaterial = new MeshBasicMaterial( { color: 0xffffff } );\r\n\tthis.maskBufferMaterial.side = DoubleSide;\r\n\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\r\n\tthis.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\r\n\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\r\n\r\n\tthis.depthMaterial = new MeshDepthMaterial();\r\n\tthis.depthMaterial.side = DoubleSide;\r\n\tthis.depthMaterial.depthPacking = RGBADepthPacking;\r\n\tthis.depthMaterial.blending = NoBlending;\r\n\r\n\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\r\n\tthis.prepareMaskMaterial.side = DoubleSide;\r\n\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\r\n\r\n\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\r\n\tthis.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\r\n\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\r\n\r\n\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\r\n\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\r\n\r\n\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\r\n\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\r\n\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\r\n\tthis.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\r\n\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\r\n\r\n\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\r\n\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\r\n\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\r\n\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\r\n\tthis.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\r\n\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\r\n\r\n\tvar MAX_EDGE_THICKNESS = 4;\r\n\tvar MAX_EDGE_GLOW = 4;\r\n\r\n\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\r\n\tthis.separableBlurMaterial1.uniforms[ \"texSize\" ].value.set( resx, resy );\r\n\tthis.separableBlurMaterial1.uniforms[ \"kernelRadius\" ].value = 1;\r\n\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\r\n\tthis.separableBlurMaterial2.uniforms[ \"texSize\" ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\r\n\tthis.separableBlurMaterial2.uniforms[ \"kernelRadius\" ].value = MAX_EDGE_GLOW;\r\n\r\n\t// Overlay material\r\n\tthis.overlayMaterial = this.getOverlayMaterial();\r\n\r\n\t// copy material\r\n\tif ( CopyShader === undefined )\r\n\t\tconsole.error( \"OutlinePass relies on CopyShader\" );\r\n\r\n\tvar copyShader = CopyShader;\r\n\r\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\r\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\r\n\r\n\tthis.materialCopy = new ShaderMaterial( {\r\n\t\tuniforms: this.copyUniforms,\r\n\t\tvertexShader: copyShader.vertexShader,\r\n\t\tfragmentShader: copyShader.fragmentShader,\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false,\r\n\t\ttransparent: true\r\n\t} );\r\n\r\n\tthis.enabled = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.oldClearColor = new Color();\r\n\tthis.oldClearAlpha = 1;\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\r\n\r\n\tthis.tempPulseColor1 = new Color();\r\n\tthis.tempPulseColor2 = new Color();\r\n\tthis.textureMatrix = new Matrix4();\r\n\r\n\tfunction replaceDepthToViewZ( string, camera ) {\r\n\r\n\t\tvar type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\r\n\r\n\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nOutlinePass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: OutlinePass,\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.renderTargetMaskBuffer.dispose();\r\n\t\tthis.renderTargetDepthBuffer.dispose();\r\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\r\n\t\tthis.renderTargetBlurBuffer1.dispose();\r\n\t\tthis.renderTargetBlurBuffer2.dispose();\r\n\t\tthis.renderTargetEdgeBuffer1.dispose();\r\n\t\tthis.renderTargetEdgeBuffer2.dispose();\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\r\n\r\n\t\tvar resx = Math.round( width / this.downSampleRatio );\r\n\t\tvar resy = Math.round( height / this.downSampleRatio );\r\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\r\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\r\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\r\n\t\tthis.separableBlurMaterial1.uniforms[ \"texSize\" ].value.set( resx, resy );\r\n\r\n\t\tresx = Math.round( resx / 2 );\r\n\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\r\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\r\n\r\n\t\tthis.separableBlurMaterial2.uniforms[ \"texSize\" ].value.set( resx, resy );\r\n\r\n\t},\r\n\r\n\tchangeVisibilityOfSelectedObjects: function ( bVisible ) {\r\n\r\n\t\tvar cache = this._visibilityCache;\r\n\r\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( bVisible === true ) {\r\n\r\n\t\t\t\t\tobject.visible = cache.get( object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcache.set( object, object.visible );\r\n\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\r\n\r\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\r\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tchangeVisibilityOfNonSelectedObjects: function ( bVisible ) {\r\n\r\n\t\tvar cache = this._visibilityCache;\r\n\t\tvar selectedMeshes = [];\r\n\r\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\r\n\r\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\r\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\r\n\r\n\t\t}\r\n\r\n\t\tfunction VisibilityChangeCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh || object.isSprite ) {\r\n\r\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\r\n\r\n\t\t\t\tvar bFound = false;\r\n\r\n\t\t\t\tfor ( var i = 0; i < selectedMeshes.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar selectedObjectId = selectedMeshes[ i ].id;\r\n\r\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\r\n\r\n\t\t\t\t\t\tbFound = true;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( bFound === false ) {\r\n\r\n\t\t\t\t\tvar visibility = object.visible;\r\n\r\n\t\t\t\t\tif ( bVisible === false || cache.get( object ) === true ) {\r\n\r\n\t\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcache.set( object, visibility );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\t// the visibilty of points and lines is always set to false in order to\r\n\t\t\t\t// not affect the outline computation\r\n\r\n\t\t\t\tif ( bVisible === true ) {\r\n\r\n\t\t\t\t\tobject.visible = cache.get( object ); // restore\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcache.set( object, object.visible );\r\n\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\r\n\r\n\t},\r\n\r\n\tupdateTextureMatrix: function () {\r\n\r\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0 );\r\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\r\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\r\n\r\n\t},\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\tif ( this.selectedObjects.length > 0 ) {\r\n\r\n\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\r\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\t\tvar oldAutoClear = renderer.autoClear;\r\n\r\n\t\t\trenderer.autoClear = false;\r\n\r\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\r\n\r\n\t\t\t// Make selected objects invisible\r\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\r\n\r\n\t\t\tvar currentBackground = this.renderScene.background;\r\n\t\t\tthis.renderScene.background = null;\r\n\r\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\r\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\r\n\r\n\t\t\t// Make selected objects visible\r\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\r\n\t\t\tthis._visibilityCache.clear();\r\n\r\n\t\t\t// Update Texture Matrix for Depth compare\r\n\t\t\tthis.updateTextureMatrix();\r\n\r\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\r\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\r\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"cameraNearFar\" ].value.set( this.renderCamera.near, this.renderCamera.far );\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"depthTexture\" ].value = this.renderTargetDepthBuffer.texture;\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"textureMatrix\" ].value = this.textureMatrix;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\r\n\t\t\tthis.renderScene.overrideMaterial = null;\r\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\r\n\t\t\tthis._visibilityCache.clear();\r\n\r\n\t\t\tthis.renderScene.background = currentBackground;\r\n\r\n\t\t\t// 2. Downsample to Half resolution\r\n\t\t\tthis.fsQuad.material = this.materialCopy;\r\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetMaskBuffer.texture;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\r\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\r\n\r\n\t\t\tif ( this.pulsePeriod > 0 ) {\r\n\r\n\t\t\t\tvar scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\r\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\r\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// 3. Apply Edge Detection Pass\r\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"maskTexture\" ].value = this.renderTargetMaskDownSampleBuffer.texture;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"texSize\" ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"visibleEdgeColor\" ].value = this.tempPulseColor1;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"hiddenEdgeColor\" ].value = this.tempPulseColor2;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\t// 4. Apply Blur on Half res\r\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"colorTexture\" ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionX;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"kernelRadius\" ].value = this.edgeThickness;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"colorTexture\" ].value = this.renderTargetBlurBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\t// Apply Blur on quarter res\r\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"colorTexture\" ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"colorTexture\" ].value = this.renderTargetBlurBuffer2.texture;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\t// Blend it additively over the input texture\r\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"maskTexture\" ].value = this.renderTargetMaskBuffer.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeTexture1\" ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeTexture2\" ].value = this.renderTargetEdgeBuffer2.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"patternTexture\" ].value = this.patternTexture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeStrength\" ].value = this.edgeStrength;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeGlow\" ].value = this.edgeGlow;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"usePatternTexture\" ].value = this.usePatternTexture;\r\n\r\n\r\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\t\trenderer.setRenderTarget( readBuffer );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\r\n\t\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis.fsQuad.material = this.materialCopy;\r\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetPrepareMaskMaterial: function () {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"depthTexture\": { value: null },\r\n\t\t\t\t\"cameraNearFar\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"textureMatrix\": { value: null }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\t\t\t\t'#include <morphtarget_pars_vertex>',\r\n\t\t\t\t'#include <skinning_pars_vertex>',\r\n\r\n\t\t\t\t'varying vec4 projTexCoord;',\r\n\t\t\t\t'varying vec4 vPosition;',\r\n\t\t\t\t'uniform mat4 textureMatrix;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\t#include <skinbase_vertex>',\r\n\t\t\t\t'\t#include <begin_vertex>',\r\n\t\t\t\t'\t#include <morphtarget_vertex>',\r\n\t\t\t\t'\t#include <skinning_vertex>',\r\n\t\t\t\t'\t#include <project_vertex>',\r\n\r\n\t\t\t\t'\tvPosition = mvPosition;',\r\n\t\t\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n\t\t\t\t'\tprojTexCoord = textureMatrix * worldPosition;',\r\n\r\n\t\t\t\t'}'\r\n\t\t\t].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\t\t\t\t'#include <packing>',\r\n\t\t\t\t'varying vec4 vPosition;',\r\n\t\t\t\t'varying vec4 projTexCoord;',\r\n\t\t\t\t'uniform sampler2D depthTexture;',\r\n\t\t\t\t'uniform vec2 cameraNearFar;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));',\r\n\t\t\t\t'\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );',\r\n\t\t\t\t'\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;',\r\n\t\t\t\t'\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);',\r\n\r\n\t\t\t\t'}'\r\n\t\t\t].join( '\\n' )\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetEdgeDetectionMaterial: function () {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"maskTexture\": { value: null },\r\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"visibleEdgeColor\": { value: new Vector3( 1.0, 1.0, 1.0 ) },\r\n\t\t\t\t\"hiddenEdgeColor\": { value: new Vector3( 1.0, 1.0, 1.0 ) },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D maskTexture;\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\r\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\r\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\r\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\r\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\r\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\r\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\r\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\r\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\r\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\r\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\r\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\r\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\r\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\r\n\t\t\t\t}\"\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetSeperableBlurMaterial: function ( maxRadius ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t\"MAX_RADIUS\": maxRadius,\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"colorTexture\": { value: null },\r\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"kernelRadius\": { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\tuniform float kernelRadius;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\r\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\r\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\r\n\t\t\t\t\tvec2 uvOffset = delta;\\\r\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\r\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\r\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\r\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\r\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\r\n\t\t\t\t\t\tuvOffset += delta;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\r\n\t\t\t\t}\"\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetOverlayMaterial: function () {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"maskTexture\": { value: null },\r\n\t\t\t\t\"edgeTexture1\": { value: null },\r\n\t\t\t\t\"edgeTexture2\": { value: null },\r\n\t\t\t\t\"patternTexture\": { value: null },\r\n\t\t\t\t\"edgeStrength\": { value: 1.0 },\r\n\t\t\t\t\"edgeGlow\": { value: 1.0 },\r\n\t\t\t\t\"usePatternTexture\": { value: 0.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D maskTexture;\\\r\n\t\t\t\tuniform sampler2D edgeTexture1;\\\r\n\t\t\t\tuniform sampler2D edgeTexture2;\\\r\n\t\t\t\tuniform sampler2D patternTexture;\\\r\n\t\t\t\tuniform float edgeStrength;\\\r\n\t\t\t\tuniform float edgeGlow;\\\r\n\t\t\t\tuniform bool usePatternTexture;\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\r\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\r\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\r\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\r\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\r\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\r\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\r\n\t\t\t\t\tif(usePatternTexture)\\\r\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\r\n\t\t\t\t\tgl_FragColor = finalColor;\\\r\n\t\t\t\t}\",\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false,\r\n\t\t\ttransparent: true\r\n\t\t} );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\r\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\r\n\r\nexport { OutlinePass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/OutlinePass.js","<template>\r\n    <div class=\"webglPostprocessingOutline-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - Outline Pass by <a href=\"http://eduperiment.com\" target=\"_blank\" rel=\"noopener\">Prashant Sharma</a> and <a href=\"https://clara.io\" target=\"_blank\" rel=\"noopener\">Ben Houston</a><br/><br/>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { OBJLoader } from '@/components/jsm/loaders/OBJLoader.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { ShaderPass } from '@/components/jsm/postprocessing/ShaderPass.js'\r\nimport { OutlinePass } from '@/components/jsm/postprocessing/OutlinePass.js'\r\nimport { FXAAShader } from '@/components/jsm/shaders/FXAAShader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            controls: null,\r\n            composer: null,\r\n            effectFXAA: null,\r\n            outlinePass: null,\r\n\t\t\tselectedObjects: [],\r\n\t\t\traycaster: null,\r\n\t\t\tmouse: null,\r\n\t\t\tobj3d: null,\r\n\t\t\tgroup: null,\r\n\t\t\tparams: {\r\n\t\t\t\tedgeStrength: 3.0,\r\n\t\t\t\tedgeGlow: 0.0,\r\n\t\t\t\tedgeThickness: 1.0,\r\n\t\t\t\tpulsePeriod: 0,\r\n\t\t\t\trotate: false,\r\n\t\t\t\tusePatternTexture: false\r\n\t\t\t},\r\n\t\t\t// Init gui\r\n\t\t\tgui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.obj3d = new this.$THREE.Object3D()\r\n        this.group = new this.$THREE.Group()\r\n        this.gui = new GUI({ width: 300 })\r\n        this.gui.add(this.params, 'edgeStrength', 0.01, 10).onChange((value) => {\r\n            this.outlinePass.edgeStrength = Number(value)\r\n        })\r\n        this.gui.add(this.params, 'edgeGlow', 0.0, 1).onChange((value) => {\r\n            this.outlinePass.edgeGlow = Number(value)\r\n        })\r\n        this.gui.add(this.params, 'edgeThickness', 1, 4).onChange((value) => {\r\n            this.outlinePass.edgeThickness = Number(value)\r\n        })\r\n        this.gui.add(this.params, 'pulsePeriod', 0.0, 5).onChange((value) => {\r\n            this.outlinePass.pulsePeriod = Number(value)\r\n        })\r\n        this.gui.add(this.params, 'rotate')\r\n        this.gui.add(this.params, 'usePatternTexture').onChange((value) => {\r\n            this.outlinePass.usePatternTexture = value\r\n        })\r\n        function Configuration() {\r\n            this.visibleEdgeColor = '#ffffff'\r\n            this.hiddenEdgeColor = '#190a05'\r\n        }\r\n        var conf = new Configuration()\r\n        this.gui.addColor(conf, 'visibleEdgeColor').onChange((value) => {\r\n            this.outlinePass.visibleEdgeColor.set(value)\r\n        })\r\n        this.gui.addColor(conf, 'hiddenEdgeColor').onChange((value) => {\r\n            this.outlinePass.hiddenEdgeColor.set(value)\r\n        })\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n       init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglPostprocessingOutline-container')[0].appendChild(this.container)\r\n            var width = this.$webglInnerWidth\r\n            var height = window.innerHeight\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.shadowMap.enabled = true\r\n            // todo - support pixelRatio in this demo\r\n            this.renderer.setSize(width, height)\r\n            document.getElementsByClassName('webglPostprocessingOutline-container')[0].appendChild(this.renderer.domElement)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, width / height, 0.1, 100)\r\n            this.camera.position.set(0, 0, 8)\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.controls.minDistance = 5\r\n            this.controls.maxDistance = 20\r\n            this.controls.enablePan = false\r\n            this.controls.enableDamping = true\r\n            this.controls.dampingFactor = 0.05\r\n            //\r\n            this.scene.add(new this.$THREE.AmbientLight(0xaaaaaa, 0.2))\r\n            var light = new this.$THREE.DirectionalLight(0xddffdd, 0.6)\r\n            light.position.set(1, 1, 1)\r\n            light.castShadow = true\r\n            light.shadow.mapSize.width = 1024\r\n            light.shadow.mapSize.height = 1024\r\n            var d = 10\r\n            light.shadow.camera.left = - d\r\n            light.shadow.camera.right = d\r\n            light.shadow.camera.top = d\r\n            light.shadow.camera.bottom = - d\r\n            light.shadow.camera.far = 1000\r\n            this.scene.add(light)\r\n            // model\r\n            var manager = new this.$THREE.LoadingManager()\r\n            manager.onProgress = (item, loaded, total) => {\r\n                console.log(item, loaded, total)\r\n            }\r\n            var loader = new OBJLoader(manager)\r\n            loader.load('static/models/obj/tree.obj', (object) => {\r\n                var scale = 1.0\r\n                object.traverse((child) => {\r\n                    if (child instanceof this.$THREE.Mesh) {\r\n                        child.geometry.center()\r\n                        child.geometry.computeBoundingSphere()\r\n                        scale = 0.2 * child.geometry.boundingSphere.radius\r\n                        var phongMaterial = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, shininess: 5 })\r\n                        child.material = phongMaterial\r\n                        child.receiveShadow = true\r\n                        child.castShadow = true\r\n                    }\r\n                })\r\n                object.position.y = 1\r\n                object.scale.divideScalar(scale)\r\n                this.obj3d.add(object)\r\n            })\r\n            this.scene.add(this.group)\r\n            this.group.add(this.obj3d)\r\n            //\r\n            var geometry = new this.$THREE.SphereBufferGeometry(3, 48, 24)\r\n            for (var i = 0; i < 20; i ++) {\r\n                var material = new this.$THREE.MeshLambertMaterial()\r\n                material.color.setHSL(Math.random(), 1.0, 0.3)\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.x = Math.random() * 4 - 2\r\n                mesh.position.y = Math.random() * 4 - 2\r\n                mesh.position.z = Math.random() * 4 - 2\r\n                mesh.receiveShadow = true\r\n                mesh.castShadow = true\r\n                mesh.scale.multiplyScalar(Math.random() * 0.3 + 0.1)\r\n                this.group.add(mesh)\r\n\r\n            }\r\n            var floorMaterial = new this.$THREE.MeshLambertMaterial({ side: this.$THREE.DoubleSide })\r\n            var floorGeometry = new this.$THREE.PlaneBufferGeometry(12, 12)\r\n            var floorMesh = new this.$THREE.Mesh(floorGeometry, floorMaterial)\r\n            floorMesh.rotation.x -= Math.PI * 0.5\r\n            floorMesh.position.y -= 1.5\r\n            this.group.add(floorMesh)\r\n            floorMesh.receiveShadow = true\r\n            var torusGeometry = new this.$THREE.TorusBufferGeometry(1, 0.3, 16, 100)\r\n            var torusMaterial = new this.$THREE.MeshPhongMaterial({ color: 0xffaaff })\r\n            var torus = new this.$THREE.Mesh(torusGeometry, torusMaterial)\r\n            torus.position.z = - 4\r\n            this.group.add(torus)\r\n            torus.receiveShadow = true\r\n            torus.castShadow = true\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            // postprocessing\r\n            this.composer = new EffectComposer(this.renderer)\r\n            var renderPass = new RenderPass(this.scene, this.camera)\r\n            this.composer.addPass(renderPass)\r\n            this.outlinePass = new OutlinePass(new this.$THREE.Vector2(this.$webglInnerWidth, window.innerHeight), this.scene, this.camera)\r\n            this.composer.addPass(this.outlinePass)\r\n            var textureLoader = new this.$THREE.TextureLoader()\r\n            textureLoader.load('static/textures/tri_pattern.jpg', (texture) => {\r\n                this.outlinePass.patternTexture = texture\r\n                texture.wrapS = this.$THREE.RepeatWrapping\r\n                texture.wrapT = this.$THREE.RepeatWrapping\r\n            })\r\n            this.effectFXAA = new ShaderPass(FXAAShader)\r\n            this.effectFXAA.uniforms[ 'resolution' ].value.set(1 / this.$webglInnerWidth, 1 / window.innerHeight)\r\n            this.composer.addPass(this.effectFXAA)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.renderer.domElement.style.touchAction = 'none'\r\n            this.renderer.domElement.addEventListener('pointermove', onPointerMove, false)\r\n            var that = this\r\n            function onPointerMove(event) {\r\n                if (event.isPrimary === false) return\r\n                that.mouse.x = (event.clientX / this.$webglInnerWidth) * 2 - 1\r\n                that.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1\r\n                checkIntersection()\r\n            }\r\n            function addSelectedObject(object) {\r\n                that.selectedObjects = []\r\n                that.selectedObjects.push(object)\r\n            }\r\n            function checkIntersection() {\r\n                that.raycaster.setFromCamera(that.mouse, that.camera)\r\n                var intersects = that.raycaster.intersectObject(that.scene, true)\r\n                if (intersects.length > 0) {\r\n                    var selectedObject = intersects[ 0 ].object\r\n                    addSelectedObject(selectedObject)\r\n                    that.outlinePass.selectedObjects = that.selectedObjects\r\n                } else {\r\n                    // outlinePass.selectedObjects = []\r\n                }\r\n            }\r\n        },\r\n        onWindowResize() {\r\n            var width = window.innerWidth - 281\r\n            var height = window.innerHeight\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.composer.setSize(width, height)\r\n            this.effectFXAA.uniforms[ 'resolution' ].value.set(1 / window.innerWidth - 281, 1 / window.innerHeight)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.stats.begin()\r\n            var timer = performance.now()\r\n            if (this.params.rotate) {\r\n                this.group.rotation.y = timer * 0.0001\r\n            }\r\n            this.controls.update()\r\n            this.composer.render()\r\n            this.stats.end()\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingOutline-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingOutline.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingOutline-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - Outline Pass by \"),_c('a',{attrs:{\"href\":\"http://eduperiment.com\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Prashant Sharma\")]),_vm._v(\" and \"),_c('a',{attrs:{\"href\":\"https://clara.io\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Ben Houston\")]),_c('br'),_c('br')])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-a8d0140a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingOutline.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-a8d0140a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingOutline.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingOutline.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingOutline.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a8d0140a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingOutline.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-a8d0140a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingOutline.vue\n// module id = null\n// module chunks = ","import {\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * NVIDIA FXAA by Timothy Lottes\r\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\r\n * - WebGL port by @supereggbert\r\n * http://www.glge.org/demos/fxaa/\r\n */\r\n\r\nvar FXAAShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"resolution\": { value: new Vector2( 1 / 1024, 1 / 512 ) }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\t\t\"precision highp float;\",\r\n\t\t\"\",\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"\",\r\n\t\t\"uniform vec2 resolution;\",\r\n\t\t\"\",\r\n\t\t\"varying vec2 vUv;\",\r\n\t\t\"\",\r\n\t\t\"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\",\r\n\t\t\"\",\r\n\t\t\"//----------------------------------------------------------------------------------\",\r\n\t\t\"// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\",\r\n\t\t\"// SDK Version: v3.00\",\r\n\t\t\"// Email:       gameworks@nvidia.com\",\r\n\t\t\"// Site:        http://developer.nvidia.com/\",\r\n\t\t\"//\",\r\n\t\t\"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\",\r\n\t\t\"//\",\r\n\t\t\"// Redistribution and use in source and binary forms, with or without\",\r\n\t\t\"// modification, are permitted provided that the following conditions\",\r\n\t\t\"// are met:\",\r\n\t\t\"//  * Redistributions of source code must retain the above copyright\",\r\n\t\t\"//    notice, this list of conditions and the following disclaimer.\",\r\n\t\t\"//  * Redistributions in binary form must reproduce the above copyright\",\r\n\t\t\"//    notice, this list of conditions and the following disclaimer in the\",\r\n\t\t\"//    documentation and/or other materials provided with the distribution.\",\r\n\t\t\"//  * Neither the name of NVIDIA CORPORATION nor the names of its\",\r\n\t\t\"//    contributors may be used to endorse or promote products derived\",\r\n\t\t\"//    from this software without specific prior written permission.\",\r\n\t\t\"//\",\r\n\t\t\"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\r\n\t\t\"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\",\r\n\t\t\"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\",\r\n\t\t\"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\",\r\n\t\t\"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\",\r\n\t\t\"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\",\r\n\t\t\"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\",\r\n\t\t\"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\",\r\n\t\t\"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\",\r\n\t\t\"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\",\r\n\t\t\"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\",\r\n\t\t\"//\",\r\n\t\t\"//----------------------------------------------------------------------------------\",\r\n\t\t\"\",\r\n\t\t\"#define FXAA_PC 1\",\r\n\t\t\"#define FXAA_GLSL_100 1\",\r\n\t\t\"#define FXAA_QUALITY_PRESET 12\",\r\n\t\t\"\",\r\n\t\t\"#define FXAA_GREEN_AS_LUMA 1\",\r\n\t\t\"\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_PC_CONSOLE\",\r\n\t\t\"    //\",\r\n\t\t\"    // The console algorithm for PC is included\",\r\n\t\t\"    // for developers targeting really low spec machines.\",\r\n\t\t\"    // Likely better to just run FXAA_PC, and use a really low preset.\",\r\n\t\t\"    //\",\r\n\t\t\"    #define FXAA_PC_CONSOLE 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_GLSL_120\",\r\n\t\t\"    #define FXAA_GLSL_120 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_GLSL_130\",\r\n\t\t\"    #define FXAA_GLSL_130 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_HLSL_3\",\r\n\t\t\"    #define FXAA_HLSL_3 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_HLSL_4\",\r\n\t\t\"    #define FXAA_HLSL_4 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_HLSL_5\",\r\n\t\t\"    #define FXAA_HLSL_5 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*==========================================================================*/\",\r\n\t\t\"#ifndef FXAA_GREEN_AS_LUMA\",\r\n\t\t\"    //\",\r\n\t\t\"    // For those using non-linear color,\",\r\n\t\t\"    // and either not able to get luma in alpha, or not wanting to,\",\r\n\t\t\"    // this enables FXAA to run using green as a proxy for luma.\",\r\n\t\t\"    // So with this enabled, no need to pack luma in alpha.\",\r\n\t\t\"    //\",\r\n\t\t\"    // This will turn off AA on anything which lacks some amount of green.\",\r\n\t\t\"    // Pure red and blue or combination of only R and B, will get no AA.\",\r\n\t\t\"    //\",\r\n\t\t\"    // Might want to lower the settings for both,\",\r\n\t\t\"    //    fxaaConsoleEdgeThresholdMin\",\r\n\t\t\"    //    fxaaQualityEdgeThresholdMin\",\r\n\t\t\"    // In order to insure AA does not get turned off on colors\",\r\n\t\t\"    // which contain a minor amount of green.\",\r\n\t\t\"    //\",\r\n\t\t\"    // 1 = On.\",\r\n\t\t\"    // 0 = Off.\",\r\n\t\t\"    //\",\r\n\t\t\"    #define FXAA_GREEN_AS_LUMA 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_EARLY_EXIT\",\r\n\t\t\"    //\",\r\n\t\t\"    // Controls algorithm's early exit path.\",\r\n\t\t\"    // On PS3 turning this ON adds 2 cycles to the shader.\",\r\n\t\t\"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\",\r\n\t\t\"    // Turning this off on console will result in a more blurry image.\",\r\n\t\t\"    // So this defaults to on.\",\r\n\t\t\"    //\",\r\n\t\t\"    // 1 = On.\",\r\n\t\t\"    // 0 = Off.\",\r\n\t\t\"    //\",\r\n\t\t\"    #define FXAA_EARLY_EXIT 1\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_DISCARD\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only valid for PC OpenGL currently.\",\r\n\t\t\"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\",\r\n\t\t\"    //\",\r\n\t\t\"    // 1 = Use discard on pixels which don't need AA.\",\r\n\t\t\"    //     For APIs which enable concurrent TEX+ROP from same surface.\",\r\n\t\t\"    // 0 = Return unchanged color on pixels which don't need AA.\",\r\n\t\t\"    //\",\r\n\t\t\"    #define FXAA_DISCARD 0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_FAST_PIXEL_OFFSET\",\r\n\t\t\"    //\",\r\n\t\t\"    // Used for GLSL 120 only.\",\r\n\t\t\"    //\",\r\n\t\t\"    // 1 = GL API supports fast pixel offsets\",\r\n\t\t\"    // 0 = do not use fast pixel offsets\",\r\n\t\t\"    //\",\r\n\t\t\"    #ifdef GL_EXT_gpu_shader4\",\r\n\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #ifdef GL_NV_gpu_shader5\",\r\n\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #ifdef GL_ARB_gpu_shader5\",\r\n\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #ifndef FXAA_FAST_PIXEL_OFFSET\",\r\n\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 0\",\r\n\t\t\"    #endif\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#ifndef FXAA_GATHER4_ALPHA\",\r\n\t\t\"    //\",\r\n\t\t\"    // 1 = API supports gather4 on alpha channel.\",\r\n\t\t\"    // 0 = API does not support gather4 on alpha channel.\",\r\n\t\t\"    //\",\r\n\t\t\"    #if (FXAA_HLSL_5 == 1)\",\r\n\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #ifdef GL_ARB_gpu_shader5\",\r\n\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #ifdef GL_NV_gpu_shader5\",\r\n\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #ifndef FXAA_GATHER4_ALPHA\",\r\n\t\t\"        #define FXAA_GATHER4_ALPHA 0\",\r\n\t\t\"    #endif\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"                        FXAA QUALITY - TUNING KNOBS\",\r\n\t\t\"------------------------------------------------------------------------------\",\r\n\t\t\"NOTE the other tuning knobs are now in the shader function inputs!\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#ifndef FXAA_QUALITY_PRESET\",\r\n\t\t\"    //\",\r\n\t\t\"    // Choose the quality preset.\",\r\n\t\t\"    // This needs to be compiled into the shader as it effects code.\",\r\n\t\t\"    // Best option to include multiple presets is to\",\r\n\t\t\"    // in each shader define the preset, then include this file.\",\r\n\t\t\"    //\",\r\n\t\t\"    // OPTIONS\",\r\n\t\t\"    // -----------------------------------------------------------------------\",\r\n\t\t\"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\",\r\n\t\t\"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\",\r\n\t\t\"    // 39       - no dither, very expensive\",\r\n\t\t\"    //\",\r\n\t\t\"    // NOTES\",\r\n\t\t\"    // -----------------------------------------------------------------------\",\r\n\t\t\"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\",\r\n\t\t\"    // 13 = about same speed as FXAA 3.9 and better than 12\",\r\n\t\t\"    // 23 = closest to FXAA 3.9 visually and performance wise\",\r\n\t\t\"    //  _ = the lowest digit is directly related to performance\",\r\n\t\t\"    // _  = the highest digit is directly related to style\",\r\n\t\t\"    //\",\r\n\t\t\"    #define FXAA_QUALITY_PRESET 12\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"\",\r\n\t\t\"                           FXAA QUALITY - PRESETS\",\r\n\t\t\"\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"                     FXAA QUALITY - MEDIUM DITHER PRESETS\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 10)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 3\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P1 3.0\",\r\n\t\t\"    #define FXAA_QUALITY_P2 12.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 11)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 4\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 3.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 12.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 12)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 5\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 12.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 13)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 6\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 12.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 14)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 7\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 12.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 15)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 8\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 12.0\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"                     FXAA QUALITY - LOW DITHER PRESETS\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 20)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 3\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P1 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P2 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 21)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 4\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 22)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 5\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 23)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 6\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 24)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 7\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 3.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 25)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 8\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 26)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 9\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P8 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 27)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 10\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P8 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P9 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 28)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 11\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P8 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P9 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P10 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 29)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 12\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P2 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P6 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P8 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P9 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P10 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P11 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"                     FXAA QUALITY - EXTREME QUALITY\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#if (FXAA_QUALITY_PRESET == 39)\",\r\n\t\t\"    #define FXAA_QUALITY_PS 12\",\r\n\t\t\"    #define FXAA_QUALITY_P0 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P1 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P2 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P3 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P4 1.0\",\r\n\t\t\"    #define FXAA_QUALITY_P5 1.5\",\r\n\t\t\"    #define FXAA_QUALITY_P6 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P7 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P8 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P9 2.0\",\r\n\t\t\"    #define FXAA_QUALITY_P10 4.0\",\r\n\t\t\"    #define FXAA_QUALITY_P11 8.0\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"\",\r\n\t\t\"                                API PORTING\",\r\n\t\t\"\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\",\r\n\t\t\"    #define FxaaBool bool\",\r\n\t\t\"    #define FxaaDiscard discard\",\r\n\t\t\"    #define FxaaFloat float\",\r\n\t\t\"    #define FxaaFloat2 vec2\",\r\n\t\t\"    #define FxaaFloat3 vec3\",\r\n\t\t\"    #define FxaaFloat4 vec4\",\r\n\t\t\"    #define FxaaHalf float\",\r\n\t\t\"    #define FxaaHalf2 vec2\",\r\n\t\t\"    #define FxaaHalf3 vec3\",\r\n\t\t\"    #define FxaaHalf4 vec4\",\r\n\t\t\"    #define FxaaInt2 ivec2\",\r\n\t\t\"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\",\r\n\t\t\"    #define FxaaTex sampler2D\",\r\n\t\t\"#else\",\r\n\t\t\"    #define FxaaBool bool\",\r\n\t\t\"    #define FxaaDiscard clip(-1)\",\r\n\t\t\"    #define FxaaFloat float\",\r\n\t\t\"    #define FxaaFloat2 float2\",\r\n\t\t\"    #define FxaaFloat3 float3\",\r\n\t\t\"    #define FxaaFloat4 float4\",\r\n\t\t\"    #define FxaaHalf half\",\r\n\t\t\"    #define FxaaHalf2 half2\",\r\n\t\t\"    #define FxaaHalf3 half3\",\r\n\t\t\"    #define FxaaHalf4 half4\",\r\n\t\t\"    #define FxaaSat(x) saturate(x)\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_GLSL_100 == 1)\",\r\n\t\t\"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\",\r\n\t\t\"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_GLSL_120 == 1)\",\r\n\t\t\"    // Requires,\",\r\n\t\t\"    //  #version 120\",\r\n\t\t\"    // And at least,\",\r\n\t\t\"    //  #extension GL_EXT_gpu_shader4 : enable\",\r\n\t\t\"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\",\r\n\t\t\"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\",\r\n\t\t\"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\",\r\n\t\t\"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\",\r\n\t\t\"    #else\",\r\n\t\t\"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\",\r\n\t\t\"    #endif\",\r\n\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\r\n\t\t\"        // use #extension GL_ARB_gpu_shader5 : enable\",\r\n\t\t\"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\r\n\t\t\"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\r\n\t\t\"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\r\n\t\t\"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\r\n\t\t\"    #endif\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_GLSL_130 == 1)\",\r\n\t\t\"    // Requires \\\"#version 130\\\" or better\",\r\n\t\t\"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\",\r\n\t\t\"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\",\r\n\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\r\n\t\t\"        // use #extension GL_ARB_gpu_shader5 : enable\",\r\n\t\t\"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\r\n\t\t\"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\r\n\t\t\"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\r\n\t\t\"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\r\n\t\t\"    #endif\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_HLSL_3 == 1)\",\r\n\t\t\"    #define FxaaInt2 float2\",\r\n\t\t\"    #define FxaaTex sampler2D\",\r\n\t\t\"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\",\r\n\t\t\"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_HLSL_4 == 1)\",\r\n\t\t\"    #define FxaaInt2 int2\",\r\n\t\t\"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\r\n\t\t\"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\r\n\t\t\"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\r\n\t\t\"#endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"#if (FXAA_HLSL_5 == 1)\",\r\n\t\t\"    #define FxaaInt2 int2\",\r\n\t\t\"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\r\n\t\t\"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\r\n\t\t\"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\r\n\t\t\"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\",\r\n\t\t\"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\",\r\n\t\t\"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\",\r\n\t\t\"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#if (FXAA_GREEN_AS_LUMA == 0)\",\r\n\t\t\"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\",\r\n\t\t\"#else\",\r\n\t\t\"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"\",\r\n\t\t\"/*============================================================================\",\r\n\t\t\"\",\r\n\t\t\"                             FXAA3 QUALITY - PC\",\r\n\t\t\"\",\r\n\t\t\"============================================================================*/\",\r\n\t\t\"#if (FXAA_PC == 1)\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"FxaaFloat4 FxaaPixelShader(\",\r\n\t\t\"    //\",\r\n\t\t\"    // Use noperspective interpolation here (turn off perspective interpolation).\",\r\n\t\t\"    // {xy} = center of pixel\",\r\n\t\t\"    FxaaFloat2 pos,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Used only for FXAA Console, and not used on the 360 version.\",\r\n\t\t\"    // Use noperspective interpolation here (turn off perspective interpolation).\",\r\n\t\t\"    // {xy_} = upper left of pixel\",\r\n\t\t\"    // {_zw} = lower right of pixel\",\r\n\t\t\"    FxaaFloat4 fxaaConsolePosPos,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Input color texture.\",\r\n\t\t\"    // {rgb_} = color in linear or perceptual color space\",\r\n\t\t\"    // if (FXAA_GREEN_AS_LUMA == 0)\",\r\n\t\t\"    //     {__a} = luma in perceptual color space (not linear)\",\r\n\t\t\"    FxaaTex tex,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on the optimized 360 version of FXAA Console.\",\r\n\t\t\"    // For everything but 360, just use the same input here as for \\\"tex\\\".\",\r\n\t\t\"    // For 360, same texture, just alias with a 2nd sampler.\",\r\n\t\t\"    // This sampler needs to have an exponent bias of -1.\",\r\n\t\t\"    FxaaTex fxaaConsole360TexExpBiasNegOne,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on the optimized 360 version of FXAA Console.\",\r\n\t\t\"    // For everything but 360, just use the same input here as for \\\"tex\\\".\",\r\n\t\t\"    // For 360, same texture, just alias with a 3nd sampler.\",\r\n\t\t\"    // This sampler needs to have an exponent bias of -2.\",\r\n\t\t\"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Quality.\",\r\n\t\t\"    // This must be from a constant/uniform.\",\r\n\t\t\"    // {x_} = 1.0/screenWidthInPixels\",\r\n\t\t\"    // {_y} = 1.0/screenHeightInPixels\",\r\n\t\t\"    FxaaFloat2 fxaaQualityRcpFrame,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Console.\",\r\n\t\t\"    // This must be from a constant/uniform.\",\r\n\t\t\"    // This effects sub-pixel AA quality and inversely sharpness.\",\r\n\t\t\"    //   Where N ranges between,\",\r\n\t\t\"    //     N = 0.50 (default)\",\r\n\t\t\"    //     N = 0.33 (sharper)\",\r\n\t\t\"    // {x__} = -N/screenWidthInPixels\",\r\n\t\t\"    // {_y_} = -N/screenHeightInPixels\",\r\n\t\t\"    // {_z_} =  N/screenWidthInPixels\",\r\n\t\t\"    // {__w} =  N/screenHeightInPixels\",\r\n\t\t\"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Console.\",\r\n\t\t\"    // Not used on 360, but used on PS3 and PC.\",\r\n\t\t\"    // This must be from a constant/uniform.\",\r\n\t\t\"    // {x__} = -2.0/screenWidthInPixels\",\r\n\t\t\"    // {_y_} = -2.0/screenHeightInPixels\",\r\n\t\t\"    // {_z_} =  2.0/screenWidthInPixels\",\r\n\t\t\"    // {__w} =  2.0/screenHeightInPixels\",\r\n\t\t\"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Console.\",\r\n\t\t\"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\",\r\n\t\t\"    // This must be from a constant/uniform.\",\r\n\t\t\"    // {x__} =  8.0/screenWidthInPixels\",\r\n\t\t\"    // {_y_} =  8.0/screenHeightInPixels\",\r\n\t\t\"    // {_z_} = -4.0/screenWidthInPixels\",\r\n\t\t\"    // {__w} = -4.0/screenHeightInPixels\",\r\n\t\t\"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Quality.\",\r\n\t\t\"    // This used to be the FXAA_QUALITY_SUBPIX define.\",\r\n\t\t\"    // It is here now to allow easier tuning.\",\r\n\t\t\"    // Choose the amount of sub-pixel aliasing removal.\",\r\n\t\t\"    // This can effect sharpness.\",\r\n\t\t\"    //   1.00 - upper limit (softer)\",\r\n\t\t\"    //   0.75 - default amount of filtering\",\r\n\t\t\"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\",\r\n\t\t\"    //   0.25 - almost off\",\r\n\t\t\"    //   0.00 - completely off\",\r\n\t\t\"    FxaaFloat fxaaQualitySubpix,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Quality.\",\r\n\t\t\"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\",\r\n\t\t\"    // It is here now to allow easier tuning.\",\r\n\t\t\"    // The minimum amount of local contrast required to apply algorithm.\",\r\n\t\t\"    //   0.333 - too little (faster)\",\r\n\t\t\"    //   0.250 - low quality\",\r\n\t\t\"    //   0.166 - default\",\r\n\t\t\"    //   0.125 - high quality\",\r\n\t\t\"    //   0.063 - overkill (slower)\",\r\n\t\t\"    FxaaFloat fxaaQualityEdgeThreshold,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Quality.\",\r\n\t\t\"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\",\r\n\t\t\"    // It is here now to allow easier tuning.\",\r\n\t\t\"    // Trims the algorithm from processing darks.\",\r\n\t\t\"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\",\r\n\t\t\"    //   0.0625 - high quality (faster)\",\r\n\t\t\"    //   0.0312 - visible limit (slower)\",\r\n\t\t\"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\r\n\t\t\"    //   Likely want to set this to zero.\",\r\n\t\t\"    //   As colors that are mostly not-green\",\r\n\t\t\"    //   will appear very dark in the green channel!\",\r\n\t\t\"    //   Tune by looking at mostly non-green content,\",\r\n\t\t\"    //   then start at zero and increase until aliasing is a problem.\",\r\n\t\t\"    FxaaFloat fxaaQualityEdgeThresholdMin,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Console.\",\r\n\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\",\r\n\t\t\"    // It is here now to allow easier tuning.\",\r\n\t\t\"    // This does not effect PS3, as this needs to be compiled in.\",\r\n\t\t\"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\",\r\n\t\t\"    //   Due to the PS3 being ALU bound,\",\r\n\t\t\"    //   there are only three safe values here: 2 and 4 and 8.\",\r\n\t\t\"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\r\n\t\t\"    // For all other platforms can be a non-power of two.\",\r\n\t\t\"    //   8.0 is sharper (default!!!)\",\r\n\t\t\"    //   4.0 is softer\",\r\n\t\t\"    //   2.0 is really soft (good only for vector graphics inputs)\",\r\n\t\t\"    FxaaFloat fxaaConsoleEdgeSharpness,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Console.\",\r\n\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\",\r\n\t\t\"    // It is here now to allow easier tuning.\",\r\n\t\t\"    // This does not effect PS3, as this needs to be compiled in.\",\r\n\t\t\"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\",\r\n\t\t\"    //   Due to the PS3 being ALU bound,\",\r\n\t\t\"    //   there are only two safe values here: 1/4 and 1/8.\",\r\n\t\t\"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\r\n\t\t\"    // The console setting has a different mapping than the quality setting.\",\r\n\t\t\"    // Other platforms can use other values.\",\r\n\t\t\"    //   0.125 leaves less aliasing, but is softer (default!!!)\",\r\n\t\t\"    //   0.25 leaves more aliasing, and is sharper\",\r\n\t\t\"    FxaaFloat fxaaConsoleEdgeThreshold,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Only used on FXAA Console.\",\r\n\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\",\r\n\t\t\"    // It is here now to allow easier tuning.\",\r\n\t\t\"    // Trims the algorithm from processing darks.\",\r\n\t\t\"    // The console setting has a different mapping than the quality setting.\",\r\n\t\t\"    // This only applies when FXAA_EARLY_EXIT is 1.\",\r\n\t\t\"    // This does not apply to PS3,\",\r\n\t\t\"    // PS3 was simplified to avoid more shader instructions.\",\r\n\t\t\"    //   0.06 - faster but more aliasing in darks\",\r\n\t\t\"    //   0.05 - default\",\r\n\t\t\"    //   0.04 - slower and less aliasing in darks\",\r\n\t\t\"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\r\n\t\t\"    //   Likely want to set this to zero.\",\r\n\t\t\"    //   As colors that are mostly not-green\",\r\n\t\t\"    //   will appear very dark in the green channel!\",\r\n\t\t\"    //   Tune by looking at mostly non-green content,\",\r\n\t\t\"    //   then start at zero and increase until aliasing is a problem.\",\r\n\t\t\"    FxaaFloat fxaaConsoleEdgeThresholdMin,\",\r\n\t\t\"    //\",\r\n\t\t\"    // Extra constants for 360 FXAA Console only.\",\r\n\t\t\"    // Use zeros or anything else for other platforms.\",\r\n\t\t\"    // These must be in physical constant registers and NOT immediates.\",\r\n\t\t\"    // Immediates will result in compiler un-optimizing.\",\r\n\t\t\"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\",\r\n\t\t\"    FxaaFloat4 fxaaConsole360ConstDir\",\r\n\t\t\") {\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat2 posM;\",\r\n\t\t\"    posM.x = pos.x;\",\r\n\t\t\"    posM.y = pos.y;\",\r\n\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\r\n\t\t\"        #if (FXAA_DISCARD == 0)\",\r\n\t\t\"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\r\n\t\t\"            #if (FXAA_GREEN_AS_LUMA == 0)\",\r\n\t\t\"                #define lumaM rgbyM.w\",\r\n\t\t\"            #else\",\r\n\t\t\"                #define lumaM rgbyM.y\",\r\n\t\t\"            #endif\",\r\n\t\t\"        #endif\",\r\n\t\t\"        #if (FXAA_GREEN_AS_LUMA == 0)\",\r\n\t\t\"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\",\r\n\t\t\"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\",\r\n\t\t\"        #else\",\r\n\t\t\"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\",\r\n\t\t\"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\",\r\n\t\t\"        #endif\",\r\n\t\t\"        #if (FXAA_DISCARD == 1)\",\r\n\t\t\"            #define lumaM luma4A.w\",\r\n\t\t\"        #endif\",\r\n\t\t\"        #define lumaE luma4A.z\",\r\n\t\t\"        #define lumaS luma4A.x\",\r\n\t\t\"        #define lumaSE luma4A.y\",\r\n\t\t\"        #define lumaNW luma4B.w\",\r\n\t\t\"        #define lumaN luma4B.z\",\r\n\t\t\"        #define lumaW luma4B.x\",\r\n\t\t\"    #else\",\r\n\t\t\"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\r\n\t\t\"        #if (FXAA_GREEN_AS_LUMA == 0)\",\r\n\t\t\"            #define lumaM rgbyM.w\",\r\n\t\t\"        #else\",\r\n\t\t\"            #define lumaM rgbyM.y\",\r\n\t\t\"        #endif\",\r\n\t\t\"        #if (FXAA_GLSL_100 == 1)\",\r\n\t\t\"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"        #else\",\r\n\t\t\"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"        #endif\",\r\n\t\t\"    #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat maxSM = max(lumaS, lumaM);\",\r\n\t\t\"    FxaaFloat minSM = min(lumaS, lumaM);\",\r\n\t\t\"    FxaaFloat maxESM = max(lumaE, maxSM);\",\r\n\t\t\"    FxaaFloat minESM = min(lumaE, minSM);\",\r\n\t\t\"    FxaaFloat maxWN = max(lumaN, lumaW);\",\r\n\t\t\"    FxaaFloat minWN = min(lumaN, lumaW);\",\r\n\t\t\"    FxaaFloat rangeMax = max(maxWN, maxESM);\",\r\n\t\t\"    FxaaFloat rangeMin = min(minWN, minESM);\",\r\n\t\t\"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\",\r\n\t\t\"    FxaaFloat range = rangeMax - rangeMin;\",\r\n\t\t\"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\",\r\n\t\t\"    FxaaBool earlyExit = range < rangeMaxClamped;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    if(earlyExit)\",\r\n\t\t\"        #if (FXAA_DISCARD == 1)\",\r\n\t\t\"            FxaaDiscard;\",\r\n\t\t\"        #else\",\r\n\t\t\"            return rgbyM;\",\r\n\t\t\"        #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    #if (FXAA_GATHER4_ALPHA == 0)\",\r\n\t\t\"        #if (FXAA_GLSL_100 == 1)\",\r\n\t\t\"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"        #else\",\r\n\t\t\"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"        #endif\",\r\n\t\t\"    #else\",\r\n\t\t\"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\r\n\t\t\"    #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat lumaNS = lumaN + lumaS;\",\r\n\t\t\"    FxaaFloat lumaWE = lumaW + lumaE;\",\r\n\t\t\"    FxaaFloat subpixRcpRange = 1.0/range;\",\r\n\t\t\"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\",\r\n\t\t\"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\",\r\n\t\t\"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat lumaNESE = lumaNE + lumaSE;\",\r\n\t\t\"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\",\r\n\t\t\"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\",\r\n\t\t\"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\",\r\n\t\t\"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\",\r\n\t\t\"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\",\r\n\t\t\"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\",\r\n\t\t\"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\",\r\n\t\t\"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\",\r\n\t\t\"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\",\r\n\t\t\"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\",\r\n\t\t\"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\",\r\n\t\t\"    FxaaBool horzSpan = edgeHorz >= edgeVert;\",\r\n\t\t\"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    if(!horzSpan) lumaN = lumaW;\",\r\n\t\t\"    if(!horzSpan) lumaS = lumaE;\",\r\n\t\t\"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\",\r\n\t\t\"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat gradientN = lumaN - lumaM;\",\r\n\t\t\"    FxaaFloat gradientS = lumaS - lumaM;\",\r\n\t\t\"    FxaaFloat lumaNN = lumaN + lumaM;\",\r\n\t\t\"    FxaaFloat lumaSS = lumaS + lumaM;\",\r\n\t\t\"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\",\r\n\t\t\"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\",\r\n\t\t\"    if(pairN) lengthSign = -lengthSign;\",\r\n\t\t\"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat2 posB;\",\r\n\t\t\"    posB.x = posM.x;\",\r\n\t\t\"    posB.y = posM.y;\",\r\n\t\t\"    FxaaFloat2 offNP;\",\r\n\t\t\"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\",\r\n\t\t\"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\",\r\n\t\t\"    if(!horzSpan) posB.x += lengthSign * 0.5;\",\r\n\t\t\"    if( horzSpan) posB.y += lengthSign * 0.5;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat2 posN;\",\r\n\t\t\"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\",\r\n\t\t\"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\",\r\n\t\t\"    FxaaFloat2 posP;\",\r\n\t\t\"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\",\r\n\t\t\"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\",\r\n\t\t\"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\",\r\n\t\t\"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\",\r\n\t\t\"    FxaaFloat subpixE = subpixC * subpixC;\",\r\n\t\t\"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    if(!pairN) lumaNN = lumaSS;\",\r\n\t\t\"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\",\r\n\t\t\"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\",\r\n\t\t\"    FxaaFloat subpixF = subpixD * subpixE;\",\r\n\t\t\"    FxaaBool lumaMLTZero = lumaMM < 0.0;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    lumaEndN -= lumaNN * 0.5;\",\r\n\t\t\"    lumaEndP -= lumaNN * 0.5;\",\r\n\t\t\"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\",\r\n\t\t\"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\",\r\n\t\t\"    FxaaBool doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\",\r\n\t\t\"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    if(doneNP) {\",\r\n\t\t\"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"        doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"        doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\",\r\n\t\t\"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\",\r\n\t\t\"        doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\",\r\n\t\t\"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"        #if (FXAA_QUALITY_PS > 3)\",\r\n\t\t\"        if(doneNP) {\",\r\n\t\t\"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"            doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"            doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\",\r\n\t\t\"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\",\r\n\t\t\"            doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\",\r\n\t\t\"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"            #if (FXAA_QUALITY_PS > 4)\",\r\n\t\t\"            if(doneNP) {\",\r\n\t\t\"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\",\r\n\t\t\"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\",\r\n\t\t\"                doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\",\r\n\t\t\"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                #if (FXAA_QUALITY_PS > 5)\",\r\n\t\t\"                if(doneNP) {\",\r\n\t\t\"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                    doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                    doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\",\r\n\t\t\"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\",\r\n\t\t\"                    doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\",\r\n\t\t\"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                    #if (FXAA_QUALITY_PS > 6)\",\r\n\t\t\"                    if(doneNP) {\",\r\n\t\t\"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                        doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                        doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\",\r\n\t\t\"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\",\r\n\t\t\"                        doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\",\r\n\t\t\"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                        #if (FXAA_QUALITY_PS > 7)\",\r\n\t\t\"                        if(doneNP) {\",\r\n\t\t\"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                            doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                            doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\",\r\n\t\t\"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\",\r\n\t\t\"                            doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\",\r\n\t\t\"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    #if (FXAA_QUALITY_PS > 8)\",\r\n\t\t\"    if(doneNP) {\",\r\n\t\t\"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"        doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"        doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\",\r\n\t\t\"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\",\r\n\t\t\"        doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\",\r\n\t\t\"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"        #if (FXAA_QUALITY_PS > 9)\",\r\n\t\t\"        if(doneNP) {\",\r\n\t\t\"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"            doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"            doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\",\r\n\t\t\"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\",\r\n\t\t\"            doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\",\r\n\t\t\"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"            #if (FXAA_QUALITY_PS > 10)\",\r\n\t\t\"            if(doneNP) {\",\r\n\t\t\"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\",\r\n\t\t\"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\",\r\n\t\t\"                doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\",\r\n\t\t\"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                #if (FXAA_QUALITY_PS > 11)\",\r\n\t\t\"                if(doneNP) {\",\r\n\t\t\"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                    doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                    doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\",\r\n\t\t\"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\",\r\n\t\t\"                    doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\",\r\n\t\t\"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                    #if (FXAA_QUALITY_PS > 12)\",\r\n\t\t\"                    if(doneNP) {\",\r\n\t\t\"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\r\n\t\t\"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\r\n\t\t\"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\r\n\t\t\"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\r\n\t\t\"                        doneN = abs(lumaEndN) >= gradientScaled;\",\r\n\t\t\"                        doneP = abs(lumaEndP) >= gradientScaled;\",\r\n\t\t\"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\",\r\n\t\t\"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\",\r\n\t\t\"                        doneNP = (!doneN) || (!doneP);\",\r\n\t\t\"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\",\r\n\t\t\"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                    }\",\r\n\t\t\"                    #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                }\",\r\n\t\t\"                #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"            }\",\r\n\t\t\"            #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"        }\",\r\n\t\t\"        #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    }\",\r\n\t\t\"    #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                        }\",\r\n\t\t\"                        #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                    }\",\r\n\t\t\"                    #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"                }\",\r\n\t\t\"                #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"            }\",\r\n\t\t\"            #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"        }\",\r\n\t\t\"        #endif\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    }\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat dstN = posM.x - posN.x;\",\r\n\t\t\"    FxaaFloat dstP = posP.x - posM.x;\",\r\n\t\t\"    if(!horzSpan) dstN = posM.y - posN.y;\",\r\n\t\t\"    if(!horzSpan) dstP = posP.y - posM.y;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\",\r\n\t\t\"    FxaaFloat spanLength = (dstP + dstN);\",\r\n\t\t\"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\",\r\n\t\t\"    FxaaFloat spanLengthRcp = 1.0/spanLength;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaBool directionN = dstN < dstP;\",\r\n\t\t\"    FxaaFloat dst = min(dstN, dstP);\",\r\n\t\t\"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\",\r\n\t\t\"    FxaaFloat subpixG = subpixF * subpixF;\",\r\n\t\t\"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\",\r\n\t\t\"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\",\r\n\t\t\"/*--------------------------------------------------------------------------*/\",\r\n\t\t\"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\",\r\n\t\t\"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\",\r\n\t\t\"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\",\r\n\t\t\"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\",\r\n\t\t\"    #if (FXAA_DISCARD == 1)\",\r\n\t\t\"        return FxaaTexTop(tex, posM);\",\r\n\t\t\"    #else\",\r\n\t\t\"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\",\r\n\t\t\"    #endif\",\r\n\t\t\"}\",\r\n\t\t\"/*==========================================================================*/\",\r\n\t\t\"#endif\",\r\n\t\t\"\",\r\n\t\t\"void main() {\",\r\n\t\t\"  gl_FragColor = FxaaPixelShader(\",\r\n\t\t\"    vUv,\",\r\n\t\t\"    vec4(0.0),\",\r\n\t\t\"    tDiffuse,\",\r\n\t\t\"    tDiffuse,\",\r\n\t\t\"    tDiffuse,\",\r\n\t\t\"    resolution,\",\r\n\t\t\"    vec4(0.0),\",\r\n\t\t\"    vec4(0.0),\",\r\n\t\t\"    vec4(0.0),\",\r\n\t\t\"    0.75,\",\r\n\t\t\"    0.166,\",\r\n\t\t\"    0.0833,\",\r\n\t\t\"    0.0,\",\r\n\t\t\"    0.0,\",\r\n\t\t\"    0.0,\",\r\n\t\t\"    vec4(0.0)\",\r\n\t\t\"  );\",\r\n\t\t\"\",\r\n\t\t\"  // TODO avoid querying texture twice for same texel\",\r\n\t\t\"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { FXAAShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/FXAAShader.js"],"sourceRoot":""}