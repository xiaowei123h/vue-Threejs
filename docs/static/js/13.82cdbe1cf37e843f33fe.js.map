{"version":3,"sources":["webpack:///src/views/postprocessing/webglPostprocessingUnrealBloomSelective.vue","webpack:///./src/views/postprocessing/webglPostprocessingUnrealBloomSelective.vue?73f3","webpack:///./src/views/postprocessing/webglPostprocessingUnrealBloomSelective.vue","webpack:///./src/components/jsm/shaders/LuminosityHighPassShader.js","webpack:///./src/components/jsm/postprocessing/UnrealBloomPass.js"],"names":["webglPostprocessingUnrealBloomSelective","data","vertexshader","fragmentshader","ENTIRE_SCENE","bloomLayer","params","darkMaterial","materials","renderer","scene","camera","controls","renderScene","bloomPass","bloomComposer","finalPass","finalComposer","raycaster","mouse","gui","folder","BLOOM_SCENE","mounted","_this","this","$THREE","Layers","set","exposure","bloomStrength","bloomThreshold","bloomRadius","MeshBasicMaterial","color","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","toneMapping","ReinhardToneMapping","document","getElementsByClassName","appendChild","domElement","Scene","PerspectiveCamera","position","lookAt","OrbitControls","maxPolarAngle","Math","PI","minDistance","maxDistance","addEventListener","render","add","AmbientLight","RenderPass","UnrealBloomPass","Vector2","threshold","strength","radius","EffectComposer","renderToScreen","addPass","ShaderPass","ShaderMaterial","uniforms","baseTexture","value","bloomTexture","renderTarget2","texture","vertexShader","fragmentShader","defines","needsSwap","Raycaster","onDocumentMouseClick","dat_gui_module","onChange","addFolder","toneMappingExposure","pow","Number","step","setupScene","onresize","width","innerWidth","height","$onWindowResize","beforeDestroy","destroy","methods","event","preventDefault","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","children","length","object","layers","toggle","traverse","disposeMaterial","geometry","IcosahedronBufferGeometry","i","Color","setHSL","random","material","sphere","Mesh","z","normalize","multiplyScalar","scale","setScalar","enable","obj","dispose","renderBloom","mask","darkenNonBloomed","restoreMaterial","isMesh","test","uuid","postprocessing_webglPostprocessingUnrealBloomSelective","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","LuminosityHighPassShader","shaderID","tDiffuse","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","join","d","UnrealBloomPass_UnrealBloomPass","resolution","Pass","call","undefined","clearColor","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","round","resy","renderTargetBright","WebGLRenderTarget","name","generateMipmaps","renderTargetHorizonal","push","renderTargetVertical","console","error","highPassShader","highPassUniforms","UniformsUtils","clone","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","CopyShader","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","enabled","oldClearColor","oldClearAlpha","basic","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","writeBuffer","readBuffer","deltaTime","maskActive","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction"],"mappings":"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","file":"static/js/13.82cdbe1cf37e843f33fe.js","sourcesContent":["<template>\r\n    <div class=\"webglPostprocessingUnrealBloomSelective-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> Click on a sphere to toggle bloom<br>By <a href=\"http://github.com/Temdog007\" target=\"_blank\" rel=\"noopener\">Temdog007</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { ShaderPass } from '@/components/jsm/postprocessing/ShaderPass.js'\r\nimport { UnrealBloomPass } from '@/components/jsm/postprocessing/UnrealBloomPass.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            vertexshader: null,\r\n            fragmentshader: null,\r\n            ENTIRE_SCENE: 0,\r\n            bloomLayer: null,\r\n            params: null,\r\n            darkMaterial: null,\r\n            materials: null,\r\n            renderer: null,\r\n            scene: null,\r\n            camera: null,\r\n            controls: null,\r\n            renderScene: null,\r\n            bloomPass: null,\r\n            bloomComposer: null,\r\n            finalPass: null,\r\n            finalComposer: null,\r\n            raycaster: null,\r\n            mouse: null,\r\n            gui: null,\r\n            folder: null,\r\n            BLOOM_SCENE: 1\r\n        }\r\n    },\r\n    mounted() {\r\n        this.vertexshader = `\r\n            varying vec2 vUv;\r\n\t\t\tvoid main() {\r\n\t\t\t\tvUv = uv;\r\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            }`\r\n        this.fragmentshader = `\r\n            uniform sampler2D baseTexture;\r\n\t\t\tuniform sampler2D bloomTexture;\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvoid main() {\r\n\t\t\t\tgl_FragColor = (texture2D(baseTexture, vUv) + vec4(1.0) * texture2D(bloomTexture, vUv));\r\n            }`\r\n        this.bloomLayer = new this.$THREE.Layers()\r\n        this.bloomLayer.set(this.BLOOM_SCENE)\r\n        this.params = {\r\n            exposure: 1,\r\n            bloomStrength: 5,\r\n            bloomThreshold: 0,\r\n            bloomRadius: 0,\r\n            scene: \"Scene with Glow\"\r\n        }\r\n        this.darkMaterial = new this.$THREE.MeshBasicMaterial({ color: \"black\" })\r\n        this.materials = {}\r\n        this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n        this.renderer.setPixelRatio(window.devicePixelRatio)\r\n        this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n        this.renderer.toneMapping = this.$THREE.ReinhardToneMapping\r\n        document.getElementsByClassName('webglPostprocessingUnrealBloomSelective-container')[0].appendChild(this.renderer.domElement)\r\n        this.scene = new this.$THREE.Scene()\r\n        this.camera = new this.$THREE.PerspectiveCamera(40, this.$webglInnerWidth / window.innerHeight, 1, 200)\r\n        this.camera.position.set(0, 0, 20)\r\n        this.camera.lookAt(0, 0, 0)\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n        this.controls.maxPolarAngle = Math.PI * 0.5\r\n        this.controls.minDistance = 1\r\n        this.controls.maxDistance = 100\r\n        this.controls.addEventListener('change', this.render)\r\n        this.scene.add(new this.$THREE.AmbientLight(0x404040))\r\n        this.renderScene = new RenderPass(this.scene, this.camera)\r\n        this.bloomPass = new UnrealBloomPass(new this.$THREE.Vector2(this.$webglInnerWidth, window.innerHeight), 1.5, 0.4, 0.85)\r\n        this.bloomPass.threshold = this.params.bloomThreshold\r\n        this.bloomPass.strength = this.params.bloomStrength\r\n        this.bloomPass.radius = this.params.bloomRadius\r\n        this.bloomComposer = new EffectComposer(this.renderer)\r\n        this.bloomComposer.renderToScreen = false\r\n        this.bloomComposer.addPass(this.renderScene)\r\n        this.bloomComposer.addPass(this.bloomPass)\r\n        this.finalPass = new ShaderPass(\r\n            new this.$THREE.ShaderMaterial({\r\n                uniforms: {\r\n                    baseTexture: { value: null },\r\n                    bloomTexture: { value: this.bloomComposer.renderTarget2.texture }\r\n                },\r\n                vertexShader: this.vertexshader,\r\n                fragmentShader: this.fragmentshader,\r\n                defines: {}\r\n            }), \"baseTexture\"\r\n        )\r\n        this.finalPass.needsSwap = true\r\n        this.finalComposer = new EffectComposer(this.renderer)\r\n        this.finalComposer.addPass(this.renderScene)\r\n        this.finalComposer.addPass(this.finalPass)\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.mouse = new this.$THREE.Vector2()\r\n        window.addEventListener('click', this.onDocumentMouseClick, false)\r\n        this.gui = new GUI()\r\n        this.gui.add(this.params, 'scene', [ 'Scene with Glow', 'Glow only', 'Scene only' ]).onChange((value) => {\r\n            switch (value) \t{\r\n                case 'Scene with Glow':\r\n                    this.bloomComposer.renderToScreen = false\r\n                    break\r\n                case 'Glow only':\r\n                    this.bloomComposer.renderToScreen = true\r\n                    break\r\n                case 'Scene only':\r\n                    // nothing to do\r\n                    break\r\n            }\r\n            this.render()\r\n        })\r\n        this.folder = this.gui.addFolder('Bloom Parameters')\r\n        this.folder.add(this.params, 'exposure', 0.1, 2).onChange((value) => {\r\n            this.renderer.toneMappingExposure = Math.pow(value, 4.0)\r\n            this.render()\r\n        })\r\n        this.folder.add(this.params, 'bloomThreshold', 0.0, 1.0).onChange((value) => {\r\n            this.bloomPass.threshold = Number(value)\r\n            this.render()\r\n        })\r\n        this.folder.add(this.params, 'bloomStrength', 0.0, 10.0).onChange((value) => {\r\n            this.bloomPass.strength = Number(value)\r\n            this.render()\r\n        })\r\n        this.folder.add(this.params, 'bloomRadius', 0.0, 1.0).step(0.01).onChange((value) => {\r\n            this.bloomPass.radius = Number(value)\r\n            this.render()\r\n        })\r\n        this.setupScene()\r\n        window.onresize = () => {\r\n            var width = window.innerWidth - 281\r\n            var height = window.innerHeight\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.bloomComposer.setSize(width, height)\r\n            this.finalComposer.setSize(width, height)\r\n            this.render()\r\n        }\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        onDocumentMouseClick(event) {\r\n            event.preventDefault()\r\n            this.mouse.x = (event.clientX / this.$webglInnerWidth) * 2 - 1\r\n            this.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1\r\n            this.raycaster.setFromCamera(this.mouse, this.camera)\r\n            var intersects = this.raycaster.intersectObjects(this.scene.children)\r\n            if (intersects.length > 0) {\r\n                var object = intersects[ 0 ].object\r\n                object.layers.toggle(this.BLOOM_SCENE)\r\n                this.render()\r\n            }\r\n        },\r\n        setupScene() {\r\n            this.scene.traverse(this.disposeMaterial)\r\n            this.scene.children.length = 0\r\n            var geometry = new this.$THREE.IcosahedronBufferGeometry(1, 15)\r\n            for (var i = 0; i < 50; i ++) {\r\n                var color = new this.$THREE.Color()\r\n                color.setHSL(Math.random(), 0.7, Math.random() * 0.2 + 0.05)\r\n                var material = new this.$THREE.MeshBasicMaterial({ color: color })\r\n                var sphere = new this.$THREE.Mesh(geometry, material)\r\n                sphere.position.x = Math.random() * 10 - 5\r\n                sphere.position.y = Math.random() * 10 - 5\r\n                sphere.position.z = Math.random() * 10 - 5\r\n                sphere.position.normalize().multiplyScalar(Math.random() * 4.0 + 2.0)\r\n                sphere.scale.setScalar(Math.random() * Math.random() + 0.5)\r\n                this.scene.add(sphere)\r\n                if (Math.random() < 0.25) sphere.layers.enable(this.BLOOM_SCENE)\r\n            }\r\n            this.render()\r\n        },\r\n        disposeMaterial(obj) {\r\n            if (obj.material) {\r\n                obj.material.dispose()\r\n            }\r\n        },\r\n        render() {\r\n            switch (this.params.scene) {\r\n                case 'Scene only':\r\n                    this.renderer.render(this.scene, this.camera)\r\n                    break\r\n                case 'Glow only':\r\n                    this.renderBloom(false)\r\n                    break\r\n                case 'Scene with Glow':\r\n                default:\r\n                    // render scene with bloom\r\n                    this.renderBloom(true)\r\n                    // render the entire scene, then render bloom scene on top\r\n                    this.finalComposer.render()\r\n                    break\r\n            }\r\n        },\r\n        renderBloom(mask) {\r\n            if (mask === true) {\r\n                this.scene.traverse(this.darkenNonBloomed)\r\n                this.bloomComposer.render()\r\n                this.scene.traverse(this.restoreMaterial)\r\n            } else {\r\n                this.camera.layers.set(this.BLOOM_SCENE)\r\n                this.bloomComposer.render()\r\n                this.camera.layers.set(this.ENTIRE_SCENE)\r\n            }\r\n        },\r\n        darkenNonBloomed(obj) {\r\n            if (obj.isMesh && this.bloomLayer.test(obj.layers) === false) {\r\n                this.materials[ obj.uuid ] = obj.material\r\n                obj.material = this.darkMaterial\r\n            }\r\n        },\r\n        restoreMaterial(obj) {\r\n            if (this.materials[ obj.uuid ]) {\r\n                obj.material = this.materials[ obj.uuid ]\r\n                delete this.materials[ obj.uuid ]\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingUnrealBloomSelective-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingUnrealBloomSelective.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingUnrealBloomSelective-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" Click on a sphere to toggle bloom\"),_c('br'),_vm._v(\"By \"),_c('a',{attrs:{\"href\":\"http://github.com/Temdog007\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Temdog007\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-b1a8b5da\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingUnrealBloomSelective.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-b1a8b5da\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingUnrealBloomSelective.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingUnrealBloomSelective.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingUnrealBloomSelective.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-b1a8b5da\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingUnrealBloomSelective.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-b1a8b5da\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingUnrealBloomSelective.vue\n// module id = null\n// module chunks = ","import {\r\n\tColor\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Luminosity\r\n * http://en.wikipedia.org/wiki/Luminosity\r\n */\r\n\r\nvar LuminosityHighPassShader = {\r\n\r\n\tshaderID: \"luminosityHighPass\",\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"luminosityThreshold\": { value: 1.0 },\r\n\t\t\"smoothWidth\": { value: 1.0 },\r\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\r\n\t\t\"defaultOpacity\": { value: 0.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform vec3 defaultColor;\",\r\n\t\t\"uniform float defaultOpacity;\",\r\n\t\t\"uniform float luminosityThreshold;\",\r\n\t\t\"uniform float smoothWidth;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\r\n\r\n\t\t\"\tfloat v = dot( texel.xyz, luma );\",\r\n\r\n\t\t\"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\r\n\r\n\t\t\"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\r\n\r\n\t\t\"\tgl_FragColor = mix( outputColor, texel, alpha );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { LuminosityHighPassShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/LuminosityHighPassShader.js","import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tLinearFilter,\r\n\tMeshBasicMaterial,\r\n\tRGBAFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { CopyShader } from \"../shaders/CopyShader.js\";\r\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\r\n\r\n/**\r\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\r\n * mip map chain of bloom textures and blurs them with different radii. Because\r\n * of the weighted combination of mips, and because larger blurs are done on\r\n * higher mips, this effect provides good quality and performance.\r\n *\r\n * Reference:\r\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\r\n */\r\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\r\n\r\n\tPass.call( this );\r\n\r\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\r\n\tthis.radius = radius;\r\n\tthis.threshold = threshold;\r\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\t// create color only once here, reuse it later inside the render function\r\n\tthis.clearColor = new Color( 0, 0, 0 );\r\n\r\n\t// render targets\r\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\r\n\tthis.renderTargetsHorizontal = [];\r\n\tthis.renderTargetsVertical = [];\r\n\tthis.nMips = 5;\r\n\tvar resx = Math.round( this.resolution.x / 2 );\r\n\tvar resy = Math.round( this.resolution.y / 2 );\r\n\r\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\r\n\tthis.renderTargetBright.texture.generateMipmaps = false;\r\n\r\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\r\n\r\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\r\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\r\n\r\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\r\n\r\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\r\n\r\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\r\n\t\trenderTargetVertical.texture.generateMipmaps = false;\r\n\r\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\r\n\r\n\t\tresx = Math.round( resx / 2 );\r\n\r\n\t\tresy = Math.round( resy / 2 );\r\n\r\n\t}\r\n\r\n\t// luminosity high pass material\r\n\r\n\tif ( LuminosityHighPassShader === undefined )\r\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\r\n\r\n\tvar highPassShader = LuminosityHighPassShader;\r\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\r\n\r\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\r\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\r\n\r\n\tthis.materialHighPassFilter = new ShaderMaterial( {\r\n\t\tuniforms: this.highPassUniforms,\r\n\t\tvertexShader: highPassShader.vertexShader,\r\n\t\tfragmentShader: highPassShader.fragmentShader,\r\n\t\tdefines: {}\r\n\t} );\r\n\r\n\t// Gaussian Blur Materials\r\n\tthis.separableBlurMaterials = [];\r\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\r\n\tvar resx = Math.round( this.resolution.x / 2 );\r\n\tvar resy = Math.round( this.resolution.y / 2 );\r\n\r\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\r\n\r\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\r\n\r\n\t\tresx = Math.round( resx / 2 );\r\n\r\n\t\tresy = Math.round( resy / 2 );\r\n\r\n\t}\r\n\r\n\t// Composite material\r\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\r\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\r\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\r\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\r\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\r\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\r\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\r\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\r\n\tthis.compositeMaterial.needsUpdate = true;\r\n\r\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\r\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\r\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\r\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\r\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\r\n\r\n\t// copy material\r\n\tif ( CopyShader === undefined ) {\r\n\r\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\r\n\r\n\t}\r\n\r\n\tvar copyShader = CopyShader;\r\n\r\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\r\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\r\n\r\n\tthis.materialCopy = new ShaderMaterial( {\r\n\t\tuniforms: this.copyUniforms,\r\n\t\tvertexShader: copyShader.vertexShader,\r\n\t\tfragmentShader: copyShader.fragmentShader,\r\n\t\tblending: AdditiveBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false,\r\n\t\ttransparent: true\r\n\t} );\r\n\r\n\tthis.enabled = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.oldClearColor = new Color();\r\n\tthis.oldClearAlpha = 1;\r\n\r\n\tthis.basic = new MeshBasicMaterial();\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\r\n\r\n};\r\n\r\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: UnrealBloomPass,\r\n\r\n\tdispose: function () {\r\n\r\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTargetBright.dispose();\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tvar resx = Math.round( width / 2 );\r\n\t\tvar resy = Math.round( height / 2 );\r\n\r\n\t\tthis.renderTargetBright.setSize( resx, resy );\r\n\r\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\r\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\r\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\tvar oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\trenderer.setClearColor( this.clearColor, 0 );\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t// Render input to screen\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis.fsQuad.material = this.basic;\r\n\t\t\tthis.basic.map = readBuffer.texture;\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// 1. Extract Bright Areas\r\n\r\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\r\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\r\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetBright );\r\n\t\trenderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// 2. Blur All the mips progressively\r\n\r\n\t\tvar inputRenderTarget = this.renderTargetBright;\r\n\r\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\r\n\r\n\t\t}\r\n\r\n\t\t// Composite All the mips\r\n\r\n\t\tthis.fsQuad.material = this.compositeMaterial;\r\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\r\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\r\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\r\n\t\trenderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// Blend it additively over the input texture\r\n\r\n\t\tthis.fsQuad.material = this.materialCopy;\r\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( readBuffer );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// Restore renderer settings\r\n\r\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t},\r\n\r\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\r\n\t\t\t\t\"SIGMA\": kernelRadius\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"colorTexture\": { value: null },\r\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\n\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat x = float(i);\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\r\n\t\t\t\t}\"\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetCompositeMaterial: function ( nMips ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t\"NUM_MIPS\": nMips\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"blurTexture1\": { value: null },\r\n\t\t\t\t\"blurTexture2\": { value: null },\r\n\t\t\t\t\"blurTexture3\": { value: null },\r\n\t\t\t\t\"blurTexture4\": { value: null },\r\n\t\t\t\t\"blurTexture5\": { value: null },\r\n\t\t\t\t\"dirtTexture\": { value: null },\r\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\r\n\t\t\t\t\"bloomFactors\": { value: null },\r\n\t\t\t\t\"bloomTintColors\": { value: null },\r\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D blurTexture1;\\\r\n\t\t\t\tuniform sampler2D blurTexture2;\\\r\n\t\t\t\tuniform sampler2D blurTexture3;\\\r\n\t\t\t\tuniform sampler2D blurTexture4;\\\r\n\t\t\t\tuniform sampler2D blurTexture5;\\\r\n\t\t\t\tuniform sampler2D dirtTexture;\\\r\n\t\t\t\tuniform float bloomStrength;\\\r\n\t\t\t\tuniform float bloomRadius;\\\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\r\n\t\t\t\t}\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\r\n\t\t\t\t}\"\r\n\t\t} );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\r\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\r\n\r\nexport { UnrealBloomPass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/UnrealBloomPass.js"],"sourceRoot":""}