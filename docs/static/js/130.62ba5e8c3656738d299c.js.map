{"version":3,"sources":["webpack:///src/views/shadowmap/webglShadowmapPcss.vue","webpack:///./src/views/shadowmap/webglShadowmapPcss.vue?9943","webpack:///./src/views/shadowmap/webglShadowmapPcss.vue"],"names":["webglShadowmapPcss","data","PCSS","PCSSGetShadow","stats","camera","scene","renderer","group","mounted","this","init","animate","methods","container","document","createElement","getElementsByClassName","appendChild","$THREE","Scene","fog","Fog","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","x","y","z","add","AmbientLight","light","DirectionalLight","set","castShadow","shadow","mapSize","width","height","far","CameraHelper","Group","geometry","SphereBufferGeometry","i","material","MeshPhongMaterial","color","Math","random","sphere","Mesh","normalize","multiplyScalar","receiveShadow","userData","phase","PI","groundMaterial","specular","ground","PlaneBufferGeometry","rotation","column","BoxBufferGeometry","shader","ShaderChunk","shadowmap_pars_fragment","replace","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","setClearColor","domElement","outputEncoding","sRGBEncoding","shadowMap","enabled","controls","OrbitControls","maxPolarAngle","minDistance","maxDistance","target","update","$Stats","dom","style","left","addEventListener","onWindowResize","$onWindowResize","time","performance","now","traverse","child","abs","sin","render","requestAnimationFrame","shadowmap_webglShadowmapPcss","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"4IAQAA,GACAC,KADA,WAEA,OACAC,KAAA,KACAC,cAAA,KACAC,MAAA,KACAC,OAAA,KACAC,MAAA,KACAC,SAAA,KACAC,MAAA,OAGAC,QAZA,WAaAC,KAAAR,KAAA,wvHAqEAQ,KAAAP,cAAA,qDAEAO,KAAAC,OACAD,KAAAE,WAEAC,SACAF,KADA,WAEA,IAAAG,EAAAC,SAAAC,cAAA,OACAD,SAAAE,uBAAA,mCAAAC,YAAAJ,GAEAJ,KAAAJ,MAAA,IAAAI,KAAAS,OAAAC,MACAV,KAAAJ,MAAAe,IAAA,IAAAX,KAAAS,OAAAG,IAAA,gBAEAZ,KAAAL,OAAA,IAAAK,KAAAS,OAAAI,kBAAA,GAAAb,KAAAc,iBAAAC,OAAAC,YAAA,OAKAhB,KAAAL,OAAAsB,SAAAC,EAAA,EACAlB,KAAAL,OAAAsB,SAAAE,EAAA,GACAnB,KAAAL,OAAAsB,SAAAG,EAAA,EACApB,KAAAJ,MAAAyB,IAAArB,KAAAL,QAEAK,KAAAJ,MAAAyB,IAAA,IAAArB,KAAAS,OAAAa,aAAA,UACA,IAAAC,EAAA,IAAAvB,KAAAS,OAAAe,iBAAA,eACAD,EAAAN,SAAAQ,IAAA,OACAF,EAAAG,YAAA,EACAH,EAAAI,OAAAC,QAAAC,MAAA,KACAN,EAAAI,OAAAC,QAAAE,OAAA,KACAP,EAAAI,OAAAhC,OAAAoC,IAAA,GACA/B,KAAAJ,MAAAyB,IAAAE,GAEAvB,KAAAJ,MAAAyB,IAAA,IAAArB,KAAAS,OAAAuB,aAAAT,EAAAI,OAAAhC,SAEAK,KAAAF,MAAA,IAAAE,KAAAS,OAAAwB,MACAjC,KAAAJ,MAAAyB,IAAArB,KAAAF,OAEA,IADA,IAAAoC,EAAA,IAAAlC,KAAAS,OAAA0B,qBAAA,UACAC,EAAA,EAAAA,EAAA,GAAAA,IAAA,CACA,IAAAC,EAAA,IAAArC,KAAAS,OAAA6B,mBAAAC,MAAA,SAAAC,KAAAC,WACAC,EAAA,IAAA1C,KAAAS,OAAAkC,KAAAT,EAAAG,GACAK,EAAAzB,SAAAC,EAAAsB,KAAAC,SAAA,GACAC,EAAAzB,SAAAG,EAAAoB,KAAAC,SAAA,GACAC,EAAAzB,SAAA2B,YACAF,EAAAzB,SAAA4B,eAAA,EAAAL,KAAAC,SAAA,GACAC,EAAAhB,YAAA,EACAgB,EAAAI,eAAA,EACAJ,EAAAK,SAAAC,MAAAR,KAAAC,SAAAD,KAAAS,GACAjD,KAAAF,MAAAuB,IAAAqB,GAGA,IAAAQ,EAAA,IAAAlD,KAAAS,OAAA6B,mBAAAC,MAAA,QAAAY,SAAA,UACAC,EAAA,IAAApD,KAAAS,OAAAkC,KAAA,IAAA3C,KAAAS,OAAA4C,oBAAA,aAAAH,GACAE,EAAAE,SAAApC,GAAAsB,KAAAS,GAAA,EACAG,EAAAN,eAAA,EACA9C,KAAAJ,MAAAyB,IAAA+B,GAEA,IAAAG,EAAA,IAAAvD,KAAAS,OAAAkC,KAAA,IAAA3C,KAAAS,OAAA+C,kBAAA,OAAAN,GACAK,EAAAtC,SAAAE,EAAA,EACAoC,EAAA7B,YAAA,EACA6B,EAAAT,eAAA,EACA9C,KAAAJ,MAAAyB,IAAAkC,GAEA,IAAAE,EAAAzD,KAAAS,OAAAiD,YAAAC,wBAMAF,GALAA,IAAAG,QACA,uBACA,uBACA5D,KAAAR,OAEAoE,QACA,kCACA5D,KAAAP,cACA,mCAEAO,KAAAS,OAAAiD,YAAAC,wBAAAF,EAEAzD,KAAAH,SAAA,IAAAG,KAAAS,OAAAoD,eAAAC,WAAA,IACA9D,KAAAH,SAAAkE,cAAAhD,OAAAiD,kBACAhE,KAAAH,SAAAoE,QAAAjE,KAAAc,iBAAAC,OAAAC,aACAhB,KAAAH,SAAAqE,cAAAlE,KAAAJ,MAAAe,IAAA4B,OACAnC,EAAAI,YAAAR,KAAAH,SAAAsE,YACAnE,KAAAH,SAAAuE,eAAApE,KAAAS,OAAA4D,aACArE,KAAAH,SAAAyE,UAAAC,SAAA,EAEA,IAAAC,EAAA,IAAAC,EAAA,EAAAzE,KAAAL,OAAAK,KAAAH,SAAAsE,YACAK,EAAAE,cAAA,GAAAlC,KAAAS,GACAuB,EAAAG,YAAA,GACAH,EAAAI,YAAA,GACAJ,EAAAK,OAAApD,IAAA,SACA+C,EAAAM,SAEA9E,KAAAN,MAAA,IAAAM,KAAA+E,OACA/E,KAAAN,MAAAsF,IAAAC,MAAAC,KAAA,QACA9E,EAAAI,YAAAR,KAAAN,MAAAsF,KAEAjE,OAAAoE,iBAAA,SAAAnF,KAAAoF,gBAAA,IAEAA,eA3FA,WA4FApF,KAAAqF,gBAAArF,KAAAL,OAAAK,KAAAH,WAEAK,QA9FA,WA+FA,IAAAoF,EAAAC,YAAAC,MAAA,IACAxF,KAAAF,MAAA2F,SAAA,SAAAC,GACA,UAAAA,EAAA3C,WACA2C,EAAAzE,SAAAE,EAAA,EAAAqB,KAAAmD,IAAAnD,KAAAoD,IAAAN,EAAAI,EAAA3C,SAAAC,QAAA,MAGAhD,KAAAH,SAAAgG,OAAA7F,KAAAJ,MAAAI,KAAAL,QACAK,KAAAN,MAAAoF,SACAgB,sBAAA9F,KAAAE,YCnMe6F,GADEF,OAFjB,WAA0B7F,KAAagG,eAAbhG,KAAuCiG,MAAAC,GAAwB,OAA/DlG,KAA+DmG,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAbrG,KAAagG,eAA0BE,EAAvClG,KAAuCiG,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAiBI,YAAA,iCAA2CJ,EAAA,OAAYK,OAAOC,GAAA,UAA9IxG,KAA2JyG,GAAA,0CAAAP,EAAA,KAA2DK,OAAOG,KAAA,4BAA7N1G,KAA8PyG,GAAA,2BCElS,IAcAE,EAdyBC,EAAQ,OAcjCC,CACEvH,EACAyG,GATF,EAVA,SAAAe,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/130.62ba5e8c3656738d299c.js","sourcesContent":["<template>\r\n    <div class=\"webglShadowmapPcss-container\">\r\n        <div id=\"info\">Percent Closer Soft-Shadows (PCSS) by <a href=\"http://eduperiment.com\">spidersharma03</a></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            PCSS: null,\r\n            PCSSGetShadow: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tgroup: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.PCSS = `\r\n            #define LIGHT_WORLD_SIZE 0.005\r\n            #define LIGHT_FRUSTUM_WIDTH 3.75\r\n            #define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)\r\n            #define NEAR_PLANE 9.5\r\n            #define NUM_SAMPLES 17\r\n            #define NUM_RINGS 11\r\n            #define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES\r\n            #define PCF_NUM_SAMPLES NUM_SAMPLES\r\n            vec2 poissonDisk[NUM_SAMPLES];\r\n            void initPoissonSamples(const in vec2 randomSeed) {\r\n                float ANGLE_STEP = PI2 * float(NUM_RINGS) / float(NUM_SAMPLES);\r\n                float INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);\r\n                // jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\r\n                float angle = rand(randomSeed) * PI2;\r\n                float radius = INV_NUM_SAMPLES;\r\n                float radiusStep = radius;\r\n                for(int i = 0; i < NUM_SAMPLES; i ++) {\r\n                    poissonDisk[i] = vec2(cos(angle), sin(angle)) * pow(radius, 0.75);\r\n                    radius += radiusStep;\r\n                    angle += ANGLE_STEP;\r\n                }\r\n            }\r\n            float penumbraSize(const in float zReceiver, const in float zBlocker) { // Parallel plane estimation\r\n                return (zReceiver - zBlocker) / zBlocker;\r\n            }\r\n            float findBlocker(sampler2D shadowMap, const in vec2 uv, const in float zReceiver) {\r\n                // This uses similar triangles to compute what\r\n                // area of the shadow map we should search\r\n                float searchRadius = LIGHT_SIZE_UV * (zReceiver - NEAR_PLANE) / zReceiver;\r\n                float blockerDepthSum = 0.0;\r\n                int numBlockers = 0;\r\n                for(int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++) {\r\n                    float shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));\r\n                    if (shadowMapDepth < zReceiver) {\r\n                        blockerDepthSum += shadowMapDepth;\r\n                        numBlockers ++;\r\n                    }\r\n                }\r\n                if(numBlockers == 0) return -1.0;\r\n                return blockerDepthSum / float(numBlockers);\r\n            }\r\n            float PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius) {\r\n                float sum = 0.0;\r\n                for(int i = 0; i < PCF_NUM_SAMPLES; i ++) {\r\n                    float depth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[ i ] * filterRadius));\r\n                    if(zReceiver <= depth) sum += 1.0;\r\n                }\r\n                for(int i = 0; i < PCF_NUM_SAMPLES; i ++) {\r\n                    float depth = unpackRGBAToDepth(texture2D(shadowMap, uv + -poissonDisk[ i ].yx * filterRadius));\r\n                    if(zReceiver <= depth) sum += 1.0;\r\n                }\r\n                return sum / (2.0 * float(PCF_NUM_SAMPLES));\r\n            }\r\n            float PCSS (sampler2D shadowMap, vec4 coords) {\r\n                vec2 uv = coords.xy;\r\n                float zReceiver = coords.z; // Assumed to be eye-space z in this code\r\n                initPoissonSamples(uv);\r\n                // STEP 1: blocker search\r\n                float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver);\r\n                //There are no occluders so early out (this saves filtering)\r\n                if(avgBlockerDepth == -1.0) return 1.0;\r\n                // STEP 2: penumbra size\r\n                float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\r\n                float filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;\r\n                // STEP 3: filtering\r\n                //return avgBlockerDepth;\r\n                return PCF_Filter(shadowMap, uv, zReceiver, filterRadius);\r\n            }`\r\n        this.PCSSGetShadow = `\r\n            return PCSS(shadowMap, shadowCoord);`\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            var container = document.createElement('div')\r\n            document.getElementsByClassName('webglShadowmapPcss-container')[0].appendChild(container)\r\n            // scene\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.fog = new this.$THREE.Fog(0xcce0ff, 5, 100)\r\n            // camera\r\n            this.camera = new this.$THREE.PerspectiveCamera(30, this.$webglInnerWidth / window.innerHeight, 1, 10000)\r\n            // We use this particular this.camera position in order to expose a bug that can sometimes happen presumably\r\n            // due to lack of precision when interpolating values over really large triangles.\r\n            // It reproduced on at least NVIDIA GTX 1080 and GTX 1050 Ti GPUs when the ground plane was not\r\n            // subdivided into segments.\r\n            this.camera.position.x = 7\r\n            this.camera.position.y = 13\r\n            this.camera.position.z = 7\r\n            this.scene.add(this.camera)\r\n            // lights\r\n            this.scene.add(new this.$THREE.AmbientLight(0x666666))\r\n            var light = new this.$THREE.DirectionalLight(0xdfebff, 1.75)\r\n            light.position.set(2, 8, 4)\r\n            light.castShadow = true\r\n            light.shadow.mapSize.width = 1024\r\n            light.shadow.mapSize.height = 1024\r\n            light.shadow.camera.far = 20\r\n            this.scene.add(light)\r\n            // this.scene.add(new DirectionalLightHelper(light))\r\n            this.scene.add(new this.$THREE.CameraHelper(light.shadow.camera))\r\n            // group\r\n            this.group = new this.$THREE.Group()\r\n            this.scene.add(this.group)\r\n            var geometry = new this.$THREE.SphereBufferGeometry(0.3, 20, 20)\r\n            for (var i = 0; i < 20; i ++) {\r\n                var material = new this.$THREE.MeshPhongMaterial({ color: Math.random() * 0xffffff })\r\n                var sphere = new this.$THREE.Mesh(geometry, material)\r\n                sphere.position.x = Math.random() - 0.5\r\n                sphere.position.z = Math.random() - 0.5\r\n                sphere.position.normalize()\r\n                sphere.position.multiplyScalar(Math.random() * 2 + 1)\r\n                sphere.castShadow = true\r\n                sphere.receiveShadow = true\r\n                sphere.userData.phase = Math.random() * Math.PI\r\n                this.group.add(sphere)\r\n            }\r\n            // ground\r\n            var groundMaterial = new this.$THREE.MeshPhongMaterial({ color: 0x404040, specular: 0x111111 })\r\n            var ground = new this.$THREE.Mesh(new this.$THREE.PlaneBufferGeometry(20000, 20000, 8, 8), groundMaterial)\r\n            ground.rotation.x = - Math.PI / 2\r\n            ground.receiveShadow = true\r\n            this.scene.add(ground)\r\n            // column\r\n            var column = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(1, 4, 1), groundMaterial)\r\n            column.position.y = 2\r\n            column.castShadow = true\r\n            column.receiveShadow = true\r\n            this.scene.add(column)\r\n            // overwrite shadowmap code\r\n            var shader = this.$THREE.ShaderChunk.shadowmap_pars_fragment\r\n            shader = shader.replace(\r\n                '#ifdef USE_SHADOWMAP',\r\n                '#ifdef USE_SHADOWMAP' +\r\n                this.PCSS\r\n            )\r\n            shader = shader.replace(\r\n                '#if defined(SHADOWMAP_TYPE_PCF)',\r\n                this.PCSSGetShadow +\r\n                '#if defined(SHADOWMAP_TYPE_PCF)'\r\n            )\r\n            this.$THREE.ShaderChunk.shadowmap_pars_fragment = shader\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.setClearColor(this.scene.fog.color)\r\n            container.appendChild(this.renderer.domElement)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.renderer.shadowMap.enabled = true\r\n            // controls\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.maxPolarAngle = Math.PI * 0.5\r\n            controls.minDistance = 10\r\n            controls.maxDistance = 75\r\n            controls.target.set(0, 2.5, 0)\r\n            controls.update()\r\n            // performance monitor\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            var time = performance.now() / 1000\r\n            this.group.traverse((child) => {\r\n                if ('phase' in child.userData) {\r\n                    child.position.y = Math.abs(Math.sin(time + child.userData.phase)) * 4 + 0.3\r\n                }\r\n            })\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.stats.update()\r\n            requestAnimationFrame(this.animate)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglShadowmapPcss-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    background-color: #cce0ff;\r\n    color: #000;\r\n}\r\n#info a {\r\n    color: #08f;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/shadowmap/webglShadowmapPcss.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglShadowmapPcss-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_vm._v(\"Percent Closer Soft-Shadows (PCSS) by \"),_c('a',{attrs:{\"href\":\"http://eduperiment.com\"}},[_vm._v(\"spidersharma03\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5cab269d\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/shadowmap/webglShadowmapPcss.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5cab269d\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglShadowmapPcss.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadowmapPcss.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadowmapPcss.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5cab269d\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglShadowmapPcss.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-5cab269d\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/shadowmap/webglShadowmapPcss.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}