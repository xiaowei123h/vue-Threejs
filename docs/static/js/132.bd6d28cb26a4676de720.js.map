{"version":3,"sources":["webpack:///src/views/physics/physicsAmmoRope.vue","webpack:///./src/views/physics/physicsAmmoRope.vue?d421","webpack:///./src/views/physics/physicsAmmoRope.vue"],"names":["physicsAmmoRope","data","container","stats","camera","controls","scene","renderer","textureLoader","clock","gravityConstant","collisionConfiguration","dispatcher","broadphase","solver","softBodySolver","physicsWorld","rigidBodies","margin","hinge","rope","transformAux1","armMovement","mounted","_this","this","$THREE","Clock","Ammo","then","AmmoLib","init","animate","methods","initGraphics","initPhysics","createObjects","initInput","document","getElementById","PerspectiveCamera","$webglInnerWidth","window","innerHeight","Scene","background","Color","position","set","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","appendChild","domElement","OrbitControls","target","update","TextureLoader","ambientLight","AmbientLight","add","light","DirectionalLight","castShadow","shadow","left","right","top","bottom","near","far","mapSize","x","y","$Stats","dom","style","addEventListener","onWindowResize","btSoftBodyRigidBodyCollisionConfiguration","btCollisionDispatcher","btDbvtBroadphase","btSequentialImpulseConstraintSolver","btDefaultSoftBodySolver","btSoftRigidDynamicsWorld","setGravity","btVector3","getWorldInfo","set_m_gravity","btTransform","_this2","pos","Vector3","quat","Quaternion","ground","createParalellepiped","MeshPhongMaterial","color","receiveShadow","load","texture","wrapS","RepeatWrapping","wrapT","repeat","material","map","needsUpdate","ball","Mesh","SphereBufferGeometry","ballShape","btSphereShape","setMargin","createRigidBody","userData","physicsBody","setFriction","z0","brickHeight","j","oddRow","z","nRow","numBricksLength","i","brickLengthCurrent","brickMassCurrent","brick","brickLength","createMaterial","ropePos","clone","ropeGeometry","BufferGeometry","ropeMaterial","LineBasicMaterial","ropePositions","ropeIndices","ropeNumSegments","push","ropeLength","setIndex","BufferAttribute","Uint16Array","setAttribute","Float32Array","computeBoundingSphere","LineSegments","softBodyHelpers","btSoftBodyHelpers","ropeStart","ropeEnd","ropeSoftBody","CreateRope","sbConfig","get_m_cfg","set_viterations","set_piterations","setTotalMass","castObject","btCollisionObject","getCollisionShape","addSoftBody","setActivationState","pylonHeight","baseMaterial","base","pylon","arm","armLength","appendAnchor","pivotA","pivotB","axis","btHingeConstraint","addConstraint","sx","sy","sz","mass","threeObject","BoxBufferGeometry","shape","btBoxShape","physicsShape","copy","quaternion","transform","setIdentity","setOrigin","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","createRandomColor","Math","floor","random","_this3","event","keyCode","$onWindowResize","requestAnimationFrame","render","deltaTime","getDelta","updatePhysics","enableAngularMotor","stepSimulation","softBody","geometry","attributes","array","numVerts","length","nodes","get_m_nodes","indexFloat","nodePos","at","get_m_x","il","objThree","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","physics_physicsAmmoRope","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/132.bd6d28cb26a4676de720.js","sourcesContent":["<template>\r\n    <div class=\"physicsAmmoRope-container\">\r\n        <div id=\"info\">Ammo.js physics soft body rope demo<br>Press Q or A to move the arm.</div>\r\n\t    <div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            // Graphics variables\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            controls: null,\r\n            scene: null,\r\n            renderer: null,\r\n            textureLoader: null,\r\n            clock: null,\r\n            // Physics variables\r\n            gravityConstant: - 9.8,\r\n            collisionConfiguration: null,\r\n            dispatcher: null,\r\n            broadphase: null,\r\n            solver: null,\r\n            softBodySolver: null,\r\n            physicsWorld: null,\r\n            rigidBodies: [],\r\n            margin: 0.05,\r\n            hinge: null,\r\n            rope: null,\r\n            transformAux1: null,\r\n            armMovement: 0,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        Ammo().then((AmmoLib) => {\r\n\t\t\tAmmo = AmmoLib\r\n\t\t\tthis.init()\r\n\t\t\tthis.animate()\r\n\t\t})\r\n    },\r\n    methods: {\r\n        init() {\r\n\t\t\tthis.initGraphics()\r\n\t\t\tthis.initPhysics()\r\n\t\t\tthis.createObjects()\r\n\t\t\tthis.initInput()\r\n        },\r\n        initGraphics() {\r\n\t\t\tthis.container = document.getElementById('container')\r\n\t\t\tthis.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.2, 2000)\r\n\t\t\tthis.scene = new this.$THREE.Scene()\r\n\t\t\tthis.scene.background = new this.$THREE.Color(0xbfd1e5)\r\n\t\t\tthis.camera.position.set(- 7, 5, 8)\r\n\t\t\tthis.renderer = new this.$THREE.WebGLRenderer()\r\n\t\t\tthis.renderer.setPixelRatio(window.devicePixelRatio)\r\n\t\t\tthis.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n\t\t\tthis.renderer.shadowMap.enabled = true\r\n\t\t\tthis.container.appendChild(this.renderer.domElement)\r\n\t\t\tthis.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n\t\t\tthis.controls.target.set(0, 2, 0)\r\n\t\t\tthis.controls.update()\r\n\t\t\tthis.textureLoader = new this.$THREE.TextureLoader()\r\n\t\t\tvar ambientLight = new this.$THREE.AmbientLight(0x404040)\r\n\t\t\tthis.scene.add(ambientLight)\r\n\t\t\tvar light = new this.$THREE.DirectionalLight(0xffffff, 1)\r\n\t\t\tlight.position.set(- 10, 10, 5)\r\n\t\t\tlight.castShadow = true\r\n\t\t\tvar d = 10\r\n\t\t\tlight.shadow.camera.left = - d\r\n\t\t\tlight.shadow.camera.right = d\r\n\t\t\tlight.shadow.camera.top = d\r\n\t\t\tlight.shadow.camera.bottom = - d\r\n\t\t\tlight.shadow.camera.near = 2\r\n\t\t\tlight.shadow.camera.far = 50\r\n\t\t\tlight.shadow.mapSize.x = 1024\r\n\t\t\tlight.shadow.mapSize.y = 1024\r\n\t\t\tthis.scene.add(light)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n\t\t\tthis.stats.domElement.style.position = 'absolute'\r\n\t\t\tthis.stats.domElement.style.top = '0px'\r\n\t\t\tthis.container.appendChild(this.stats.domElement)\r\n\t\t\t//\r\n\t\t\twindow.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        initPhysics() {\r\n\t\t\t// Physics configuration\r\n\t\t\tthis.collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration()\r\n\t\t\tthis.dispatcher = new Ammo.btCollisionDispatcher(this.collisionConfiguration)\r\n\t\t\tthis.broadphase = new Ammo.btDbvtBroadphase()\r\n\t\t\tthis.solver = new Ammo.btSequentialImpulseConstraintSolver()\r\n\t\t\tthis.softBodySolver = new Ammo.btDefaultSoftBodySolver()\r\n\t\t\tthis.physicsWorld = new Ammo.btSoftRigidDynamicsWorld(this.dispatcher, this.broadphase, this.solver, this.collisionConfiguration, this.softBodySolver)\r\n\t\t\tthis.physicsWorld.setGravity(new Ammo.btVector3(0, this.gravityConstant, 0))\r\n\t\t\tthis.physicsWorld.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, this.gravityConstant, 0))\r\n\t\t\tthis.transformAux1 = new Ammo.btTransform()\r\n        },\r\n        createObjects() {\r\n\t\t\tvar pos = new this.$THREE.Vector3()\r\n\t\t\tvar quat = new this.$THREE.Quaternion()\r\n\t\t\t// Ground\r\n\t\t\tpos.set(0, - 0.5, 0)\r\n\t\t\tquat.set(0, 0, 0, 1)\r\n\t\t\tvar ground = this.createParalellepiped(40, 1, 40, 0, pos, quat, new this.$THREE.MeshPhongMaterial({ color: 0xFFFFFF }))\r\n\t\t\tground.castShadow = true\r\n\t\t\tground.receiveShadow = true\r\n\t\t\tthis.textureLoader.load(\"static/textures/grid.png\", (texture) => {\r\n\t\t\t\ttexture.wrapS = this.$THREE.RepeatWrapping\r\n\t\t\t\ttexture.wrapT = this.$THREE.RepeatWrapping\r\n\t\t\t\ttexture.repeat.set(40, 40)\r\n\t\t\t\tground.material.map = texture\r\n\t\t\t\tground.material.needsUpdate = true\r\n\t\t\t})\r\n\t\t\t// Ball\r\n\t\t\tvar ballMass = 1.2\r\n\t\t\tvar ballRadius = 0.6\r\n\t\t\tvar ball = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(ballRadius, 20, 20), new this.$THREE.MeshPhongMaterial({ color: 0x202020 }))\r\n\t\t\tball.castShadow = true\r\n\t\t\tball.receiveShadow = true\r\n\t\t\tvar ballShape = new Ammo.btSphereShape(ballRadius)\r\n\t\t\tballShape.setMargin(this.margin)\r\n\t\t\tpos.set(- 3, 2, 0)\r\n\t\t\tquat.set(0, 0, 0, 1)\r\n            this.createRigidBody(ball, ballShape, ballMass, pos, quat)\r\n\t\t\tball.userData.physicsBody.setFriction(0.5)\r\n\t\t\t// Wall\r\n\t\t\tvar brickMass = 0.5\r\n\t\t\tvar brickLength = 1.2\r\n\t\t\tvar brickDepth = 0.6\r\n\t\t\tvar brickHeight = brickLength * 0.5\r\n\t\t\tvar numBricksLength = 6\r\n\t\t\tvar numBricksHeight = 8\r\n\t\t\tvar z0 = - numBricksLength * brickLength * 0.5\r\n\t\t\tpos.set(0, brickHeight * 0.5, z0)\r\n\t\t\tquat.set(0, 0, 0, 1)\r\n\t\t\tfor (var j = 0; j < numBricksHeight; j ++) {\r\n\t\t\t\tvar oddRow = (j % 2) == 1\r\n\t\t\t\tpos.z = z0\r\n\t\t\t\tif (oddRow) {\r\n\t\t\t\t\tpos.z -= 0.25 * brickLength\r\n\t\t\t\t}\r\n\t\t\t\tvar nRow = oddRow ? numBricksLength + 1 : numBricksLength\r\n\t\t\t\tfor (var i = 0; i < nRow; i ++) {\r\n\t\t\t\t\tvar brickLengthCurrent = brickLength\r\n\t\t\t\t\tvar brickMassCurrent = brickMass\r\n\t\t\t\t\tif (oddRow && (i == 0 || i == nRow - 1)) {\r\n\t\t\t\t\t\tbrickLengthCurrent *= 0.5\r\n\t\t\t\t\t\tbrickMassCurrent *= 0.5\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar brick = this.createParalellepiped(brickDepth, brickHeight, brickLengthCurrent, brickMassCurrent, pos, quat, this.createMaterial())\r\n\t\t\t\t\tbrick.castShadow = true\r\n\t\t\t\t\tbrick.receiveShadow = true\r\n\t\t\t\t\tif (oddRow && (i == 0 || i == nRow - 2)) {\r\n\t\t\t\t\t\tpos.z += 0.75 * brickLength\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpos.z += brickLength\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpos.y += brickHeight\r\n\t\t\t}\r\n\t\t\t// The rope\r\n\t\t\t// Rope graphic object\r\n\t\t\tvar ropeNumSegments = 10\r\n\t\t\tvar ropeLength = 4\r\n\t\t\tvar ropeMass = 3\r\n\t\t\tvar ropePos = ball.position.clone()\r\n\t\t\tropePos.y += ballRadius\r\n\t\t\tvar segmentLength = ropeLength / ropeNumSegments\r\n\t\t\tvar ropeGeometry = new this.$THREE.BufferGeometry()\r\n\t\t\tvar ropeMaterial = new this.$THREE.LineBasicMaterial({ color: 0x000000 })\r\n\t\t\tvar ropePositions = []\r\n\t\t\tvar ropeIndices = []\r\n\t\t\tfor (var i = 0; i < ropeNumSegments + 1; i ++) {\r\n\t\t\t\tropePositions.push(ropePos.x, ropePos.y + i * segmentLength, ropePos.z)\r\n\t\t\t}\r\n\t\t\tfor (var i = 0; i < ropeNumSegments; i ++) {\r\n\t\t\t\tropeIndices.push(i, i + 1)\r\n\t\t\t}\r\n\t\t\tropeGeometry.setIndex(new this.$THREE.BufferAttribute(new Uint16Array(ropeIndices), 1))\r\n\t\t\tropeGeometry.setAttribute('position', new this.$THREE.BufferAttribute(new Float32Array(ropePositions), 3))\r\n\t\t\tropeGeometry.computeBoundingSphere()\r\n\t\t\tthis.rope = new this.$THREE.LineSegments(ropeGeometry, ropeMaterial)\r\n\t\t\tthis.rope.castShadow = true\r\n\t\t\tthis.rope.receiveShadow = true\r\n\t\t\tthis.scene.add(this.rope)\r\n\t\t\t// Rope physic object\r\n\t\t\tvar softBodyHelpers = new Ammo.btSoftBodyHelpers()\r\n\t\t\tvar ropeStart = new Ammo.btVector3(ropePos.x, ropePos.y, ropePos.z)\r\n\t\t\tvar ropeEnd = new Ammo.btVector3(ropePos.x, ropePos.y + ropeLength, ropePos.z)\r\n\t\t\tvar ropeSoftBody = softBodyHelpers.CreateRope(this.physicsWorld.getWorldInfo(), ropeStart, ropeEnd, ropeNumSegments - 1, 0)\r\n\t\t\tvar sbConfig = ropeSoftBody.get_m_cfg()\r\n\t\t\tsbConfig.set_viterations(10)\r\n\t\t\tsbConfig.set_piterations(10)\r\n\t\t\tropeSoftBody.setTotalMass(ropeMass, false)\r\n\t\t\tAmmo.castObject(ropeSoftBody, Ammo.btCollisionObject).getCollisionShape().setMargin(this.margin * 3)\r\n            this.physicsWorld.addSoftBody(ropeSoftBody, 1, - 1)\r\n\t\t\tthis.rope.userData.physicsBody = ropeSoftBody\r\n\t\t\t// Disable deactivation\r\n\t\t\tropeSoftBody.setActivationState(4)\r\n\t\t\t// The base\r\n\t\t\tvar armMass = 2\r\n\t\t\tvar armLength = 3\r\n\t\t\tvar pylonHeight = ropePos.y + ropeLength\r\n\t\t\tvar baseMaterial = new this.$THREE.MeshPhongMaterial({ color: 0x606060 })\r\n\t\t\tpos.set(ropePos.x, 0.1, ropePos.z - armLength)\r\n\t\t\tquat.set(0, 0, 0, 1)\r\n\t\t\tvar base = this.createParalellepiped(1, 0.2, 1, 0, pos, quat, baseMaterial)\r\n\t\t\tbase.castShadow = true\r\n\t\t\tbase.receiveShadow = true\r\n\t\t\tpos.set(ropePos.x, 0.5 * pylonHeight, ropePos.z - armLength)\r\n\t\t\tvar pylon = this.createParalellepiped(0.4, pylonHeight, 0.4, 0, pos, quat, baseMaterial)\r\n\t\t\tpylon.castShadow = true\r\n\t\t\tpylon.receiveShadow = true\r\n\t\t\tpos.set(ropePos.x, pylonHeight + 0.2, ropePos.z - 0.5 * armLength)\r\n\t\t\tvar arm = this.createParalellepiped(0.4, 0.4, armLength + 0.4, armMass, pos, quat, baseMaterial)\r\n\t\t\tarm.castShadow = true\r\n\t\t\tarm.receiveShadow = true\r\n\t\t\t// Glue the rope extremes to the ball and the arm\r\n\t\t\tvar influence = 1\r\n\t\t\tropeSoftBody.appendAnchor(0, ball.userData.physicsBody, true, influence)\r\n\t\t\tropeSoftBody.appendAnchor(ropeNumSegments, arm.userData.physicsBody, true, influence)\r\n\t\t\t// Hinge varraint to move the arm\r\n\t\t\tvar pivotA = new Ammo.btVector3(0, pylonHeight * 0.5, 0)\r\n\t\t\tvar pivotB = new Ammo.btVector3(0, - 0.2, - armLength * 0.5)\r\n\t\t\tvar axis = new Ammo.btVector3(0, 1, 0)\r\n\t\t\tthis.hinge = new Ammo.btHingeConstraint(pylon.userData.physicsBody, arm.userData.physicsBody, pivotA, pivotB, axis, axis, true)\r\n\t\t\tthis.physicsWorld.addConstraint(this.hinge, true)\r\n        },\r\n        createParalellepiped(sx, sy, sz, mass, pos, quat, material) {\r\n\t\t\tvar threeObject = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(sx, sy, sz, 1, 1, 1), material)\r\n\t\t\tvar shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5))\r\n\t\t\tshape.setMargin(this.margin)\r\n\t\t\tthis.createRigidBody(threeObject, shape, mass, pos, quat)\r\n\t\t\treturn threeObject\r\n        },\r\n        createRigidBody(threeObject, physicsShape, mass, pos, quat) {\r\n\t\t\tthreeObject.position.copy(pos)\r\n\t\t\tthreeObject.quaternion.copy(quat)\r\n\t\t\tvar transform = new Ammo.btTransform()\r\n\t\t\ttransform.setIdentity()\r\n\t\t\ttransform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z))\r\n\t\t\ttransform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w))\r\n\t\t\tvar motionState = new Ammo.btDefaultMotionState(transform)\r\n\t\t\tvar localInertia = new Ammo.btVector3(0, 0, 0)\r\n\t\t\tphysicsShape.calculateLocalInertia(mass, localInertia)\r\n\t\t\tvar rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia)\r\n\t\t\tvar body = new Ammo.btRigidBody(rbInfo)\r\n\t\t\tthreeObject.userData.physicsBody = body\r\n\t\t\tthis.scene.add(threeObject)\r\n\t\t\tif (mass > 0) {\r\n\t\t\t\tthis.rigidBodies.push(threeObject)\r\n\t\t\t\t// Disable deactivation\r\n\t\t\t\tbody.setActivationState(4)\r\n\t\t\t}\r\n\t\t\tthis.physicsWorld.addRigidBody(body)\r\n        },\r\n        createRandomColor() {\r\n\t\t\treturn Math.floor(Math.random() * (1 << 24))\r\n        },\r\n        createMaterial() {\r\n\t\t\treturn new this.$THREE.MeshPhongMaterial({ color: this.createRandomColor() })\r\n        },\r\n        initInput() {\r\n\t\t\twindow.addEventListener('keydown', (event) => {\r\n\t\t\t\tswitch (event.keyCode) {\r\n\t\t\t\t\t// Q\r\n\t\t\t\t\tcase 81:\r\n\t\t\t\t\t\tthis.armMovement = 1\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t// A\r\n\t\t\t\t\tcase 65:\r\n\t\t\t\t\t\tthis.armMovement = - 1\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}, false)\r\n\t\t\twindow.addEventListener('keyup', () => {\r\n\t\t\t\tthis.armMovement = 0\r\n\t\t\t}, false)\r\n        },\r\n        onWindowResize() {\r\n\t\t\tthis.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n\t\t\trequestAnimationFrame(this.animate)\r\n\t\t\tthis.render()\r\n\t\t\tthis.stats.update()\r\n        },\r\n        render() {\r\n\t\t\tvar deltaTime = this.clock.getDelta()\r\n\t\t\tthis.updatePhysics(deltaTime)\r\n\t\t\tthis.renderer.render(this.scene, this.camera)\r\n        },\r\n        updatePhysics(deltaTime) {\r\n\t\t\t// Hinge control\r\n\t\t\tthis.hinge.enableAngularMotor(true, 1.5 * this.armMovement, 50)\r\n\t\t\t// Step world\r\n\t\t\tthis.physicsWorld.stepSimulation(deltaTime, 10)\r\n\t\t\t// Update rope\r\n\t\t\tvar softBody = this.rope.userData.physicsBody\r\n\t\t\tvar ropePositions = this.rope.geometry.attributes.position.array\r\n\t\t\tvar numVerts = ropePositions.length / 3\r\n\t\t\tvar nodes = softBody.get_m_nodes()\r\n\t\t\tvar indexFloat = 0\r\n\t\t\tfor (var i = 0; i < numVerts; i ++) {\r\n\t\t\t\tvar node = nodes.at(i)\r\n\t\t\t\tvar nodePos = node.get_m_x()\r\n\t\t\t\tropePositions[ indexFloat ++ ] = nodePos.x()\r\n\t\t\t\tropePositions[ indexFloat ++ ] = nodePos.y()\r\n\t\t\t\tropePositions[ indexFloat ++ ] = nodePos.z()\r\n\t\t\t}\r\n\t\t\tthis.rope.geometry.attributes.position.needsUpdate = true\r\n\t\t\t// Update rigid bodies\r\n\t\t\tfor (var i = 0, il = this.rigidBodies.length; i < il; i ++) {\r\n\t\t\t\tvar objThree = this.rigidBodies[ i ]\r\n\t\t\t\tvar objPhys = objThree.userData.physicsBody\r\n\t\t\t\tvar ms = objPhys.getMotionState()\r\n\t\t\t\tif (ms) {\r\n\t\t\t\t\tms.getWorldTransform(this.transformAux1)\r\n\t\t\t\t\tvar p = this.transformAux1.getOrigin()\r\n\t\t\t\t\tvar q = this.transformAux1.getRotation()\r\n\t\t\t\t\tobjThree.position.set(p.x(), p.y(), p.z())\r\n\t\t\t\t\tobjThree.quaternion.set(q.x(), q.y(), q.z(), q.w())\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.physicsAmmoRope-container {\r\n    width: 100%;\r\n    color: #333;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/physics/physicsAmmoRope.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"physicsAmmoRope-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_vm._v(\"Ammo.js physics soft body rope demo\"),_c('br'),_vm._v(\"Press Q or A to move the arm.\")]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"container\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-8d232ec8\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/physics/physicsAmmoRope.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-8d232ec8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./physicsAmmoRope.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoRope.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoRope.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-8d232ec8\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./physicsAmmoRope.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-8d232ec8\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/physics/physicsAmmoRope.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}