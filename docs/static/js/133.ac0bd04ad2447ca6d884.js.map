{"version":3,"sources":["webpack:///./src/components/jsm/shaders/GodRaysShader.js","webpack:///src/views/postprocessing/webglPostprocessingGodrays.vue","webpack:///./src/views/postprocessing/webglPostprocessingGodrays.vue?d8cb","webpack:///./src/views/postprocessing/webglPostprocessingGodrays.vue"],"names":["GodRaysDepthMaskShader","uniforms","tInput","value","vertexShader","join","fragmentShader","GodRaysGenerateShader","fStepSize","vSunPositionScreenSpace","Vector3","GodRaysCombineShader","tColors","tGodRays","fGodRayIntensity","GodRaysFakeSunShader","fAspect","sunColor","Color","bgColor","webglPostprocessingGodrays","data","container","stats","camera","scene","renderer","materialDepth","sphereMesh","sunPosition","clipPosition","screenSpacePosition","postprocessing","enabled","orbitRadius","godrayRenderTargetResolutionMultiplier","mounted","this","$THREE","Vector4","init","animate","methods","_this","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","z","Scene","MeshDepthMaterial","materialScene","MeshBasicMaterial","color","OBJLoader","load","object","material","set","scale","multiplyScalar","add","geo","SphereBufferGeometry","Mesh","WebGLRenderer","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","autoClear","controls","OrbitControls","minDistance","maxDistance","$Stats","dom","style","left","addEventListener","onWindowResize","initPostprocessing","renderTargetWidth","innerWidth","renderTargetHeight","$onWindowResize","rtTextureColors","rtTextureDepth","rtTextureDepthMask","adjustedWidth","adjustedHeight","rtTextureGodRays1","rtTextureGodRays2","OrthographicCamera","pars","minFilter","LinearFilter","magFilter","format","RGBFormat","WebGLRenderTarget","godraysMaskShader","godrayMaskUniforms","UniformsUtils","clone","materialGodraysDepthMask","ShaderMaterial","godraysGenShader","godrayGenUniforms","materialGodraysGenerate","godraysCombineShader","godrayCombineUniforms","materialGodraysCombine","godraysFakeSunShader","godraysFakeSunUniforms","materialGodraysFakeSun","setHex","quad","PlaneBufferGeometry","requestAnimationFrame","begin","render","end","getStepSize","filterLen","tapsPerPass","pass","Math","pow","filterGodRays","inputTex","renderTarget","stepSize","overrideMaterial","setRenderTarget","time","Date","now","x","cos","sin","y","w","applyMatrix4","matrixWorldInverse","projectionMatrix","copy","clear","sunsqH","sunsqW","setScissor","setScissorTest","texture","postprocessing_webglPostprocessingGodrays","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/133.ac0bd04ad2447ca6d884.js","sourcesContent":["import {\r\n\tColor,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * God-rays (crepuscular rays)\r\n *\r\n * Similar implementation to the one used by Crytek for CryEngine 2 [Sousa2008].\r\n * Blurs a mask generated from the depth map along radial lines emanating from the light\r\n * source. The blur repeatedly applies a blur filter of increasing support but constant\r\n * sample count to produce a blur filter with large support.\r\n *\r\n * My implementation performs 3 passes, similar to the implementation from Sousa. I found\r\n * just 6 samples per pass produced acceptible results. The blur is applied three times,\r\n * with decreasing filter support. The result is equivalent to a single pass with\r\n * 6*6*6 = 216 samples.\r\n *\r\n * References:\r\n *\r\n * Sousa2008 - Crysis Next Gen Effects, GDC2008, http://www.crytek.com/sites/default/files/GDC08_SousaT_CrysisEffects.ppt\r\n */\r\n\r\nvar GodRaysDepthMaskShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\ttInput: {\r\n\t\t\tvalue: null\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\" vUv = uv;\",\r\n\t\t\" gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"uniform sampler2D tInput;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( 1.0 ) - texture2D( tInput, vUv );\",\r\n\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\n\r\n/**\r\n * The god-ray generation shader.\r\n *\r\n * First pass:\r\n *\r\n * The depth map is blurred along radial lines towards the \"sun\". The\r\n * output is written to a temporary render target (I used a 1/4 sized\r\n * target).\r\n *\r\n * Pass two & three:\r\n *\r\n * The results of the previous pass are re-blurred, each time with a\r\n * decreased distance between samples.\r\n */\r\n\r\nvar GodRaysGenerateShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\ttInput: {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\t\tfStepSize: {\r\n\t\t\tvalue: 1.0\r\n\t\t},\r\n\t\tvSunPositionScreenSpace: {\r\n\t\t\tvalue: new Vector3()\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\" vUv = uv;\",\r\n\t\t\" gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"#define TAPS_PER_PASS 6.0\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"uniform sampler2D tInput;\",\r\n\r\n\t\t\"uniform vec3 vSunPositionScreenSpace;\",\r\n\t\t\"uniform float fStepSize;\", // filter step size\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t// delta from current pixel to \"sun\" position\r\n\r\n\t\t\"\tvec2 delta = vSunPositionScreenSpace.xy - vUv;\",\r\n\t\t\"\tfloat dist = length( delta );\",\r\n\r\n\t\t// Step vector (uv space)\r\n\r\n\t\t\"\tvec2 stepv = fStepSize * delta / dist;\",\r\n\r\n\t\t// Number of iterations between pixel and sun\r\n\r\n\t\t\"\tfloat iters = dist/fStepSize;\",\r\n\r\n\t\t\"\tvec2 uv = vUv.xy;\",\r\n\t\t\"\tfloat col = 0.0;\",\r\n\r\n\t\t// This breaks ANGLE in Chrome 22\r\n\t\t//\t- see http://code.google.com/p/chromium/issues/detail?id=153105\r\n\r\n\t\t/*\r\n\t\t// Unrolling didnt do much on my hardware (ATI Mobility Radeon 3450),\r\n\t\t// so i've just left the loop\r\n\r\n\t\t\"for ( float i = 0.0; i < TAPS_PER_PASS; i += 1.0 ) {\",\r\n\r\n\t\t// Accumulate samples, making sure we dont walk past the light source.\r\n\r\n\t\t// The check for uv.y < 1 would not be necessary with \"border\" UV wrap\r\n\t\t// mode, with a black border color. I don't think this is currently\r\n\t\t// exposed by three.js. As a result there might be artifacts when the\r\n\t\t// sun is to the left, right or bottom of screen as these cases are\r\n\t\t// not specifically handled.\r\n\r\n\t\t\"\tcol += ( i <= iters && uv.y < 1.0 ? texture2D( tInput, uv ).r : 0.0 );\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t\"}\",\r\n\t\t*/\r\n\r\n\t\t// Unrolling loop manually makes it work in ANGLE\r\n\r\n\t\t\"\tfloat f = min( 1.0, max( vSunPositionScreenSpace.z / 1000.0, 0.0 ) );\", // used to fade out godrays\r\n\r\n\t\t\"\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t\"\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t\"\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t\"\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t\"\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t\"\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\",\r\n\t\t\"\tuv += stepv;\",\r\n\r\n\t\t// Should technically be dividing by 'iters', but 'TAPS_PER_PASS' smooths out\r\n\t\t// objectionable artifacts, in particular near the sun position. The side\r\n\t\t// effect is that the result is darker than it should be around the sun, as\r\n\t\t// TAPS_PER_PASS is greater than the number of samples actually accumulated.\r\n\t\t// When the result is inverted (in the shader 'godrays_combine', this produces\r\n\t\t// a slight bright spot at the position of the sun, even when it is occluded.\r\n\r\n\t\t\"\tgl_FragColor = vec4( col/TAPS_PER_PASS );\",\r\n\t\t\"\tgl_FragColor.a = 1.0;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\n/**\r\n * Additively applies god rays from texture tGodRays to a background (tColors).\r\n * fGodRayIntensity attenuates the god rays.\r\n */\r\n\r\nvar GodRaysCombineShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\ttColors: {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\ttGodRays: {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\tfGodRayIntensity: {\r\n\t\t\tvalue: 0.69\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"uniform sampler2D tColors;\",\r\n\t\t\"uniform sampler2D tGodRays;\",\r\n\r\n\t\t\"uniform float fGodRayIntensity;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t// Since THREE.MeshDepthMaterial renders foreground objects white and background\r\n\t\t// objects black, the god-rays will be white streaks. Therefore value is inverted\r\n\t\t// before being combined with tColors\r\n\r\n\t\t\"\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );\",\r\n\t\t\"\tgl_FragColor.a = 1.0;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\n\r\n/**\r\n * A dodgy sun/sky shader. Makes a bright spot at the sun location. Would be\r\n * cheaper/faster/simpler to implement this as a simple sun sprite.\r\n */\r\n\r\nvar GodRaysFakeSunShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\tvSunPositionScreenSpace: {\r\n\t\t\tvalue: new Vector3()\r\n\t\t},\r\n\r\n\t\tfAspect: {\r\n\t\t\tvalue: 1.0\r\n\t\t},\r\n\r\n\t\tsunColor: {\r\n\t\t\tvalue: new Color( 0xffee00 )\r\n\t\t},\r\n\r\n\t\tbgColor: {\r\n\t\t\tvalue: new Color( 0x000000 )\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"uniform vec3 vSunPositionScreenSpace;\",\r\n\t\t\"uniform float fAspect;\",\r\n\r\n\t\t\"uniform vec3 sunColor;\",\r\n\t\t\"uniform vec3 bgColor;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec2 diff = vUv - vSunPositionScreenSpace.xy;\",\r\n\r\n\t\t// Correct for aspect ratio\r\n\r\n\t\t\"\tdiff.x *= fAspect;\",\r\n\r\n\t\t\"\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );\",\r\n\t\t\"\tprop = 0.35 * pow( 1.0 - prop, 3.0 );\",\r\n\r\n\t\t\"\tgl_FragColor.xyz = ( vSunPositionScreenSpace.z > 0.0 ) ? mix( sunColor, bgColor, 1.0 - prop ) : bgColor;\",\r\n\t\t\"\tgl_FragColor.w = 1.0;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { GodRaysDepthMaskShader, GodRaysGenerateShader, GodRaysCombineShader, GodRaysFakeSunShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/GodRaysShader.js","<template>\r\n    <div class=\"webglPostprocessingGodrays-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl god-rays example - tree by <a href=\"http://www.turbosquid.com/3d-models/free-tree-3d-model/592617\" target=\"_blank\" rel=\"noopener\">stanloshka</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OBJLoader } from '@/components/jsm/loaders/OBJLoader.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { GodRaysFakeSunShader, GodRaysDepthMaskShader, GodRaysCombineShader, GodRaysGenerateShader } from '@/components/jsm/shaders/GodRaysShader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            materialDepth: null,\r\n\t\t\tsphereMesh: null,\r\n\t\t\tsunPosition: null,\r\n\t\t\tclipPosition: null,\r\n\t\t\tscreenSpacePosition: null,\r\n\t\t\tpostprocessing: { enabled: true },\r\n\t\t\torbitRadius: 200,\r\n\t\t\tbgColor: 0x000511,\r\n\t\t\tsunColor: 0xffee00,\r\n\t\t\t// Use a smaller size for some of the god-ray render targets for better performance.\r\n\t\t\tgodrayRenderTargetResolutionMultiplier: 1.0 / 4.0,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.sunPosition = new this.$THREE.Vector3(0, 1000, - 1000)\r\n        this.clipPosition = new this.$THREE.Vector4()\r\n        this.screenSpacePosition = new this.$THREE.Vector3()\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglPostprocessingGodrays-container')[0].appendChild(this.container)\r\n            //\r\n            this.camera = new this.$THREE.PerspectiveCamera(70, this.$webglInnerWidth / window.innerHeight, 1, 3000)\r\n            this.camera.position.z = 200\r\n            this.scene = new this.$THREE.Scene()\r\n            //\r\n            this.materialDepth = new this.$THREE.MeshDepthMaterial()\r\n            var materialScene = new this.$THREE.MeshBasicMaterial({ color: 0x000000 })\r\n            // tree\r\n            var loader = new OBJLoader()\r\n            loader.load('static/models/obj/tree.obj', (object) => {\r\n                object.material = materialScene\r\n                object.position.set(0, - 150, - 150)\r\n                object.scale.multiplyScalar(400)\r\n                this.scene.add(object)\r\n            })\r\n            // sphere\r\n            var geo = new this.$THREE.SphereBufferGeometry(1, 20, 10)\r\n            this.sphereMesh = new this.$THREE.Mesh(geo, materialScene)\r\n            this.sphereMesh.scale.multiplyScalar(20)\r\n            this.scene.add(this.sphereMesh)\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setClearColor(0xffffff)\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.renderer.autoClear = false\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 50\r\n            controls.maxDistance = 500\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            //\r\n            this.initPostprocessing(this.$webglInnerWidth, window.innerHeight)\r\n        },\r\n        onWindowResize() {\r\n            var renderTargetWidth = window.innerWidth - 281\r\n            var renderTargetHeight = window.innerHeight\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.postprocessing.rtTextureColors.setSize(renderTargetWidth, renderTargetHeight)\r\n            this.postprocessing.rtTextureDepth.setSize(renderTargetWidth, renderTargetHeight)\r\n            this.postprocessing.rtTextureDepthMask.setSize(renderTargetWidth, renderTargetHeight)\r\n            var adjustedWidth = renderTargetWidth * this.godrayRenderTargetResolutionMultiplier\r\n            var adjustedHeight = renderTargetHeight * this.godrayRenderTargetResolutionMultiplier\r\n            this.postprocessing.rtTextureGodRays1.setSize(adjustedWidth, adjustedHeight)\r\n            this.postprocessing.rtTextureGodRays2.setSize(adjustedWidth, adjustedHeight)\r\n        },\r\n        initPostprocessing(renderTargetWidth, renderTargetHeight) {\r\n            this.postprocessing.scene = new this.$THREE.Scene()\r\n            this.postprocessing.camera = new this.$THREE.OrthographicCamera(- 0.5, 0.5, 0.5, - 0.5, - 10000, 10000)\r\n            this.postprocessing.camera.position.z = 100\r\n            this.postprocessing.scene.add(this.postprocessing.camera)\r\n            var pars = { minFilter: this.$THREE.LinearFilter, magFilter: this.$THREE.LinearFilter, format: this.$THREE.RGBFormat }\r\n            this.postprocessing.rtTextureColors = new this.$THREE.WebGLRenderTarget(renderTargetWidth, renderTargetHeight, pars)\r\n            // Switching the depth formats to luminance from rgb doesn't seem to work. I didn't\r\n            // investigate further for now.\r\n            // pars.format = LuminanceFormat\r\n            // I would have this quarter size and use it as one of the ping-pong render\r\n            // targets but the aliasing causes some temporal flickering\r\n            this.postprocessing.rtTextureDepth = new this.$THREE.WebGLRenderTarget(renderTargetWidth, renderTargetHeight, pars)\r\n            this.postprocessing.rtTextureDepthMask = new this.$THREE.WebGLRenderTarget(renderTargetWidth, renderTargetHeight, pars)\r\n            // The ping-pong render targets can use an adjusted resolution to minimize cost\r\n            var adjustedWidth = renderTargetWidth * this.godrayRenderTargetResolutionMultiplier\r\n            var adjustedHeight = renderTargetHeight * this.godrayRenderTargetResolutionMultiplier\r\n            this.postprocessing.rtTextureGodRays1 = new this.$THREE.WebGLRenderTarget(adjustedWidth, adjustedHeight, pars)\r\n            this.postprocessing.rtTextureGodRays2 = new this.$THREE.WebGLRenderTarget(adjustedWidth, adjustedHeight, pars)\r\n            // god-ray shaders\r\n            var godraysMaskShader = GodRaysDepthMaskShader\r\n            this.postprocessing.godrayMaskUniforms = this.$THREE.UniformsUtils.clone(godraysMaskShader.uniforms)\r\n            this.postprocessing.materialGodraysDepthMask = new this.$THREE.ShaderMaterial({\r\n                uniforms: this.postprocessing.godrayMaskUniforms,\r\n                vertexShader: godraysMaskShader.vertexShader,\r\n                fragmentShader: godraysMaskShader.fragmentShader\r\n            })\r\n            var godraysGenShader = GodRaysGenerateShader\r\n            this.postprocessing.godrayGenUniforms = this.$THREE.UniformsUtils.clone(godraysGenShader.uniforms)\r\n            this.postprocessing.materialGodraysGenerate = new this.$THREE.ShaderMaterial({\r\n                uniforms: this.postprocessing.godrayGenUniforms,\r\n                vertexShader: godraysGenShader.vertexShader,\r\n                fragmentShader: godraysGenShader.fragmentShader\r\n            })\r\n            var godraysCombineShader = GodRaysCombineShader\r\n            this.postprocessing.godrayCombineUniforms = this.$THREE.UniformsUtils.clone(godraysCombineShader.uniforms)\r\n            this.postprocessing.materialGodraysCombine = new this.$THREE.ShaderMaterial({\r\n                uniforms: this.postprocessing.godrayCombineUniforms,\r\n                vertexShader: godraysCombineShader.vertexShader,\r\n                fragmentShader: godraysCombineShader.fragmentShader\r\n            })\r\n            var godraysFakeSunShader = GodRaysFakeSunShader\r\n            this.postprocessing.godraysFakeSunUniforms = this.$THREE.UniformsUtils.clone(godraysFakeSunShader.uniforms)\r\n            this.postprocessing.materialGodraysFakeSun = new this.$THREE.ShaderMaterial({\r\n                uniforms: this.postprocessing.godraysFakeSunUniforms,\r\n                vertexShader: godraysFakeSunShader.vertexShader,\r\n                fragmentShader: godraysFakeSunShader.fragmentShader\r\n            })\r\n            this.postprocessing.godraysFakeSunUniforms.bgColor.value.setHex(this.bgColor)\r\n            this.postprocessing.godraysFakeSunUniforms.sunColor.value.setHex(this.sunColor)\r\n            this.postprocessing.godrayCombineUniforms.fGodRayIntensity.value = 0.75\r\n            this.postprocessing.quad = new this.$THREE.Mesh(\r\n                new this.$THREE.PlaneBufferGeometry(1.0, 1.0),\r\n                this.postprocessing.materialGodraysGenerate\r\n        )\r\n            this.postprocessing.quad.position.z = - 9900\r\n            this.postprocessing.scene.add(this.postprocessing.quad)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate, this.renderer.domElement)\r\n            this.stats.begin()\r\n            this.render()\r\n            this.stats.end()\r\n        },\r\n        getStepSize(filterLen, tapsPerPass, pass) {\r\n            return filterLen * Math.pow(tapsPerPass, - pass)\r\n        },\r\n        filterGodRays(inputTex, renderTarget, stepSize) {\r\n            this.postprocessing.scene.overrideMaterial = this.postprocessing.materialGodraysGenerate\r\n            this.postprocessing.godrayGenUniforms[ \"fStepSize\" ].value = stepSize\r\n            this.postprocessing.godrayGenUniforms[ \"tInput\" ].value = inputTex\r\n            this.renderer.setRenderTarget(renderTarget)\r\n            this.renderer.render(this.postprocessing.scene, this.postprocessing.camera)\r\n            this.postprocessing.scene.overrideMaterial = null\r\n        },\r\n        render() {\r\n            var time = Date.now() / 4000\r\n            this.sphereMesh.position.x = this.orbitRadius * Math.cos(time)\r\n            this.sphereMesh.position.z = this.orbitRadius * Math.sin(time) - 100\r\n            if (this.postprocessing.enabled) {\r\n                this.clipPosition.x = this.sunPosition.x\r\n                this.clipPosition.y = this.sunPosition.y\r\n                this.clipPosition.z = this.sunPosition.z\r\n                this.clipPosition.w = 1\r\n                this.clipPosition.applyMatrix4(this.camera.matrixWorldInverse).applyMatrix4(this.camera.projectionMatrix)\r\n                // perspective divide (produce NDC space)\r\n                this.clipPosition.x /= this.clipPosition.w\r\n                this.clipPosition.y /= this.clipPosition.w\r\n                this.screenSpacePosition.x = (this.clipPosition.x + 1) / 2 // transform from [-1,1] to [0,1]\r\n                this.screenSpacePosition.y = (this.clipPosition.y + 1) / 2 // transform from [-1,1] to [0,1]\r\n                this.screenSpacePosition.z = this.clipPosition.z // needs to stay in clip space for visibilty checks\r\n                // Give it to the god-ray and sun shaders\r\n                this.postprocessing.godrayGenUniforms[ \"vSunPositionScreenSpace\" ].value.copy(this.screenSpacePosition)\r\n                this.postprocessing.godraysFakeSunUniforms[ \"vSunPositionScreenSpace\" ].value.copy(this.screenSpacePosition)\r\n                // -- Draw sky and sun --\r\n                // Clear colors and depths, will clear to sky color\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureColors)\r\n                this.renderer.clear(true, true, false)\r\n                // Sun render. Runs a shader that gives a brightness based on the screen\r\n                // space distance to the sun. Not very efficient, so i make a scissor\r\n                // rectangle around the suns position to avoid rendering surrounding pixels.\r\n                var sunsqH = 0.74 * window.innerHeight // 0.74 depends on extent of sun from shader\r\n                var sunsqW = 0.74 * window.innerHeight // both depend on height because sun is aspect-corrected\r\n                this.screenSpacePosition.x *= this.$webglInnerWidth\r\n                this.screenSpacePosition.y *= window.innerHeight\r\n                this.renderer.setScissor(this.screenSpacePosition.x - sunsqW / 2, this.screenSpacePosition.y - sunsqH / 2, sunsqW, sunsqH)\r\n                this.renderer.setScissorTest(true)\r\n                this.postprocessing.godraysFakeSunUniforms[ \"fAspect\" ].value = this.$webglInnerWidth / window.innerHeight\r\n                this.postprocessing.scene.overrideMaterial = this.postprocessing.materialGodraysFakeSun\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureColors)\r\n                this.renderer.render(this.postprocessing.scene, this.postprocessing.camera)\r\n                this.renderer.setScissorTest(false)\r\n                // -- Draw scene objects --\r\n                // Colors\r\n                this.scene.overrideMaterial = null\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureColors)\r\n                this.renderer.render(this.scene, this.camera)\r\n                // Depth\r\n                this.scene.overrideMaterial = this.materialDepth\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureDepth)\r\n                this.renderer.clear()\r\n                this.renderer.render(this.scene, this.camera)\r\n                //\r\n                this.postprocessing.godrayMaskUniforms[ \"tInput\" ].value = this.postprocessing.rtTextureDepth.texture\r\n                this.postprocessing.scene.overrideMaterial = this.postprocessing.materialGodraysDepthMask\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureDepthMask)\r\n                this.renderer.render(this.postprocessing.scene, this.postprocessing.camera)\r\n                // -- Render god-rays --\r\n                // Maximum length of god-rays (in texture space [0,1]X[0,1])\r\n                var filterLen = 1.0\r\n                // Samples taken by filter\r\n                var TAPS_PER_PASS = 6.0\r\n                // Pass order could equivalently be 3,2,1 (instead of 1,2,3), which\r\n                // would start with a small filter support and grow to large. however\r\n                // the large-to-small order produces less objectionable aliasing artifacts that\r\n                // appear as a glimmer along the length of the beams\r\n                // pass 1 - render into first ping-pong target\r\n                this.filterGodRays(this.postprocessing.rtTextureDepthMask.texture, this.postprocessing.rtTextureGodRays2, this.getStepSize(filterLen, TAPS_PER_PASS, 1.0))\r\n                // pass 2 - render into second ping-pong target\r\n                this.filterGodRays(this.postprocessing.rtTextureGodRays2.texture, this.postprocessing.rtTextureGodRays1, this.getStepSize(filterLen, TAPS_PER_PASS, 2.0))\r\n                // pass 3 - 1st RT\r\n                this.filterGodRays(this.postprocessing.rtTextureGodRays1.texture, this.postprocessing.rtTextureGodRays2, this.getStepSize(filterLen, TAPS_PER_PASS, 3.0))\r\n                // final pass - composite god-rays onto colors\r\n                this.postprocessing.godrayCombineUniforms[ \"tColors\" ].value = this.postprocessing.rtTextureColors.texture\r\n                this.postprocessing.godrayCombineUniforms[ \"tGodRays\" ].value = this.postprocessing.rtTextureGodRays2.texture\r\n                this.postprocessing.scene.overrideMaterial = this.postprocessing.materialGodraysCombine\r\n                this.renderer.setRenderTarget(null)\r\n                this.renderer.render(this.postprocessing.scene, this.postprocessing.camera)\r\n                this.postprocessing.scene.overrideMaterial = null\r\n            } else {\r\n                this.renderer.setRenderTarget(null)\r\n                this.renderer.clear()\r\n                this.renderer.render(this.scene, this.camera)\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingGodrays-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingGodrays.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingGodrays-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl god-rays example - tree by \"),_c('a',{attrs:{\"href\":\"http://www.turbosquid.com/3d-models/free-tree-3d-model/592617\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"stanloshka\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-52547cc8\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingGodrays.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-52547cc8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingGodrays.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingGodrays.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingGodrays.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-52547cc8\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingGodrays.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-52547cc8\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingGodrays.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}