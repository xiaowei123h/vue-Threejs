{"version":3,"sources":["webpack:///src/views/postprocessing/webglPostprocessingDof2.vue","webpack:///./src/views/postprocessing/webglPostprocessingDof2.vue?9806","webpack:///./src/views/postprocessing/webglPostprocessingDof2.vue","webpack:///./src/components/jsm/shaders/BokehShader2.js"],"names":["webglPostprocessingDof2","data","container","stats","camera","scene","renderer","materialDepth","windowHalfX","windowHalfY","distance","effectController","postprocessing","enabled","shaderSettings","rings","samples","mouse","raycaster","target","planes","leaves","gui","mounted","this","$THREE","Vector2","Raycaster","Vector3","init","animate","beforeDestroy","destroy","methods","_this","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","y","z","Scene","add","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","autoClear","domElement","depthShader","BokehShader2","ShaderMaterial","uniforms","vertexShader","fragmentShader","value","near","far","r","urls","textureCube","CubeTextureLoader","load","background","planePiece","PlaneBufferGeometry","planeMat","MeshPhongMaterial","color","shininess","specular","envMap","side","DoubleSide","rand","Math","random","i","plane","Mesh","rotation","set","dx","dy","dz","push","BufferGeometryLoader","geometry","computeVertexNormals","material","reflectivity","flatShading","mesh","cos","PI","sin","x","scale","setScalar","SphereBufferGeometry","ballmaterial","multiplyScalar","AmbientLight","directionalLight1","DirectionalLight","normalize","directionalLight2","initPostprocessing","$Stats","dom","style","left","touchAction","addEventListener","onPointerMove","jsDepthCalculation","shaderFocus","fstop","maxblur","showFocus","focalDepth","manualdof","vignetting","depthblur","threshold","gain","bias","fringe","focalLength","noise","pentagon","dithering","matChanger","e","bokeh_uniforms","setFocalLength","dat_gui_module","onChange","listen","step","shaderUpdate","onWindowResize","$onWindowResize","innerWidth","rtTextureDepth","rtTextureColor","event","isPrimary","clientX","clientY","OrthographicCamera","pars","minFilter","LinearFilter","magFilter","format","RGBFormat","WebGLRenderTarget","bokeh_shader","UniformsUtils","clone","texture","materialBokeh","defines","RINGS","SAMPLES","quad","needsUpdate","requestAnimationFrame","render","update","linearize","depth","zfar","znear","smoothstep","saturate","max","min","time","Date","now","lookAt","updateMatrixWorld","setFromCamera","intersects","intersectObjects","children","targetDistance","length","sdistance","ldistance","clear","setRenderTarget","overrideMaterial","postprocessing_webglPostprocessingDof2","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","BokehShader","BokehDepthShader","textureWidth","textureHeight","tColor","tDepth","focusCoords","join","mNear","mFar"],"mappings":"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","file":"static/js/14.6cc5947ae32a7fa45bdf.js","sourcesContent":["<template>\r\n    <div class=\"webglPostprocessingDof2-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl realistic depth-of-field bokeh example<br/>\r\n\t\t\tshader ported from <a href=\"http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\">Martins Upitis</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { BokehShader, BokehDepthShader } from '@/components/jsm/shaders/BokehShader2.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            materialDepth: null,\r\n\t\t\twindowHalfX: null,\r\n\t\t\twindowHalfY: null,\r\n\t\t\tdistance: 100,\r\n\t\t\teffectController: null,\r\n\t\t\tpostprocessing: { enabled: true },\r\n\t\t\tshaderSettings: {\r\n\t\t\t\trings: 3,\r\n\t\t\t\tsamples: 4\r\n\t\t\t},\r\n\t\t\tmouse: null,\r\n\t\t\traycaster: null,\r\n\t\t\ttarget: null,\r\n\t\t\tplanes: [],\r\n            leaves: 100,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.target = new this.$THREE.Vector3(0, 20, - 50)\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglPostprocessingDof2-container')[0].appendChild(this.container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(70, this.$webglInnerWidth / window.innerHeight, 1, 3000)\r\n            this.camera.position.y = 150\r\n            this.camera.position.z = 450\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.add(this.camera)\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.autoClear = false\r\n            this.container.appendChild(this.renderer.domElement)\r\n            var depthShader = BokehDepthShader\r\n            this.materialDepth = new this.$THREE.ShaderMaterial({\r\n                uniforms: depthShader.uniforms,\r\n                vertexShader: depthShader.vertexShader,\r\n                fragmentShader: depthShader.fragmentShader\r\n            })\r\n            this.materialDepth.uniforms[ 'mNear' ].value = this.camera.near\r\n            this.materialDepth.uniforms[ 'mFar' ].value = this.camera.far\r\n            // skybox\r\n            var r = 'static/textures/cube/Bridge2/'\r\n            var urls = [ r + 'posx.jpg', r + 'negx.jpg',\r\n                            r + 'posy.jpg', r + 'negy.jpg',\r\n                            r + 'posz.jpg', r + 'negz.jpg' ]\r\n            var textureCube = new this.$THREE.CubeTextureLoader().load(urls)\r\n            this.scene.background = textureCube\r\n            // plane particles\r\n            var planePiece = new this.$THREE.PlaneBufferGeometry(10, 10, 1, 1)\r\n            var planeMat = new this.$THREE.MeshPhongMaterial({\r\n                color: 0xffffff * 0.4,\r\n                shininess: 0.5,\r\n                specular: 0xffffff,\r\n                envMap: textureCube,\r\n                side: this.$THREE.DoubleSide\r\n            })\r\n            var rand = Math.random\r\n            for (var i = 0; i < this.leaves; i ++) {\r\n                var plane = new this.$THREE.Mesh(planePiece, planeMat)\r\n                plane.rotation.set(rand(), rand(), rand())\r\n                plane.rotation.dx = rand() * 0.1\r\n                plane.rotation.dy = rand() * 0.1\r\n                plane.rotation.dz = rand() * 0.1\r\n                plane.position.set(rand() * 150, 0 + rand() * 300, rand() * 150)\r\n                plane.position.dx = (rand() - 0.5)\r\n                plane.position.dz = (rand() - 0.5)\r\n                this.scene.add(plane)\r\n                this.planes.push(plane)\r\n            }\r\n            // adding Monkeys\r\n            var loader2 = new this.$THREE.BufferGeometryLoader()\r\n            loader2.load('static/models/json/suzanne_buffergeometry.json', (geometry) => {\r\n                geometry.computeVertexNormals()\r\n                var material = new this.$THREE.MeshPhongMaterial({\r\n                    specular: 0xffffff,\r\n                    envMap: textureCube,\r\n                    shininess: 50,\r\n                    reflectivity: 1.0,\r\n                    flatShading: true\r\n                })\r\n                var monkeys = 20\r\n                for (var i = 0; i < monkeys; i ++) {\r\n                    var mesh = new this.$THREE.Mesh(geometry, material)\r\n                    mesh.position.z = Math.cos(i / monkeys * Math.PI * 2) * 200\r\n                    mesh.position.y = Math.sin(i / monkeys * Math.PI * 3) * 20\r\n                    mesh.position.x = Math.sin(i / monkeys * Math.PI * 2) * 200\r\n                    mesh.rotation.y = i / monkeys * Math.PI * 2\r\n                    mesh.scale.setScalar(30)\r\n                    this.scene.add(mesh)\r\n                }\r\n            })\r\n            // add balls\r\n            var geometry = new this.$THREE.SphereBufferGeometry(1, 20, 20)\r\n            for (var i = 0; i < 20; i ++) {\r\n                var ballmaterial = new this.$THREE.MeshPhongMaterial({\r\n                    color: 0xffffff * Math.random(),\r\n                    shininess: 0.5,\r\n                    specular: 0xffffff,\r\n                    envMap: textureCube })\r\n                var mesh = new this.$THREE.Mesh(geometry, ballmaterial)\r\n                mesh.position.x = (Math.random() - 0.5) * 200\r\n                mesh.position.y = Math.random() * 50\r\n                mesh.position.z = (Math.random() - 0.5) * 200\r\n                mesh.scale.multiplyScalar(10)\r\n                this.scene.add(mesh)\r\n            }\r\n            // lights\r\n            this.scene.add(new this.$THREE.AmbientLight(0x222222))\r\n            var directionalLight1 = new this.$THREE.DirectionalLight(0xffffff, 2)\r\n            directionalLight1.position.set(2, 1.2, 10).normalize()\r\n            this.scene.add(directionalLight1)\r\n            var directionalLight2 = new this.$THREE.DirectionalLight(0xffffff, 1)\r\n            directionalLight2.position.set(- 2, 1.2, - 10).normalize()\r\n            this.scene.add(directionalLight2)\r\n            this.initPostprocessing()\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.container.style.touchAction = 'none'\r\n            this.container.addEventListener('pointermove', this.onPointerMove, false)\r\n            this.effectController = {\r\n                enabled: true,\r\n                jsDepthCalculation: true,\r\n                shaderFocus: false,\r\n                fstop: 2.2,\r\n                maxblur: 1.0,\r\n                showFocus: false,\r\n                focalDepth: 2.8,\r\n                manualdof: false,\r\n                vignetting: false,\r\n                depthblur: false,\r\n                threshold: 0.5,\r\n                gain: 2.0,\r\n                bias: 0.5,\r\n                fringe: 0.7,\r\n                focalLength: 35,\r\n                noise: true,\r\n                pentagon: false,\r\n                dithering: 0.0001\r\n            }\r\n            var matChanger = () => {\r\n                for (var e in this.effectController) {\r\n                    if (e in this.postprocessing.bokeh_uniforms) {\r\n                        this.postprocessing.bokeh_uniforms[ e ].value = this.effectController[ e ]\r\n                    }\r\n                }\r\n                this.postprocessing.enabled = this.effectController.enabled\r\n                this.postprocessing.bokeh_uniforms[ 'znear' ].value = this.camera.near\r\n                this.postprocessing.bokeh_uniforms[ 'zfar' ].value = this.camera.far\r\n                this.camera.setFocalLength(this.effectController.focalLength)\r\n            }\r\n            this.gui = new GUI()\r\n            this.gui.add(this.effectController, 'enabled').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'jsDepthCalculation').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'shaderFocus').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'focalDepth', 0.0, 200.0).listen().onChange(matChanger)\r\n            this.gui.add(this.effectController, 'fstop', 0.1, 22, 0.001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'maxblur', 0.0, 5.0, 0.025).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'showFocus').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'manualdof').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'vignetting').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'depthblur').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'threshold', 0, 1, 0.001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'gain', 0, 100, 0.001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'bias', 0, 3, 0.001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'fringe', 0, 5, 0.001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'focalLength', 16, 80, 0.001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'noise').onChange(matChanger)\r\n            this.gui.add(this.effectController, 'dithering', 0, 0.001, 0.0001).onChange(matChanger)\r\n            this.gui.add(this.effectController, 'pentagon').onChange(matChanger)\r\n            this.gui.add(this.shaderSettings, 'rings', 1, 8).step(1).onChange(this.shaderUpdate)\r\n            this.gui.add(this.shaderSettings, 'samples', 1, 13).step(1).onChange(this.shaderUpdate)\r\n            matChanger()\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.windowHalfX = (window.innerWidth - 281) / 2\r\n            this.windowHalfY = window.innerHeight / 2\r\n            this.postprocessing.rtTextureDepth.setSize((window.innerWidth - 281), window.innerHeight)\r\n            this.postprocessing.rtTextureColor.setSize((window.innerWidth - 281), window.innerHeight)\r\n            this.postprocessing.bokeh_uniforms[ 'textureWidth' ].value = (window.innerWidth - 281)\r\n            this.postprocessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight\r\n        },\r\n        onPointerMove(event) {\r\n            if (event.isPrimary === false) return\r\n            this.mouse.x = (event.clientX - this.windowHalfX) / this.windowHalfX\r\n            this.mouse.y = - (event.clientY - this.windowHalfY) / this.windowHalfY\r\n            this.postprocessing.bokeh_uniforms[ 'focusCoords' ].value.set(event.clientX / window.innerWidth, 1 - (event.clientY / window.innerHeight))\r\n        },\r\n        initPostprocessing() {\r\n            this.postprocessing.scene = new this.$THREE.Scene()\r\n            this.postprocessing.camera = new this.$THREE.OrthographicCamera(this.$webglInnerWidth / - 2, this.$webglInnerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, - 10000, 10000)\r\n            this.postprocessing.camera.position.z = 100\r\n            this.postprocessing.scene.add(this.postprocessing.camera)\r\n            var pars = { minFilter: this.$THREE.LinearFilter, magFilter: this.$THREE.LinearFilter, format: this.$THREE.RGBFormat }\r\n            this.postprocessing.rtTextureDepth = new this.$THREE.WebGLRenderTarget(this.$webglInnerWidth, window.innerHeight, pars)\r\n            this.postprocessing.rtTextureColor = new this.$THREE.WebGLRenderTarget(this.$webglInnerWidth, window.innerHeight, pars)\r\n            var bokeh_shader = BokehShader\r\n            this.postprocessing.bokeh_uniforms = this.$THREE.UniformsUtils.clone(bokeh_shader.uniforms)\r\n            this.postprocessing.bokeh_uniforms[ 'tColor' ].value = this.postprocessing.rtTextureColor.texture\r\n            this.postprocessing.bokeh_uniforms[ 'tDepth' ].value = this.postprocessing.rtTextureDepth.texture\r\n            this.postprocessing.bokeh_uniforms[ 'textureWidth' ].value = this.$webglInnerWidth\r\n            this.postprocessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight\r\n            this.postprocessing.materialBokeh = new this.$THREE.ShaderMaterial({\r\n                uniforms: this.postprocessing.bokeh_uniforms,\r\n                vertexShader: bokeh_shader.vertexShader,\r\n                fragmentShader: bokeh_shader.fragmentShader,\r\n                defines: {\r\n                    RINGS: this.shaderSettings.rings,\r\n                    SAMPLES: this.shaderSettings.samples\r\n                }\r\n            })\r\n            this.postprocessing.quad = new this.$THREE.Mesh(new this.$THREE.PlaneBufferGeometry(this.$webglInnerWidth, window.innerHeight), this.postprocessing.materialBokeh)\r\n            this.postprocessing.quad.position.z = - 500\r\n            this.postprocessing.scene.add(this.postprocessing.quad)\r\n        },\r\n        shaderUpdate() {\r\n            this.postprocessing.materialBokeh.defines.RINGS = this.shaderSettings.rings\r\n            this.postprocessing.materialBokeh.defines.SAMPLES = this.shaderSettings.samples\r\n            this.postprocessing.materialBokeh.needsUpdate = true\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate, this.renderer.domElement)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        linearize(depth) {\r\n            var zfar = this.camera.far\r\n            var znear = this.camera.near\r\n            return - zfar * znear / (depth * (zfar - znear) - zfar)\r\n        },\r\n        smoothstep(near, far, depth) {\r\n            var x = this.saturate((depth - near) / (far - near))\r\n            return x * x * (3 - 2 * x)\r\n        },\r\n        saturate(x) {\r\n            return Math.max(0, Math.min(1, x))\r\n        },\r\n        render() {\r\n            var time = Date.now() * 0.00015\r\n            this.camera.position.x = Math.cos(time) * 400\r\n            this.camera.position.z = Math.sin(time) * 500\r\n            this.camera.position.y = Math.sin(time / 1.4) * 100\r\n            this.camera.lookAt(this.target)\r\n            this.camera.updateMatrixWorld()\r\n            if (this.effectController.jsDepthCalculation) {\r\n                this.raycaster.setFromCamera(this.mouse, this.camera)\r\n                var intersects = this.raycaster.intersectObjects(this.scene.children, true)\r\n                var targetDistance = (intersects.length > 0) ? intersects[ 0 ].distance : 1000\r\n                this.distance += (targetDistance - this.distance) * 0.03\r\n                var sdistance = this.smoothstep(this.camera.near, this.camera.far, this.distance)\r\n                var ldistance = this.linearize(1 - sdistance)\r\n                this.postprocessing.bokeh_uniforms[ 'focalDepth' ].value = ldistance\r\n                this.effectController[ 'focalDepth' ] = ldistance\r\n            }\r\n            for (var i = 0; i < this.leaves; i ++) {\r\n                var plane = this.planes[ i ]\r\n                plane.rotation.x += plane.rotation.dx\r\n                plane.rotation.y += plane.rotation.dy\r\n                plane.rotation.z += plane.rotation.dz\r\n                plane.position.y -= 2\r\n                plane.position.x += plane.position.dx\r\n                plane.position.z += plane.position.dz\r\n                if (plane.position.y < 0) plane.position.y += 300\r\n            }\r\n            if (this.postprocessing.enabled) {\r\n                this.renderer.clear()\r\n                // render this.scene into texture\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureColor)\r\n                this.renderer.clear()\r\n                this.renderer.render(this.scene, this.camera)\r\n                // render depth into texture\r\n                this.scene.overrideMaterial = this.materialDepth\r\n                this.renderer.setRenderTarget(this.postprocessing.rtTextureDepth)\r\n                this.renderer.clear()\r\n                this.renderer.render(this.scene, this.camera)\r\n                this.scene.overrideMaterial = null\r\n                // render bokeh composite\r\n                this.renderer.setRenderTarget(null)\r\n                this.renderer.render(this.postprocessing.scene, this.postprocessing.camera)\r\n            } else {\r\n                this.scene.overrideMaterial = null\r\n                this.renderer.setRenderTarget(null)\r\n                this.renderer.clear()\r\n                this.renderer.render(this.scene, this.camera)\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingDof2-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingDof2.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingDof2-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl realistic depth-of-field bokeh example\"),_c('br'),_vm._v(\"\\n\\t\\t\\tshader ported from \"),_c('a',{attrs:{\"href\":\"http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\"}},[_vm._v(\"Martins Upitis\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3cc83e84\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingDof2.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3cc83e84\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingDof2.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingDof2.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingDof2.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3cc83e84\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingDof2.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3cc83e84\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingDof2.vue\n// module id = null\n// module chunks = ","import {\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Depth-of-field shader with bokeh\r\n * ported from GLSL shader by Martins Upitis\r\n * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\r\n *\r\n * Requires #define RINGS and SAMPLES integers\r\n */\r\n\r\n\r\n\r\nvar BokehShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"textureWidth\": { value: 1.0 },\r\n\t\t\"textureHeight\": { value: 1.0 },\r\n\r\n\t\t\"focalDepth\": { value: 1.0 },\r\n\t\t\"focalLength\": { value: 24.0 },\r\n\t\t\"fstop\": { value: 0.9 },\r\n\r\n\t\t\"tColor\": { value: null },\r\n\t\t\"tDepth\": { value: null },\r\n\r\n\t\t\"maxblur\": { value: 1.0 },\r\n\r\n\t\t\"showFocus\": { value: 0 },\r\n\t\t\"manualdof\": { value: 0 },\r\n\t\t\"vignetting\": { value: 0 },\r\n\t\t\"depthblur\": { value: 0 },\r\n\r\n\t\t\"threshold\": { value: 0.5 },\r\n\t\t\"gain\": { value: 2.0 },\r\n\t\t\"bias\": { value: 0.5 },\r\n\t\t\"fringe\": { value: 0.7 },\r\n\r\n\t\t\"znear\": { value: 0.1 },\r\n\t\t\"zfar\": { value: 100 },\r\n\r\n\t\t\"noise\": { value: 1 },\r\n\t\t\"dithering\": { value: 0.0001 },\r\n\t\t\"pentagon\": { value: 0 },\r\n\r\n\t\t\"shaderFocus\": { value: 1 },\r\n\t\t\"focusCoords\": { value: new Vector2() }\r\n\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"uniform sampler2D tColor;\",\r\n\t\t\"uniform sampler2D tDepth;\",\r\n\t\t\"uniform float textureWidth;\",\r\n\t\t\"uniform float textureHeight;\",\r\n\r\n\t\t\"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\",\r\n\t\t\"uniform float focalLength; //focal length in mm\",\r\n\t\t\"uniform float fstop; //f-stop value\",\r\n\t\t\"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\",\r\n\r\n\t\t\"/*\",\r\n\t\t\"make sure that these two values are the same for your camera, otherwise distances will be wrong.\",\r\n\t\t\"*/\",\r\n\r\n\t\t\"uniform float znear; // camera clipping start\",\r\n\t\t\"uniform float zfar; // camera clipping end\",\r\n\r\n\t\t\"//------------------------------------------\",\r\n\t\t\"//user variables\",\r\n\r\n\t\t\"const int samples = SAMPLES; //samples on the first ring\",\r\n\t\t\"const int rings = RINGS; //ring count\",\r\n\r\n\t\t\"const int maxringsamples = rings * samples;\",\r\n\r\n\t\t\"uniform bool manualdof; // manual dof calculation\",\r\n\t\t\"float ndofstart = 1.0; // near dof blur start\",\r\n\t\t\"float ndofdist = 2.0; // near dof blur falloff distance\",\r\n\t\t\"float fdofstart = 1.0; // far dof blur start\",\r\n\t\t\"float fdofdist = 3.0; // far dof blur falloff distance\",\r\n\r\n\t\t\"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\",\r\n\r\n\t\t\"uniform bool vignetting; // use optical lens vignetting\",\r\n\r\n\t\t\"float vignout = 1.3; // vignetting outer border\",\r\n\t\t\"float vignin = 0.0; // vignetting inner border\",\r\n\t\t\"float vignfade = 22.0; // f-stops till vignete fades\",\r\n\r\n\t\t\"uniform bool shaderFocus;\",\r\n\t\t\"// disable if you use external focalDepth value\",\r\n\r\n\t\t\"uniform vec2 focusCoords;\",\r\n\t\t\"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\",\r\n\t\t\"// if center of screen use vec2(0.5, 0.5);\",\r\n\r\n\t\t\"uniform float maxblur;\",\r\n\t\t\"//clamp value of max blur (0.0 = no blur, 1.0 default)\",\r\n\r\n\t\t\"uniform float threshold; // highlight threshold;\",\r\n\t\t\"uniform float gain; // highlight gain;\",\r\n\r\n\t\t\"uniform float bias; // bokeh edge bias\",\r\n\t\t\"uniform float fringe; // bokeh chromatic aberration / fringing\",\r\n\r\n\t\t\"uniform bool noise; //use noise instead of pattern for sample dithering\",\r\n\r\n\t\t\"uniform float dithering;\",\r\n\r\n\t\t\"uniform bool depthblur; // blur the depth buffer\",\r\n\t\t\"float dbsize = 1.25; // depth blur size\",\r\n\r\n\t\t\"/*\",\r\n\t\t\"next part is experimental\",\r\n\t\t\"not looking good with small sample and ring count\",\r\n\t\t\"looks okay starting from samples = 4, rings = 4\",\r\n\t\t\"*/\",\r\n\r\n\t\t\"uniform bool pentagon; //use pentagon as bokeh shape?\",\r\n\t\t\"float feather = 0.4; //pentagon shape feather\",\r\n\r\n\t\t\"//------------------------------------------\",\r\n\r\n\t\t\"float penta(vec2 coords) {\",\r\n\t\t\"\t//pentagonal shape\",\r\n\t\t\"\tfloat scale = float(rings) - 1.3;\",\r\n\t\t\"\tvec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\",\r\n\t\t\"\tvec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\",\r\n\t\t\"\tvec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\",\r\n\t\t\"\tvec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\",\r\n\t\t\"\tvec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\",\r\n\t\t\"\tvec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\",\r\n\r\n\t\t\"\tvec4  one = vec4( 1.0 );\",\r\n\r\n\t\t\"\tvec4 P = vec4((coords),vec2(scale, scale));\",\r\n\r\n\t\t\"\tvec4 dist = vec4(0.0);\",\r\n\t\t\"\tfloat inorout = -4.0;\",\r\n\r\n\t\t\"\tdist.x = dot( P, HS0 );\",\r\n\t\t\"\tdist.y = dot( P, HS1 );\",\r\n\t\t\"\tdist.z = dot( P, HS2 );\",\r\n\t\t\"\tdist.w = dot( P, HS3 );\",\r\n\r\n\t\t\"\tdist = smoothstep( -feather, feather, dist );\",\r\n\r\n\t\t\"\tinorout += dot( dist, one );\",\r\n\r\n\t\t\"\tdist.x = dot( P, HS4 );\",\r\n\t\t\"\tdist.y = HS5.w - abs( P.z );\",\r\n\r\n\t\t\"\tdist = smoothstep( -feather, feather, dist );\",\r\n\t\t\"\tinorout += dist.x;\",\r\n\r\n\t\t\"\treturn clamp( inorout, 0.0, 1.0 );\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float bdepth(vec2 coords) {\",\r\n\t\t\"\t// Depth buffer blur\",\r\n\t\t\"\tfloat d = 0.0;\",\r\n\t\t\"\tfloat kernel[9];\",\r\n\t\t\"\tvec2 offset[9];\",\r\n\r\n\t\t\"\tvec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\",\r\n\r\n\t\t\"\toffset[0] = vec2(-wh.x,-wh.y);\",\r\n\t\t\"\toffset[1] = vec2( 0.0, -wh.y);\",\r\n\t\t\"\toffset[2] = vec2( wh.x -wh.y);\",\r\n\r\n\t\t\"\toffset[3] = vec2(-wh.x,  0.0);\",\r\n\t\t\"\toffset[4] = vec2( 0.0,   0.0);\",\r\n\t\t\"\toffset[5] = vec2( wh.x,  0.0);\",\r\n\r\n\t\t\"\toffset[6] = vec2(-wh.x, wh.y);\",\r\n\t\t\"\toffset[7] = vec2( 0.0,  wh.y);\",\r\n\t\t\"\toffset[8] = vec2( wh.x, wh.y);\",\r\n\r\n\t\t\"\tkernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\",\r\n\t\t\"\tkernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\",\r\n\t\t\"\tkernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\",\r\n\r\n\r\n\t\t\"\tfor( int i=0; i<9; i++ ) {\",\r\n\t\t\"\t\tfloat tmp = texture2D(tDepth, coords + offset[i]).r;\",\r\n\t\t\"\t\td += tmp * kernel[i];\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\treturn d;\",\r\n\t\t\"}\",\r\n\r\n\r\n\t\t\"vec3 color(vec2 coords,float blur) {\",\r\n\t\t\"\t//processing the sample\",\r\n\r\n\t\t\"\tvec3 col = vec3(0.0);\",\r\n\t\t\"\tvec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\",\r\n\r\n\t\t\"\tcol.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\",\r\n\t\t\"\tcol.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\",\r\n\t\t\"\tcol.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\",\r\n\r\n\t\t\"\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\",\r\n\t\t\"\tfloat lum = dot(col.rgb, lumcoeff);\",\r\n\t\t\"\tfloat thresh = max((lum-threshold)*gain, 0.0);\",\r\n\t\t\"\treturn col+mix(vec3(0.0),col,thresh*blur);\",\r\n\t\t\"}\",\r\n\r\n\t\t\"vec3 debugFocus(vec3 col, float blur, float depth) {\",\r\n\t\t\"\tfloat edge = 0.002*depth; //distance based edge smoothing\",\r\n\t\t\"\tfloat m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\",\r\n\t\t\"\tfloat e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\",\r\n\r\n\t\t\"\tcol = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\",\r\n\t\t\"\tcol = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\",\r\n\r\n\t\t\"\treturn col;\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float linearize(float depth) {\",\r\n\t\t\"\treturn -zfar * znear / (depth * (zfar - znear) - zfar);\",\r\n\t\t\"}\",\r\n\r\n\r\n\t\t\"float vignette() {\",\r\n\t\t\"\tfloat dist = distance(vUv.xy, vec2(0.5,0.5));\",\r\n\t\t\"\tdist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\",\r\n\t\t\"\treturn clamp(dist,0.0,1.0);\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\",\r\n\t\t\"\tfloat rings2 = float(rings);\",\r\n\t\t\"\tfloat step = PI*2.0 / float(ringsamples);\",\r\n\t\t\"\tfloat pw = cos(j*step)*i;\",\r\n\t\t\"\tfloat ph = sin(j*step)*i;\",\r\n\t\t\"\tfloat p = 1.0;\",\r\n\t\t\"\tif (pentagon) {\",\r\n\t\t\"\t\tp = penta(vec2(pw,ph));\",\r\n\t\t\"\t}\",\r\n\t\t\"\tcol += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\",\r\n\t\t\"\treturn 1.0 * mix(1.0, i /rings2, bias) * p;\",\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\t\t\"\t//scene depth calculation\",\r\n\r\n\t\t\"\tfloat depth = linearize(texture2D(tDepth,vUv.xy).x);\",\r\n\r\n\t\t\"\t// Blur depth?\",\r\n\t\t\"\tif ( depthblur ) {\",\r\n\t\t\"\t\tdepth = linearize(bdepth(vUv.xy));\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\t//focal plane calculation\",\r\n\r\n\t\t\"\tfloat fDepth = focalDepth;\",\r\n\r\n\t\t\"\tif (shaderFocus) {\",\r\n\r\n\t\t\"\t\tfDepth = linearize(texture2D(tDepth,focusCoords).x);\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\t// dof blur factor calculation\",\r\n\r\n\t\t\"\tfloat blur = 0.0;\",\r\n\r\n\t\t\"\tif (manualdof) {\",\r\n\t\t\"\t\tfloat a = depth-fDepth; // Focal plane\",\r\n\t\t\"\t\tfloat b = (a-fdofstart)/fdofdist; // Far DoF\",\r\n\t\t\"\t\tfloat c = (-a-ndofstart)/ndofdist; // Near Dof\",\r\n\t\t\"\t\tblur = (a>0.0) ? b : c;\",\r\n\t\t\"\t} else {\",\r\n\t\t\"\t\tfloat f = focalLength; // focal length in mm\",\r\n\t\t\"\t\tfloat d = fDepth*1000.0; // focal plane in mm\",\r\n\t\t\"\t\tfloat o = depth*1000.0; // depth in mm\",\r\n\r\n\t\t\"\t\tfloat a = (o*f)/(o-f);\",\r\n\t\t\"\t\tfloat b = (d*f)/(d-f);\",\r\n\t\t\"\t\tfloat c = (d-f)/(d*fstop*CoC);\",\r\n\r\n\t\t\"\t\tblur = abs(a-b)*c;\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tblur = clamp(blur,0.0,1.0);\",\r\n\r\n\t\t\"\t// calculation of pattern for dithering\",\r\n\r\n\t\t\"\tvec2 noise = vec2(rand(vUv.xy), rand( vUv.xy + vec2( 0.4, 0.6 ) ) )*dithering*blur;\",\r\n\r\n\t\t\"\t// getting blur x and y step factor\",\r\n\r\n\t\t\"\tfloat w = (1.0/textureWidth)*blur*maxblur+noise.x;\",\r\n\t\t\"\tfloat h = (1.0/textureHeight)*blur*maxblur+noise.y;\",\r\n\r\n\t\t\"\t// calculation of final color\",\r\n\r\n\t\t\"\tvec3 col = vec3(0.0);\",\r\n\r\n\t\t\"\tif(blur < 0.05) {\",\r\n\t\t\"\t\t//some optimization thingy\",\r\n\t\t\"\t\tcol = texture2D(tColor, vUv.xy).rgb;\",\r\n\t\t\"\t} else {\",\r\n\t\t\"\t\tcol = texture2D(tColor, vUv.xy).rgb;\",\r\n\t\t\"\t\tfloat s = 1.0;\",\r\n\t\t\"\t\tint ringsamples;\",\r\n\r\n\t\t\"\t\tfor (int i = 1; i <= rings; i++) {\",\r\n\t\t\"\t\t\t/*unboxstart*/\",\r\n\t\t\"\t\t\tringsamples = i * samples;\",\r\n\r\n\t\t\"\t\t\tfor (int j = 0 ; j < maxringsamples ; j++) {\",\r\n\t\t\"\t\t\t\tif (j >= ringsamples) break;\",\r\n\t\t\"\t\t\t\ts += gather(float(i), float(j), ringsamples, col, w, h, blur);\",\r\n\t\t\"\t\t\t}\",\r\n\t\t\"\t\t\t/*unboxend*/\",\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t\tcol /= s; //divide by sample count\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tif (showFocus) {\",\r\n\t\t\"\t\tcol = debugFocus(col, blur, depth);\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tif (vignetting) {\",\r\n\t\t\"\t\tcol *= vignette();\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tgl_FragColor.rgb = col;\",\r\n\t\t\"\tgl_FragColor.a = 1.0;\",\r\n\t\t\"} \"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nvar BokehDepthShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"mNear\": { value: 1.0 },\r\n\t\t\"mFar\": { value: 1000.0 },\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying float vViewZDepth;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\t#include <begin_vertex>\",\r\n\t\t\"\t#include <project_vertex>\",\r\n\r\n\t\t\"\tvViewZDepth = - mvPosition.z;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float mNear;\",\r\n\t\t\"uniform float mFar;\",\r\n\r\n\t\t\"varying float vViewZDepth;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\",\r\n\t\t\"\tgl_FragColor = vec4( vec3( color ), 1.0 );\",\r\n\r\n\t\t\"} \"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { BokehShader, BokehDepthShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/BokehShader2.js"],"sourceRoot":""}