{"version":3,"sources":["webpack:///src/views/materials/webglMaterialsCurvature.vue","webpack:///./src/views/materials/webglMaterialsCurvature.vue?aa4e","webpack:///./src/views/materials/webglMaterialsCurvature.vue"],"names":["webglMaterialsCurvature","data","vertexShaderRaw","fragmentShaderRaw","gui","camera","scene","renderer","ninjaMeshRaw","curvatureAttribute","bufferGeo","mounted","this","init","animate","beforeDestroy","destroy","methods","average","dict","sum","length","Object","keys","forEach","key","clamp","number","min","max","Math","filterConcave","curvature","i","abs","filterConvex","filterBoth","_this","$THREE","Scene","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","x","y","z","WebGLRenderer","setSize","autoClear","document","getElementsByClassName","appendChild","domElement","controls","OrbitControls","minDistance","maxDistance","OBJLoader","load","object","traverse","child","isMesh","geometry","center","attributes","count","array","normArray","normal","posA","Vector3","posB","posC","normA","normalize","normB","normC","strA","toArray","toString","strB","strC","posB_A","subVectors","posB_C","posC_A","b2a","dot","b2c","c2a","a2b","c2b","a2c","undefined","curvatureDict","smoothCurvatureDict","create","key2","val","range","Float32Array","str","setAttribute","BufferAttribute","curvatureFiltered","materialRaw","ShaderMaterial","vertexShader","fragmentShader","Mesh","add","params","needsUpdate","dat_gui_module","topologyFolder","addFolder","open","onWindowResize","addEventListener","$onWindowResize","requestAnimationFrame","render","materials_webglMaterialsCurvature","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/145.57c05a5fae1632c62838.js","sourcesContent":["<template>\r\n    <div class=\"webglMaterialsCurvature-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - curvature estimation of a geometry<br/>\r\n\t\t\tby <a href=\"http://codercat.club\" target=\"_blank\" rel=\"noopener\">CoderCat</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { OBJLoader } from '@/components/jsm/loaders/OBJLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            vertexShaderRaw: null,\r\n            fragmentShaderRaw: null,\r\n            gui: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            ninjaMeshRaw: null,\r\n            curvatureAttribute: null,\r\n            bufferGeo: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.vertexShaderRaw = `\r\n            attribute float curvature;\r\n            varying float vCurvature;\r\n            void main() {\r\n                vec3 p = position;\r\n                vec4 modelViewPosition = modelViewMatrix * vec4(p , 1.0);\r\n                gl_Position = projectionMatrix * modelViewPosition;\r\n                vCurvature = curvature;\r\n            }`\r\n        this.fragmentShaderRaw = `\r\n            varying vec3 vViewPosition;\r\n            varying float vCurvature;\r\n            void main() {\r\n                    gl_FragColor = vec4(vCurvature * 2.0, 0.0, 0.0, 0.0);\r\n            }`\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        average(dict) {\r\n            var sum = 0\r\n            var length = 0\r\n            Object.keys(dict).forEach((key) => {\r\n                sum += dict[ key ]\r\n                length ++\r\n            })\r\n            return sum / length\r\n        },\r\n        clamp(number, min, max) {\r\n            return Math.max(min, Math.min(number, max))\r\n        },\r\n        filterConcave(curvature) {\r\n            for (var i = 0; i < curvature.length; i ++) {\r\n                curvature[ i ] = Math.abs(this.clamp(curvature[ i ], - 1, 0))\r\n            }\r\n        },\r\n        filterConvex(curvature) {\r\n            for (var i = 0; i < curvature.length; i ++) {\r\n                curvature[ i ] = this.clamp(curvature[ i ], 0, 1)\r\n            }\r\n        },\r\n        filterBoth(curvature) {\r\n            for (var i = 0; i < curvature.length; i ++) {\r\n                curvature[ i ] = Math.abs(curvature[ i ])\r\n            }\r\n        },\r\n        init() {\r\n            this.scene = new this.$THREE.Scene()\r\n            this.camera = new this.$THREE.PerspectiveCamera(75, this.$webglInnerWidth / window.innerHeight, 0.1, 1000)\r\n            this.camera.position.x = - 23\r\n            this.camera.position.y = 2\r\n            this.camera.position.z = 24\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.autoClear = false\r\n            document.getElementsByClassName('webglMaterialsCurvature-container')[0].appendChild(this.renderer.domElement)\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 20\r\n            controls.maxDistance = 100\r\n            var loader = new OBJLoader()\r\n            //load the obj\r\n            loader.load('static/models/obj/ninja/ninjaHead_Low.obj', (object) => {\r\n                object.traverse((child) => {\r\n                    if (child.isMesh) {\r\n                        this.bufferGeo = child.geometry\r\n                        this.bufferGeo.center()\r\n                        var dict = {}\r\n                        for (var i = 0; i < this.bufferGeo.attributes.position.count; i += 3) {\r\n                            //create a dictionary of every position, and its neighboring positions\r\n                            var array = this.bufferGeo.attributes.position.array\r\n                            var normArray = this.bufferGeo.attributes.normal.array\r\n                            var posA = new this.$THREE.Vector3(array[ 3 * i ], array[ 3 * i + 1 ], array[ 3 * i + 2 ])\r\n                            var posB = new this.$THREE.Vector3(array[ 3 * (i + 1) ], array[ 3 * (i + 1) + 1 ], array[ 3 * (i + 1) + 2 ])\r\n                            var posC = new this.$THREE.Vector3(array[ 3 * (i + 2) ], array[ 3 * (i + 2) + 1 ], array[ 3 * (i + 2) + 2 ])\r\n                            var normA = new this.$THREE.Vector3(normArray[ 3 * i ], normArray[ 3 * i + 1 ], normArray[ 3 * i + 2 ]).normalize()\r\n                            var normB = new this.$THREE.Vector3(normArray[ 3 * (i + 1) ], normArray[ 3 * (i + 1) + 1 ], normArray[ 3 * (i + 1) + 2 ]).normalize()\r\n                            var normC = new this.$THREE.Vector3(normArray[ 3 * (i + 2) ], normArray[ 3 * (i + 2) + 1 ], normArray[ 3 * (i + 2) + 2 ]).normalize()\r\n                            var strA = posA.toArray().toString()\r\n                            var strB = posB.toArray().toString()\r\n                            var strC = posC.toArray().toString()\r\n                            var posB_A = new this.$THREE.Vector3().subVectors(posB, posA)\r\n                            var posB_C = new this.$THREE.Vector3().subVectors(posB, posC)\r\n                            var posC_A = new this.$THREE.Vector3().subVectors(posC, posA)\r\n                            var b2a = normB.dot(posB_A.normalize())\r\n                            var b2c = normB.dot(posB_C.normalize())\r\n                            var c2a = normC.dot(posC_A.normalize())\r\n                            var a2b = - normA.dot(posB_A.normalize())\r\n                            var c2b = - normC.dot(posB_C.normalize())\r\n                            var a2c = - normA.dot(posC_A.normalize())\r\n                            if (dict[ strA ] === undefined) {\r\n                                dict[ strA ] = {}\r\n                            }\r\n                            if (dict[ strB ] === undefined) {\r\n                                dict[ strB ] = {}\r\n                            }\r\n                            if (dict[ strC ] === undefined) {\r\n                                dict[ strC ] = {}\r\n                            }\r\n                            dict[ strA ][ strB ] = a2b\r\n                            dict[ strA ][ strC ] = a2c\r\n                            dict[ strB ][ strA ] = b2a\r\n                            dict[ strB ][ strC ] = b2c\r\n                            dict[ strC ][ strA ] = c2a\r\n                            dict[ strC ][ strB ] = c2b\r\n                        }\r\n                        var curvatureDict = {}\r\n                        var min = 10, max = 0\r\n                        Object.keys(dict).forEach((key) => {\r\n                            curvatureDict[ key ] = this.average(dict[ key ])\r\n                        })\r\n                        //smoothing\r\n                        var smoothCurvatureDict = Object.create(curvatureDict)\r\n                        Object.keys(dict).forEach((key) => {\r\n                            var count = 0\r\n                            var sum = 0\r\n                            Object.keys(dict[ key ]).forEach((key2) => {\r\n                                sum += smoothCurvatureDict[ key2 ]\r\n                                count ++\r\n                            })\r\n                            smoothCurvatureDict[ key ] = sum / count\r\n                        })\r\n                        curvatureDict = smoothCurvatureDict\r\n                        // fit values to 0 and 1\r\n                        Object.keys(curvatureDict).forEach((key) => {\r\n                            var val = Math.abs(curvatureDict[ key ])\r\n                            if (val < min) min = val\r\n                            if (val > max) max = val\r\n                        })\r\n                        var range = (max - min)\r\n                        Object.keys(curvatureDict).forEach((key) => {\r\n                            var val = Math.abs(curvatureDict[ key ])\r\n                            if (curvatureDict[ key ] < 0) {\r\n                                curvatureDict[ key ] = (min - val) / range\r\n                            } else {\r\n                                curvatureDict[ key ] = (val - min) / range\r\n                            }\r\n                        })\r\n                        this.curvatureAttribute = new Float32Array(this.bufferGeo.attributes.position.count)\r\n                        for (var i = 0; i < this.bufferGeo.attributes.position.count; i ++) {\r\n                            var array = this.bufferGeo.attributes.position.array\r\n                            var pos = new this.$THREE.Vector3(array[ 3 * i ], array[ 3 * i + 1 ], array[ 3 * i + 2 ])\r\n                            var str = pos.toArray().toString()\r\n                            this.curvatureAttribute[ i ] = curvatureDict[ str ]\r\n                        }\r\n                        this.bufferGeo.setAttribute('curvature', new this.$THREE.BufferAttribute(this.curvatureAttribute, 1))\r\n                        //starting filter is to show both concave and convex\r\n                        var curvatureFiltered = new Float32Array(this.curvatureAttribute)\r\n                        this.filterBoth(curvatureFiltered)\r\n                        var materialRaw = new this.$THREE.ShaderMaterial({\r\n                            vertexShader: this.vertexShaderRaw,\r\n                            fragmentShader: this.fragmentShaderRaw\r\n                        })\r\n                        this.ninjaMeshRaw = new this.$THREE.Mesh(this.bufferGeo, materialRaw)\r\n                    }\r\n                })\r\n                this.scene.add(this.ninjaMeshRaw)\r\n            })\r\n            //init GUI\r\n            var params = {\r\n                filterConvex: () => {\r\n                    var curvatureFiltered = new Float32Array(this.curvatureAttribute)\r\n                    this.filterConvex(curvatureFiltered)\r\n                    this.bufferGeo.attributes.curvature.array = curvatureFiltered\r\n                    this.bufferGeo.attributes.curvature.needsUpdate = true\r\n                },\r\n                filterConcave: () => {\r\n                    var curvatureFiltered = new Float32Array(this.curvatureAttribute)\r\n                    this.filterConcave(curvatureFiltered)\r\n                    this.bufferGeo.attributes.curvature.array = curvatureFiltered\r\n                    this.bufferGeo.attributes.curvature.needsUpdate = true\r\n                },\r\n                filterBoth: () => {\r\n                    var curvatureFiltered = new Float32Array(this.curvatureAttribute)\r\n                    this.filterBoth(curvatureFiltered)\r\n                    this.bufferGeo.attributes.curvature.array = curvatureFiltered\r\n                    this.bufferGeo.attributes.curvature.needsUpdate = true\r\n                }\r\n            }\r\n            this.gui = new GUI()\r\n            var topologyFolder = this.gui.addFolder('Topology')\r\n            topologyFolder.add(params, 'filterConvex')\r\n            topologyFolder.add(params, 'filterConcave')\r\n            topologyFolder.add(params, 'filterBoth')\r\n            topologyFolder.open()\r\n            this.onWindowResize()\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglMaterialsCurvature-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/materials/webglMaterialsCurvature.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglMaterialsCurvature-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - curvature estimation of a geometry\"),_c('br'),_vm._v(\"\\n\\t\\t\\tby \"),_c('a',{attrs:{\"href\":\"http://codercat.club\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"CoderCat\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-419bf960\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/materials/webglMaterialsCurvature.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-419bf960\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglMaterialsCurvature.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMaterialsCurvature.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMaterialsCurvature.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-419bf960\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglMaterialsCurvature.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-419bf960\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/materials/webglMaterialsCurvature.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}