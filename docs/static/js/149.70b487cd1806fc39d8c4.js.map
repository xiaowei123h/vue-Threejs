{"version":3,"sources":["webpack:///./src/components/jsm/nodes/postprocessing/NodePass.js","webpack:///src/views/postprocessing/webglPostprocessingNodesPass.vue","webpack:///./src/views/postprocessing/webglPostprocessingNodesPass.vue?0b40","webpack:///./src/views/postprocessing/webglPostprocessingNodesPass.vue"],"names":["NodePass","ShaderPass","call","this","name","uuid","MathUtils","generateUUID","userData","textureID","input","ScreenNode","material","NodeMaterial","needsUpdate","prototype","Object","create","constructor","render","dispose","fragment","value","uniforms","apply","arguments","copy","source","toJSON","meta","undefined","nodes","passes","data","type","JSON","stringify","pass","webglPostprocessingNodesPass","camera","scene","renderer","composer","object","light","nodepass","gui","clock","frame","param","example","textureLoader","lensflare2","decalNormal","mounted","$THREE","Clock","Nodes","TextureLoader","load","wrapS","wrapT","RepeatWrapping","init","animate","beforeDestroy","destroy","methods","clearGui","_this","dat_gui_module","add","basic / color-adjustment","basic / blends","basic / fade","basic / invert","basic / blur","adv / saturation","adv / refraction","adv / mosaic","onFinishChange","updateMaterial","open","addGui","callback","isColor","min","max","node","_this2","addColor","onChange","_typeof","keys","screen","fade","scale","_this3","hue","sataturation","vibrance","brightness","contrast","hueNode","HUE","satNode","SATURATION","vibranceNode","VIBRANCE","brightnessNode","BRIGHTNESS","contrastNode","CONTRAST","val","Math","PI","color","percent","MIX","getHex","setHex","alpha","inverted","INVERT","multiply","ADD","addition","subtract","SUB","MUL","division","DIV","op","sat","satrgb","join","luminance","saturation","inputs","rgb","adjustment","normal","normalXY","normalXYFlip","offsetNormal","scaleTexture","scaleNormal","offsetCoord","a","uv","blocks","blocksSize","FLOOR","mosaicUV","fadeScreen","c","size","getDrawingBufferSize","Vector2","blurScreen","width","height","radius","x","y","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","document","getElementsByClassName","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","Object3D","geometry","SphereBufferGeometry","i","MeshPhongMaterial","random","flatShading","mesh","Mesh","set","normalize","multiplyScalar","rotation","AmbientLight","DirectionalLight","EffectComposer","addPass","RenderPass","addEventListener","onWindowResize","$onWindowResize","innerWidth","requestAnimationFrame","delta","getDelta","update","updateNode","postprocessing_webglPostprocessingNodesPass","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/149.70b487cd1806fc39d8c4.js","sourcesContent":["import { MathUtils } from '@/components/build/three.module.js';\r\n\r\nimport { ShaderPass } from '../../postprocessing/ShaderPass.js';\r\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\r\nimport { ScreenNode } from '../inputs/ScreenNode.js';\r\n\r\nfunction NodePass() {\r\n\r\n\tShaderPass.call( this );\r\n\r\n\tthis.name = \"\";\r\n\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\tthis.userData = {};\r\n\r\n\tthis.textureID = 'renderTexture';\r\n\r\n\tthis.input = new ScreenNode();\r\n\r\n\tthis.material = new NodeMaterial();\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n}\r\n\r\nNodePass.prototype = Object.create( ShaderPass.prototype );\r\nNodePass.prototype.constructor = NodePass;\r\n\r\nNodePass.prototype.render = function () {\r\n\r\n\tif ( this.needsUpdate ) {\r\n\r\n\t\tthis.material.dispose();\r\n\r\n\t\tthis.material.fragment.value = this.input;\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tthis.uniforms = this.material.uniforms;\r\n\r\n\tShaderPass.prototype.render.apply( this, arguments );\r\n\r\n};\r\n\r\nNodePass.prototype.copy = function ( source ) {\r\n\r\n\tthis.input = source.input;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nNodePass.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\tif ( isRootObject ) {\r\n\r\n\t\tmeta = {\r\n\t\t\tnodes: {}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tif ( meta && ! meta.passes ) meta.passes = {};\r\n\r\n\tif ( ! meta.passes[ this.uuid ] ) {\r\n\r\n\t\tvar data = {};\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = \"NodePass\";\r\n\r\n\t\tmeta.passes[ this.uuid ] = data;\r\n\r\n\t\tif ( this.name !== \"\" ) data.name = this.name;\r\n\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\r\n\r\n\t\tdata.input = this.input.toJSON( meta ).uuid;\r\n\r\n\t}\r\n\r\n\tmeta.pass = this.uuid;\r\n\r\n\treturn meta;\r\n\r\n};\r\n\r\nexport { NodePass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/nodes/postprocessing/NodePass.js","<template>\r\n    <div class=\"webglPostprocessingNodesPass-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - Node-Based Post-Processing\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { NodePass } from '@/components/jsm/nodes/postprocessing/NodePass.js'\r\nimport * as Nodes from '@/components/jsm/nodes/Nodes.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            composer: null,\r\n            object: null,\r\n            light: null,\r\n            nodepass: null,\r\n\t\t\tgui: null,\r\n\t\t\tclock: null,\r\n\t\t\tframe: null,\r\n\t\t\tparam: { example: 'color-adjustment' },\r\n\t\t\ttextureLoader: null,\r\n\t\t\tlensflare2: null,\r\n\t\t\tdecalNormal: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        this.frame = new Nodes.NodeFrame()\r\n        this.param = { example: 'color-adjustment' }\r\n        this.textureLoader = new this.$THREE.TextureLoader()\r\n        this.lensflare2 = this.textureLoader.load('static/textures/lensflare/lensflare0.png')\r\n        this.lensflare2.wrapS = this.lensflare2.wrapT = this.$THREE.RepeatWrapping\r\n        this.decalNormal = this.textureLoader.load('static/textures/decal/decal-normal.jpg')\r\n        this.decalNormal.wrapS = this.decalNormal.wrapT = this.$THREE.RepeatWrapping\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        clearGui() {\r\n            if (this.gui) this.gui.destroy()\r\n            this.gui = new GUI()\r\n            this.gui.add(this.param, 'example', {\r\n                'basic / color-adjustment': 'color-adjustment',\r\n                'basic / blends': 'blends',\r\n                'basic / fade': 'fade',\r\n                'basic / invert': 'invert',\r\n                'basic / blur': 'blur',\r\n                'adv / saturation': 'saturation',\r\n                'adv / refraction': 'refraction',\r\n                'adv / mosaic': 'mosaic'\r\n            }).onFinishChange(() => {\r\n                this.updateMaterial()\r\n            })\r\n            this.gui.open()\r\n        },\r\n        addGui(name, value, callback, isColor, min, max) {\r\n            var node\r\n            this.param[ name ] = value\r\n            if (isColor) {\r\n                node = this.gui.addColor(this.param, name).onChange(() => {\r\n                    callback(this.param[ name ])\r\n                })\r\n            } else if (typeof value == 'object') {\r\n                this.param[ name ] = value[ Object.keys(value)[ 0 ] ]\r\n                node = this.gui.add(this.param, name, value).onChange(() => {\r\n                    callback(this.param[ name ])\r\n                })\r\n            } else {\r\n                node = this.gui.add(this.param, name, min, max).onChange(() => {\r\n                    callback(this.param[ name ])\r\n                })\r\n            }\r\n            return node\r\n        },\r\n        updateMaterial() {\r\n            var name = this.param.example\r\n            var screen, fade, scale\r\n            this.clearGui()\r\n            switch (name) {\r\n                case 'color-adjustment':\r\n                    screen = new Nodes.ScreenNode()\r\n                    var hue = new Nodes.FloatNode()\r\n                    var sataturation = new Nodes.FloatNode(1)\r\n                    var vibrance = new Nodes.FloatNode()\r\n                    var brightness = new Nodes.FloatNode(0)\r\n                    var contrast = new Nodes.FloatNode(1)\r\n                    var hueNode = new Nodes.ColorAdjustmentNode(screen, hue, Nodes.ColorAdjustmentNode.HUE)\r\n                    var satNode = new Nodes.ColorAdjustmentNode(hueNode, sataturation, Nodes.ColorAdjustmentNode.SATURATION)\r\n                    var vibranceNode = new Nodes.ColorAdjustmentNode(satNode, vibrance, Nodes.ColorAdjustmentNode.VIBRANCE)\r\n                    var brightnessNode = new Nodes.ColorAdjustmentNode(vibranceNode, brightness, Nodes.ColorAdjustmentNode.BRIGHTNESS)\r\n                    var contrastNode = new Nodes.ColorAdjustmentNode(brightnessNode, contrast, Nodes.ColorAdjustmentNode.CONTRAST)\r\n                    this.nodepass.input = contrastNode\r\n                    // GUI\r\n                    this.addGui('hue', hue.value, (val) => {\r\n                        hue.value = val\r\n                    }, false, 0, Math.PI * 2)\r\n                    this.addGui('saturation', sataturation.value, (val) => {\r\n                        sataturation.value = val\r\n                    }, false, 0, 2)\r\n                    this.addGui('vibrance', vibrance.value, (val) => {\r\n                        vibrance.value = val\r\n                    }, false, - 1, 1)\r\n                    this.addGui('brightness', brightness.value, (val) => {\r\n                        brightness.value = val\r\n                    }, false, 0, .5)\r\n                    this.addGui('contrast', contrast.value, (val) => {\r\n                        contrast.value = val\r\n                    }, false, 0, 2)\r\n                    break\r\n                case 'fade':\r\n                    // PASS\r\n                    var color = new Nodes.ColorNode(0xFFFFFF)\r\n                    var percent = new Nodes.FloatNode(.5)\r\n                    fade = new Nodes.MathNode(\r\n                        new Nodes.ScreenNode(),\r\n                        color,\r\n                        percent,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    this.nodepass.input = fade\r\n                    // GUI\r\n                    this.addGui('color', color.value.getHex(), (val) => {\r\n                        color.value.setHex(val)\r\n                    }, true)\r\n                    this.addGui('fade', percent.value, (val) => {\r\n                        percent.value = val\r\n                    }, false, 0, 1)\r\n                    break\r\n                case 'invert':\r\n                    // PASS\r\n                    var alpha = new Nodes.FloatNode(1)\r\n                    screen = new Nodes.ScreenNode()\r\n                    var inverted = new Nodes.MathNode(screen, Nodes.MathNode.INVERT)\r\n                    fade = new Nodes.MathNode(\r\n                        screen,\r\n                        inverted,\r\n                        alpha,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    this.nodepass.input = fade\r\n                    // GUI\r\n                    this.addGui('alpha', alpha.value, (val) => {\r\n                        alpha.value = val\r\n                    }, false, 0, 1)\r\n                    break\r\n                case 'blends':\r\n                    // PASS\r\n                    var multiply = new Nodes.OperatorNode(\r\n                        new Nodes.ScreenNode(),\r\n                        new Nodes.TextureNode(this.lensflare2),\r\n                        Nodes.OperatorNode.ADD\r\n                    )\r\n                    this.nodepass.input = multiply\r\n                    // GUI\r\n                    this.addGui('blend', {\r\n                        'addition': Nodes.OperatorNode.ADD,\r\n                        'subtract': Nodes.OperatorNode.SUB,\r\n                        'multiply': Nodes.OperatorNode.MUL,\r\n                        'division': Nodes.OperatorNode.DIV\r\n                    }, (val) => {\r\n                        multiply.op = val\r\n                        this.nodepass.needsUpdate = true\r\n                    })\r\n                    break\r\n                case 'saturation':\r\n                    // PASS\r\n                    screen = new Nodes.ScreenNode()\r\n                    var sat = new Nodes.FloatNode(0)\r\n                    var satrgb = new Nodes.FunctionNode( [\r\n\t\t\t\t\t\t\t\"vec3 satrgb( vec3 rgb, float adjustment ) {\",\r\n\t\t\t\t\t\t\t// include luminance function from LuminanceNode\r\n\t\t\t\t\t\t\t\"\tvec3 intensity = vec3( luminance( rgb ) );\",\r\n\t\t\t\t\t\t\t\"\treturn mix( intensity, rgb, adjustment );\",\r\n\t\t\t\t\t\t\t\"}\"\r\n\t\t\t\t\t\t].join( \"\\n\" ), [ Nodes.LuminanceNode.Nodes.luminance ] )\r\n                    var saturation = new Nodes.FunctionCallNode(satrgb)\r\n                    saturation.inputs.rgb = screen\r\n                    saturation.inputs.adjustment = sat\r\n                    this.nodepass.input = saturation\r\n                    // GUI\r\n                    this.addGui('saturation', sat.value, (val) => {\r\n                        sat.value = val\r\n                    }, false, 0, 2)\r\n                    break\r\n                case 'refraction':\r\n                    // PASS\r\n                    var normal = new Nodes.TextureNode(this.decalNormal)\r\n                    var normalXY = new Nodes.SwitchNode(normal, 'xy')\r\n                    scale = new Nodes.FloatNode(.5)\r\n                    var normalXYFlip = new Nodes.MathNode(\r\n                        normalXY,\r\n                        Nodes.MathNode.INVERT\r\n                    )\r\n                    var offsetNormal = new Nodes.OperatorNode(\r\n                        normalXYFlip,\r\n                        new Nodes.FloatNode(.5),\r\n                        Nodes.OperatorNode.ADD\r\n                    )\r\n                    var scaleTexture = new Nodes.OperatorNode(\r\n                        new Nodes.SwitchNode(normal, 'z'),\r\n                        offsetNormal,\r\n                        Nodes.OperatorNode.MUL\r\n                    )\r\n                    var scaleNormal = new Nodes.MathNode(\r\n                        new Nodes.FloatNode(1),\r\n                        scaleTexture,\r\n                        scale,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    var offsetCoord = new Nodes.OperatorNode(\r\n                        new Nodes.UVNode(),\r\n                        scaleNormal,\r\n                        Nodes.OperatorNode.MUL\r\n                    )\r\n                    screen = new Nodes.ScreenNode(offsetCoord)\r\n                    this.nodepass.input = screen\r\n                    // GUI\r\n                    this.addGui('scale', scale.value, (val) => {\r\n                        scale.value = val\r\n                    }, false, 0, 1)\r\n                    this.addGui('invert', false, (val) => {\r\n                        offsetNormal.a = val ? normalXYFlip : normalXY\r\n                        this.nodepass.needsUpdate = true\r\n                    })\r\n                    break\r\n                case 'mosaic':\r\n                    // PASS\r\n                    scale = new Nodes.FloatNode(128)\r\n                    fade = new Nodes.FloatNode(1)\r\n                    var uv = new Nodes.UVNode()\r\n                    var blocks = new Nodes.OperatorNode(\r\n                        uv,\r\n                        scale,\r\n                        Nodes.OperatorNode.MUL\r\n                    )\r\n                    var blocksSize = new Nodes.MathNode(\r\n                        blocks,\r\n                        Nodes.MathNode.FLOOR\r\n                    )\r\n                    var mosaicUV = new Nodes.OperatorNode(\r\n                        blocksSize,\r\n                        scale,\r\n                        Nodes.OperatorNode.DIV\r\n                    )\r\n                    var fadeScreen = new Nodes.MathNode(\r\n                        uv,\r\n                        mosaicUV,\r\n                        fade,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    this.nodepass.input = new Nodes.ScreenNode(fadeScreen)\r\n                    // GUI\r\n                    this.addGui('scale', scale.value, (val) => {\r\n                        scale.value = val\r\n                    }, false, 16, 1024)\r\n                    this.addGui('fade', fade.value, (val) => {\r\n                        fade.value = val\r\n                    }, false, 0, 1)\r\n                    this.addGui('mask', false, (val) => {\r\n                        fadeScreen.c = val ? new Nodes.TextureNode(this.lensflare2) : fade\r\n                        this.nodepass.needsUpdate = true\r\n                    })\r\n                    break\r\n                case 'blur':\r\n                    // PASS\r\n                    var size = renderer.getDrawingBufferSize(new this.$THREE.Vector2())\r\n                    var blurScreen = new Nodes.BlurNode(new Nodes.ScreenNode())\r\n                    blurScreen.size = new this.$THREE.Vector2(size.width, size.height)\r\n                    this.nodepass.input = blurScreen\r\n                    // GUI\r\n                    this.addGui('blurX', blurScreen.radius.x, (val) => {\r\n                        blurScreen.radius.x = val\r\n                    }, false, 0, 15)\r\n                    this.addGui('blurY', blurScreen.radius.y, (val) => {\r\n                        blurScreen.radius.y = val\r\n                    }, false, 0, 15)\r\n                    break\r\n            }\r\n            this.nodepass.needsUpdate = true\r\n            // test serialization\r\n            /*\r\n                        var library = {}\r\n                        library[ lensflare2.uuid ] = lensflare2\r\n                        library[ decalNormal.uuid ] = decalNormal\r\n\r\n                        var json = nodepass.toJSON()\r\n\r\n                        nodepass.input = new Nodes.NodeMaterialLoader(null, library).parse(json).value\r\n                    */\r\n        },\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            document.getElementsByClassName('webglPostprocessingNodesPass-container')[0].appendChild(this.renderer.domElement)\r\n            //\r\n            this.camera = new this.$THREE.PerspectiveCamera(70, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.z = 400\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.fog = new this.$THREE.Fog(0x0066FF, 1, 1000)\r\n            this.object = new this.$THREE.Object3D()\r\n            this.scene.add(this.object)\r\n            var geometry = new this.$THREE.SphereBufferGeometry(1, 4, 4)\r\n            for (var i = 0; i < 100; i ++) {\r\n                var material = new this.$THREE.MeshPhongMaterial({ color: 0x888888 + (Math.random() * 0x888888), flatShading: true })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize()\r\n                mesh.position.multiplyScalar(Math.random() * 400)\r\n                mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2)\r\n                mesh.scale.x = mesh.scale.y = mesh.scale.z = 10 + (Math.random() * 40)\r\n                this.object.add(mesh)\r\n            }\r\n            this.scene.add(new this.$THREE.AmbientLight(0x999999))\r\n            this.light = new this.$THREE.DirectionalLight(0xffffff)\r\n            this.light.position.set(1, 1, 1)\r\n            this.scene.add(this.light)\r\n            // postprocessing\r\n            this.composer = new EffectComposer(this.renderer)\r\n            this.composer.addPass(new RenderPass(this.scene, this.camera))\r\n            this.nodepass = new NodePass()\r\n            this.composer.addPass(this.nodepass)\r\n            //\r\n            this.updateMaterial()\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.composer.setSize(window.innerWidth - 281, window.innerHeight)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            var delta = this.clock.getDelta()\r\n            this.object.rotation.x += 0.005\r\n            this.object.rotation.y += 0.01\r\n            this.frame.update(delta).updateNode(this.nodepass.material)\r\n            this.composer.render()\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingNodesPass-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingNodesPass.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingNodesPass-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - Node-Based Post-Processing\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-77b5a150\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingNodesPass.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-77b5a150\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingNodesPass.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingNodesPass.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingNodesPass.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-77b5a150\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingNodesPass.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-77b5a150\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingNodesPass.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}