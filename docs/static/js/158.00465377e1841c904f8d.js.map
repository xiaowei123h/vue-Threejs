{"version":3,"sources":["webpack:///src/views/geometries/webglGeometryTerrainRaycast.vue","webpack:///./src/views/geometries/webglGeometryTerrainRaycast.vue?62a2","webpack:///./src/views/geometries/webglGeometryTerrainRaycast.vue"],"names":["webglGeometryTerrainRaycast","data","container","stats","camera","controls","scene","renderer","mesh","texture","worldWidth","worldDepth","worldHalfWidth","worldHalfDepth","helper","raycaster","mouse","mounted","this","$THREE","Raycaster","Vector2","init","animate","methods","document","getElementById","innerHTML","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","appendChild","domElement","Scene","background","Color","PerspectiveCamera","OrbitControls","minDistance","maxDistance","maxPolarAngle","Math","PI","generateHeight","target","y","position","x","update","geometry","PlaneBufferGeometry","rotateX","vertices","attributes","array","i","j","l","length","computeFaceNormals","CanvasTexture","generateTexture","wrapS","ClampToEdgeWrapping","wrapT","Mesh","MeshBasicMaterial","map","add","geometryHelper","ConeBufferGeometry","translate","MeshNormalMaterial","addEventListener","onMouseMove","$Stats","dom","style","left","onWindowResize","$onWindowResize","width","height","size","Uint8Array","perlin","ImprovedNoise","z","random","quality","abs","noise","context","image","imageData","shade","vector3","Vector3","sun","normalize","canvas","createElement","getContext","fillStyle","fillRect","getImageData","dot","putImageData","canvasScaled","scale","drawImage","v","requestAnimationFrame","render","event","clientX","clientWidth","clientY","clientHeight","setFromCamera","intersects","intersectObject","set","lookAt","face","normal","copy","point","geometries_webglGeometryTerrainRaycast","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/158.00465377e1841c904f8d.js","sourcesContent":["<template>\r\n    <div class=\"webglGeometryTerrainRaycast-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\"><a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl terrain raycasting demo</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { ImprovedNoise } from '@/components/jsm/math/ImprovedNoise.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            controls: null,\r\n            scene: null,\r\n            renderer: null,\r\n            mesh: null,\r\n            texture: null,\r\n            worldWidth: 256,\r\n            worldDepth: 256,\r\n            worldHalfWidth: null,\r\n            worldHalfDepth: null,\r\n\t\t\thelper: null,\r\n\t\t\traycaster: null,\r\n\t\t\tmouse: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.worldHalfWidth = this.worldWidth / 2\r\n        this.worldHalfDepth = this.worldDepth / 2;\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById('container')\r\n            this.container.innerHTML = \"\"\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xbfd1e5)\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 10, 20000)\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.controls.minDistance = 1000\r\n            this.controls.maxDistance = 10000\r\n            this.controls.maxPolarAngle = Math.PI / 2\r\n            //\r\n            var data = this.generateHeight(this.worldWidth, this.worldDepth)\r\n            this.controls.target.y = data[ this.worldHalfWidth + this.worldHalfDepth * this.worldWidth ] + 500\r\n            this.camera.position.y = this.controls.target.y + 2000\r\n            this.camera.position.x = 2000\r\n            this.controls.update()\r\n            var geometry = new this.$THREE.PlaneBufferGeometry(7500, 7500, this.worldWidth - 1, this.worldDepth - 1)\r\n            geometry.rotateX(- Math.PI / 2)\r\n            var vertices = geometry.attributes.position.array\r\n            for (var i = 0, j = 0, l = vertices.length; i < l; i ++, j += 3) {\r\n                vertices[ j + 1 ] = data[ i ] * 10;\r\n            }\r\n            geometry.computeFaceNormals() // needed for helper\r\n            //\r\n            this.texture = new this.$THREE.CanvasTexture(this.generateTexture(data, this.worldWidth, this.worldDepth))\r\n            this.texture.wrapS = this.$THREE.ClampToEdgeWrapping\r\n            this.texture.wrapT = this.$THREE.ClampToEdgeWrapping\r\n            this.mesh = new this.$THREE.Mesh(geometry, new this.$THREE.MeshBasicMaterial({ map: this.texture }))\r\n            this.scene.add(this.mesh)\r\n            var geometryHelper = new this.$THREE.ConeBufferGeometry(20, 100, 3)\r\n            geometryHelper.translate(0, 50, 0)\r\n            geometryHelper.rotateX(Math.PI / 2)\r\n            this.helper = new this.$THREE.Mesh(geometryHelper, new this.$THREE.MeshNormalMaterial())\r\n            this.scene.add(this.helper)\r\n            this.container.addEventListener('mousemove', this.onMouseMove, false)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        generateHeight(width, height) {\r\n            var size = width * height, data = new Uint8Array(size),\r\n                perlin = new ImprovedNoise(), z = Math.random() * 100\r\n            var quality = 1\r\n            for (var j = 0; j < 4; j ++) {\r\n                for (var i = 0; i < size; i ++) {\r\n                    var x = i % width, y = ~ ~ (i / width)\r\n                    data[ i ] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75)\r\n                }\r\n                quality *= 5\r\n            }\r\n            return data\r\n        },\r\n        generateTexture(data, width, height) {\r\n            // bake lighting into texture\r\n            var context, image, imageData, shade\r\n            var vector3 = new this.$THREE.Vector3(0, 0, 0)\r\n            var sun = new this.$THREE.Vector3(1, 1, 1)\r\n            sun.normalize()\r\n            var canvas = document.createElement('canvas')\r\n            canvas.width = width\r\n            canvas.height = height\r\n            context = canvas.getContext('2d')\r\n            context.fillStyle = '#000'\r\n            context.fillRect(0, 0, width, height)\r\n            image = context.getImageData(0, 0, canvas.width, canvas.height)\r\n            imageData = image.data\r\n            for (var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++) {\r\n                vector3.x = data[ j - 2 ] - data[ j + 2 ]\r\n                vector3.y = 2\r\n                vector3.z = data[ j - width * 2 ] - data[ j + width * 2 ]\r\n                vector3.normalize()\r\n                shade = vector3.dot(sun)\r\n                imageData[ i ] = (96 + shade * 128) * (0.5 + data[ j ] * 0.007)\r\n                imageData[ i + 1 ] = (32 + shade * 96) * (0.5 + data[ j ] * 0.007)\r\n                imageData[ i + 2 ] = (shade * 96) * (0.5 + data[ j ] * 0.007)\r\n            }\r\n            context.putImageData(image, 0, 0)\r\n            // Scaled 4x\r\n            var canvasScaled = document.createElement('canvas')\r\n            canvasScaled.width = width * 4\r\n            canvasScaled.height = height * 4\r\n            context = canvasScaled.getContext('2d')\r\n            context.scale(4, 4)\r\n            context.drawImage(canvas, 0, 0)\r\n            image = context.getImageData(0, 0, canvasScaled.width, canvasScaled.height)\r\n            imageData = image.data\r\n            for (var i = 0, l = imageData.length; i < l; i += 4) {\r\n                var v = ~ ~ (Math.random() * 5)\r\n                imageData[ i ] += v\r\n                imageData[ i + 1 ] += v\r\n                imageData[ i + 2 ] += v\r\n            }\r\n            context.putImageData(image, 0, 0)\r\n            return canvasScaled\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        },\r\n        onMouseMove(event) {\r\n            this.mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1\r\n            this.mouse.y = - (event.clientY / this.renderer.domElement.clientHeight) * 2 + 1\r\n            this.raycaster.setFromCamera(this.mouse, this.camera)\r\n            // See if the ray from the camera into the world hits one of our meshes\r\n            var intersects = this.raycaster.intersectObject(this.mesh)\r\n            // Toggle rotation bool for meshes that we clicked\r\n            if (intersects.length > 0) {\r\n                this.helper.position.set(0, 0, 0)\r\n                this.helper.lookAt(intersects[ 0 ].face.normal)\r\n                this.helper.position.copy(intersects[ 0 ].point)\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglGeometryTerrainRaycast-container {\r\n    width: 100%;\r\n    background-color: #bfd1e5;\r\n}\r\n#info {\t\t\r\n    color: #61443e;\r\n}\r\n#info a {\r\n    color: #a06851;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/geometries/webglGeometryTerrainRaycast.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglGeometryTerrainRaycast-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl terrain raycasting demo\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1f4f8ee0\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/geometries/webglGeometryTerrainRaycast.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1f4f8ee0\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglGeometryTerrainRaycast.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometryTerrainRaycast.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometryTerrainRaycast.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1f4f8ee0\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglGeometryTerrainRaycast.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1f4f8ee0\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/geometries/webglGeometryTerrainRaycast.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}