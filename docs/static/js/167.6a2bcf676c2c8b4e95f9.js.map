{"version":3,"sources":["webpack:///./src/components/jsm/utils/RoughnessMipmapper.js","webpack:///src/views/loader/webglLoaderGltf.vue","webpack:///./src/views/loader/webglLoaderGltf.vue?1d6b","webpack:///./src/views/loader/webglLoaderGltf.vue"],"names":["shaderMaterial","_mipmapMaterial","RawShaderMaterial","uniforms","roughnessMap","value","normalMap","texelSize","Vector2","vertexShader","fragmentShader","blending","NoBlending","depthTest","depthWrite","type","_mesh","Mesh","PlaneBufferGeometry","_flatCamera","OrthographicCamera","_tempTarget","_renderer","RoughnessMipmapper","renderer","compile","prototype","constructor","generateMipmaps","material","userData","roughnessUpdated","width","Math","max","image","height","MathUtils","isPowerOfTwo","oldTarget","getRenderTarget","autoClear","dispose","WebGLRenderTarget","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","position","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","webglLoaderGltf","data","camera","scene","mounted","this","init","methods","_this","container","document","createElement","getElementsByClassName","appendChild","$THREE","PerspectiveCamera","$webglInnerWidth","window","innerHeight","Scene","RGBELoader","setDataType","UnsignedByteType","setPath","load","envMap","pmremGenerator","fromEquirectangular","background","environment","roughnessMipmapper","GLTFLoader","gltf","traverse","child","isMesh","add","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","domElement","PMREMGenerator","compileEquirectangularShader","controls","OrbitControls","addEventListener","minDistance","maxDistance","target","update","onWindowResize","$onWindowResize","loader_webglLoaderGltf","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","attrs","id","href","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"6GAyJKA,kDAtIDC,IAsICD,EAAiB,IAAIE,OAExBC,UACCC,cAAgBC,MAAO,MACvBC,WAAaD,MAAO,MACpBE,WAAaF,MAAO,IAAIG,OAAS,EAAG,KAGrCC,aAAA,qQAkBAC,eAAA,4sEAqGAC,SAAUC,MACVC,WAAW,EACXC,YAAY,KAIEC,KAAO,qBAEff,GA3QJgB,EAAQ,IAAIC,MAAM,IAAIC,MAAqB,EAAG,GAAKjB,GAEnDkB,EAAc,IAAIC,MAAoB,EAAG,EAAG,EAAG,EAAG,EAAG,GAErDC,EAAc,KAEdC,EAAY,KAEhB,SAASC,EAAoBC,IAE5BF,EAAYE,GAEFC,QAAST,EAAOG,GAI3BI,EAAmBG,WAElBC,YAAaJ,EAEbK,gBAAiB,SAAWC,GAE3B,GAAK,iBAAkBA,IAAa,EAApC,CAFsC,IAIhCzB,EAA4ByB,EAA5BzB,aAAcE,EAAcuB,EAAdvB,UAEpB,GAAsB,OAAjBF,GAAuC,OAAdE,GAAwBF,EAAawB,kBAAmBC,EAASC,SAASC,iBAAxG,CAEAF,EAASC,SAASC,kBAAmB,EAErC,IAAIC,EAAQC,KAAKC,IAAK9B,EAAa+B,MAAMH,MAAO1B,EAAU6B,MAAMH,OAE5DI,EAASH,KAAKC,IAAK9B,EAAa+B,MAAMC,OAAQ9B,EAAU6B,MAAMC,QAElE,GAAOC,MAAUC,aAAcN,IAAaK,MAAUC,aAAcF,GAApE,CAEA,IAAIG,EAAYjB,EAAUkB,kBAEtBC,EAAYnB,EAAUmB,UAc1B,GAZAnB,EAAUmB,WAAY,EAED,OAAhBpB,GAAwBA,EAAYW,QAAUA,GAASX,EAAYe,SAAWA,IAE7D,OAAhBf,GAAuBA,EAAYqB,WAExCrB,EAAc,IAAIsB,OAAmBX,EAAOI,GAAUQ,aAAa,KAEvDC,aAAc,GAItBb,IAAU5B,EAAa+B,MAAMH,OAASI,IAAWhC,EAAa+B,MAAMC,OAAS,CAEjF,IAAIU,GACHC,MAAO3C,EAAa2C,MACpBC,MAAO5C,EAAa4C,MACpBC,UAAW7C,EAAa6C,UACxBC,UAAW9C,EAAa8C,UACxBN,aAAa,GAGVO,EAAqB,IAAIR,OAAmBX,EAAOI,EAAQU,GAE/DK,EAAmBC,QAAQxB,iBAAkB,EAI7CN,EAAU+B,gBAAiBF,GAE3BtB,EAASzB,aAAe+C,EAAmBC,QAEtCvB,EAASyB,cAAgBlD,IAAeyB,EAASyB,aAAezB,EAASzB,cAEzEyB,EAAS0B,OAASnD,IAAeyB,EAAS0B,MAAQ1B,EAASzB,cAIjEH,EAAgBE,SAASC,aAAaC,MAAQD,EAE9CH,EAAgBE,SAASG,UAAUD,MAAQC,EAM3C,IAJA,IAAIkD,EAAW,IAAIhD,OAAS,EAAG,GAE3BD,EAAYN,EAAgBE,SAASI,UAAUF,MAEzCoD,EAAM,EAAGzB,GAAS,GAAKI,GAAU,IAAMqB,EAAKzB,GAAS,EAAGI,GAAU,EAM3E7B,EAAUmD,IAAK,EAAM1B,EAAO,EAAMI,GAEtB,GAAPqB,GAAWlD,EAAUmD,IAAK,EAAK,GAEpCrC,EAAYsC,SAASD,IAAKF,EAASI,EAAGJ,EAASK,EAAG7B,EAAOI,GAEzDf,EAAYyC,QAAQJ,IAAKF,EAASI,EAAGJ,EAASK,EAAG7B,EAAOI,GAExDd,EAAU+B,gBAAiBhC,GAE3BC,EAAUyC,OAAQ/C,EAAOG,GAEzBG,EAAU0C,yBAA0BR,EAAU3B,EAASzB,aAAcqD,GAErExD,EAAgBE,SAASC,aAAaC,MAAQwB,EAASzB,aAInDA,IAAiByB,EAASzB,cAAeA,EAAasC,UAE3DpB,EAAU+B,gBAAiBd,GAE3BjB,EAAUmB,UAAYA,MAIvBC,QAAS,WAERzC,EAAgByC,UAEhB1B,EAAMiD,SAASvB,UAEK,MAAfrB,GAAsBA,EAAYqB,YCjIzC,IAAAwB,GACAC,KADA,WAEA,OACAC,OAAA,KACAC,MAAA,KACA7C,SAAA,OAGA8C,QARA,WASAC,KAAAC,OACAD,KAAAR,UAEAU,SACAD,KADA,WACA,IAAAE,EAAAH,KACAI,EAAAC,SAAAC,cAAA,OACAD,SAAAE,uBAAA,gCAAAC,YAAAJ,GACAJ,KAAAH,OAAA,IAAAG,KAAAS,OAAAC,kBAAA,GAAAV,KAAAW,iBAAAC,OAAAC,YAAA,QACAb,KAAAH,OAAAZ,SAAAE,KAAA,YACAa,KAAAF,MAAA,IAAAE,KAAAS,OAAAK,OACA,IAAAC,EAAA,GACAC,YAAAhB,KAAAS,OAAAQ,kBACAC,QAAA,oCACAC,KAAA,kCAAAtC,GACA,IAAAuC,EAAAC,EAAAC,oBAAAzC,WACAsB,EAAAL,MAAAyB,WAAAH,EACAjB,EAAAL,MAAA0B,YAAAJ,EACAvC,EAAAV,UACAkD,EAAAlD,UACAgC,EAAAX,SAGA,IAAAiC,EAAA,IAAAzE,EAAAmD,EAAAlD,WACA,IAAAyE,EAAA,GAAAR,QAAA,0CACAC,KAAA,8BAAAQ,GACAA,EAAA7B,MAAA8B,SAAA,SAAAC,GACAA,EAAAC,SAKA3B,EAAAL,MAAAiC,IAAAJ,EAAA7B,OACA2B,EAAAtD,UACAgC,EAAAX,aAGAQ,KAAA/C,SAAA,IAAA+C,KAAAS,OAAAuB,eAAAC,WAAA,IACAjC,KAAA/C,SAAAiF,cAAAtB,OAAAuB,kBACAnC,KAAA/C,SAAAmF,QAAApC,KAAAW,iBAAAC,OAAAC,aACAb,KAAA/C,SAAAoF,YAAArC,KAAAS,OAAA6B,sBACAtC,KAAA/C,SAAAsF,oBAAA,EACAvC,KAAA/C,SAAAuF,eAAAxC,KAAAS,OAAAgC,aACArC,EAAAI,YAAAR,KAAA/C,SAAAyF,YACA,IAAArB,EAAA,IAAArB,KAAAS,OAAAkC,eAAA3C,KAAA/C,UACAoE,EAAAuB,+BACA,IAAAC,EAAA,IAAAC,EAAA,EAAA9C,KAAAH,OAAAG,KAAA/C,SAAAyF,YACAG,EAAAE,iBAAA,SAAA/C,KAAAR,QACAqD,EAAAG,YAAA,EACAH,EAAAI,YAAA,GACAJ,EAAAK,OAAA/D,IAAA,SACA0D,EAAAM,SACAvC,OAAAmC,iBAAA,SAAA/C,KAAAoD,gBAAA,IAEAA,eAlDA,WAmDApD,KAAAqD,gBAAArD,KAAAH,OAAAG,KAAA/C,UACA+C,KAAAR,UAEAA,OAtDA,WAuDAQ,KAAA/C,SAAAuC,OAAAQ,KAAAF,MAAAE,KAAAH,WChFeyD,GADE9D,OAFjB,WAA0BQ,KAAauD,eAAbvD,KAAuCwD,MAAAC,GAAwB,OAA/DzD,KAA+D0D,GAAA,IAExEC,iBADjB,WAAoC,IAAAC,EAAA5D,KAAa6D,EAAAD,EAAAL,eAA0BE,EAAAG,EAAAJ,MAAAC,IAAAI,EAAwB,OAAAJ,EAAA,OAAiBK,YAAA,8BAAwCL,EAAA,OAAYM,OAAOC,GAAA,UAAaP,EAAA,KAAUM,OAAOE,KAAA,sBAAAf,OAAA,SAAAgB,IAAA,cAAiEN,EAAAO,GAAA,cAAAP,EAAAO,GAAA,iBAAAV,EAAA,MAAAG,EAAAO,GAAA,mDAAAV,EAAA,KAA0HM,OAAOE,KAAA,uCAAAf,OAAA,SAAAgB,IAAA,cAAkFN,EAAAO,GAAA,oBAAAV,EAAA,MAAAG,EAAAO,GAAA,KAAAV,EAAA,KAA0DM,OAAOE,KAAA,gDAAAf,OAAA,SAAAgB,IAAA,cAA2FN,EAAAO,GAAA,qBAAAP,EAAAO,GAAA,QAAAV,EAAA,KAAqDM,OAAOE,KAAA,yBAAAf,OAAA,SAAAgB,IAAA,cAAoEN,EAAAO,GAAA,uBCE7vB,IAcAC,EAdyBC,EAAQ,OAcjCC,CACE3E,EACA2D,GATF,EAVA,SAAAiB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/167.6a2bcf676c2c8b4e95f9.js","sourcesContent":["/**\r\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\r\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\r\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\r\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\r\n * enlarged to match the dimensions of the normal map.\r\n */\r\n\r\nimport {\r\n\tMathUtils,\r\n\tMesh,\r\n\tNoBlending,\r\n\tOrthographicCamera,\r\n\tPlaneBufferGeometry,\r\n\tRawShaderMaterial,\r\n\tVector2,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar _mipmapMaterial = _getMipmapMaterial();\r\n\r\nvar _mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), _mipmapMaterial );\r\n\r\nvar _flatCamera = new OrthographicCamera( 0, 1, 0, 1, 0, 1 );\r\n\r\nvar _tempTarget = null;\r\n\r\nvar _renderer = null;\r\n\r\nfunction RoughnessMipmapper( renderer ) {\r\n\r\n\t_renderer = renderer;\r\n\r\n\t_renderer.compile( _mesh, _flatCamera );\r\n\r\n}\r\n\r\nRoughnessMipmapper.prototype = {\r\n\r\n\tconstructor: RoughnessMipmapper,\r\n\r\n\tgenerateMipmaps: function ( material ) {\r\n\r\n\t\tif ( 'roughnessMap' in material === false ) return;\r\n\r\n\t\tvar { roughnessMap, normalMap } = material;\r\n\r\n\t\tif ( roughnessMap === null || normalMap === null || ! roughnessMap.generateMipmaps || material.userData.roughnessUpdated ) return;\r\n\r\n\t\tmaterial.userData.roughnessUpdated = true;\r\n\r\n\t\tvar width = Math.max( roughnessMap.image.width, normalMap.image.width );\r\n\r\n\t\tvar height = Math.max( roughnessMap.image.height, normalMap.image.height );\r\n\r\n\t\tif ( ! MathUtils.isPowerOfTwo( width ) || ! MathUtils.isPowerOfTwo( height ) ) return;\r\n\r\n\t\tvar oldTarget = _renderer.getRenderTarget();\r\n\r\n\t\tvar autoClear = _renderer.autoClear;\r\n\r\n\t\t_renderer.autoClear = false;\r\n\r\n\t\tif ( _tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height ) {\r\n\r\n\t\t\tif ( _tempTarget !== null ) _tempTarget.dispose();\r\n\r\n\t\t\t_tempTarget = new WebGLRenderTarget( width, height, { depthBuffer: false } );\r\n\r\n\t\t\t_tempTarget.scissorTest = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( width !== roughnessMap.image.width || height !== roughnessMap.image.height ) {\r\n\r\n\t\t\tvar params = {\r\n\t\t\t\twrapS: roughnessMap.wrapS,\r\n\t\t\t\twrapT: roughnessMap.wrapT,\r\n\t\t\t\tmagFilter: roughnessMap.magFilter,\r\n\t\t\t\tminFilter: roughnessMap.minFilter,\r\n\t\t\t\tdepthBuffer: false\r\n\t\t\t};\r\n\r\n\t\t\tvar newRoughnessTarget = new WebGLRenderTarget( width, height, params );\r\n\r\n\t\t\tnewRoughnessTarget.texture.generateMipmaps = true;\r\n\r\n\t\t\t// Setting the render target causes the memory to be allocated.\r\n\r\n\t\t\t_renderer.setRenderTarget( newRoughnessTarget );\r\n\r\n\t\t\tmaterial.roughnessMap = newRoughnessTarget.texture;\r\n\r\n\t\t\tif ( material.metalnessMap == roughnessMap ) material.metalnessMap = material.roughnessMap;\r\n\r\n\t\t\tif ( material.aoMap == roughnessMap ) material.aoMap = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\t_mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\r\n\r\n\t\t_mipmapMaterial.uniforms.normalMap.value = normalMap;\r\n\r\n\t\tvar position = new Vector2( 0, 0 );\r\n\r\n\t\tvar texelSize = _mipmapMaterial.uniforms.texelSize.value;\r\n\r\n\t\tfor ( var mip = 0; width >= 1 && height >= 1; ++ mip, width /= 2, height /= 2 ) {\r\n\r\n\t\t\t// Rendering to a mip level is not allowed in webGL1. Instead we must set\r\n\t\t\t// up a secondary texture to write the result to, then copy it back to the\r\n\t\t\t// proper mipmap level.\r\n\r\n\t\t\ttexelSize.set( 1.0 / width, 1.0 / height );\r\n\r\n\t\t\tif ( mip == 0 ) texelSize.set( 0.0, 0.0 );\r\n\r\n\t\t\t_tempTarget.viewport.set( position.x, position.y, width, height );\r\n\r\n\t\t\t_tempTarget.scissor.set( position.x, position.y, width, height );\r\n\r\n\t\t\t_renderer.setRenderTarget( _tempTarget );\r\n\r\n\t\t\t_renderer.render( _mesh, _flatCamera );\r\n\r\n\t\t\t_renderer.copyFramebufferToTexture( position, material.roughnessMap, mip );\r\n\r\n\t\t\t_mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( roughnessMap !== material.roughnessMap ) roughnessMap.dispose();\r\n\r\n\t\t_renderer.setRenderTarget( oldTarget );\r\n\r\n\t\t_renderer.autoClear = autoClear;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\t_mipmapMaterial.dispose();\r\n\r\n\t\t_mesh.geometry.dispose();\r\n\r\n\t\tif ( _tempTarget != null ) _tempTarget.dispose();\r\n\r\n\t}\r\n\r\n};\r\n\r\nfunction _getMipmapMaterial() {\r\n\r\n\tvar shaderMaterial = new RawShaderMaterial( {\r\n\r\n\t\tuniforms: {\r\n\t\t\troughnessMap: { value: null },\r\n\t\t\tnormalMap: { value: null },\r\n\t\t\ttexelSize: { value: new Vector2( 1, 1 ) }\r\n\t\t},\r\n\r\n\t\tvertexShader: /* glsl */`\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tattribute vec3 position;\r\n\t\t\tattribute vec2 uv;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tvUv = uv;\r\n\r\n\t\t\t\tgl_Position = vec4( position, 1.0 );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tfragmentShader: /* glsl */`\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\tuniform sampler2D roughnessMap;\r\n\t\t\tuniform sampler2D normalMap;\r\n\t\t\tuniform vec2 texelSize;\r\n\r\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\r\n\r\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\r\n\r\n\t\t\t#include <cube_uv_reflection_fragment>\r\n\r\n\t\t\tfloat roughnessToVariance( float roughness ) {\r\n\r\n\t\t\t\tfloat variance = 0.0;\r\n\r\n\t\t\t\tif ( roughness >= r1 ) {\r\n\r\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\r\n\r\n\t\t\t\t} else if ( roughness >= r4 ) {\r\n\r\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\r\n\r\n\t\t\t\t} else if ( roughness >= r5 ) {\r\n\r\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\r\n\r\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn variance;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloat varianceToRoughness( float variance ) {\r\n\r\n\t\t\t\tfloat roughness = 0.0;\r\n\r\n\t\t\t\tif ( variance >= v1 ) {\r\n\r\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\r\n\r\n\t\t\t\t} else if ( variance >= v4 ) {\r\n\r\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\r\n\r\n\t\t\t\t} else if ( variance >= v5 ) {\r\n\r\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn roughness;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\r\n\r\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\r\n\r\n\t\t\t\tfloat roughness = gl_FragColor.g;\r\n\r\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\r\n\r\n\t\t\t\tvec3 avgNormal;\r\n\r\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\r\n\r\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\r\n\r\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\r\n\r\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\r\n\r\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false\r\n\r\n\t} );\r\n\r\n\tshaderMaterial.type = 'RoughnessMipmapper';\r\n\r\n\treturn shaderMaterial;\r\n\r\n}\r\n\r\nexport { RoughnessMipmapper };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/utils/RoughnessMipmapper.js","<template>\r\n    <div class=\"webglLoaderGltf-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - GLTFLoader<br />\r\n\t\t\tBattle Damaged Sci-fi Helmet by\r\n\t\t\t<a href=\"https://sketchfab.com/theblueturtle_\" target=\"_blank\" rel=\"noopener\">theblueturtle_</a><br />\r\n\t\t\t<a href=\"https://hdrihaven.com/hdri/?h=royal_esplanade\" target=\"_blank\" rel=\"noopener\">Royal Esplanade</a> by <a href=\"https://hdrihaven.com/\" target=\"_blank\" rel=\"noopener\">HDRI Haven</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js'\r\nimport { RGBELoader } from '@/components/jsm/loaders/RGBELoader.js'\r\nimport { RoughnessMipmapper } from '@/components/jsm/utils/RoughnessMipmapper.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.render()\r\n    },\r\n    methods: {\r\n        init() {\r\n            var container = document.createElement('div')\r\n            document.getElementsByClassName('webglLoaderGltf-container')[0].appendChild(container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, this.$webglInnerWidth / window.innerHeight, 0.25, 20)\r\n            this.camera.position.set(- 1.8, 0.6, 2.7)\r\n            this.scene = new this.$THREE.Scene()\r\n            new RGBELoader()\r\n                .setDataType(this.$THREE.UnsignedByteType)\r\n                .setPath('static/textures/equirectangular/')\r\n                .load('royal_esplanade_1k.hdr', (texture) => {\r\n                    var envMap = pmremGenerator.fromEquirectangular(texture).texture\r\n                    this.scene.background = envMap\r\n                    this.scene.environment = envMap\r\n                    texture.dispose()\r\n                    pmremGenerator.dispose()\r\n                    this.render()\r\n                    // model\r\n                    // use of RoughnessMipmapper is optional\r\n                    var roughnessMipmapper = new RoughnessMipmapper(this.renderer)\r\n                    var loader = new GLTFLoader().setPath('static/models/gltf/DamagedHelmet/glTF/')\r\n                    loader.load('DamagedHelmet.gltf', (gltf) => {\r\n                        gltf.scene.traverse((child) => {\r\n                            if (child.isMesh) {\r\n                                // TOFIX RoughnessMipmapper seems to be broken with WebGL 2.0\r\n                                // roughnessMipmapper.generateMipmaps(child.material)\r\n                            }\r\n                        })\r\n                        this.scene.add(gltf.scene)\r\n                        roughnessMipmapper.dispose()\r\n                        this.render()\r\n                    })\r\n                })\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.toneMapping = this.$THREE.ACESFilmicToneMapping\r\n            this.renderer.toneMappingExposure = 1\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            container.appendChild(this.renderer.domElement)\r\n            var pmremGenerator = new this.$THREE.PMREMGenerator(this.renderer)\r\n            pmremGenerator.compileEquirectangularShader()\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.addEventListener('change', this.render) // use if there is no animation loop\r\n            controls.minDistance = 2\r\n            controls.maxDistance = 10\r\n            controls.target.set(0, 0, - 0.2)\r\n            controls.update()\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.render()\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderGltf-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderGltf.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderGltf-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - GLTFLoader\"),_c('br'),_vm._v(\"\\n\\t\\t\\tBattle Damaged Sci-fi Helmet by\\n\\t\\t\\t\"),_c('a',{attrs:{\"href\":\"https://sketchfab.com/theblueturtle_\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"theblueturtle_\")]),_c('br'),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"https://hdrihaven.com/hdri/?h=royal_esplanade\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Royal Esplanade\")]),_vm._v(\" by \"),_c('a',{attrs:{\"href\":\"https://hdrihaven.com/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"HDRI Haven\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3bdeefa8\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderGltf.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3bdeefa8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderGltf.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderGltf.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderGltf.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3bdeefa8\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderGltf.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3bdeefa8\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderGltf.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}