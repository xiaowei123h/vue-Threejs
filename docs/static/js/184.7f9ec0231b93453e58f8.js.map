{"version":3,"sources":["webpack:///./src/utils/webglPostprocessingCrossfade.js","webpack:///src/views/postprocessing/webglPostprocessingCrossfade.vue","webpack:///./src/views/postprocessing/webglPostprocessingCrossfade.vue?6257","webpack:///./src/views/postprocessing/webglPostprocessingCrossfade.vue"],"names":["FXScene","type","numObjects","cameraZ","fov","rotationSpeed","clearColor","THREE","renderer","generateGeometry","_this","this","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","scene","Scene","add","AmbientLight","light","SpotLight","set","defaultMaterial","MeshPhongMaterial","color","flatShading","vertexColors","mesh","Mesh","renderTargetParameters","minFilter","LinearFilter","magFilter","format","RGBFormat","fbo","WebGLRenderTarget","render","delta","rtt","rotation","x","y","setClearColor","setRenderTarget","clear","Transition","sceneA","sceneB","transitionParams","clock","_this2","cameraOrtho","OrthographicCamera","textures","loader","TextureLoader","i","load","quadmaterial","ShaderMaterial","uniforms","tDiffuse1","value","tDiffuse2","mixRatio","threshold","useTexture","tMixTexture","vertexShader","join","fragmentShader","quadgeometry","PlaneBufferGeometry","quad","texture","needChange","setTextureThreshold","setTexture","animateTransition","t","Math","sin","transitionSpeed","getElapsedTime","PI","transition","MathUtils","smoothstep","loopTexture","length","postprocessing_webglPostprocessingCrossfade","data","container","stats","textureThreshold","gui","mounted","$THREE","Clock","init","animate","beforeDestroy","destroy","methods","initGUI","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","$webglInnerWidth","appendChild","domElement","$Stats","dom","Vector3","addEventListener","onWindowResize","requestAnimationFrame","update","dat_gui_module","onChange","Perlin","Squares","Cells","Distort","Gradient","Radial","listen","getDelta","objectType","that","applyVertexColors","geometry","attributes","colors","count","push","r","g","b","setAttribute","Float32BufferAttribute","geometries","matrix","Matrix4","Euler","quaternion","Quaternion","scale","Color","random","setFromEuler","BoxBufferGeometry","toNonIndexed","setRGB","IcosahedronBufferGeometry","compose","applyMatrix4","BufferGeometryUtils","mergeBufferGeometries","views_postprocessing_webglPostprocessingCrossfade","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/184.7f9ec0231b93453e58f8.js","sourcesContent":["export function FXScene(type, numObjects, cameraZ, fov, rotationSpeed, clearColor, THREE, renderer, generateGeometry) {\r\n    this.clearColor = clearColor;\r\n    this.camera = new THREE.PerspectiveCamera(fov, (window.innerWidth - 281) / window.innerHeight, 1, 10000);\r\n    this.camera.position.z = cameraZ;\r\n    // Setup scene\r\n    this.scene = new THREE.Scene();\r\n    this.scene.add(new THREE.AmbientLight(0x555555));\r\n    var light = new THREE.SpotLight(0xffffff, 1.5);\r\n    light.position.set(0, 500, 2000);\r\n    this.scene.add(light);\r\n    this.rotationSpeed = rotationSpeed;\r\n    var defaultMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, flatShading: true, vertexColors: true });\r\n    this.mesh = new THREE.Mesh(generateGeometry(type, numObjects), defaultMaterial);\r\n    this.scene.add(this.mesh);\r\n    var renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };\r\n    this.fbo = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, renderTargetParameters);\r\n    this.render = (delta, rtt) => {\r\n        this.mesh.rotation.x += delta * this.rotationSpeed.x;\r\n        this.mesh.rotation.y += delta * this.rotationSpeed.y;\r\n        this.mesh.rotation.z += delta * this.rotationSpeed.z;\r\n        renderer.setClearColor(this.clearColor);\r\n        if (rtt) {\r\n            renderer.setRenderTarget(this.fbo);\r\n            renderer.clear();\r\n            renderer.render(this.scene, this.camera);\r\n        } else {\r\n            renderer.setRenderTarget(null);\r\n            renderer.render(this.scene, this.camera);\r\n        }\r\n    };\r\n}\r\nexport function Transition(sceneA, sceneB, THREE, transitionParams, renderer, clock) {\r\n    this.scene = new THREE.Scene();\r\n    this.cameraOrtho = new THREE.OrthographicCamera((window.innerWidth - 281) / - 2, (window.innerWidth - 281) / 2, window.innerHeight / 2, window.innerHeight / - 2, - 10, 10);\r\n    this.textures = [];\r\n    var loader = new THREE.TextureLoader();\r\n    for (let i = 0; i < 6; i ++)\r\n        this.textures[ i ] = loader.load('static/textures/transition/transition' + (i + 1) + '.png');\r\n    this.quadmaterial = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n            tDiffuse1: {\r\n                value: null\r\n            },\r\n            tDiffuse2: {\r\n                value: null\r\n            },\r\n            mixRatio: {\r\n                value: 0.0\r\n            },\r\n            threshold: {\r\n                value: 0.1\r\n            },\r\n            useTexture: {\r\n                value: 1\r\n            },\r\n            tMixTexture: {\r\n                value: this.textures[ 0 ]\r\n            }\r\n        },\r\n        vertexShader: [\r\n            \"varying vec2 vUv;\",\r\n            \"void main() {\",\r\n            \"vUv = vec2(uv.x, uv.y);\",\r\n            \"gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\"),\r\n        fragmentShader: [\r\n            \"uniform float mixRatio;\",\r\n            \"uniform sampler2D tDiffuse1;\",\r\n            \"uniform sampler2D tDiffuse2;\",\r\n            \"uniform sampler2D tMixTexture;\",\r\n            \"uniform int useTexture;\",\r\n            \"uniform float threshold;\",\r\n            \"varying vec2 vUv;\",\r\n            \"void main() {\",\r\n            \"\tvec4 texel1 = texture2D(tDiffuse1, vUv);\",\r\n            \"\tvec4 texel2 = texture2D(tDiffuse2, vUv);\",\r\n            \"\tif (useTexture==1) {\",\r\n            \"\t\tvec4 transitionTexel = texture2D(tMixTexture, vUv);\",\r\n            \"\t\tfloat r = mixRatio * (1.0 + threshold * 2.0) - threshold;\",\r\n            \"\t\tfloat mixf=clamp((transitionTexel.r - r)*(1.0/threshold), 0.0, 1.0);\",\r\n            \"\t\tgl_FragColor = mix(texel1, texel2, mixf);\",\r\n            \"\t} else {\",\r\n            \"\t\tgl_FragColor = mix(texel2, texel1, mixRatio);\",\r\n            \"\t}\",\r\n            \"}\"\r\n        ].join(\"\\n\")\r\n    });\r\n    var quadgeometry = new THREE.PlaneBufferGeometry(window.innerWidth - 281, window.innerHeight);\r\n    this.quad = new THREE.Mesh(quadgeometry, this.quadmaterial);\r\n    this.scene.add(this.quad);\r\n    // Link both scenes and their FBOs\r\n    this.sceneA = sceneA;\r\n    this.sceneB = sceneB;\r\n    this.quadmaterial.uniforms.tDiffuse1.value = sceneA.fbo.texture;\r\n    this.quadmaterial.uniforms.tDiffuse2.value = sceneB.fbo.texture;\r\n    this.needChange = false;\r\n    this.setTextureThreshold = (value) => {\r\n        this.quadmaterial.uniforms.threshold.value = value;\r\n    };\r\n    this.useTexture = (value) => {\r\n        this.quadmaterial.uniforms.useTexture.value = value ? 1 : 0;\r\n    };\r\n    this.setTexture = (i) => {\r\n        this.quadmaterial.uniforms.tMixTexture.value = this.textures[ i ];\r\n    };\r\n    this.render = (delta) => {\r\n        // Transition animation\r\n        if (transitionParams.animateTransition) {\r\n            var t = (1 + Math.sin(transitionParams.transitionSpeed * clock.getElapsedTime() / Math.PI)) / 2;\r\n            transitionParams.transition = THREE.MathUtils.smoothstep(t, 0.3, 0.7);\r\n            // Change the current alpha texture after each transition\r\n            if (transitionParams.loopTexture && (transitionParams.transition == 0 || transitionParams.transition == 1)) {\r\n                if (this.needChange) {\r\n                    transitionParams.texture = (transitionParams.texture + 1) % this.textures.length;\r\n                    this.quadmaterial.uniforms.tMixTexture.value = this.textures[ transitionParams.texture ];\r\n                    this.needChange = false;\r\n                }\r\n            } else\r\n                this.needChange = true;\r\n        }\r\n        this.quadmaterial.uniforms.mixRatio.value = transitionParams.transition;\r\n        // Prevent render both scenes when it's not necessary\r\n        if (transitionParams.transition == 0) {\r\n            this.sceneB.render(delta, false);\r\n        } else if (transitionParams.transition == 1) {\r\n            this.sceneA.render(delta, false);\r\n        } else {\r\n            // When 0<transition<1 render transition between two scenes\r\n            this.sceneA.render(delta, true);\r\n            this.sceneB.render(delta, true);\r\n            renderer.setRenderTarget(null);\r\n            renderer.clear();\r\n            renderer.render(this.scene, this.cameraOrtho);\r\n        }\r\n    };\r\n}\r\n\r\nexport default { FXScene, Transition }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/webglPostprocessingCrossfade.js","<template>\r\n    <div class=\"webglPostprocessingCrossfade-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl scene transitions<br/>\r\n\t\t\tby <a href=\"https://twitter.com/fernandojsg\">fernandojsg</a> - <a href=\"https://github.com/kile/three.js-demos\">github</a>\r\n\t\t</div>\r\n\r\n\t\t<div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { BufferGeometryUtils } from '@/components/jsm/utils/BufferGeometryUtils.js'\r\nimport { FXScene, Transition } from '@/utils/webglPostprocessingCrossfade.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n\t\t\trenderer: null,\r\n\t\t\ttransition: null,\r\n\t\t\ttransitionParams: {\r\n\t\t\t\t\"useTexture\": true,\r\n\t\t\t\t\"transition\": 0.5,\r\n\t\t\t\t\"transitionSpeed\": 2.0,\r\n\t\t\t\t\"texture\": 5,\r\n\t\t\t\t\"loopTexture\": true,\r\n\t\t\t\t\"animateTransition\": true,\r\n\t\t\t\t\"textureThreshold\": 0.3\r\n\t\t\t},\r\n            clock: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.initGUI()\r\n            this.container = document.getElementById(\"container\")\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.stats = new this.$Stats()\r\n            this.container.appendChild(this.stats.dom)\r\n            var sceneA = new FXScene(\"cube\", 5000, 1200, 120, new this.$THREE.Vector3(0, - 0.4, 0), 0xffffff, this.$THREE, this.renderer, this.generateGeometry)\r\n            var sceneB = new FXScene(\"sphere\", 500, 2000, 50, new this.$THREE.Vector3(0, 0.2, 0.1), 0x000000, this.$THREE, this.renderer, this.generateGeometry)\r\n            this.transition = new Transition(sceneA, sceneB, this.$THREE, this.transitionParams, this.renderer, this.clock)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.renderer.setSize( window.innerWidth - 281, window.innerHeight )\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        initGUI() {\r\n            this.gui = new GUI()\r\n            this.gui.add(this.transitionParams, \"useTexture\").onChange((value) => {\r\n                this.transition.useTexture(value)\r\n            })\r\n            this.gui.add(this.transitionParams, 'loopTexture')\r\n            this.gui.add(this.transitionParams, 'texture', { Perlin: 0, Squares: 1, Cells: 2, Distort: 3, Gradient: 4, Radial: 5 }).onChange((value) => {\r\n                this.transition.setTexture(value)\r\n            }).listen()\r\n            this.gui.add(this.transitionParams, \"textureThreshold\", 0, 1, 0.01).onChange((value) => {\r\n                this.transition.setTextureThreshold(value)\r\n            })\r\n            this.gui.add(this.transitionParams, \"animateTransition\")\r\n            this.gui.add(this.transitionParams, \"transition\", 0, 1, 0.01).listen()\r\n            this.gui.add(this.transitionParams, \"transitionSpeed\", 0.5, 5, 0.01)\r\n        },\r\n        render() {\r\n            this.transition.render(this.clock.getDelta())\r\n        },\r\n        generateGeometry(objectType, numObjects) {\r\n            var that = this\r\n            function applyVertexColors(geometry, color) {\r\n                var position = geometry.attributes.position\r\n                var colors = []\r\n                for (var i = 0; i < position.count; i ++) {\r\n                    colors.push(color.r, color.g, color.b)\r\n                }\r\n                geometry.setAttribute('color', new that.$THREE.Float32BufferAttribute(colors, 3))\r\n            }\r\n            var geometries = []\r\n            var matrix = new this.$THREE.Matrix4()\r\n            var position = new this.$THREE.Vector3()\r\n            var rotation = new this.$THREE.Euler()\r\n            var quaternion = new this.$THREE.Quaternion()\r\n            var scale = new this.$THREE.Vector3()\r\n            var color = new this.$THREE.Color()\r\n            for (var i = 0; i < numObjects; i ++) {\r\n                position.x = Math.random() * 10000 - 5000\r\n                position.y = Math.random() * 6000 - 3000\r\n                position.z = Math.random() * 8000 - 4000\r\n                rotation.x = Math.random() * 2 * Math.PI\r\n                rotation.y = Math.random() * 2 * Math.PI\r\n                rotation.z = Math.random() * 2 * Math.PI\r\n                quaternion.setFromEuler(rotation)\r\n                scale.x = Math.random() * 200 + 100\r\n                var geometry\r\n                if (objectType === 'cube') {\r\n                    geometry = new this.$THREE.BoxBufferGeometry(1, 1, 1)\r\n                    geometry = geometry.toNonIndexed() // merging needs consistent buffer geometries\r\n                    scale.y = Math.random() * 200 + 100\r\n                    scale.z = Math.random() * 200 + 100\r\n                    color.setRGB(0, 0, 0.1 + 0.9 * Math.random())\r\n                } else if (objectType === 'sphere') {\r\n                    geometry = new this.$THREE.IcosahedronBufferGeometry(1, 1)\r\n                    scale.y = scale.z = scale.x\r\n                    color.setRGB(0.1 + 0.9 * Math.random(), 0, 0)\r\n                }\r\n                // give the geom's vertices a random color, to be displayed\r\n                applyVertexColors(geometry, color)\r\n                matrix.compose(position, quaternion, scale)\r\n                geometry.applyMatrix4(matrix)\r\n                geometries.push(geometry)\r\n            }\r\n            return BufferGeometryUtils.mergeBufferGeometries(geometries)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingCrossfade-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingCrossfade.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingCrossfade-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl scene transitions\"),_c('br'),_vm._v(\"\\n\\t\\t\\tby \"),_c('a',{attrs:{\"href\":\"https://twitter.com/fernandojsg\"}},[_vm._v(\"fernandojsg\")]),_vm._v(\" - \"),_c('a',{attrs:{\"href\":\"https://github.com/kile/three.js-demos\"}},[_vm._v(\"github\")])]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"container\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-62fff8f8\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingCrossfade.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-62fff8f8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingCrossfade.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingCrossfade.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingCrossfade.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-62fff8f8\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingCrossfade.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-62fff8f8\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingCrossfade.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}