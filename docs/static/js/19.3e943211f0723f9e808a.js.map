{"version":3,"sources":["webpack:///src/views/mirror/webglMirror.vue","webpack:///./src/views/mirror/webglMirror.vue?40b7","webpack:///./src/views/mirror/webglMirror.vue","webpack:///./src/components/jsm/objects/Reflector.js"],"names":["webglMirror","data","WIDTH","HEIGHT","VIEW_ANGLE","ASPECT","NEAR","FAR","camera","scene","renderer","cameraControls","sphereGroup","smallSphere","mounted","this","$webglInnerWidth","window","innerHeight","init","animate","methods","container","document","getElementById","$THREE","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","Scene","PerspectiveCamera","position","set","OrbitControls","target","maxDistance","minDistance","update","geometry","material","planeGeo","PlaneBufferGeometry","CircleBufferGeometry","groundMirror","Reflector","clipBias","textureWidth","textureHeight","color","y","rotateX","Math","PI","add","verticalMirror","z","Object3D","CylinderBufferGeometry","cos","MeshPhongMaterial","emissive","sphereCap","Mesh","sin","SphereBufferGeometry","halfSphere","rotateZ","IcosahedronBufferGeometry","flatShading","planeTop","planeBottom","planeFront","rotateY","planeRight","x","planeLeft","mainLight","PointLight","greenLight","redLight","blueLight","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","timer","Date","now","rotation","abs","render","mirror_webglMirror","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","options","call","type","scope","undefined","Color","shader","ReflectorShader","reflectorPlane","Plane","normal","Vector3","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","Matrix4","lookAtPosition","clipPlane","Vector4","view","q","textureMatrix","virtualCamera","parameters","minFilter","LinearFilter","magFilter","format","RGBFormat","renderTarget","WebGLRenderTarget","MathUtils","isPowerOfTwo","texture","generateMipmaps","ShaderMaterial","uniforms","UniformsUtils","clone","fragmentShader","vertexShader","value","onBeforeRender","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","subVectors","dot","reflect","negate","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","constant","sign","elements","w","multiplyScalar","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","viewport","prototype","Object","create","constructor","tDiffuse","join"],"mappings":"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","file":"static/js/19.3e943211f0723f9e808a.js","sourcesContent":["<template>\r\n    <div class=\"webglMirror-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\"><a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - mirror\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { Reflector } from '@/components//jsm/objects/Reflector.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            WIDTH: null,\r\n\t\t\tHEIGHT: null,\r\n\t\t\t// camera\r\n\t\t\tVIEW_ANGLE: 45,\r\n\t\t\tASPECT: null,\r\n\t\t\tNEAR: 1,\r\n\t\t\tFAR: 500,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tcameraControls: null,\r\n            sphereGroup: null,\r\n            smallSphere: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.WIDTH = this.$webglInnerWidth\r\n        this.HEIGHT = window.innerHeight\r\n        this.ASPECT = this.WIDTH / this.HEIGHT\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            var container = document.getElementById('container')\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.WIDTH, this.HEIGHT)\r\n            container.appendChild(this.renderer.domElement)\r\n            // scene\r\n            this.scene = new this.$THREE.Scene()\r\n            // camera\r\n            this.camera = new this.$THREE.PerspectiveCamera(this.VIEW_ANGLE, this.ASPECT, this.NEAR, this.FAR)\r\n            this.camera.position.set(0, 75, 160)\r\n            this.cameraControls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.cameraControls.target.set(0, 40, 0)\r\n            this.cameraControls.maxDistance = 400\r\n            this.cameraControls.minDistance = 10\r\n            this.cameraControls.update()\r\n            //\r\n            var planeGeo = new this.$THREE.PlaneBufferGeometry(100.1, 100.1)\r\n            // reflectors/mirrors\r\n            var geometry, material\r\n            geometry = new this.$THREE.CircleBufferGeometry(40, 64)\r\n            var groundMirror = new Reflector(geometry, {\r\n                clipBias: 0.003,\r\n                textureWidth: this.WIDTH * window.devicePixelRatio,\r\n                textureHeight: this.HEIGHT * window.devicePixelRatio,\r\n                color: 0x777777\r\n            })\r\n            groundMirror.position.y = 0.5\r\n            groundMirror.rotateX(- Math.PI / 2)\r\n            this.scene.add(groundMirror)\r\n            geometry = new this.$THREE.PlaneBufferGeometry(100, 100)\r\n            var verticalMirror = new Reflector(geometry, {\r\n                clipBias: 0.003,\r\n                textureWidth: this.WIDTH * window.devicePixelRatio,\r\n                textureHeight: this.HEIGHT * window.devicePixelRatio,\r\n                color: 0x889999\r\n            })\r\n            verticalMirror.position.y = 50\r\n            verticalMirror.position.z = - 50\r\n            this.scene.add(verticalMirror)\r\n            this.sphereGroup = new this.$THREE.Object3D()\r\n            this.scene.add(this.sphereGroup)\r\n            geometry = new this.$THREE.CylinderBufferGeometry(0.1, 15 * Math.cos(Math.PI / 180 * 30), 0.1, 24, 1)\r\n            material = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, emissive: 0x444444 })\r\n            var sphereCap = new this.$THREE.Mesh(geometry, material)\r\n            sphereCap.position.y = - 15 * Math.sin(Math.PI / 180 * 30) - 0.05\r\n            sphereCap.rotateX(- Math.PI)\r\n            geometry = new this.$THREE.SphereBufferGeometry(15, 24, 24, Math.PI / 2, Math.PI * 2, 0, Math.PI / 180 * 120)\r\n            var halfSphere = new this.$THREE.Mesh(geometry, material)\r\n            halfSphere.add(sphereCap)\r\n            halfSphere.rotateX(- Math.PI / 180 * 135)\r\n            halfSphere.rotateZ(- Math.PI / 180 * 20)\r\n            halfSphere.position.y = 7.5 + 15 * Math.sin(Math.PI / 180 * 30)\r\n            this.sphereGroup.add(halfSphere)\r\n            geometry = new this.$THREE.IcosahedronBufferGeometry(5, 0)\r\n            material = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, emissive: 0x333333, flatShading: true })\r\n            this.smallSphere = new this.$THREE.Mesh(geometry, material)\r\n            this.scene.add(this.smallSphere)\r\n            // walls\r\n            var planeTop = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0xffffff }))\r\n            planeTop.position.y = 100\r\n            planeTop.rotateX(Math.PI / 2)\r\n            this.scene.add(planeTop)\r\n            var planeBottom = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0xffffff }))\r\n            planeBottom.rotateX(- Math.PI / 2)\r\n            this.scene.add(planeBottom)\r\n            var planeFront = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0x7f7fff }))\r\n            planeFront.position.z = 50\r\n            planeFront.position.y = 50\r\n            planeFront.rotateY(Math.PI)\r\n            this.scene.add(planeFront)\r\n            var planeRight = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0x00ff00 }))\r\n            planeRight.position.x = 50\r\n            planeRight.position.y = 50\r\n            planeRight.rotateY(- Math.PI / 2)\r\n            this.scene.add(planeRight)\r\n            var planeLeft = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0xff0000 }))\r\n            planeLeft.position.x = - 50\r\n            planeLeft.position.y = 50\r\n            planeLeft.rotateY(Math.PI / 2)\r\n            this.scene.add(planeLeft)\r\n            // lights\r\n            var mainLight = new this.$THREE.PointLight(0xcccccc, 1.5, 250)\r\n            mainLight.position.y = 60\r\n            this.scene.add(mainLight)\r\n            var greenLight = new this.$THREE.PointLight(0x00ff00, 0.25, 1000)\r\n            greenLight.position.set(550, 50, 0)\r\n            this.scene.add(greenLight)\r\n            var redLight = new this.$THREE.PointLight(0xff0000, 0.25, 1000)\r\n            redLight.position.set(- 550, 50, 0)\r\n            this.scene.add(redLight)\r\n            var blueLight = new this.$THREE.PointLight(0x7f7fff, 0.25, 1000)\r\n            blueLight.position.set(0, 50, 550)\r\n            this.scene.add(blueLight)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            var timer = Date.now() * 0.01\r\n            this.sphereGroup.rotation.y -= 0.002\r\n            this.smallSphere.position.set(\r\n                Math.cos(timer * 0.1) * 30,\r\n                Math.abs(Math.cos(timer * 0.2)) * 20 + 5,\r\n                Math.sin(timer * 0.1) * 30\r\n            )\r\n            this.smallSphere.rotation.y = (Math.PI / 2) - timer * 0.1\r\n            this.smallSphere.rotation.z = timer * 0.8\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglMirror-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    color: #444;\r\n}\r\n#info a {\r\n    color: #08f;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/mirror/webglMirror.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglMirror-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - mirror\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-00a7b46f\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/mirror/webglMirror.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-00a7b46f\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglMirror.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMirror.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMirror.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-00a7b46f\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglMirror.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-00a7b46f\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/mirror/webglMirror.vue\n// module id = null\n// module chunks = ","import {\r\n\tColor,\r\n\tLinearFilter,\r\n\tMathUtils,\r\n\tMatrix4,\r\n\tMesh,\r\n\tPerspectiveCamera,\r\n\tPlane,\r\n\tRGBFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector3,\r\n\tVector4,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar Reflector = function ( geometry, options ) {\r\n\r\n\tMesh.call( this, geometry );\r\n\r\n\tthis.type = 'Reflector';\r\n\r\n\tvar scope = this;\r\n\r\n\toptions = options || {};\r\n\r\n\tvar color = ( options.color !== undefined ) ? new Color( options.color ) : new Color( 0x7F7F7F );\r\n\tvar textureWidth = options.textureWidth || 512;\r\n\tvar textureHeight = options.textureHeight || 512;\r\n\tvar clipBias = options.clipBias || 0;\r\n\tvar shader = options.shader || Reflector.ReflectorShader;\r\n\r\n\t//\r\n\r\n\tvar reflectorPlane = new Plane();\r\n\tvar normal = new Vector3();\r\n\tvar reflectorWorldPosition = new Vector3();\r\n\tvar cameraWorldPosition = new Vector3();\r\n\tvar rotationMatrix = new Matrix4();\r\n\tvar lookAtPosition = new Vector3( 0, 0, - 1 );\r\n\tvar clipPlane = new Vector4();\r\n\r\n\tvar view = new Vector3();\r\n\tvar target = new Vector3();\r\n\tvar q = new Vector4();\r\n\r\n\tvar textureMatrix = new Matrix4();\r\n\tvar virtualCamera = new PerspectiveCamera();\r\n\r\n\tvar parameters = {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\tformat: RGBFormat\r\n\t};\r\n\r\n\tvar renderTarget = new WebGLRenderTarget( textureWidth, textureHeight, parameters );\r\n\r\n\tif ( ! MathUtils.isPowerOfTwo( textureWidth ) || ! MathUtils.isPowerOfTwo( textureHeight ) ) {\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tvar material = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\r\n\t\tfragmentShader: shader.fragmentShader,\r\n\t\tvertexShader: shader.vertexShader\r\n\t} );\r\n\r\n\tmaterial.uniforms[ \"tDiffuse\" ].value = renderTarget.texture;\r\n\tmaterial.uniforms[ \"color\" ].value = color;\r\n\tmaterial.uniforms[ \"textureMatrix\" ].value = textureMatrix;\r\n\r\n\tthis.material = material;\r\n\r\n\tthis.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\treflectorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\r\n\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\trotationMatrix.extractRotation( scope.matrixWorld );\r\n\r\n\t\tnormal.set( 0, 0, 1 );\r\n\t\tnormal.applyMatrix4( rotationMatrix );\r\n\r\n\t\tview.subVectors( reflectorWorldPosition, cameraWorldPosition );\r\n\r\n\t\t// Avoid rendering when reflector is facing away\r\n\r\n\t\tif ( view.dot( normal ) > 0 ) return;\r\n\r\n\t\tview.reflect( normal ).negate();\r\n\t\tview.add( reflectorWorldPosition );\r\n\r\n\t\trotationMatrix.extractRotation( camera.matrixWorld );\r\n\r\n\t\tlookAtPosition.set( 0, 0, - 1 );\r\n\t\tlookAtPosition.applyMatrix4( rotationMatrix );\r\n\t\tlookAtPosition.add( cameraWorldPosition );\r\n\r\n\t\ttarget.subVectors( reflectorWorldPosition, lookAtPosition );\r\n\t\ttarget.reflect( normal ).negate();\r\n\t\ttarget.add( reflectorWorldPosition );\r\n\r\n\t\tvirtualCamera.position.copy( view );\r\n\t\tvirtualCamera.up.set( 0, 1, 0 );\r\n\t\tvirtualCamera.up.applyMatrix4( rotationMatrix );\r\n\t\tvirtualCamera.up.reflect( normal );\r\n\t\tvirtualCamera.lookAt( target );\r\n\r\n\t\tvirtualCamera.far = camera.far; // Used in WebGLBackground\r\n\r\n\t\tvirtualCamera.updateMatrixWorld();\r\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t// Update the texture matrix\r\n\t\ttextureMatrix.set(\r\n\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t);\r\n\t\ttextureMatrix.multiply( virtualCamera.projectionMatrix );\r\n\t\ttextureMatrix.multiply( virtualCamera.matrixWorldInverse );\r\n\t\ttextureMatrix.multiply( scope.matrixWorld );\r\n\r\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n\t\treflectorPlane.setFromNormalAndCoplanarPoint( normal, reflectorWorldPosition );\r\n\t\treflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\r\n\r\n\t\tclipPlane.set( reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant );\r\n\r\n\t\tvar projectionMatrix = virtualCamera.projectionMatrix;\r\n\r\n\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n\t\tq.z = - 1.0;\r\n\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n\t\t// Calculate the scaled plane vector\r\n\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\r\n\r\n\t\t// Replacing the third row of the projection matrix\r\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\r\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\r\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\r\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\r\n\r\n\t\t// Render\r\n\r\n\t\trenderTarget.texture.encoding = renderer.outputEncoding;\r\n\r\n\t\tscope.visible = false;\r\n\r\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tvar currentXrEnabled = renderer.xr.enabled;\r\n\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\r\n\r\n\t\trenderer.xr.enabled = false; // Avoid camera modification\r\n\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\r\n\r\n\t\tif ( renderer.autoClear === false ) renderer.clear();\r\n\t\trenderer.render( scene, virtualCamera );\r\n\r\n\t\trenderer.xr.enabled = currentXrEnabled;\r\n\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t// Restore viewport\r\n\r\n\t\tvar viewport = camera.viewport;\r\n\r\n\t\tif ( viewport !== undefined ) {\r\n\r\n\t\t\trenderer.state.viewport( viewport );\r\n\r\n\t\t}\r\n\r\n\t\tscope.visible = true;\r\n\r\n\t};\r\n\r\n\tthis.getRenderTarget = function () {\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t};\r\n\r\n};\r\n\r\nReflector.prototype = Object.create( Mesh.prototype );\r\nReflector.prototype.constructor = Reflector;\r\n\r\nReflector.ReflectorShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'color': {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tDiffuse': {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'textureMatrix': {\r\n\t\t\tvalue: null\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\t\t'uniform mat4 textureMatrix;',\r\n\t\t'varying vec4 vUv;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvUv = textureMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t'}'\r\n\t].join( '\\n' ),\r\n\r\n\tfragmentShader: [\r\n\t\t'uniform vec3 color;',\r\n\t\t'uniform sampler2D tDiffuse;',\r\n\t\t'varying vec4 vUv;',\r\n\r\n\t\t'float blendOverlay( float base, float blend ) {',\r\n\r\n\t\t'\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\r\n\r\n\t\t'}',\r\n\r\n\t\t'vec3 blendOverlay( vec3 base, vec3 blend ) {',\r\n\r\n\t\t'\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\r\n\r\n\t\t'}',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvec4 base = texture2DProj( tDiffuse, vUv );',\r\n\t\t'\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\r\n\r\n\t\t'}'\r\n\t].join( '\\n' )\r\n};\r\n\r\nexport { Reflector };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/Reflector.js"],"sourceRoot":""}