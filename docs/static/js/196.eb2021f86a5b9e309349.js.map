{"version":3,"sources":["webpack:///./src/components/jsm/loaders/STLLoader.js","webpack:///src/views/loader/webglLoaderStl.vue","webpack:///./src/views/loader/webglLoaderStl.vue?3da0","webpack:///./src/views/loader/webglLoaderStl.vue"],"names":["STLLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","matchDataViewAt","query","reader","offset","i","il","length","getUint8","buffer","binData","array_buffer","Uint8Array","charCodeAt","ensureBinary","DataView","getUint32","byteLength","solid","off","isBinary","r","g","b","colors","defaultR","defaultG","defaultB","alpha","faces","hasColors","index","Float32Array","geometry","BufferGeometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","BufferAttribute","parseBinary","result","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","Vector3","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","Float32BufferAttribute","parseASCII","LoaderUtils","decodeText","webglLoaderStl","container","stats","camera","cameraTarget","scene","renderer","mounted","init","animate","methods","_this","document","createElement","getElementsByClassName","appendChild","$THREE","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","Scene","background","Color","fog","Fog","plane","Mesh","PlaneBufferGeometry","MeshPhongMaterial","color","specular","rotation","Math","PI","add","receiveShadow","STLLoader_STLLoader","material","shininess","mesh","scale","castShadow","meshMaterial","opacity","vertexColors","HemisphereLight","addShadowedLight","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","shadowMap","enabled","domElement","$Stats","dom","style","left","addEventListener","onWindowResize","intensity","directionalLight","DirectionalLight","shadow","right","top","bottom","near","far","bias","$onWindowResize","requestAnimationFrame","render","update","timer","Date","now","cos","sin","lookAt","loader_webglLoaderStl","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/196.eb2021f86a5b9e309349.js","sourcesContent":["import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tLoader,\r\n\tLoaderUtils,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\r\n *\r\n * Supports both binary and ASCII encoded files, with automatic detection of type.\r\n *\r\n * The loader returns a non-indexed buffer geometry.\r\n *\r\n * Limitations:\r\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\r\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\r\n *  ASCII decoding assumes file is UTF-8.\r\n *\r\n * Usage:\r\n *  var loader = new STLLoader();\r\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\r\n *    scene.add( new THREE.Mesh( geometry ) );\r\n *  });\r\n *\r\n * For binary STLs geometry might contain colors for vertices. To use it:\r\n *  // use the same code to load STL as above\r\n *  if (geometry.hasColors) {\r\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\r\n *  } else { .... }\r\n *  var mesh = new THREE.Mesh( geometry, material );\r\n *\r\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\r\n * Groups can be used to assign a different color by defining an array of materials with the same length of\r\n * geometry.groups and passing it to the Mesh constructor:\r\n *\r\n * var mesh = new THREE.Mesh( geometry, material );\r\n *\r\n * For example:\r\n *\r\n *  var materials = [];\r\n *  var nGeometryGroups = geometry.groups.length;\r\n *\r\n *  var colorMap = ...; // Some logic to index colors.\r\n *\r\n *  for (var i = 0; i < nGeometryGroups; i++) {\r\n *\r\n *\t\tvar material = new THREE.MeshPhongMaterial({\r\n *\t\t\tcolor: colorMap[i],\r\n *\t\t\twireframe: false\r\n *\t\t});\r\n *\r\n *  }\r\n *\r\n *  materials.push(material);\r\n *  var mesh = new THREE.Mesh(geometry, materials);\r\n */\r\n\r\n\r\nvar STLLoader = function ( manager ) {\r\n\r\n\tLoader.call( this, manager );\r\n\r\n};\r\n\r\nSTLLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\tconstructor: STLLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( data ) {\r\n\r\n\t\tfunction isBinary( data ) {\r\n\r\n\t\t\tvar expect, face_size, n_faces, reader;\r\n\t\t\treader = new DataView( data );\r\n\t\t\tface_size = ( 32 / 8 * 3 ) + ( ( 32 / 8 * 3 ) * 3 ) + ( 16 / 8 );\r\n\t\t\tn_faces = reader.getUint32( 80, true );\r\n\t\t\texpect = 80 + ( 32 / 8 ) + ( n_faces * face_size );\r\n\r\n\t\t\tif ( expect === reader.byteLength ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// An ASCII STL data must begin with 'solid ' as the first six bytes.\r\n\t\t\t// However, ASCII STLs lacking the SPACE after the 'd' are known to be\r\n\t\t\t// plentiful.  So, check the first 5 bytes for 'solid'.\r\n\r\n\t\t\t// Several encodings, such as UTF-8, precede the text with up to 5 bytes:\r\n\t\t\t// https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\r\n\t\t\t// Search for \"solid\" to start anywhere after those prefixes.\r\n\r\n\t\t\t// US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\r\n\r\n\t\t\tvar solid = [ 115, 111, 108, 105, 100 ];\r\n\r\n\t\t\tfor ( var off = 0; off < 5; off ++ ) {\r\n\r\n\t\t\t\t// If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\r\n\r\n\t\t\t\tif ( matchDataViewAt( solid, reader, off ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Couldn't find \"solid\" text at the beginning; it is binary STL.\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction matchDataViewAt( query, reader, offset ) {\r\n\r\n\t\t\t// Check if each byte in query matches the corresponding byte from the current offset\r\n\r\n\t\t\tfor ( var i = 0, il = query.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( query[ i ] !== reader.getUint8( offset + i, false ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBinary( data ) {\r\n\r\n\t\t\tvar reader = new DataView( data );\r\n\t\t\tvar faces = reader.getUint32( 80, true );\r\n\r\n\t\t\tvar r, g, b, hasColors = false, colors;\r\n\t\t\tvar defaultR, defaultG, defaultB, alpha;\r\n\r\n\t\t\t// process STL header\r\n\t\t\t// check for default color in header (\"COLOR=rgba\" sequence).\r\n\r\n\t\t\tfor ( var index = 0; index < 80 - 10; index ++ ) {\r\n\r\n\t\t\t\tif ( ( reader.getUint32( index, false ) == 0x434F4C4F /*COLO*/ ) &&\r\n\t\t\t\t\t( reader.getUint8( index + 4 ) == 0x52 /*'R'*/ ) &&\r\n\t\t\t\t\t( reader.getUint8( index + 5 ) == 0x3D /*'='*/ ) ) {\r\n\r\n\t\t\t\t\thasColors = true;\r\n\t\t\t\t\tcolors = new Float32Array( faces * 3 * 3 );\r\n\r\n\t\t\t\t\tdefaultR = reader.getUint8( index + 6 ) / 255;\r\n\t\t\t\t\tdefaultG = reader.getUint8( index + 7 ) / 255;\r\n\t\t\t\t\tdefaultB = reader.getUint8( index + 8 ) / 255;\r\n\t\t\t\t\talpha = reader.getUint8( index + 9 ) / 255;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar dataOffset = 84;\r\n\t\t\tvar faceLength = 12 * 4 + 2;\r\n\r\n\t\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\t\tvar vertices = new Float32Array( faces * 3 * 3 );\r\n\t\t\tvar normals = new Float32Array( faces * 3 * 3 );\r\n\r\n\t\t\tfor ( var face = 0; face < faces; face ++ ) {\r\n\r\n\t\t\t\tvar start = dataOffset + face * faceLength;\r\n\t\t\t\tvar normalX = reader.getFloat32( start, true );\r\n\t\t\t\tvar normalY = reader.getFloat32( start + 4, true );\r\n\t\t\t\tvar normalZ = reader.getFloat32( start + 8, true );\r\n\r\n\t\t\t\tif ( hasColors ) {\r\n\r\n\t\t\t\t\tvar packedColor = reader.getUint16( start + 48, true );\r\n\r\n\t\t\t\t\tif ( ( packedColor & 0x8000 ) === 0 ) {\r\n\r\n\t\t\t\t\t\t// facet has its own unique color\r\n\r\n\t\t\t\t\t\tr = ( packedColor & 0x1F ) / 31;\r\n\t\t\t\t\t\tg = ( ( packedColor >> 5 ) & 0x1F ) / 31;\r\n\t\t\t\t\t\tb = ( ( packedColor >> 10 ) & 0x1F ) / 31;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tr = defaultR;\r\n\t\t\t\t\t\tg = defaultG;\r\n\t\t\t\t\t\tb = defaultB;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 1; i <= 3; i ++ ) {\r\n\r\n\t\t\t\t\tvar vertexstart = start + i * 12;\r\n\t\t\t\t\tvar componentIdx = ( face * 3 * 3 ) + ( ( i - 1 ) * 3 );\r\n\r\n\t\t\t\t\tvertices[ componentIdx ] = reader.getFloat32( vertexstart, true );\r\n\t\t\t\t\tvertices[ componentIdx + 1 ] = reader.getFloat32( vertexstart + 4, true );\r\n\t\t\t\t\tvertices[ componentIdx + 2 ] = reader.getFloat32( vertexstart + 8, true );\r\n\r\n\t\t\t\t\tnormals[ componentIdx ] = normalX;\r\n\t\t\t\t\tnormals[ componentIdx + 1 ] = normalY;\r\n\t\t\t\t\tnormals[ componentIdx + 2 ] = normalZ;\r\n\r\n\t\t\t\t\tif ( hasColors ) {\r\n\r\n\t\t\t\t\t\tcolors[ componentIdx ] = r;\r\n\t\t\t\t\t\tcolors[ componentIdx + 1 ] = g;\r\n\t\t\t\t\t\tcolors[ componentIdx + 2 ] = b;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\r\n\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\r\n\r\n\t\t\tif ( hasColors ) {\r\n\r\n\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\r\n\t\t\t\tgeometry.hasColors = true;\r\n\t\t\t\tgeometry.alpha = alpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseASCII( data ) {\r\n\r\n\t\t\tvar geometry = new BufferGeometry();\r\n\t\t\tvar patternSolid = /solid([\\s\\S]*?)endsolid/g;\r\n\t\t\tvar patternFace = /facet([\\s\\S]*?)endfacet/g;\r\n\t\t\tvar faceCounter = 0;\r\n\r\n\t\t\tvar patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\r\n\t\t\tvar patternVertex = new RegExp( 'vertex' + patternFloat + patternFloat + patternFloat, 'g' );\r\n\t\t\tvar patternNormal = new RegExp( 'normal' + patternFloat + patternFloat + patternFloat, 'g' );\r\n\r\n\t\t\tvar vertices = [];\r\n\t\t\tvar normals = [];\r\n\r\n\t\t\tvar normal = new Vector3();\r\n\r\n\t\t\tvar result;\r\n\r\n\t\t\tvar groupCount = 0;\r\n\t\t\tvar startVertex = 0;\r\n\t\t\tvar endVertex = 0;\r\n\r\n\t\t\twhile ( ( result = patternSolid.exec( data ) ) !== null ) {\r\n\r\n\t\t\t\tstartVertex = endVertex;\r\n\r\n\t\t\t\tvar solid = result[ 0 ];\r\n\r\n\t\t\t\twhile ( ( result = patternFace.exec( solid ) ) !== null ) {\r\n\r\n\t\t\t\t\tvar vertexCountPerFace = 0;\r\n\t\t\t\t\tvar normalCountPerFace = 0;\r\n\r\n\t\t\t\t\tvar text = result[ 0 ];\r\n\r\n\t\t\t\t\twhile ( ( result = patternNormal.exec( text ) ) !== null ) {\r\n\r\n\t\t\t\t\t\tnormal.x = parseFloat( result[ 1 ] );\r\n\t\t\t\t\t\tnormal.y = parseFloat( result[ 2 ] );\r\n\t\t\t\t\t\tnormal.z = parseFloat( result[ 3 ] );\r\n\t\t\t\t\t\tnormalCountPerFace ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile ( ( result = patternVertex.exec( text ) ) !== null ) {\r\n\r\n\t\t\t\t\t\tvertices.push( parseFloat( result[ 1 ] ), parseFloat( result[ 2 ] ), parseFloat( result[ 3 ] ) );\r\n\t\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\t\t\t\t\t\tvertexCountPerFace ++;\r\n\t\t\t\t\t\tendVertex ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// every face have to own ONE valid normal\r\n\r\n\t\t\t\t\tif ( normalCountPerFace !== 1 ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// each face have to own THREE valid vertices\r\n\r\n\t\t\t\t\tif ( vertexCountPerFace !== 3 ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfaceCounter ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar start = startVertex;\r\n\t\t\t\tvar count = endVertex - startVertex;\r\n\r\n\t\t\t\tgeometry.addGroup( start, count, groupCount );\r\n\t\t\t\tgroupCount ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction ensureString( buffer ) {\r\n\r\n\t\t\tif ( typeof buffer !== 'string' ) {\r\n\r\n\t\t\t\treturn LoaderUtils.decodeText( new Uint8Array( buffer ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t}\r\n\r\n\t\tfunction ensureBinary( buffer ) {\r\n\r\n\t\t\tif ( typeof buffer === 'string' ) {\r\n\r\n\t\t\t\tvar array_buffer = new Uint8Array( buffer.length );\r\n\t\t\t\tfor ( var i = 0; i < buffer.length; i ++ ) {\r\n\r\n\t\t\t\t\tarray_buffer[ i ] = buffer.charCodeAt( i ) & 0xff; // implicitly assumes little-endian\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn array_buffer.buffer || array_buffer;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// start\r\n\r\n\t\tvar binData = ensureBinary( data );\r\n\r\n\t\treturn isBinary( binData ) ? parseBinary( binData ) : parseASCII( ensureString( data ) );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { STLLoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/STLLoader.js","<template>\r\n    <div class=\"webglLoaderStl-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> -\r\n\t\t\tSTL loader test by <a href=\"https://github.com/aleeper\" target=\"_blank\" rel=\"noopener\">aleeper</a>.<br/>\r\n\t\t\tPR2 head from <a href=\"http://www.ros.org/wiki/pr2_description\">www.ros.org</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { STLLoader } from '@/components/jsm/loaders/STLLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            cameraTarget: null,\r\n            scene: null,\r\n            renderer: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglLoaderStl-container')[0].appendChild(this.container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(35, this.$webglInnerWidth / window.innerHeight, 1, 15)\r\n            this.camera.position.set(3, 0.15, 3)\r\n            this.cameraTarget = new this.$THREE.Vector3(0, - 0.25, 0)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0x72645b)\r\n            this.scene.fog = new this.$THREE.Fog(0x72645b, 2, 15)\r\n            // Ground\r\n            var plane = new this.$THREE.Mesh(\r\n                new this.$THREE.PlaneBufferGeometry(40, 40),\r\n                new this.$THREE.MeshPhongMaterial({ color: 0x999999, specular: 0x101010 })\r\n            )\r\n            plane.rotation.x = - Math.PI / 2\r\n            plane.position.y = - 0.5\r\n            this.scene.add(plane)\r\n            plane.receiveShadow = true\r\n            // ASCII file\r\n            var loader = new STLLoader()\r\n            loader.load('static/models/stl/ascii/slotted_disk.stl', (geometry) => {\r\n                var material = new this.$THREE.MeshPhongMaterial({ color: 0xff5533, specular: 0x111111, shininess: 200 })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(0, - 0.25, 0.6)\r\n                mesh.rotation.set(0, - Math.PI / 2, 0)\r\n                mesh.scale.set(0.5, 0.5, 0.5)\r\n                mesh.castShadow = true\r\n                mesh.receiveShadow = true\r\n                this.scene.add(mesh)\r\n            })\r\n            // Binary files\r\n            var material = new this.$THREE.MeshPhongMaterial({ color: 0xAAAAAA, specular: 0x111111, shininess: 200 })\r\n            loader.load('static/models/stl/binary/pr2_head_pan.stl', (geometry) => {\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(0, - 0.37, - 0.6)\r\n                mesh.rotation.set(- Math.PI / 2, 0, 0)\r\n                mesh.scale.set(2, 2, 2)\r\n                mesh.castShadow = true\r\n                mesh.receiveShadow = true\r\n                this.scene.add(mesh)\r\n            })\r\n            loader.load('static/models/stl/binary/pr2_head_tilt.stl', (geometry) => {\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(0.136, - 0.37, - 0.6)\r\n                mesh.rotation.set(- Math.PI / 2, 0.3, 0)\r\n                mesh.scale.set(2, 2, 2)\r\n                mesh.castShadow = true\r\n                mesh.receiveShadow = true\r\n                this.scene.add(mesh)\r\n            })\r\n            // Colored binary STL\r\n            loader.load('static/models/stl/binary/colored.stl', (geometry) => {\r\n                var meshMaterial = material\r\n                if (geometry.hasColors) {\r\n                    meshMaterial = new this.$THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true })\r\n                }\r\n                var mesh = new this.$THREE.Mesh(geometry, meshMaterial)\r\n                mesh.position.set(0.5, 0.2, 0)\r\n                mesh.rotation.set(- Math.PI / 2, Math.PI / 2, 0)\r\n                mesh.scale.set(0.3, 0.3, 0.3)\r\n                mesh.castShadow = true\r\n                mesh.receiveShadow = true\r\n                this.scene.add(mesh)\r\n            })\r\n            // Lights\r\n            this.scene.add(new this.$THREE.HemisphereLight(0x443333, 0x111122))\r\n            this.addShadowedLight(1, 1, 1, 0xffffff, 1.35)\r\n            this.addShadowedLight(0.5, 1, - 1, 0xffaa00, 1)\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.renderer.shadowMap.enabled = true\r\n            this.container.appendChild(this.renderer.domElement)\r\n            // stats\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        addShadowedLight(x, y, z, color, intensity) {\r\n            var directionalLight = new this.$THREE.DirectionalLight(color, intensity)\r\n            directionalLight.position.set(x, y, z)\r\n            this.scene.add(directionalLight)\r\n            directionalLight.castShadow = true\r\n            var d = 1\r\n            directionalLight.shadow.camera.left = - d\r\n            directionalLight.shadow.camera.right = d\r\n            directionalLight.shadow.camera.top = d\r\n            directionalLight.shadow.camera.bottom = - d\r\n            directionalLight.shadow.camera.near = 1\r\n            directionalLight.shadow.camera.far = 4\r\n            directionalLight.shadow.bias = - 0.002\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var timer = Date.now() * 0.0005\r\n            this.camera.position.x = Math.cos(timer) * 3\r\n            this.camera.position.z = Math.sin(timer) * 3\r\n            this.camera.lookAt(this.cameraTarget)\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderStl-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderStl.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderStl-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" -\\n\\t\\t\\tSTL loader test by \"),_c('a',{attrs:{\"href\":\"https://github.com/aleeper\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"aleeper\")]),_vm._v(\".\"),_c('br'),_vm._v(\"\\n\\t\\t\\tPR2 head from \"),_c('a',{attrs:{\"href\":\"http://www.ros.org/wiki/pr2_description\"}},[_vm._v(\"www.ros.org\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-2437aeee\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderStl.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2437aeee\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderStl.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderStl.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderStl.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2437aeee\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderStl.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2437aeee\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderStl.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}