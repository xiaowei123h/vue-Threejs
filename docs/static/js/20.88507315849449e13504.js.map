{"version":3,"sources":["webpack:///src/views/water/webglWaterFlowmap.vue","webpack:///./src/views/water/webglWaterFlowmap.vue?410a","webpack:///./src/views/water/webglWaterFlowmap.vue","webpack:///./src/components/jsm/objects/Water2.js"],"names":["webglWaterFlowmap","data","scene","camera","renderer","water","gui","mounted","this","init","animate","beforeDestroy","destroy","methods","_this","$THREE","Scene","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","lookAt","groundGeometry","PlaneBufferGeometry","groundMaterial","MeshBasicMaterial","color","ground","Mesh","rotation","x","Math","PI","add","textureLoader","TextureLoader","load","map","wrapS","RepeatWrapping","wrapT","anisotropy","repeat","needsUpdate","waterGeometry","flowMap","Water2","scale","textureWidth","textureHeight","y","helperGeometry","helperMaterial","helper","visible","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","document","getElementsByClassName","appendChild","domElement","dat_gui_module","name","open","controls","OrbitControls","minDistance","maxDistance","addEventListener","onResize","$onWindowResize","requestAnimationFrame","render","water_webglWaterFlowmap","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","Water","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","__WEBPACK_IMPORTED_MODULE_1__objects_Reflector_js__","__WEBPACK_IMPORTED_MODULE_2__objects_Refractor_js__","geometry","options","call","type","scope","undefined","Color","clipBias","flowDirection","Vector2","flowSpeed","reflectivity","shader","WaterShader","encoding","LinearEncoding","normalMap0","normalMap1","cycle","halfCycle","textureMatrix","Matrix4","clock","Clock","Reflector","Refractor","reflector","refractor","matrixAutoUpdate","material","ShaderMaterial","uniforms","UniformsUtils","merge","UniformsLib","vertexShader","fragmentShader","transparent","fog","defines","USE_FLOWMAP","value","getRenderTarget","texture","z","w","onBeforeRender","delta","config","multiply","projectionMatrix","matrixWorldInverse","matrixWorld","updateTextureMatrix","getDelta","copy","console","error","prototype","Object","create","constructor","tReflectionMap","tRefractionMap","tNormalMap0","tNormalMap1","Vector4","join"],"mappings":"uKAaAA,GACAC,KADA,WAEA,OACAC,MAAA,KACAC,OAAA,KACAC,SAAA,KACAC,MAAA,KACAC,IAAA,OAGAC,QAVA,WAWAC,KAAAC,OACAD,KAAAE,WAEAC,cAdA,WAeAH,KAAAF,IAAAM,WAEAC,SACAJ,KADA,WACA,IAAAK,EAAAN,KAEAA,KAAAN,MAAA,IAAAM,KAAAO,OAAAC,MAEAR,KAAAL,OAAA,IAAAK,KAAAO,OAAAE,kBAAA,GAAAT,KAAAU,iBAAAC,OAAAC,YAAA,QACAZ,KAAAL,OAAAkB,SAAAC,IAAA,QACAd,KAAAL,OAAAoB,OAAAf,KAAAN,MAAAmB,UAEA,IAAAG,EAAA,IAAAhB,KAAAO,OAAAU,oBAAA,aACAC,EAAA,IAAAlB,KAAAO,OAAAY,mBAAAC,MAAA,WACAC,EAAA,IAAArB,KAAAO,OAAAe,KAAAN,EAAAE,GACAG,EAAAE,SAAAC,GAAA,GAAAC,KAAAC,GACA1B,KAAAN,MAAAiC,IAAAN,GACA,IAAAO,EAAA,IAAA5B,KAAAO,OAAAsB,cACAD,EAAAE,KAAA,mEAAAC,GACAA,EAAAC,MAAA1B,EAAAC,OAAA0B,eACAF,EAAAG,MAAA5B,EAAAC,OAAA0B,eACAF,EAAAI,WAAA,GACAJ,EAAAK,OAAAtB,IAAA,KACAI,EAAAa,MACAb,EAAAmB,aAAA,IAGA,IAAAC,EAAA,IAAAtC,KAAAO,OAAAU,oBAAA,OACAsB,EAAAX,EAAAE,KAAA,4CACA9B,KAAAH,MAAA,IAAA2C,EAAA,EAAAF,GACAG,MAAA,EACAC,aAAA,KACAC,cAAA,KACAJ,YAEAvC,KAAAH,MAAAgB,SAAA+B,EAAA,EACA5C,KAAAH,MAAA0B,SAAAC,GAAA,GAAAC,KAAAC,GACA1B,KAAAN,MAAAiC,IAAA3B,KAAAH,OAEA,IAAAgD,EAAA,IAAA7C,KAAAO,OAAAU,oBAAA,OACA6B,EAAA,IAAA9C,KAAAO,OAAAY,mBAAAY,IAAAQ,IACAQ,EAAA,IAAA/C,KAAAO,OAAAe,KAAAuB,EAAAC,GACAC,EAAAlC,SAAA+B,EAAA,KACAG,EAAAxB,SAAAC,GAAA,GAAAC,KAAAC,GACAqB,EAAAC,SAAA,EACAhD,KAAAN,MAAAiC,IAAAoB,GAEA/C,KAAAJ,SAAA,IAAAI,KAAAO,OAAA0C,eAAAC,WAAA,IACAlD,KAAAJ,SAAAuD,QAAAnD,KAAAU,iBAAAC,OAAAC,aACAZ,KAAAJ,SAAAwD,cAAAzC,OAAA0C,kBACAC,SAAAC,uBAAA,kCAAAC,YAAAxD,KAAAJ,SAAA6D,YAEAzD,KAAAF,IAAA,IAAA4D,EAAA,EACA1D,KAAAF,IAAA6B,IAAAoB,EAAA,WAAAY,KAAA,iBACA3D,KAAAF,IAAA8D,OAEA,IAAAC,EAAA,IAAAC,EAAA,EAAA9D,KAAAL,OAAAK,KAAAJ,SAAA6D,YACAI,EAAAE,YAAA,EACAF,EAAAG,YAAA,GAEArD,OAAAsD,iBAAA,SAAAjE,KAAAkE,UAAA,IAEAA,SA3DA,WA4DAlE,KAAAmE,gBAAAnE,KAAAL,OAAAK,KAAAJ,WAEAM,QA9DA,WA+DAkE,sBAAApE,KAAAE,SACAF,KAAAqE,UAEAA,OAlEA,WAmEArE,KAAAJ,SAAAyE,OAAArE,KAAAN,MAAAM,KAAAL,WC9Fe2E,GADED,OAFjB,WAA0BrE,KAAauE,eAAbvE,KAAuCwE,MAAAC,GAAwB,OAA/DzE,KAA+D0E,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAb5E,KAAauE,eAA0BE,EAAvCzE,KAAuCwE,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAiBI,YAAA,gCAA0CJ,EAAA,OAAYK,OAAOC,GAAA,eAA7I/E,KAA+JgF,GAAA,KAAAP,EAAA,OAAwBK,OAAOC,GAAA,UAAaN,EAAA,KAAUK,OAAOG,KAAA,sBAAAC,OAAA,SAAAC,IAAA,yBAA5NnF,KAAwSgF,GAAA,cAAxShF,KAAwSgF,GAAA,kCCE5U,IAcAI,EAdyBC,EAAQ,OAcjCC,CACE9F,EACA8E,GATF,EAVA,SAAAiB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB,2CC1BhCC,EAAAI,EAAAD,EAAA,sBAAAE,IAAA,IAAAC,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAwBIK,EAAQ,SAARA,EAAmBI,EAAUC,GAEhCzE,MAAK0E,KAAMhG,KAAM8F,GAEjB9F,KAAKiG,KAAO,QAEZ,IAAIC,EAAQlG,KAIRoB,OAA4B+E,KAFhCJ,EAAUA,OAEY3E,MAAwB,IAAIgF,IAAOL,EAAQ3E,OAAU,IAAIgF,IAAO,UAClF1D,EAAeqD,EAAQrD,cAAgB,IACvCC,EAAgBoD,EAAQpD,eAAiB,IACzC0D,EAAWN,EAAQM,UAAY,EAC/BC,EAAgBP,EAAQO,eAAiB,IAAIC,OAAS,EAAG,GACzDC,EAAYT,EAAQS,WAAa,IACjCC,EAAeV,EAAQU,cAAgB,IACvChE,EAAQsD,EAAQtD,OAAS,EACzBiE,EAASX,EAAQW,QAAUhB,EAAMiB,YACjCC,OAAgCT,IAArBJ,EAAQa,SAAyBb,EAAQa,SAAWC,MAE/DjF,EAAgB,IAAIC,MAEpBU,EAAUwD,EAAQxD,cAAW4D,EAC7BW,EAAaf,EAAQe,YAAclF,EAAcE,KAAM,uCACvDiF,EAAahB,EAAQgB,YAAcnF,EAAcE,KAAM,uCAEvDkF,EAAQ,IACRC,EAAoB,GAARD,EACZE,EAAgB,IAAIC,MACpBC,EAAQ,IAAIC,IAIhB,QAAmBlB,IAAdmB,IAOL,QAAmBnB,IAAdoB,IAAL,CAOA,IAAIC,EAAY,IAAIF,IAAWxB,GAC9BpD,aAAcA,EACdC,cAAeA,EACf0D,SAAUA,EACVO,SAAUA,IAGPa,EAAY,IAAIF,IAAWzB,GAC9BpD,aAAcA,EACdC,cAAeA,EACf0D,SAAUA,EACVO,SAAUA,IAGXY,EAAUE,kBAAmB,EAC7BD,EAAUC,kBAAmB,EAI7B1H,KAAK2H,SAAW,IAAIC,OACnBC,SAAUC,OAAcC,OACvBC,OAAA,IACAtB,EAAOmB,WAERI,aAAcvB,EAAOuB,aACrBC,eAAgBxB,EAAOwB,eACvBC,aAAa,EACbC,KAAK,SAGWjC,IAAZ5D,GAEJvC,KAAK2H,SAASU,QAAQC,YAAc,GACpCtI,KAAK2H,SAASE,SAAd,UACC5B,KAAM,IACNsC,MAAOhG,IAKRvC,KAAK2H,SAASE,SAAd,eACC5B,KAAM,KACNsC,MAAOjC,GAOTQ,EAAW9E,MAAQ8E,EAAW5E,MAAQD,MACtC8E,EAAW/E,MAAQ+E,EAAW7E,MAAQD,MAEtCjC,KAAK2H,SAASE,SAAd,eAA2CU,MAAQf,EAAUgB,kBAAkBC,QAC/EzI,KAAK2H,SAASE,SAAd,eAA2CU,MAAQd,EAAUe,kBAAkBC,QAC/EzI,KAAK2H,SAASE,SAAd,YAAwCU,MAAQzB,EAChD9G,KAAK2H,SAASE,SAAd,YAAwCU,MAAQxB,EAIhD/G,KAAK2H,SAASE,SAAd,MAAkCU,MAAQnH,EAC1CpB,KAAK2H,SAASE,SAAd,aAAyCU,MAAQ9B,EACjDzG,KAAK2H,SAASE,SAAd,cAA0CU,MAAQrB,EAIlDlH,KAAK2H,SAASE,SAAd,OAAmCU,MAAM/G,EAAI,EAC7CxB,KAAK2H,SAASE,SAAd,OAAmCU,MAAM3F,EAAIqE,EAC7CjH,KAAK2H,SAASE,SAAd,OAAmCU,MAAMG,EAAIzB,EAC7CjH,KAAK2H,SAASE,SAAd,OAAmCU,MAAMI,EAAIlG,EA8C7CzC,KAAK4I,eAAiB,SAAWhJ,EAAUF,EAAOC,GA3BlD,IAEKkJ,EACAC,GAlBL,SAA8BnJ,GAE7BuH,EAAcpG,IACb,GAAK,EAAK,EAAK,GACf,EAAK,GAAK,EAAK,GACf,EAAK,EAAK,GAAK,GACf,EAAK,EAAK,EAAK,GAGhBoG,EAAc6B,SAAUpJ,EAAOqJ,kBAC/B9B,EAAc6B,SAAUpJ,EAAOsJ,oBAC/B/B,EAAc6B,SAAU7C,EAAMgD,aAiC9BC,CAAqBxJ,GA3BjBkJ,EAAQzB,EAAMgC,YACdN,EAAS5C,EAAMyB,SAASE,SAAf,QAENU,MAAM/G,GAAKgF,EAAYqC,EAC9BC,EAAOP,MAAM3F,EAAIkG,EAAOP,MAAM/G,EAAIyF,EAM7B6B,EAAOP,MAAM/G,GAAKwF,GAEtB8B,EAAOP,MAAM/G,EAAI,EACjBsH,EAAOP,MAAM3F,EAAIqE,GAEN6B,EAAOP,MAAM3F,GAAKoE,IAE7B8B,EAAOP,MAAM3F,EAAIkG,EAAOP,MAAM3F,EAAIoE,GAanCd,EAAMlD,SAAU,EAEhBwE,EAAU0B,YAAYG,KAAMnD,EAAMgD,aAClCzB,EAAUyB,YAAYG,KAAMnD,EAAMgD,aAElC1B,EAAUoB,eAAgBhJ,EAAUF,EAAOC,GAC3C8H,EAAUmB,eAAgBhJ,EAAUF,EAAOC,GAE3CuG,EAAMlD,SAAU,QApIhBsG,QAAQC,MAAO,6DAPfD,QAAQC,MAAO,yDAiJjB7D,EAAM8D,UAAYC,OAAOC,OAAQpI,MAAKkI,WACtC9D,EAAM8D,UAAUG,YAAcjE,EAE9BA,EAAMiB,aAELkB,UAECzG,OACC6E,KAAM,IACNsC,MAAO,MAGR9B,cACCR,KAAM,IACNsC,MAAO,GAGRqB,gBACC3D,KAAM,IACNsC,MAAO,MAGRsB,gBACC5D,KAAM,IACNsC,MAAO,MAGRuB,aACC7D,KAAM,IACNsC,MAAO,MAGRwB,aACC9D,KAAM,IACNsC,MAAO,MAGRrB,eACCjB,KAAM,KACNsC,MAAO,MAGRO,QACC7C,KAAM,KACNsC,MAAO,IAAIyB,SAKb/B,cAEC,oBACA,6BACA,qCAEA,8BAEA,uBACA,oBACA,uBAEA,gBAEA,cACA,oDAEA,8DACA,iDAEA,mDACA,iDAEA,kCACA,0BAEA,KAECgC,KAAM,MAER/B,gBAEC,oBACA,+BACA,uCAEA,oCACA,oCACA,iCACA,iCAEA,qBACA,gCACA,QACA,gCACA,SAEA,sBACA,8BACA,uBAEA,uBACA,oBACA,uBAEA,gBAEA,oCAEA,qCACA,qCACA,gCACA,4BAEA,sCAGA,eACA,uBACA,wDACA,UACA,4BACA,WACA,qBAGA,2FACA,2FAGA,oEACA,oEAGA,6GAGA,oDACA,6FAGA,wCACA,qDAEA,+EACA,yDAGA,wFAEA,oCACA,kCACA,4BAEA,KAEC+B,KAAM","file":"static/js/20.88507315849449e13504.js","sourcesContent":["<template>\r\n    <div class=\"webglWaterFlowmap-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener noreferrer\">three.js</a> - water flow map\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { Water } from '@/components/jsm/objects/Water2.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            scene: null,\r\n            camera: null,\r\n            renderer: null,\r\n            water: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            // scene\r\n            this.scene = new this.$THREE.Scene()\r\n            // camera\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, this.$webglInnerWidth / window.innerHeight, 0.1, 200)\r\n            this.camera.position.set(0, 25, 0)\r\n            this.camera.lookAt(this.scene.position)\r\n            // ground\r\n            var groundGeometry = new this.$THREE.PlaneBufferGeometry(20, 20, 10, 10)\r\n            var groundMaterial = new this.$THREE.MeshBasicMaterial({ color: 0xcccccc })\r\n            var ground = new this.$THREE.Mesh(groundGeometry, groundMaterial)\r\n            ground.rotation.x = Math.PI * - 0.5\r\n            this.scene.add(ground)\r\n            var textureLoader = new this.$THREE.TextureLoader()\r\n            textureLoader.load('static/textures/floors/FloorsCheckerboard_S_Diffuse.jpg', (map) => {\r\n                map.wrapS = this.$THREE.RepeatWrapping\r\n                map.wrapT = this.$THREE.RepeatWrapping\r\n                map.anisotropy = 16\r\n                map.repeat.set(4, 4)\r\n                groundMaterial.map = map\r\n                groundMaterial.needsUpdate = true\r\n            })\r\n            // water\r\n            var waterGeometry = new this.$THREE.PlaneBufferGeometry(20, 20)\r\n            var flowMap = textureLoader.load('static/textures/water/Water_1_M_Flow.jpg')\r\n            this.water = new Water(waterGeometry, {\r\n                scale: 2,\r\n                textureWidth: 1024,\r\n                textureHeight: 1024,\r\n                flowMap: flowMap\r\n            })\r\n            this.water.position.y = 1\r\n            this.water.rotation.x = Math.PI * - 0.5\r\n            this.scene.add(this.water)\r\n            // flow map helper\r\n            var helperGeometry = new this.$THREE.PlaneBufferGeometry(20, 20)\r\n            var helperMaterial = new this.$THREE.MeshBasicMaterial({ map: flowMap })\r\n            var helper = new this.$THREE.Mesh(helperGeometry, helperMaterial)\r\n            helper.position.y = 1.01\r\n            helper.rotation.x = Math.PI * - 0.5\r\n            helper.visible = false\r\n            this.scene.add(helper)\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            document.getElementsByClassName('webglWaterFlowmap-container')[0].appendChild(this.renderer.domElement)\r\n            //\r\n            this.gui = new GUI()\r\n            this.gui.add(helper, 'visible').name('Show Flow Map')\r\n            this.gui.open()\r\n            //\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 5\r\n            controls.maxDistance = 50\r\n            //\r\n            window.addEventListener('resize', this.onResize, false)\r\n        },\r\n        onResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglWaterFlowmap-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/water/webglWaterFlowmap.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglWaterFlowmap-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"three.js\")]),_vm._v(\" - water flow map\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-22eccc86\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/water/webglWaterFlowmap.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-22eccc86\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglWaterFlowmap.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglWaterFlowmap.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglWaterFlowmap.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-22eccc86\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglWaterFlowmap.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-22eccc86\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/water/webglWaterFlowmap.vue\n// module id = null\n// module chunks = ","import {\r\n\tClock,\r\n\tColor,\r\n\tLinearEncoding,\r\n\tMatrix4,\r\n\tMesh,\r\n\tRepeatWrapping,\r\n\tShaderMaterial,\r\n\tTextureLoader,\r\n\tUniformsLib,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector4\r\n} from \"@/components/build/three.module.js\";\r\nimport { Reflector } from \"../objects/Reflector.js\";\r\nimport { Refractor } from \"../objects/Refractor.js\";\r\n\r\n/**\r\n * References:\r\n *\thttp://www.valvesoftware.com/publications/2010/siggraph2010_vlachos_waterflow.pdf\r\n * \thttp://graphicsrunner.blogspot.de/2010/08/water-using-flow-maps.html\r\n *\r\n */\r\n\r\nvar Water = function ( geometry, options ) {\r\n\r\n\tMesh.call( this, geometry );\r\n\r\n\tthis.type = 'Water';\r\n\r\n\tvar scope = this;\r\n\r\n\toptions = options || {};\r\n\r\n\tvar color = ( options.color !== undefined ) ? new Color( options.color ) : new Color( 0xFFFFFF );\r\n\tvar textureWidth = options.textureWidth || 512;\r\n\tvar textureHeight = options.textureHeight || 512;\r\n\tvar clipBias = options.clipBias || 0;\r\n\tvar flowDirection = options.flowDirection || new Vector2( 1, 0 );\r\n\tvar flowSpeed = options.flowSpeed || 0.03;\r\n\tvar reflectivity = options.reflectivity || 0.02;\r\n\tvar scale = options.scale || 1;\r\n\tvar shader = options.shader || Water.WaterShader;\r\n\tvar encoding = options.encoding !== undefined ? options.encoding : LinearEncoding;\r\n\r\n\tvar textureLoader = new TextureLoader();\r\n\r\n\tvar flowMap = options.flowMap || undefined;\r\n\tvar normalMap0 = options.normalMap0 || textureLoader.load( 'textures/water/Water_1_M_Normal.jpg' );\r\n\tvar normalMap1 = options.normalMap1 || textureLoader.load( 'textures/water/Water_2_M_Normal.jpg' );\r\n\r\n\tvar cycle = 0.15; // a cycle of a flow map phase\r\n\tvar halfCycle = cycle * 0.5;\r\n\tvar textureMatrix = new Matrix4();\r\n\tvar clock = new Clock();\r\n\r\n\t// internal components\r\n\r\n\tif ( Reflector === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.Water: Required component Reflector not found.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( Refractor === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.Water: Required component Refractor not found.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tvar reflector = new Reflector( geometry, {\r\n\t\ttextureWidth: textureWidth,\r\n\t\ttextureHeight: textureHeight,\r\n\t\tclipBias: clipBias,\r\n\t\tencoding: encoding\r\n\t} );\r\n\r\n\tvar refractor = new Refractor( geometry, {\r\n\t\ttextureWidth: textureWidth,\r\n\t\ttextureHeight: textureHeight,\r\n\t\tclipBias: clipBias,\r\n\t\tencoding: encoding\r\n\t} );\r\n\r\n\treflector.matrixAutoUpdate = false;\r\n\trefractor.matrixAutoUpdate = false;\r\n\r\n\t// material\r\n\r\n\tthis.material = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\tUniformsLib[ 'fog' ],\r\n\t\t\tshader.uniforms\r\n\t\t] ),\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tfragmentShader: shader.fragmentShader,\r\n\t\ttransparent: true,\r\n\t\tfog: true\r\n\t} );\r\n\r\n\tif ( flowMap !== undefined ) {\r\n\r\n\t\tthis.material.defines.USE_FLOWMAP = '';\r\n\t\tthis.material.uniforms[ \"tFlowMap\" ] = {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: flowMap\r\n\t\t};\r\n\r\n\t} else {\r\n\r\n\t\tthis.material.uniforms[ \"flowDirection\" ] = {\r\n\t\t\ttype: 'v2',\r\n\t\t\tvalue: flowDirection\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// maps\r\n\r\n\tnormalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\r\n\tnormalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\r\n\r\n\tthis.material.uniforms[ \"tReflectionMap\" ].value = reflector.getRenderTarget().texture;\r\n\tthis.material.uniforms[ \"tRefractionMap\" ].value = refractor.getRenderTarget().texture;\r\n\tthis.material.uniforms[ \"tNormalMap0\" ].value = normalMap0;\r\n\tthis.material.uniforms[ \"tNormalMap1\" ].value = normalMap1;\r\n\r\n\t// water\r\n\r\n\tthis.material.uniforms[ \"color\" ].value = color;\r\n\tthis.material.uniforms[ \"reflectivity\" ].value = reflectivity;\r\n\tthis.material.uniforms[ \"textureMatrix\" ].value = textureMatrix;\r\n\r\n\t// inital values\r\n\r\n\tthis.material.uniforms[ \"config\" ].value.x = 0; // flowMapOffset0\r\n\tthis.material.uniforms[ \"config\" ].value.y = halfCycle; // flowMapOffset1\r\n\tthis.material.uniforms[ \"config\" ].value.z = halfCycle; // halfCycle\r\n\tthis.material.uniforms[ \"config\" ].value.w = scale; // scale\r\n\r\n\t// functions\r\n\r\n\tfunction updateTextureMatrix( camera ) {\r\n\r\n\t\ttextureMatrix.set(\r\n\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t);\r\n\r\n\t\ttextureMatrix.multiply( camera.projectionMatrix );\r\n\t\ttextureMatrix.multiply( camera.matrixWorldInverse );\r\n\t\ttextureMatrix.multiply( scope.matrixWorld );\r\n\r\n\t}\r\n\r\n\tfunction updateFlow() {\r\n\r\n\t\tvar delta = clock.getDelta();\r\n\t\tvar config = scope.material.uniforms[ \"config\" ];\r\n\r\n\t\tconfig.value.x += flowSpeed * delta; // flowMapOffset0\r\n\t\tconfig.value.y = config.value.x + halfCycle; // flowMapOffset1\r\n\r\n\t\t// Important: The distance between offsets should be always the value of \"halfCycle\".\r\n\t\t// Moreover, both offsets should be in the range of [ 0, cycle ].\r\n\t\t// This approach ensures a smooth water flow and avoids \"reset\" effects.\r\n\r\n\t\tif ( config.value.x >= cycle ) {\r\n\r\n\t\t\tconfig.value.x = 0;\r\n\t\t\tconfig.value.y = halfCycle;\r\n\r\n\t\t} else if ( config.value.y >= cycle ) {\r\n\r\n\t\t\tconfig.value.y = config.value.y - cycle;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\tupdateTextureMatrix( camera );\r\n\t\tupdateFlow();\r\n\r\n\t\tscope.visible = false;\r\n\r\n\t\treflector.matrixWorld.copy( scope.matrixWorld );\r\n\t\trefractor.matrixWorld.copy( scope.matrixWorld );\r\n\r\n\t\treflector.onBeforeRender( renderer, scene, camera );\r\n\t\trefractor.onBeforeRender( renderer, scene, camera );\r\n\r\n\t\tscope.visible = true;\r\n\r\n\t};\r\n\r\n};\r\n\r\nWater.prototype = Object.create( Mesh.prototype );\r\nWater.prototype.constructor = Water;\r\n\r\nWater.WaterShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'color': {\r\n\t\t\ttype: 'c',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'reflectivity': {\r\n\t\t\ttype: 'f',\r\n\t\t\tvalue: 0\r\n\t\t},\r\n\r\n\t\t'tReflectionMap': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tRefractionMap': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tNormalMap0': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tNormalMap1': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'textureMatrix': {\r\n\t\t\ttype: 'm4',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'config': {\r\n\t\t\ttype: 'v4',\r\n\t\t\tvalue: new Vector4()\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t'#include <common>',\r\n\t\t'#include <fog_pars_vertex>',\r\n\t\t'#include <logdepthbuf_pars_vertex>',\r\n\r\n\t\t'uniform mat4 textureMatrix;',\r\n\r\n\t\t'varying vec4 vCoord;',\r\n\t\t'varying vec2 vUv;',\r\n\t\t'varying vec3 vToEye;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvUv = uv;',\r\n\t\t'\tvCoord = textureMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n\t\t'\tvToEye = cameraPosition - worldPosition.xyz;',\r\n\r\n\t\t'\tvec4 mvPosition =  viewMatrix * worldPosition;', // used in fog_vertex\r\n\t\t'\tgl_Position = projectionMatrix * mvPosition;',\r\n\r\n\t\t'\t#include <logdepthbuf_vertex>',\r\n\t\t'\t#include <fog_vertex>',\r\n\r\n\t\t'}'\r\n\r\n\t].join( '\\n' ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t'#include <common>',\r\n\t\t'#include <fog_pars_fragment>',\r\n\t\t'#include <logdepthbuf_pars_fragment>',\r\n\r\n\t\t'uniform sampler2D tReflectionMap;',\r\n\t\t'uniform sampler2D tRefractionMap;',\r\n\t\t'uniform sampler2D tNormalMap0;',\r\n\t\t'uniform sampler2D tNormalMap1;',\r\n\r\n\t\t'#ifdef USE_FLOWMAP',\r\n\t\t'\tuniform sampler2D tFlowMap;',\r\n\t\t'#else',\r\n\t\t'\tuniform vec2 flowDirection;',\r\n\t\t'#endif',\r\n\r\n\t\t'uniform vec3 color;',\r\n\t\t'uniform float reflectivity;',\r\n\t\t'uniform vec4 config;',\r\n\r\n\t\t'varying vec4 vCoord;',\r\n\t\t'varying vec2 vUv;',\r\n\t\t'varying vec3 vToEye;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\t#include <logdepthbuf_fragment>',\r\n\r\n\t\t'\tfloat flowMapOffset0 = config.x;',\r\n\t\t'\tfloat flowMapOffset1 = config.y;',\r\n\t\t'\tfloat halfCycle = config.z;',\r\n\t\t'\tfloat scale = config.w;',\r\n\r\n\t\t'\tvec3 toEye = normalize( vToEye );',\r\n\r\n\t\t// determine flow direction\r\n\t\t'\tvec2 flow;',\r\n\t\t'\t#ifdef USE_FLOWMAP',\r\n\t\t'\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;',\r\n\t\t'\t#else',\r\n\t\t'\t\tflow = flowDirection;',\r\n\t\t'\t#endif',\r\n\t\t'\tflow.x *= - 1.0;',\r\n\r\n\t\t// sample normal maps (distort uvs with flowdata)\r\n\t\t'\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );',\r\n\t\t'\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );',\r\n\r\n\t\t// linear interpolate to get the final normal color\r\n\t\t'\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;',\r\n\t\t'\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );',\r\n\r\n\t\t// calculate normal vector\r\n\t\t'\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );',\r\n\r\n\t\t// calculate the fresnel term to blend reflection and refraction maps\r\n\t\t'\tfloat theta = max( dot( toEye, normal ), 0.0 );',\r\n\t\t'\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );',\r\n\r\n\t\t// calculate final uv coords\r\n\t\t'\tvec3 coord = vCoord.xyz / vCoord.w;',\r\n\t\t'\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;',\r\n\r\n\t\t'\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );',\r\n\t\t'\tvec4 refractColor = texture2D( tRefractionMap, uv );',\r\n\r\n\t\t// multiply water color with the mix of both textures\r\n\t\t'\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );',\r\n\r\n\t\t'\t#include <tonemapping_fragment>',\r\n\t\t'\t#include <encodings_fragment>',\r\n\t\t'\t#include <fog_fragment>',\r\n\r\n\t\t'}'\r\n\r\n\t].join( '\\n' )\r\n};\r\n\r\nexport { Water };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/Water2.js"],"sourceRoot":""}