webpackJsonp([20],{FCbX:function(e,t){},H00t:function(e,t,i){"use strict";i.d(t,"a",function(){return n});var o=i("6+nK"),n=function e(){var t=e.SkyShader,i=new o._79({name:"SkyShader",fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:o._101.clone(t.uniforms),side:o.g,depthWrite:!1});o._29.call(this,new o.k(1,1,1),i)};n.prototype=Object.create(o._29.prototype),n.SkyShader={uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new o._105},up:{value:new o._105(0,1,0)}},vertexShader:["uniform vec3 sunPosition;","uniform float rayleigh;","uniform float turbidity;","uniform float mieCoefficient;","uniform vec3 up;","varying vec3 vWorldPosition;","varying vec3 vSunDirection;","varying float vSunfade;","varying vec3 vBetaR;","varying vec3 vBetaM;","varying float vSunE;","const float e = 2.71828182845904523536028747135266249775724709369995957;","const float pi = 3.141592653589793238462643383279502884197169;","const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );","const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );","const float v = 4.0;","const vec3 K = vec3( 0.686, 0.678, 0.666 );","const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );","const float cutoffAngle = 1.6110731556870734;","const float steepness = 1.5;","const float EE = 1000.0;","float sunIntensity( float zenithAngleCos ) {","\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );","\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );","}","vec3 totalMie( float T ) {","\tfloat c = ( 0.2 * T ) * 10E-18;","\treturn 0.434 * c * MieConst;","}","void main() {","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvWorldPosition = worldPosition.xyz;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","\tgl_Position.z = gl_Position.w;","\tvSunDirection = normalize( sunPosition );","\tvSunE = sunIntensity( dot( vSunDirection, up ) );","\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );","\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );","\tvBetaR = totalRayleigh * rayleighCoefficient;","\tvBetaM = totalMie( turbidity ) * mieCoefficient;","}"].join("\n"),fragmentShader:["varying vec3 vWorldPosition;","varying vec3 vSunDirection;","varying float vSunfade;","varying vec3 vBetaR;","varying vec3 vBetaM;","varying float vSunE;","uniform float mieDirectionalG;","uniform vec3 up;","const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );","const float pi = 3.141592653589793238462643383279502884197169;","const float n = 1.0003;","const float N = 2.545E25;","const float rayleighZenithLength = 8.4E3;","const float mieZenithLength = 1.25E3;","const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;","const float THREE_OVER_SIXTEENPI = 0.05968310365946075;","const float ONE_OVER_FOURPI = 0.07957747154594767;","float rayleighPhase( float cosTheta ) {","\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );","}","float hgPhase( float cosTheta, float g ) {","\tfloat g2 = pow( g, 2.0 );","\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );","\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );","}","void main() {","\tvec3 direction = normalize( vWorldPosition - cameraPos );","\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );","\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );","\tfloat sR = rayleighZenithLength * inverse;","\tfloat sM = mieZenithLength * inverse;","\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );","\tfloat cosTheta = dot( direction, vSunDirection );","\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );","\tvec3 betaRTheta = vBetaR * rPhase;","\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );","\tvec3 betaMTheta = vBetaM * mPhase;","\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );","\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );","\tfloat theta = acos( direction.y ); // elevation --\x3e y-axis, [-pi/2, pi/2]","\tfloat phi = atan( direction.z, direction.x ); // azimuth --\x3e x-axis [-pi/2, pi/2]","\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );","\tvec3 L0 = vec3( 0.1 ) * Fex;","\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );","\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;","\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );","\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );","\tgl_FragColor = vec4( retColor, 1.0 );","#include <tonemapping_fragment>","#include <encodings_fragment>","}"].join("\n")}},kegw:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=i("QEtz"),n=i("wIBv"),r=i("6+nK"),a=function(e,t){r._29.call(this,e);var i=this,o=void 0!==(t=t||{}).textureWidth?t.textureWidth:512,n=void 0!==t.textureHeight?t.textureHeight:512,a=void 0!==t.clipBias?t.clipBias:0,s=void 0!==t.alpha?t.alpha:1,l=void 0!==t.time?t.time:0,c=void 0!==t.waterNormals?t.waterNormals:null,u=void 0!==t.sunDirection?t.sunDirection:new r._105(.70707,.70707,0),d=new r.r(void 0!==t.sunColor?t.sunColor:16777215),v=new r.r(void 0!==t.waterColor?t.waterColor:8355711),m=void 0!==t.eye?t.eye:new r._105(0,0,0),h=void 0!==t.distortionScale?t.distortionScale:20,f=void 0!==t.side?t.side:r.V,p=void 0!==t.fog&&t.fog,g=new r._52,w=new r._105,x=new r._105,y=new r._105,_=new r._28,E=new r._105(0,0,-1),S=new r._106,M=new r._105,C=new r._105,R=new r._106,P=new r._28,b=new r._51,T={minFilter:r._18,magFilter:r._18,format:r._67},z=new r._108(o,n,T);r._26.isPowerOfTwo(o)&&r._26.isPowerOfTwo(n)||(z.texture.generateMipmaps=!1);var D={uniforms:r._101.merge([r._100.fog,r._100.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new r._28},sunColor:{value:new r.r(8355711)},sunDirection:{value:new r._105(.70707,.70707,0)},eye:{value:new r._105},waterColor:{value:new r.r(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","#include <common>","#include <fog_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;","#include <beginnormal_vertex>","#include <defaultnormal_vertex>","#include <logdepthbuf_vertex>","#include <fog_vertex>","#include <shadowmap_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}","#include <common>","#include <packing>","#include <bsdfs>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <lights_pars_begin>","#include <shadowmap_pars_fragment>","#include <shadowmask_pars_fragment>","void main() {","#include <logdepthbuf_fragment>","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );","#include <tonemapping_fragment>","#include <fog_fragment>","}"].join("\n")},W=new r._79({fragmentShader:D.fragmentShader,vertexShader:D.vertexShader,uniforms:r._101.clone(D.uniforms),lights:!0,side:f,fog:p});W.uniforms.mirrorSampler.value=z.texture,W.uniforms.textureMatrix.value=P,W.uniforms.alpha.value=s,W.uniforms.time.value=l,W.uniforms.normalSampler.value=c,W.uniforms.sunColor.value=d,W.uniforms.waterColor.value=v,W.uniforms.sunDirection.value=u,W.uniforms.distortionScale.value=h,W.uniforms.eye.value=m,i.material=W,i.onBeforeRender=function(e,t,o){if(x.setFromMatrixPosition(i.matrixWorld),y.setFromMatrixPosition(o.matrixWorld),_.extractRotation(i.matrixWorld),w.set(0,0,1),w.applyMatrix4(_),M.subVectors(x,y),!(M.dot(w)>0)){M.reflect(w).negate(),M.add(x),_.extractRotation(o.matrixWorld),E.set(0,0,-1),E.applyMatrix4(_),E.add(y),C.subVectors(x,E),C.reflect(w).negate(),C.add(x),b.position.copy(M),b.up.set(0,1,0),b.up.applyMatrix4(_),b.up.reflect(w),b.lookAt(C),b.far=o.far,b.updateMatrixWorld(),b.projectionMatrix.copy(o.projectionMatrix),P.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),P.multiply(b.projectionMatrix),P.multiply(b.matrixWorldInverse),g.setFromNormalAndCoplanarPoint(w,x),g.applyMatrix4(b.matrixWorldInverse),S.set(g.normal.x,g.normal.y,g.normal.z,g.constant);var n=b.projectionMatrix;if(R.x=(Math.sign(S.x)+n.elements[8])/n.elements[0],R.y=(Math.sign(S.y)+n.elements[9])/n.elements[5],R.z=-1,R.w=(1+n.elements[10])/n.elements[14],S.multiplyScalar(2/S.dot(R)),n.elements[2]=S.x,n.elements[6]=S.y,n.elements[10]=S.z+1-a,n.elements[14]=S.w,m.setFromMatrixPosition(o.matrixWorld),e.outputEncoding!==r._17)return console.warn("THREE.Water: WebGLRenderer must use LinearEncoding as outputEncoding."),void(i.onBeforeRender=function(){});if(e.toneMapping!==r._43)return console.warn("THREE.Water: WebGLRenderer must use NoToneMapping as toneMapping."),void(i.onBeforeRender=function(){});var s=e.getRenderTarget(),l=e.xr.enabled,c=e.shadowMap.autoUpdate;i.visible=!1,e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(z),e.state.buffers.depth.setMask(!0),!1===e.autoClear&&e.clear(),e.render(t,b),i.visible=!0,e.xr.enabled=l,e.shadowMap.autoUpdate=c,e.setRenderTarget(s);var u=o.viewport;void 0!==u&&e.state.viewport(u)}}};(a.prototype=Object.create(r._29.prototype)).constructor=a;var s=i("H00t"),l={data:function(){return{container:null,stats:null,camera:null,scene:null,renderer:null,controls:null,water:null,sun:null,mesh:null,gui:null}},mounted:function(){this.init(),this.animate()},beforeDestroy:function(){this.gui.destroy()},methods:{init:function(){var e=this;this.container=document.getElementById("container"),this.renderer=new this.$THREE.WebGLRenderer,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),this.container.appendChild(this.renderer.domElement),this.scene=new this.$THREE.Scene,this.camera=new this.$THREE.PerspectiveCamera(55,this.$webglInnerWidth/window.innerHeight,1,2e4),this.camera.position.set(30,30,100),this.sun=new this.$THREE.Vector3;var t=new this.$THREE.PlaneBufferGeometry(1e4,1e4);this.water=new a(t,{textureWidth:512,textureHeight:512,waterNormals:(new this.$THREE.TextureLoader).load("static/textures/waternormals.jpg",function(t){t.wrapS=t.wrapT=e.$THREE.RepeatWrapping}),alpha:1,sunDirection:new this.$THREE.Vector3,sunColor:16777215,waterColor:7695,distortionScale:3.7,fog:void 0!==this.scene.fog}),this.water.rotation.x=-Math.PI/2,this.scene.add(this.water);var i=new s.a;i.scale.setScalar(1e4),this.scene.add(i);var r=i.material.uniforms;r.turbidity.value=10,r.rayleigh.value=2,r.mieCoefficient.value=.005,r.mieDirectionalG.value=.8;var l,c,u={inclination:.49,azimuth:.205},d=new this.$THREE.PMREMGenerator(this.renderer),v=this;l=Math.PI*(u.inclination-.5),c=2*Math.PI*(u.azimuth-.5),v.sun.x=Math.cos(c),v.sun.y=Math.sin(c)*Math.sin(l),v.sun.z=Math.sin(c)*Math.cos(l),i.material.uniforms.sunPosition.value.copy(v.sun),v.water.material.uniforms.sunDirection.value.copy(v.sun).normalize(),v.scene.environment=d.fromScene(i).texture;var m=new this.$THREE.BoxBufferGeometry(30,30,30),h=new this.$THREE.MeshStandardMaterial({roughness:0});this.mesh=new this.$THREE.Mesh(m,h),this.scene.add(this.mesh),this.controls=new n.b(this.camera,this.renderer.domElement),this.controls.maxPolarAngle=.495*Math.PI,this.controls.target.set(0,10,0),this.controls.minDistance=40,this.controls.maxDistance=200,this.controls.update(),this.stats=new this.$Stats,this.stats.dom.style.left="280px",this.container.appendChild(this.stats.dom),this.gui=new o.a;var f=this.gui.addFolder("Sky");f.add(u,"inclination",0,.5,1e-4).onChange(this.updateSun),f.add(u,"azimuth",0,1,1e-4).onChange(this.updateSun),f.open();var p=this.water.material.uniforms,g=this.gui.addFolder("Water");g.add(p.distortionScale,"value",0,8,.1).name("distortionScale"),g.add(p.size,"value",.1,10,.1).name("size"),g.add(p.alpha,"value",.9,1,.001).name("alpha"),g.open(),window.addEventListener("resize",this.onWindowResize,!1)},onWindowResize:function(){this.$onWindowResize(this.camera,this.renderer)},animate:function(){requestAnimationFrame(this.animate),this.render(),this.stats.update()},render:function(){var e=.001*performance.now();this.mesh.position.y=20*Math.sin(e)+5,this.mesh.rotation.x=.5*e,this.mesh.rotation.z=.51*e,this.water.material.uniforms.time.value+=1/60,this.renderer.render(this.scene,this.camera)}}},c={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"webglShadersOcean-container"},[t("div",{attrs:{id:"container"}}),this._v(" "),t("div",{attrs:{id:"info"}},[t("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener"}},[this._v("three.js")]),this._v(" - webgl ocean\n\t\t")])])}]};var u=i("VU/8")(l,c,!1,function(e){i("FCbX")},"data-v-f5b73734",null);t.default=u.exports}});
//# sourceMappingURL=20.d75a84738a59953ffc9c.js.map