{"version":3,"sources":["webpack:///./src/components/jsm/exporters/GLTFExporter.js","webpack:///src/views/misc/miscExporterGltf.vue","webpack:///./src/views/misc/miscExporterGltf.vue?7e66","webpack:///./src/views/misc/miscExporterGltf.vue"],"names":["WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","FLOAT","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","identityArray","THREE_TO_WEBGL","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","PATH_PROPERTIES","scale","position","quaternion","morphTargetInfluences","GLTFExporter","prototype","constructor","parse","input","onDone","options","DEFAULT_OPTIONS","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","Infinity","animations","includeCustomExtensions","Object","assign","length","cachedCanvas","outputJSON","asset","version","generator","byteOffset","buffers","pending","nodeMap","Map","skins","extensionsUsed","cachedData","meshes","attributes","attributesNormalized","materials","textures","images","uids","uid","getUID","object","has","set","get","equalArray","array1","array2","every","element","index","getPaddedBufferSize","bufferSize","Math","ceil","getPaddedArrayBuffer","arrayBuffer","paddingByte","paddedLength","byteLength","array","Uint8Array","i","buffer","serializeUserData","gltfProperty","keys","userData","json","JSON","stringify","gltfExtensions","extensionName","undefined","extensions","extras","error","console","warn","name","message","applyTextureTransform","mapDef","texture","didTransform","transformDef","offset","x","y","toArray","rotation","repeat","processBuffer","push","processAccessor","attribute","geometry","start","count","componentType","Float32Array","Uint32Array","Uint16Array","Error","end","end2","drawRange","max","min","bufferViewTarget","minMax","output","Array","itemSize","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","a","value","getMinMax","bufferView","target","componentSize","bufferViews","dataView","DataView","ArrayBuffer","getX","getY","getZ","getW","setFloat32","setUint32","setUint16","setUint8","gltfBufferView","byteStride","id","processBufferView","gltfAccessor","type","1","2","3","4","16","normalized","accessors","processImage","image","format","flipY","cachedImages","mimeType","RGBAFormat","key","toString","gltfImage","canvas","document","createElement","width","height","ctx","getContext","translate","drawImage","Promise","resolve","toBlob","blob","reader","window","FileReader","readAsArrayBuffer","onloadend","result","processBufferViewImage","then","bufferViewIndex","uri","toDataURL","src","processTexture","map","gltfTexture","sampler","samplers","gltfSampler","magFilter","minFilter","wrapS","wrapT","processSampler","source","processMaterial","material","isShaderMaterial","gltfMaterial","pbrMetallicRoughness","isMeshBasicMaterial","KHR_materials_unlit","isGLTFSpecularGlossinessMaterial","KHR_materials_pbrSpecularGlossiness","isMeshStandardMaterial","color","concat","opacity","baseColorFactor","metallicFactor","metalness","roughnessFactor","roughness","diffuseFactor","specularFactor","specular","glossinessFactor","glossiness","metalnessMap","roughnessMap","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","diffuseTexture","baseColorTexture","specularMap","specularMapDef","specularGlossinessTexture","emissive","clone","multiplyScalar","emissiveIntensity","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","texCoord","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","DoubleSide","doubleSided","processMesh","mesh","meshCacheKeyParts","uuid","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","isBufferGeometry","BufferGeometry","setFromObject","gltfMesh","primitives","targets","nameConversion","uv","uv2","skinWeight","skinIndex","originalNormal","getAttribute","normal","v","Vector3","il","abs","fromArray","isNormalizedNormalAttribute","setAttribute","z","setX","normalize","createNormalizedNormalAttribute","modifiedAttribute","attributeName","substr","toUpperCase","test","BufferAttribute","accessor","weights","targetNames","reverseDictionary","morphTargetDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","j","jl","setXYZ","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","processAnimation","clip","root","tracks","Utils","mergeMorphTargetTracks","channels","track","trackBinding","PropertyBinding","parseTrackName","trackNode","findNode","nodeName","trackProperty","propertyName","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","interpolation","outputItemSize","values","times","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","getInterpolation","InterpolateDiscrete","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","boneInverses","skin","processNode","gltfNode","translation","matrixAutoUpdate","updateMatrix","matrix","elements","String","isMesh","isCamera","camera","cameras","isOrtho","isOrthographicCamera","gltfCamera","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","MathUtils","degToRad","fov","processCamera","isDirectionalLight","isPointLight","isSpotLight","lights","light","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","processLight","isLight","children","child","visible","nodeIndex","processScene","scene","scenes","gltfScene","objectsWithoutScene","Scene","objects","processObjects","processInput","all","Blob","extensionsUsedList","size","binaryChunk","binaryChunkPrefix","jsonChunk","text","TextEncoder","encode","charCodeAt","stringToArrayBuffer","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","insertKeyframe","time","valueSize","getValueSize","TimeBufferType","ValueBufferType","interpolant","evaluate","slice","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","InterpolateLinear","mergedTrack","targetCount","targetIndex","sourceInterpolant","keyframeIndex","this","miscExporterGltf","data","link","container","object2","scene1","scene2","renderer","gridHelper","sphere","waltHead","mounted","style","display","getElementsByClassName","appendChild","init","animate","methods","exportGLTF","gltfExporter","getElementById","checked","forcePowerOfTwoTextures","log","handleExportScene","handleExportScenes","handleExportObject","handleExportObj","handleExportObjects","handleExportSceneObjects","save","filename","href","URL","createObjectURL","download","click","saveString","saveArrayBuffer","_this","$THREE","PerspectiveCamera","innerWidth","innerHeight","add","ambientLight","AmbientLight","dirLight","DirectionalLight","lookAt","GridHelper","axes","AxesHelper","mapGrid","TextureLoader","load","MeshBasicMaterial","Mesh","IcosahedronBufferGeometry","OctahedronBufferGeometry","TetrahedronBufferGeometry","MeshStandardMaterial","flatShading","SphereBufferGeometry","CylinderBufferGeometry","TorusKnotBufferGeometry","mapWood","BoxBufferGeometry","group1","Group","group2","positions","numPoints","sin","Line","LineBasicMaterial","s","PI","cos","LineLoop","colors","setDrawRange","vertexColors","pointsArray","random","pointsGeo","pointsMaterial","PointsMaterial","pointCloud","Points","cameraOrtho","OrthographicCamera","MeshLambertMaterial","CircleBufferGeometry","RingBufferGeometry","points","Vector2","LatheBufferGeometry","OBJLoader","obj","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","render","timer","Date","now","misc_miscExporterGltf","_vm","_h","$createElement","_c","_self","staticClass","attrs","rel","_v","on","_m","staticRenderFns","step","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/206.8dbd8c11bc657d243b7c.js","sourcesContent":["import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tClampToEdgeWrapping,\r\n\tDoubleSide,\r\n\tInterpolateDiscrete,\r\n\tInterpolateLinear,\r\n\tLinearFilter,\r\n\tLinearMipmapLinearFilter,\r\n\tLinearMipmapNearestFilter,\r\n\tMathUtils,\r\n\tMirroredRepeatWrapping,\r\n\tNearestFilter,\r\n\tNearestMipmapLinearFilter,\r\n\tNearestMipmapNearestFilter,\r\n\tPropertyBinding,\r\n\tRGBAFormat,\r\n\tRepeatWrapping,\r\n\tScene,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Constants\r\n//------------------------------------------------------------------------------\r\nvar WEBGL_CONSTANTS = {\r\n\tPOINTS: 0x0000,\r\n\tLINES: 0x0001,\r\n\tLINE_LOOP: 0x0002,\r\n\tLINE_STRIP: 0x0003,\r\n\tTRIANGLES: 0x0004,\r\n\tTRIANGLE_STRIP: 0x0005,\r\n\tTRIANGLE_FAN: 0x0006,\r\n\r\n\tUNSIGNED_BYTE: 0x1401,\r\n\tUNSIGNED_SHORT: 0x1403,\r\n\tFLOAT: 0x1406,\r\n\tUNSIGNED_INT: 0x1405,\r\n\tARRAY_BUFFER: 0x8892,\r\n\tELEMENT_ARRAY_BUFFER: 0x8893,\r\n\r\n\tNEAREST: 0x2600,\r\n\tLINEAR: 0x2601,\r\n\tNEAREST_MIPMAP_NEAREST: 0x2700,\r\n\tLINEAR_MIPMAP_NEAREST: 0x2701,\r\n\tNEAREST_MIPMAP_LINEAR: 0x2702,\r\n\tLINEAR_MIPMAP_LINEAR: 0x2703,\r\n\r\n\tCLAMP_TO_EDGE: 33071,\r\n\tMIRRORED_REPEAT: 33648,\r\n\tREPEAT: 10497\r\n};\r\n\r\nvar identityArray = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];\r\n\r\nvar THREE_TO_WEBGL = {};\r\n\r\nTHREE_TO_WEBGL[ NearestFilter ] = WEBGL_CONSTANTS.NEAREST;\r\nTHREE_TO_WEBGL[ NearestMipmapNearestFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\r\nTHREE_TO_WEBGL[ NearestMipmapLinearFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\r\nTHREE_TO_WEBGL[ LinearFilter ] = WEBGL_CONSTANTS.LINEAR;\r\nTHREE_TO_WEBGL[ LinearMipmapNearestFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\r\nTHREE_TO_WEBGL[ LinearMipmapLinearFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\r\n\r\nTHREE_TO_WEBGL[ ClampToEdgeWrapping ] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\r\nTHREE_TO_WEBGL[ RepeatWrapping ] = WEBGL_CONSTANTS.REPEAT;\r\nTHREE_TO_WEBGL[ MirroredRepeatWrapping ] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\r\n\r\nvar PATH_PROPERTIES = {\r\n\tscale: 'scale',\r\n\tposition: 'translation',\r\n\tquaternion: 'rotation',\r\n\tmorphTargetInfluences: 'weights'\r\n};\r\n\r\n//------------------------------------------------------------------------------\r\n// GLTF Exporter\r\n//------------------------------------------------------------------------------\r\nvar GLTFExporter = function () {};\r\n\r\nGLTFExporter.prototype = {\r\n\r\n\tconstructor: GLTFExporter,\r\n\r\n\t/**\r\n\t * Parse scenes and generate GLTF output\r\n\t * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\r\n\t * @param  {Function} onDone  Callback on completed\r\n\t * @param  {Object} options options\r\n\t */\r\n\tparse: function ( input, onDone, options ) {\r\n\r\n\t\tvar DEFAULT_OPTIONS = {\r\n\t\t\tbinary: false,\r\n\t\t\ttrs: false,\r\n\t\t\tonlyVisible: true,\r\n\t\t\ttruncateDrawRange: true,\r\n\t\t\tembedImages: true,\r\n\t\t\tmaxTextureSize: Infinity,\r\n\t\t\tanimations: [],\r\n\t\t\tincludeCustomExtensions: false\r\n\t\t};\r\n\r\n\t\toptions = Object.assign( {}, DEFAULT_OPTIONS, options );\r\n\r\n\t\tif ( options.animations.length > 0 ) {\r\n\r\n\t\t\t// Only TRS properties, and not matrices, may be targeted by animation.\r\n\t\t\toptions.trs = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar outputJSON = {\r\n\r\n\t\t\tasset: {\r\n\r\n\t\t\t\tversion: \"2.0\",\r\n\t\t\t\tgenerator: \"GLTFExporter\"\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar byteOffset = 0;\r\n\t\tvar buffers = [];\r\n\t\tvar pending = [];\r\n\t\tvar nodeMap = new Map();\r\n\t\tvar skins = [];\r\n\t\tvar extensionsUsed = {};\r\n\t\tvar cachedData = {\r\n\r\n\t\t\tmeshes: new Map(),\r\n\t\t\tattributes: new Map(),\r\n\t\t\tattributesNormalized: new Map(),\r\n\t\t\tmaterials: new Map(),\r\n\t\t\ttextures: new Map(),\r\n\t\t\timages: new Map()\r\n\r\n\t\t};\r\n\r\n\t\tvar cachedCanvas;\r\n\r\n\t\tvar uids = new Map();\r\n\t\tvar uid = 0;\r\n\r\n\t\t/**\r\n\t\t * Assign and return a temporal unique id for an object\r\n\t\t * especially which doesn't have .uuid\r\n\t\t * @param  {Object} object\r\n\t\t * @return {Integer}\r\n\t\t */\r\n\t\tfunction getUID( object ) {\r\n\r\n\t\t\tif ( ! uids.has( object ) ) uids.set( object, uid ++ );\r\n\r\n\t\t\treturn uids.get( object );\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Compare two arrays\r\n\t\t * @param  {Array} array1 Array 1 to compare\r\n\t\t * @param  {Array} array2 Array 2 to compare\r\n\t\t * @return {Boolean}        Returns true if both arrays are equal\r\n\t\t */\r\n\t\tfunction equalArray( array1, array2 ) {\r\n\r\n\t\t\treturn ( array1.length === array2.length ) && array1.every( function ( element, index ) {\r\n\r\n\t\t\t\treturn element === array2[ index ];\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is identity matrix\r\n\t\t *\r\n\t\t * @param {THREE.Matrix4} matrix\r\n\t\t * @returns {Boolean} Returns true, if parameter is identity matrix\r\n\t\t */\r\n\t\tfunction isIdentityMatrix( matrix ) {\r\n\r\n\t\t\treturn equalArray( matrix.elements, identityArray );\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Converts a string to an ArrayBuffer.\r\n\t\t * @param  {string} text\r\n\t\t * @return {ArrayBuffer}\r\n\t\t */\r\n\t\tfunction stringToArrayBuffer( text ) {\r\n\r\n\t\t\tif ( window.TextEncoder !== undefined ) {\r\n\r\n\t\t\t\treturn new TextEncoder().encode( text ).buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar array = new Uint8Array( new ArrayBuffer( text.length ) );\r\n\r\n\t\t\tfor ( var i = 0, il = text.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar value = text.charCodeAt( i );\r\n\r\n\t\t\t\t// Replacing multi-byte character with space(0x20).\r\n\t\t\t\tarray[ i ] = value > 0xFF ? 0x20 : value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array.buffer;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the min and max vectors from the given attribute\r\n\t\t * @param  {BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\r\n\t\t * @param  {Integer} start\r\n\t\t * @param  {Integer} count\r\n\t\t * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\r\n\t\t */\r\n\t\tfunction getMinMax( attribute, start, count ) {\r\n\r\n\t\t\tvar output = {\r\n\r\n\t\t\t\tmin: new Array( attribute.itemSize ).fill( Number.POSITIVE_INFINITY ),\r\n\t\t\t\tmax: new Array( attribute.itemSize ).fill( Number.NEGATIVE_INFINITY )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = start; i < start + count; i ++ ) {\r\n\r\n\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\r\n\r\n\t\t\t\t\tvar value = attribute.array[ i * attribute.itemSize + a ];\r\n\t\t\t\t\toutput.min[ a ] = Math.min( output.min[ a ], value );\r\n\t\t\t\t\toutput.max[ a ] = Math.max( output.max[ a ], value );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Checks if normal attribute values are normalized.\r\n\t\t *\r\n\t\t * @param {BufferAttribute} normal\r\n\t\t * @returns {Boolean}\r\n\t\t *\r\n\t\t */\r\n\t\tfunction isNormalizedNormalAttribute( normal ) {\r\n\r\n\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar v = new Vector3();\r\n\r\n\t\t\tfor ( var i = 0, il = normal.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t// 0.0005 is from glTF-validator\r\n\t\t\t\tif ( Math.abs( v.fromArray( normal.array, i * 3 ).length() - 1.0 ) > 0.0005 ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Creates normalized normal buffer attribute.\r\n\t\t *\r\n\t\t * @param {BufferAttribute} normal\r\n\t\t * @returns {BufferAttribute}\r\n\t\t *\r\n\t\t */\r\n\t\tfunction createNormalizedNormalAttribute( normal ) {\r\n\r\n\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\r\n\r\n\t\t\t\treturn cachedData.attributesNormalized.get( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute = normal.clone();\r\n\r\n\t\t\tvar v = new Vector3();\r\n\r\n\t\t\tfor ( var i = 0, il = attribute.count; i < il; i ++ ) {\r\n\r\n\t\t\t\tv.fromArray( attribute.array, i * 3 );\r\n\r\n\t\t\t\tif ( v.x === 0 && v.y === 0 && v.z === 0 ) {\r\n\r\n\t\t\t\t\t// if values can't be normalized set (1, 0, 0)\r\n\t\t\t\t\tv.setX( 1.0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv.normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tv.toArray( attribute.array, i * 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcachedData.attributesNormalized.set( normal, attribute );\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\r\n\t\t * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\r\n\t\t *\r\n\t\t * @param {Integer} bufferSize The size the original buffer.\r\n\t\t * @returns {Integer} new buffer size with required padding.\r\n\t\t *\r\n\t\t */\r\n\t\tfunction getPaddedBufferSize( bufferSize ) {\r\n\r\n\t\t\treturn Math.ceil( bufferSize / 4 ) * 4;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a buffer aligned to 4-byte boundary.\r\n\t\t *\r\n\t\t * @param {ArrayBuffer} arrayBuffer Buffer to pad\r\n\t\t * @param {Integer} paddingByte (Optional)\r\n\t\t * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\r\n\t\t */\r\n\t\tfunction getPaddedArrayBuffer( arrayBuffer, paddingByte ) {\r\n\r\n\t\t\tpaddingByte = paddingByte || 0;\r\n\r\n\t\t\tvar paddedLength = getPaddedBufferSize( arrayBuffer.byteLength );\r\n\r\n\t\t\tif ( paddedLength !== arrayBuffer.byteLength ) {\r\n\r\n\t\t\t\tvar array = new Uint8Array( paddedLength );\r\n\t\t\t\tarray.set( new Uint8Array( arrayBuffer ) );\r\n\r\n\t\t\t\tif ( paddingByte !== 0 ) {\r\n\r\n\t\t\t\t\tfor ( var i = arrayBuffer.byteLength; i < paddedLength; i ++ ) {\r\n\r\n\t\t\t\t\t\tarray[ i ] = paddingByte;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn array.buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn arrayBuffer;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Serializes a userData.\r\n\t\t *\r\n\t\t * @param {THREE.Object3D|THREE.Material} object\r\n\t\t * @param {Object} gltfProperty\r\n\t\t */\r\n\t\tfunction serializeUserData( object, gltfProperty ) {\r\n\r\n\t\t\tif ( Object.keys( object.userData ).length === 0 ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tvar json = JSON.parse( JSON.stringify( object.userData ) );\r\n\r\n\t\t\t\tif ( options.includeCustomExtensions && json.gltfExtensions ) {\r\n\r\n\t\t\t\t\tif ( gltfProperty.extensions === undefined ) {\r\n\r\n\t\t\t\t\t\tgltfProperty.extensions = {};\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var extensionName in json.gltfExtensions ) {\r\n\r\n\t\t\t\t\t\tgltfProperty.extensions[ extensionName ] = json.gltfExtensions[ extensionName ];\r\n\t\t\t\t\t\textensionsUsed[ extensionName ] = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdelete json.gltfExtensions;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( Object.keys( json ).length > 0 ) {\r\n\r\n\t\t\t\t\tgltfProperty.extras = json;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: userData of \\'' + object.name + '\\' ' +\r\n\t\t\t\t\t'won\\'t be serialized because of JSON.stringify error - ' + error.message );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Applies a texture transform, if present, to the map definition. Requires\r\n\t\t * the KHR_texture_transform extension.\r\n\t\t */\r\n\t\tfunction applyTextureTransform( mapDef, texture ) {\r\n\r\n\t\t\tvar didTransform = false;\r\n\t\t\tvar transformDef = {};\r\n\r\n\t\t\tif ( texture.offset.x !== 0 || texture.offset.y !== 0 ) {\r\n\r\n\t\t\t\ttransformDef.offset = texture.offset.toArray();\r\n\t\t\t\tdidTransform = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texture.rotation !== 0 ) {\r\n\r\n\t\t\t\ttransformDef.rotation = texture.rotation;\r\n\t\t\t\tdidTransform = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texture.repeat.x !== 1 || texture.repeat.y !== 1 ) {\r\n\r\n\t\t\t\ttransformDef.scale = texture.repeat.toArray();\r\n\t\t\t\tdidTransform = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( didTransform ) {\r\n\r\n\t\t\t\tmapDef.extensions = mapDef.extensions || {};\r\n\t\t\t\tmapDef.extensions[ 'KHR_texture_transform' ] = transformDef;\r\n\t\t\t\textensionsUsed[ 'KHR_texture_transform' ] = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process a buffer to append to the default one.\r\n\t\t * @param  {ArrayBuffer} buffer\r\n\t\t * @return {Integer}\r\n\t\t */\r\n\t\tfunction processBuffer( buffer ) {\r\n\r\n\t\t\tif ( ! outputJSON.buffers ) {\r\n\r\n\t\t\t\toutputJSON.buffers = [ { byteLength: 0 } ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// All buffers are merged before export.\r\n\t\t\tbuffers.push( buffer );\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process and generate a BufferView\r\n\t\t * @param  {BufferAttribute} attribute\r\n\t\t * @param  {number} componentType\r\n\t\t * @param  {number} start\r\n\t\t * @param  {number} count\r\n\t\t * @param  {number} target (Optional) Target usage of the BufferView\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tfunction processBufferView( attribute, componentType, start, count, target ) {\r\n\r\n\t\t\tif ( ! outputJSON.bufferViews ) {\r\n\r\n\t\t\t\toutputJSON.bufferViews = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Create a new dataview and dump the attribute's array into it\r\n\r\n\t\t\tvar componentSize;\r\n\r\n\t\t\tif ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\r\n\r\n\t\t\t\tcomponentSize = 1;\r\n\r\n\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\r\n\r\n\t\t\t\tcomponentSize = 2;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcomponentSize = 4;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar byteLength = getPaddedBufferSize( count * attribute.itemSize * componentSize );\r\n\t\t\tvar dataView = new DataView( new ArrayBuffer( byteLength ) );\r\n\t\t\tvar offset = 0;\r\n\r\n\t\t\tfor ( var i = start; i < start + count; i ++ ) {\r\n\r\n\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\r\n\r\n\t\t\t\t\tvar value;\r\n\r\n\t\t\t\t\tif ( attribute.itemSize > 4 ) {\r\n\r\n\t\t\t\t\t\t // no support for interleaved data for itemSize > 4\r\n\r\n\t\t\t\t\t\tvalue = attribute.array[ i * attribute.itemSize + a ];\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( a === 0 ) value = attribute.getX( i );\r\n\t\t\t\t\t\telse if ( a === 1 ) value = attribute.getY( i );\r\n\t\t\t\t\t\telse if ( a === 2 ) value = attribute.getZ( i );\r\n\t\t\t\t\t\telse if ( a === 3 ) value = attribute.getW( i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( componentType === WEBGL_CONSTANTS.FLOAT ) {\r\n\r\n\t\t\t\t\t\tdataView.setFloat32( offset, value, true );\r\n\r\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_INT ) {\r\n\r\n\t\t\t\t\t\tdataView.setUint32( offset, value, true );\r\n\r\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\r\n\r\n\t\t\t\t\t\tdataView.setUint16( offset, value, true );\r\n\r\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\r\n\r\n\t\t\t\t\t\tdataView.setUint8( offset, value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\toffset += componentSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfBufferView = {\r\n\r\n\t\t\t\tbuffer: processBuffer( dataView.buffer ),\r\n\t\t\t\tbyteOffset: byteOffset,\r\n\t\t\t\tbyteLength: byteLength\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( target !== undefined ) gltfBufferView.target = target;\r\n\r\n\t\t\tif ( target === WEBGL_CONSTANTS.ARRAY_BUFFER ) {\r\n\r\n\t\t\t\t// Only define byteStride for vertex attributes.\r\n\t\t\t\tgltfBufferView.byteStride = attribute.itemSize * componentSize;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbyteOffset += byteLength;\r\n\r\n\t\t\toutputJSON.bufferViews.push( gltfBufferView );\r\n\r\n\t\t\t// @TODO Merge bufferViews where possible.\r\n\t\t\tvar output = {\r\n\r\n\t\t\t\tid: outputJSON.bufferViews.length - 1,\r\n\t\t\t\tbyteLength: 0\r\n\r\n\t\t\t};\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process and generate a BufferView from an image Blob.\r\n\t\t * @param {Blob} blob\r\n\t\t * @return {Promise<Integer>}\r\n\t\t */\r\n\t\tfunction processBufferViewImage( blob ) {\r\n\r\n\t\t\tif ( ! outputJSON.bufferViews ) {\r\n\r\n\t\t\t\toutputJSON.bufferViews = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new Promise( function ( resolve ) {\r\n\r\n\t\t\t\tvar reader = new window.FileReader();\r\n\t\t\t\treader.readAsArrayBuffer( blob );\r\n\t\t\t\treader.onloadend = function () {\r\n\r\n\t\t\t\t\tvar buffer = getPaddedArrayBuffer( reader.result );\r\n\r\n\t\t\t\t\tvar bufferView = {\r\n\t\t\t\t\t\tbuffer: processBuffer( buffer ),\r\n\t\t\t\t\t\tbyteOffset: byteOffset,\r\n\t\t\t\t\t\tbyteLength: buffer.byteLength\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tbyteOffset += buffer.byteLength;\r\n\r\n\t\t\t\t\toutputJSON.bufferViews.push( bufferView );\r\n\r\n\t\t\t\t\tresolve( outputJSON.bufferViews.length - 1 );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process attribute to generate an accessor\r\n\t\t * @param  {BufferAttribute} attribute Attribute to process\r\n\t\t * @param  {BufferGeometry} geometry (Optional) Geometry used for truncated draw range\r\n\t\t * @param  {Integer} start (Optional)\r\n\t\t * @param  {Integer} count (Optional)\r\n\t\t * @return {Integer}           Index of the processed accessor on the \"accessors\" array\r\n\t\t */\r\n\t\tfunction processAccessor( attribute, geometry, start, count ) {\r\n\r\n\t\t\tvar types = {\r\n\r\n\t\t\t\t1: 'SCALAR',\r\n\t\t\t\t2: 'VEC2',\r\n\t\t\t\t3: 'VEC3',\r\n\t\t\t\t4: 'VEC4',\r\n\t\t\t\t16: 'MAT4'\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar componentType;\r\n\r\n\t\t\t// Detect the component type of the attribute array (float, uint or ushort)\r\n\t\t\tif ( attribute.array.constructor === Float32Array ) {\r\n\r\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.FLOAT;\r\n\r\n\t\t\t} else if ( attribute.array.constructor === Uint32Array ) {\r\n\r\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_INT;\r\n\r\n\t\t\t} else if ( attribute.array.constructor === Uint16Array ) {\r\n\r\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\r\n\r\n\t\t\t} else if ( attribute.array.constructor === Uint8Array ) {\r\n\r\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Unsupported bufferAttribute component type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( start === undefined ) start = 0;\r\n\t\t\tif ( count === undefined ) count = attribute.count;\r\n\r\n\t\t\t// @TODO Indexed buffer geometry with drawRange not supported yet\r\n\t\t\tif ( options.truncateDrawRange && geometry !== undefined && geometry.index === null ) {\r\n\r\n\t\t\t\tvar end = start + count;\r\n\t\t\t\tvar end2 = geometry.drawRange.count === Infinity\r\n\t\t\t\t\t? attribute.count\r\n\t\t\t\t\t: geometry.drawRange.start + geometry.drawRange.count;\r\n\r\n\t\t\t\tstart = Math.max( start, geometry.drawRange.start );\r\n\t\t\t\tcount = Math.min( end, end2 ) - start;\r\n\r\n\t\t\t\tif ( count < 0 ) count = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Skip creating an accessor if the attribute doesn't have data to export\r\n\t\t\tif ( count === 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar minMax = getMinMax( attribute, start, count );\r\n\r\n\t\t\tvar bufferViewTarget;\r\n\r\n\t\t\t// If geometry isn't provided, don't infer the target usage of the bufferView. For\r\n\t\t\t// animation samplers, target must not be set.\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tbufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bufferView = processBufferView( attribute, componentType, start, count, bufferViewTarget );\r\n\r\n\t\t\tvar gltfAccessor = {\r\n\r\n\t\t\t\tbufferView: bufferView.id,\r\n\t\t\t\tbyteOffset: bufferView.byteOffset,\r\n\t\t\t\tcomponentType: componentType,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmax: minMax.max,\r\n\t\t\t\tmin: minMax.min,\r\n\t\t\t\ttype: types[ attribute.itemSize ]\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( attribute.normalized === true ) {\r\n\r\n\t\t\t\tgltfAccessor.normalized = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! outputJSON.accessors ) {\r\n\r\n\t\t\t\toutputJSON.accessors = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.accessors.push( gltfAccessor );\r\n\r\n\t\t\treturn outputJSON.accessors.length - 1;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process image\r\n\t\t * @param  {Image} image to process\r\n\t\t * @param  {Integer} format of the image (e.g. THREE.RGBFormat, RGBAFormat etc)\r\n\t\t * @param  {Boolean} flipY before writing out the image\r\n\t\t * @return {Integer}     Index of the processed texture in the \"images\" array\r\n\t\t */\r\n\t\tfunction processImage( image, format, flipY ) {\r\n\r\n\t\t\tif ( ! cachedData.images.has( image ) ) {\r\n\r\n\t\t\t\tcachedData.images.set( image, {} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar cachedImages = cachedData.images.get( image );\r\n\t\t\tvar mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\r\n\t\t\tvar key = mimeType + \":flipY/\" + flipY.toString();\r\n\r\n\t\t\tif ( cachedImages[ key ] !== undefined ) {\r\n\r\n\t\t\t\treturn cachedImages[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! outputJSON.images ) {\r\n\r\n\t\t\t\toutputJSON.images = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfImage = { mimeType: mimeType };\r\n\r\n\t\t\tif ( options.embedImages ) {\r\n\r\n\t\t\t\tvar canvas = cachedCanvas = cachedCanvas || document.createElement( 'canvas' );\r\n\r\n\t\t\t\tcanvas.width = Math.min( image.width, options.maxTextureSize );\r\n\t\t\t\tcanvas.height = Math.min( image.height, options.maxTextureSize );\r\n\r\n\t\t\t\tvar ctx = canvas.getContext( '2d' );\r\n\r\n\t\t\t\tif ( flipY === true ) {\r\n\r\n\t\t\t\t\tctx.translate( 0, canvas.height );\r\n\t\t\t\t\tctx.scale( 1, - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tctx.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\t\tif ( options.binary === true ) {\r\n\r\n\t\t\t\t\tpending.push( new Promise( function ( resolve ) {\r\n\r\n\t\t\t\t\t\tcanvas.toBlob( function ( blob ) {\r\n\r\n\t\t\t\t\t\t\tprocessBufferViewImage( blob ).then( function ( bufferViewIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tgltfImage.bufferView = bufferViewIndex;\r\n\r\n\t\t\t\t\t\t\t\tresolve();\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t}, mimeType );\r\n\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgltfImage.uri = canvas.toDataURL( mimeType );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgltfImage.uri = image.src;\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.images.push( gltfImage );\r\n\r\n\t\t\tvar index = outputJSON.images.length - 1;\r\n\t\t\tcachedImages[ key ] = index;\r\n\r\n\t\t\treturn index;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process sampler\r\n\t\t * @param  {Texture} map Texture to process\r\n\t\t * @return {Integer}     Index of the processed texture in the \"samplers\" array\r\n\t\t */\r\n\t\tfunction processSampler( map ) {\r\n\r\n\t\t\tif ( ! outputJSON.samplers ) {\r\n\r\n\t\t\t\toutputJSON.samplers = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfSampler = {\r\n\r\n\t\t\t\tmagFilter: THREE_TO_WEBGL[ map.magFilter ],\r\n\t\t\t\tminFilter: THREE_TO_WEBGL[ map.minFilter ],\r\n\t\t\t\twrapS: THREE_TO_WEBGL[ map.wrapS ],\r\n\t\t\t\twrapT: THREE_TO_WEBGL[ map.wrapT ]\r\n\r\n\t\t\t};\r\n\r\n\t\t\toutputJSON.samplers.push( gltfSampler );\r\n\r\n\t\t\treturn outputJSON.samplers.length - 1;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process texture\r\n\t\t * @param  {Texture} map Map to process\r\n\t\t * @return {Integer}     Index of the processed texture in the \"textures\" array\r\n\t\t */\r\n\t\tfunction processTexture( map ) {\r\n\r\n\t\t\tif ( cachedData.textures.has( map ) ) {\r\n\r\n\t\t\t\treturn cachedData.textures.get( map );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! outputJSON.textures ) {\r\n\r\n\t\t\t\toutputJSON.textures = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfTexture = {\r\n\r\n\t\t\t\tsampler: processSampler( map ),\r\n\t\t\t\tsource: processImage( map.image, map.format, map.flipY )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( map.name ) {\r\n\r\n\t\t\t\tgltfTexture.name = map.name;\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.textures.push( gltfTexture );\r\n\r\n\t\t\tvar index = outputJSON.textures.length - 1;\r\n\t\t\tcachedData.textures.set( map, index );\r\n\r\n\t\t\treturn index;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process material\r\n\t\t * @param  {THREE.Material} material Material to process\r\n\t\t * @return {Integer}      Index of the processed material in the \"materials\" array\r\n\t\t */\r\n\t\tfunction processMaterial( material ) {\r\n\r\n\t\t\tif ( cachedData.materials.has( material ) ) {\r\n\r\n\t\t\t\treturn cachedData.materials.get( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isShaderMaterial ) {\r\n\r\n\t\t\t\tconsole.warn( 'GLTFExporter: THREE.ShaderMaterial not supported.' );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! outputJSON.materials ) {\r\n\r\n\t\t\t\toutputJSON.materials = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// @QUESTION Should we avoid including any attribute that has the default value?\r\n\t\t\tvar gltfMaterial = {\r\n\r\n\t\t\t\tpbrMetallicRoughness: {}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\t\tgltfMaterial.extensions = { KHR_materials_unlit: {} };\r\n\r\n\t\t\t\textensionsUsed[ 'KHR_materials_unlit' ] = true;\r\n\r\n\t\t\t} else if ( material.isGLTFSpecularGlossinessMaterial ) {\r\n\r\n\t\t\t\tgltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\r\n\r\n\t\t\t\textensionsUsed[ 'KHR_materials_pbrSpecularGlossiness' ] = true;\r\n\r\n\t\t\t} else if ( ! material.isMeshStandardMaterial ) {\r\n\r\n\t\t\t\tconsole.warn( 'GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// pbrMetallicRoughness.baseColorFactor\r\n\t\t\tvar color = material.color.toArray().concat( [ material.opacity ] );\r\n\r\n\t\t\tif ( ! equalArray( color, [ 1, 1, 1, 1 ] ) ) {\r\n\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\r\n\r\n\t\t\t} else if ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.0;\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// pbrSpecularGlossiness diffuse, specular and glossiness factor\r\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\r\n\r\n\t\t\t\tif ( gltfMaterial.pbrMetallicRoughness.baseColorFactor ) {\r\n\r\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar specularFactor = [ 1, 1, 1 ];\r\n\t\t\t\tmaterial.specular.toArray( specularFactor, 0 );\r\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\r\n\r\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// pbrMetallicRoughness.metallicRoughnessTexture\r\n\t\t\tif ( material.metalnessMap || material.roughnessMap ) {\r\n\r\n\t\t\t\tif ( material.metalnessMap === material.roughnessMap ) {\r\n\r\n\t\t\t\t\tvar metalRoughMapDef = { index: processTexture( material.metalnessMap ) };\r\n\t\t\t\t\tapplyTextureTransform( metalRoughMapDef, material.metalnessMap );\r\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tvar baseColorMapDef = { index: processTexture( material.map ) };\r\n\t\t\t\tapplyTextureTransform( baseColorMapDef, material.map );\r\n\r\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\r\n\r\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// pbrSpecularGlossiness specular map\r\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial && material.specularMap ) {\r\n\r\n\t\t\t\tvar specularMapDef = { index: processTexture( material.specularMap ) };\r\n\t\t\t\tapplyTextureTransform( specularMapDef, material.specularMap );\r\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissive ) {\r\n\r\n\t\t\t\t// emissiveFactor\r\n\t\t\t\tvar emissive = material.emissive.clone().multiplyScalar( material.emissiveIntensity ).toArray();\r\n\r\n\t\t\t\tif ( ! equalArray( emissive, [ 0, 0, 0 ] ) ) {\r\n\r\n\t\t\t\t\tgltfMaterial.emissiveFactor = emissive;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// emissiveTexture\r\n\t\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\t\tvar emissiveMapDef = { index: processTexture( material.emissiveMap ) };\r\n\t\t\t\t\tapplyTextureTransform( emissiveMapDef, material.emissiveMap );\r\n\t\t\t\t\tgltfMaterial.emissiveTexture = emissiveMapDef;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// normalTexture\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tvar normalMapDef = { index: processTexture( material.normalMap ) };\r\n\r\n\t\t\t\tif ( material.normalScale && material.normalScale.x !== - 1 ) {\r\n\r\n\t\t\t\t\tif ( material.normalScale.x !== material.normalScale.y ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnormalMapDef.scale = material.normalScale.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tapplyTextureTransform( normalMapDef, material.normalMap );\r\n\r\n\t\t\t\tgltfMaterial.normalTexture = normalMapDef;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// occlusionTexture\r\n\t\t\tif ( material.aoMap ) {\r\n\r\n\t\t\t\tvar occlusionMapDef = {\r\n\t\t\t\t\tindex: processTexture( material.aoMap ),\r\n\t\t\t\t\ttexCoord: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif ( material.aoMapIntensity !== 1.0 ) {\r\n\r\n\t\t\t\t\tocclusionMapDef.strength = material.aoMapIntensity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tapplyTextureTransform( occlusionMapDef, material.aoMap );\r\n\r\n\t\t\t\tgltfMaterial.occlusionTexture = occlusionMapDef;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// alphaMode\r\n\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\tgltfMaterial.alphaMode = 'BLEND';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( material.alphaTest > 0.0 ) {\r\n\r\n\t\t\t\t\tgltfMaterial.alphaMode = 'MASK';\r\n\t\t\t\t\tgltfMaterial.alphaCutoff = material.alphaTest;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// doubleSided\r\n\t\t\tif ( material.side === DoubleSide ) {\r\n\r\n\t\t\t\tgltfMaterial.doubleSided = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.name !== '' ) {\r\n\r\n\t\t\t\tgltfMaterial.name = material.name;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tserializeUserData( material, gltfMaterial );\r\n\r\n\t\t\toutputJSON.materials.push( gltfMaterial );\r\n\r\n\t\t\tvar index = outputJSON.materials.length - 1;\r\n\t\t\tcachedData.materials.set( material, index );\r\n\r\n\t\t\treturn index;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process mesh\r\n\t\t * @param  {THREE.Mesh} mesh Mesh to process\r\n\t\t * @return {Integer}      Index of the processed mesh in the \"meshes\" array\r\n\t\t */\r\n\t\tfunction processMesh( mesh ) {\r\n\r\n\t\t\tvar meshCacheKeyParts = [ mesh.geometry.uuid ];\r\n\t\t\tif ( Array.isArray( mesh.material ) ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = mesh.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tmeshCacheKeyParts.push( mesh.material[ i ].uuid\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmeshCacheKeyParts.push( mesh.material.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar meshCacheKey = meshCacheKeyParts.join( ':' );\r\n\t\t\tif ( cachedData.meshes.has( meshCacheKey ) ) {\r\n\r\n\t\t\t\treturn cachedData.meshes.get( meshCacheKey );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = mesh.geometry;\r\n\r\n\t\t\tvar mode;\r\n\r\n\t\t\t// Use the correct mode\r\n\t\t\tif ( mesh.isLineSegments ) {\r\n\r\n\t\t\t\tmode = WEBGL_CONSTANTS.LINES;\r\n\r\n\t\t\t} else if ( mesh.isLineLoop ) {\r\n\r\n\t\t\t\tmode = WEBGL_CONSTANTS.LINE_LOOP;\r\n\r\n\t\t\t} else if ( mesh.isLine ) {\r\n\r\n\t\t\t\tmode = WEBGL_CONSTANTS.LINE_STRIP;\r\n\r\n\t\t\t} else if ( mesh.isPoints ) {\r\n\r\n\t\t\t\tmode = WEBGL_CONSTANTS.POINTS;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tconsole.warn( 'GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.' );\r\n\t\t\t\tgeometry = new BufferGeometry().setFromObject( mesh );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfMesh = {};\r\n\r\n\t\t\tvar attributes = {};\r\n\t\t\tvar primitives = [];\r\n\t\t\tvar targets = [];\r\n\r\n\t\t\t// Conversion between attributes names in threejs and gltf spec\r\n\t\t\tvar nameConversion = {\r\n\r\n\t\t\t\tuv: 'TEXCOORD_0',\r\n\t\t\t\tuv2: 'TEXCOORD_1',\r\n\t\t\t\tcolor: 'COLOR_0',\r\n\t\t\t\tskinWeight: 'WEIGHTS_0',\r\n\t\t\t\tskinIndex: 'JOINTS_0'\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar originalNormal = geometry.getAttribute( 'normal' );\r\n\r\n\t\t\tif ( originalNormal !== undefined && ! isNormalizedNormalAttribute( originalNormal ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.' );\r\n\r\n\t\t\t\tgeometry.setAttribute( 'normal', createNormalizedNormalAttribute( originalNormal ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// @QUESTION Detect if .vertexColors = true?\r\n\t\t\t// For every attribute create an accessor\r\n\t\t\tvar modifiedAttribute = null;\r\n\t\t\tfor ( var attributeName in geometry.attributes ) {\r\n\r\n\t\t\t\t// Ignore morph target attributes, which are exported later.\r\n\t\t\t\tif ( attributeName.substr( 0, 5 ) === 'morph' ) continue;\r\n\r\n\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\r\n\t\t\t\tattributeName = nameConversion[ attributeName ] || attributeName.toUpperCase();\r\n\r\n\t\t\t\t// Prefix all geometry attributes except the ones specifically\r\n\t\t\t\t// listed in the spec; non-spec attributes are considered custom.\r\n\t\t\t\tvar validVertexAttributes =\r\n\t\t\t\t\t\t/^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\r\n\t\t\t\tif ( ! validVertexAttributes.test( attributeName ) ) {\r\n\r\n\t\t\t\t\tattributeName = '_' + attributeName;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\r\n\r\n\t\t\t\t\tattributes[ attributeName ] = cachedData.attributes.get( getUID( attribute ) );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\r\n\t\t\t\tmodifiedAttribute = null;\r\n\t\t\t\tvar array = attribute.array;\r\n\t\t\t\tif ( attributeName === 'JOINTS_0' &&\r\n\t\t\t\t\t! ( array instanceof Uint16Array ) &&\r\n\t\t\t\t\t! ( array instanceof Uint8Array ) ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.' );\r\n\t\t\t\t\tmodifiedAttribute = new BufferAttribute( new Uint16Array( array ), attribute.itemSize, attribute.normalized );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar accessor = processAccessor( modifiedAttribute || attribute, geometry );\r\n\t\t\t\tif ( accessor !== null ) {\r\n\r\n\t\t\t\t\tattributes[ attributeName ] = accessor;\r\n\t\t\t\t\tcachedData.attributes.set( getUID( attribute ), accessor );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( originalNormal !== undefined ) geometry.setAttribute( 'normal', originalNormal );\r\n\r\n\t\t\t// Skip if no exportable attributes found\r\n\t\t\tif ( Object.keys( attributes ).length === 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Morph targets\r\n\t\t\tif ( mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0 ) {\r\n\r\n\t\t\t\tvar weights = [];\r\n\t\t\t\tvar targetNames = [];\r\n\t\t\t\tvar reverseDictionary = {};\r\n\r\n\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var key in mesh.morphTargetDictionary ) {\r\n\r\n\t\t\t\t\t\treverseDictionary[ mesh.morphTargetDictionary[ key ] ] = key;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < mesh.morphTargetInfluences.length; ++ i ) {\r\n\r\n\t\t\t\t\tvar target = {};\r\n\r\n\t\t\t\t\tvar warned = false;\r\n\r\n\t\t\t\t\tfor ( var attributeName in geometry.morphAttributes ) {\r\n\r\n\t\t\t\t\t\t// glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\r\n\t\t\t\t\t\t// Three.js doesn't support TANGENT yet.\r\n\r\n\t\t\t\t\t\tif ( attributeName !== 'position' && attributeName !== 'normal' ) {\r\n\r\n\t\t\t\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Only POSITION and NORMAL morph are supported.' );\r\n\t\t\t\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar attribute = geometry.morphAttributes[ attributeName ][ i ];\r\n\t\t\t\t\t\tvar gltfAttributeName = attributeName.toUpperCase();\r\n\r\n\t\t\t\t\t\t// Three.js morph attribute has absolute values while the one of glTF has relative values.\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\t// glTF 2.0 Specification:\r\n\t\t\t\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\r\n\r\n\t\t\t\t\t\tvar baseAttribute = geometry.attributes[ attributeName ];\r\n\r\n\t\t\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\r\n\r\n\t\t\t\t\t\t\ttarget[ gltfAttributeName ] = cachedData.attributes.get( getUID( attribute ) );\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Clones attribute not to override\r\n\t\t\t\t\t\tvar relativeAttribute = attribute.clone();\r\n\r\n\t\t\t\t\t\tif ( ! geometry.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = attribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\trelativeAttribute.setXYZ(\r\n\t\t\t\t\t\t\t\t\tj,\r\n\t\t\t\t\t\t\t\t\tattribute.getX( j ) - baseAttribute.getX( j ),\r\n\t\t\t\t\t\t\t\t\tattribute.getY( j ) - baseAttribute.getY( j ),\r\n\t\t\t\t\t\t\t\t\tattribute.getZ( j ) - baseAttribute.getZ( j )\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttarget[ gltfAttributeName ] = processAccessor( relativeAttribute, geometry );\r\n\t\t\t\t\t\tcachedData.attributes.set( getUID( baseAttribute ), target[ gltfAttributeName ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargets.push( target );\r\n\r\n\t\t\t\t\tweights.push( mesh.morphTargetInfluences[ i ] );\r\n\t\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) targetNames.push( reverseDictionary[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgltfMesh.weights = weights;\r\n\r\n\t\t\t\tif ( targetNames.length > 0 ) {\r\n\r\n\t\t\t\t\tgltfMesh.extras = {};\r\n\t\t\t\t\tgltfMesh.extras.targetNames = targetNames;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isMultiMaterial = Array.isArray( mesh.material );\r\n\r\n\t\t\tif ( isMultiMaterial && geometry.groups.length === 0 ) return null;\r\n\r\n\t\t\tvar materials = isMultiMaterial ? mesh.material : [ mesh.material ];\r\n\t\t\tvar groups = isMultiMaterial ? geometry.groups : [ { materialIndex: 0, start: undefined, count: undefined } ];\r\n\r\n\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar primitive = {\r\n\t\t\t\t\tmode: mode,\r\n\t\t\t\t\tattributes: attributes,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tserializeUserData( geometry, primitive );\r\n\r\n\t\t\t\tif ( targets.length > 0 ) primitive.targets = targets;\r\n\r\n\t\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t\tvar cacheKey = getUID( geometry.index );\r\n\r\n\t\t\t\t\tif ( groups[ i ].start !== undefined || groups[ i ].count !== undefined ) {\r\n\r\n\t\t\t\t\t\tcacheKey += ':' + groups[ i ].start + ':' + groups[ i ].count;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( cachedData.attributes.has( cacheKey ) ) {\r\n\r\n\t\t\t\t\t\tprimitive.indices = cachedData.attributes.get( cacheKey );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tprimitive.indices = processAccessor( geometry.index, geometry, groups[ i ].start, groups[ i ].count );\r\n\t\t\t\t\t\tcachedData.attributes.set( cacheKey, primitive.indices );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( primitive.indices === null ) delete primitive.indices;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar material = processMaterial( materials[ groups[ i ].materialIndex ] );\r\n\r\n\t\t\t\tif ( material !== null ) {\r\n\r\n\t\t\t\t\tprimitive.material = material;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprimitives.push( primitive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgltfMesh.primitives = primitives;\r\n\r\n\t\t\tif ( ! outputJSON.meshes ) {\r\n\r\n\t\t\t\toutputJSON.meshes = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.meshes.push( gltfMesh );\r\n\r\n\t\t\tvar index = outputJSON.meshes.length - 1;\r\n\t\t\tcachedData.meshes.set( meshCacheKey, index );\r\n\r\n\t\t\treturn index;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process camera\r\n\t\t * @param  {THREE.Camera} camera Camera to process\r\n\t\t * @return {Integer}      Index of the processed mesh in the \"camera\" array\r\n\t\t */\r\n\t\tfunction processCamera( camera ) {\r\n\r\n\t\t\tif ( ! outputJSON.cameras ) {\r\n\r\n\t\t\t\toutputJSON.cameras = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isOrtho = camera.isOrthographicCamera;\r\n\r\n\t\t\tvar gltfCamera = {\r\n\r\n\t\t\t\ttype: isOrtho ? 'orthographic' : 'perspective'\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( isOrtho ) {\r\n\r\n\t\t\t\tgltfCamera.orthographic = {\r\n\r\n\t\t\t\t\txmag: camera.right * 2,\r\n\t\t\t\t\tymag: camera.top * 2,\r\n\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\r\n\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgltfCamera.perspective = {\r\n\r\n\t\t\t\t\taspectRatio: camera.aspect,\r\n\t\t\t\t\tyfov: MathUtils.degToRad( camera.fov ),\r\n\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\r\n\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( camera.name !== '' ) {\r\n\r\n\t\t\t\tgltfCamera.name = camera.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.cameras.push( gltfCamera );\r\n\r\n\t\t\treturn outputJSON.cameras.length - 1;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Creates glTF animation entry from AnimationClip object.\r\n\t\t *\r\n\t\t * Status:\r\n\t\t * - Only properties listed in PATH_PROPERTIES may be animated.\r\n\t\t *\r\n\t\t * @param {THREE.AnimationClip} clip\r\n\t\t * @param {THREE.Object3D} root\r\n\t\t * @return {number}\r\n\t\t */\r\n\t\tfunction processAnimation( clip, root ) {\r\n\r\n\t\t\tif ( ! outputJSON.animations ) {\r\n\r\n\t\t\t\toutputJSON.animations = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip = GLTFExporter.Utils.mergeMorphTargetTracks( clip.clone(), root );\r\n\r\n\t\t\tvar tracks = clip.tracks;\r\n\t\t\tvar channels = [];\r\n\t\t\tvar samplers = [];\r\n\r\n\t\t\tfor ( var i = 0; i < tracks.length; ++ i ) {\r\n\r\n\t\t\t\tvar track = tracks[ i ];\r\n\t\t\t\tvar trackBinding = PropertyBinding.parseTrackName( track.name );\r\n\t\t\t\tvar trackNode = PropertyBinding.findNode( root, trackBinding.nodeName );\r\n\t\t\t\tvar trackProperty = PATH_PROPERTIES[ trackBinding.propertyName ];\r\n\r\n\t\t\t\tif ( trackBinding.objectName === 'bones' ) {\r\n\r\n\t\t\t\t\tif ( trackNode.isSkinnedMesh === true ) {\r\n\r\n\t\t\t\t\t\ttrackNode = trackNode.skeleton.getBoneByName( trackBinding.objectIndex );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttrackNode = undefined;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! trackNode || ! trackProperty ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Could not export animation track \"%s\".', track.name );\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar inputItemSize = 1;\r\n\t\t\t\tvar outputItemSize = track.values.length / track.times.length;\r\n\r\n\t\t\t\tif ( trackProperty === PATH_PROPERTIES.morphTargetInfluences ) {\r\n\r\n\t\t\t\t\toutputItemSize /= trackNode.morphTargetInfluences.length;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar interpolation;\r\n\r\n\t\t\t\t// @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\r\n\r\n\t\t\t\t// Detecting glTF cubic spline interpolant by checking factory method's special property\r\n\t\t\t\t// GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\r\n\t\t\t\t// valid value from .getInterpolation().\r\n\t\t\t\tif ( track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true ) {\r\n\r\n\t\t\t\t\tinterpolation = 'CUBICSPLINE';\r\n\r\n\t\t\t\t\t// itemSize of CUBICSPLINE keyframe is 9\r\n\t\t\t\t\t// (VEC3 * 3: inTangent, splineVertex, and outTangent)\r\n\t\t\t\t\t// but needs to be stored as VEC3 so dividing by 3 here.\r\n\t\t\t\t\toutputItemSize /= 3;\r\n\r\n\t\t\t\t} else if ( track.getInterpolation() === InterpolateDiscrete ) {\r\n\r\n\t\t\t\t\tinterpolation = 'STEP';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinterpolation = 'LINEAR';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsamplers.push( {\r\n\r\n\t\t\t\t\tinput: processAccessor( new BufferAttribute( track.times, inputItemSize ) ),\r\n\t\t\t\t\toutput: processAccessor( new BufferAttribute( track.values, outputItemSize ) ),\r\n\t\t\t\t\tinterpolation: interpolation\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tchannels.push( {\r\n\r\n\t\t\t\t\tsampler: samplers.length - 1,\r\n\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\tnode: nodeMap.get( trackNode ),\r\n\t\t\t\t\t\tpath: trackProperty\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.animations.push( {\r\n\r\n\t\t\t\tname: clip.name || 'clip_' + outputJSON.animations.length,\r\n\t\t\t\tsamplers: samplers,\r\n\t\t\t\tchannels: channels\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn outputJSON.animations.length - 1;\r\n\r\n\t\t}\r\n\r\n\t\tfunction processSkin( object ) {\r\n\r\n\t\t\tvar node = outputJSON.nodes[ nodeMap.get( object ) ];\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\tif ( skeleton === undefined ) return null;\r\n\r\n\t\t\tvar rootJoint = object.skeleton.bones[ 0 ];\r\n\r\n\t\t\tif ( rootJoint === undefined ) return null;\r\n\r\n\t\t\tvar joints = [];\r\n\t\t\tvar inverseBindMatrices = new Float32Array( skeleton.bones.length * 16 );\r\n\r\n\t\t\tfor ( var i = 0; i < skeleton.bones.length; ++ i ) {\r\n\r\n\t\t\t\tjoints.push( nodeMap.get( skeleton.bones[ i ] ) );\r\n\r\n\t\t\t\tskeleton.boneInverses[ i ].toArray( inverseBindMatrices, i * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( outputJSON.skins === undefined ) {\r\n\r\n\t\t\t\toutputJSON.skins = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.skins.push( {\r\n\r\n\t\t\t\tinverseBindMatrices: processAccessor( new BufferAttribute( inverseBindMatrices, 16 ) ),\r\n\t\t\t\tjoints: joints,\r\n\t\t\t\tskeleton: nodeMap.get( rootJoint )\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tvar skinIndex = node.skin = outputJSON.skins.length - 1;\r\n\r\n\t\t\treturn skinIndex;\r\n\r\n\t\t}\r\n\r\n\t\tfunction processLight( light ) {\r\n\r\n\t\t\tvar lightDef = {};\r\n\r\n\t\t\tif ( light.name ) lightDef.name = light.name;\r\n\r\n\t\t\tlightDef.color = light.color.toArray();\r\n\r\n\t\t\tlightDef.intensity = light.intensity;\r\n\r\n\t\t\tif ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\tlightDef.type = 'directional';\r\n\r\n\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\tlightDef.type = 'point';\r\n\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\r\n\r\n\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\tlightDef.type = 'spot';\r\n\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\r\n\t\t\t\tlightDef.spot = {};\r\n\t\t\t\tlightDef.spot.innerConeAngle = ( light.penumbra - 1.0 ) * light.angle * - 1.0;\r\n\t\t\t\tlightDef.spot.outerConeAngle = light.angle;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.decay !== undefined && light.decay !== 2 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, '\r\n\t\t\t\t\t+ 'and expects light.decay=2.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.target\r\n\t\t\t\t\t&& ( light.target.parent !== light\r\n\t\t\t\t\t || light.target.position.x !== 0\r\n\t\t\t\t\t || light.target.position.y !== 0\r\n\t\t\t\t\t || light.target.position.z !== - 1 ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light direction may be lost. For best results, '\r\n\t\t\t\t\t+ 'make light.target a child of the light with position 0,0,-1.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar lights = outputJSON.extensions[ 'KHR_lights_punctual' ].lights;\r\n\t\t\tlights.push( lightDef );\r\n\t\t\treturn lights.length - 1;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process Object3D node\r\n\t\t * @param  {THREE.Object3D} node Object3D to processNode\r\n\t\t * @return {Integer}      Index of the node in the nodes list\r\n\t\t */\r\n\t\tfunction processNode( object ) {\r\n\r\n\t\t\tif ( ! outputJSON.nodes ) {\r\n\r\n\t\t\t\toutputJSON.nodes = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfNode = {};\r\n\r\n\t\t\tif ( options.trs ) {\r\n\r\n\t\t\t\tvar rotation = object.quaternion.toArray();\r\n\t\t\t\tvar position = object.position.toArray();\r\n\t\t\t\tvar scale = object.scale.toArray();\r\n\r\n\t\t\t\tif ( ! equalArray( rotation, [ 0, 0, 0, 1 ] ) ) {\r\n\r\n\t\t\t\t\tgltfNode.rotation = rotation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! equalArray( position, [ 0, 0, 0 ] ) ) {\r\n\r\n\t\t\t\t\tgltfNode.translation = position;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! equalArray( scale, [ 1, 1, 1 ] ) ) {\r\n\r\n\t\t\t\t\tgltfNode.scale = scale;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( object.matrixAutoUpdate ) {\r\n\r\n\t\t\t\t\tobject.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isIdentityMatrix( object.matrix ) === false ) {\r\n\r\n\t\t\t\t\tgltfNode.matrix = object.matrix.elements;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// We don't export empty strings name because it represents no-name in Three.js.\r\n\t\t\tif ( object.name !== '' ) {\r\n\r\n\t\t\t\tgltfNode.name = String( object.name );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tserializeUserData( object, gltfNode );\r\n\r\n\t\t\tif ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\tvar mesh = processMesh( object );\r\n\r\n\t\t\t\tif ( mesh !== null ) {\r\n\r\n\t\t\t\t\tgltfNode.mesh = mesh;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isCamera ) {\r\n\r\n\t\t\t\tgltfNode.camera = processCamera( object );\r\n\r\n\t\t\t} else if ( object.isDirectionalLight || object.isPointLight || object.isSpotLight ) {\r\n\r\n\t\t\t\tif ( ! extensionsUsed[ 'KHR_lights_punctual' ] ) {\r\n\r\n\t\t\t\t\toutputJSON.extensions = outputJSON.extensions || {};\r\n\t\t\t\t\toutputJSON.extensions[ 'KHR_lights_punctual' ] = { lights: [] };\r\n\t\t\t\t\textensionsUsed[ 'KHR_lights_punctual' ] = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgltfNode.extensions = gltfNode.extensions || {};\r\n\t\t\t\tgltfNode.extensions[ 'KHR_lights_punctual' ] = { light: processLight( object ) };\r\n\r\n\t\t\t} else if ( object.isLight ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\t\tskins.push( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.children.length > 0 ) {\r\n\r\n\t\t\t\tvar children = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar child = object.children[ i ];\r\n\r\n\t\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\r\n\r\n\t\t\t\t\t\tvar node = processNode( child );\r\n\r\n\t\t\t\t\t\tif ( node !== null ) {\r\n\r\n\t\t\t\t\t\t\tchildren.push( node );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( children.length > 0 ) {\r\n\r\n\t\t\t\t\tgltfNode.children = children;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.nodes.push( gltfNode );\r\n\r\n\t\t\tvar nodeIndex = outputJSON.nodes.length - 1;\r\n\t\t\tnodeMap.set( object, nodeIndex );\r\n\r\n\t\t\treturn nodeIndex;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Process Scene\r\n\t\t * @param  {Scene} node Scene to process\r\n\t\t */\r\n\t\tfunction processScene( scene ) {\r\n\r\n\t\t\tif ( ! outputJSON.scenes ) {\r\n\r\n\t\t\t\toutputJSON.scenes = [];\r\n\t\t\t\toutputJSON.scene = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar gltfScene = {};\r\n\r\n\t\t\tif ( scene.name !== '' ) {\r\n\r\n\t\t\t\tgltfScene.name = scene.name;\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutputJSON.scenes.push( gltfScene );\r\n\r\n\t\t\tvar nodes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = scene.children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar child = scene.children[ i ];\r\n\r\n\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\r\n\r\n\t\t\t\t\tvar node = processNode( child );\r\n\r\n\t\t\t\t\tif ( node !== null ) {\r\n\r\n\t\t\t\t\t\tnodes.push( node );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( nodes.length > 0 ) {\r\n\r\n\t\t\t\tgltfScene.nodes = nodes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tserializeUserData( scene, gltfScene );\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Creates a Scene to hold a list of objects and parse it\r\n\t\t * @param  {Array} objects List of objects to process\r\n\t\t */\r\n\t\tfunction processObjects( objects ) {\r\n\r\n\t\t\tvar scene = new Scene();\r\n\t\t\tscene.name = 'AuxScene';\r\n\r\n\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\r\n\r\n\t\t\t\t// We push directly to children instead of calling `add` to prevent\r\n\t\t\t\t// modify the .parent and break its original scene and hierarchy\r\n\t\t\t\tscene.children.push( objects[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprocessScene( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction processInput( input ) {\r\n\r\n\t\t\tinput = input instanceof Array ? input : [ input ];\r\n\r\n\t\t\tvar objectsWithoutScene = [];\r\n\r\n\t\t\tfor ( var i = 0; i < input.length; i ++ ) {\r\n\r\n\t\t\t\tif ( input[ i ] instanceof Scene ) {\r\n\r\n\t\t\t\t\tprocessScene( input[ i ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobjectsWithoutScene.push( input[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectsWithoutScene.length > 0 ) {\r\n\r\n\t\t\t\tprocessObjects( objectsWithoutScene );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < skins.length; ++ i ) {\r\n\r\n\t\t\t\tprocessSkin( skins[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < options.animations.length; ++ i ) {\r\n\r\n\t\t\t\tprocessAnimation( options.animations[ i ], input[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tprocessInput( input );\r\n\r\n\t\tPromise.all( pending ).then( function () {\r\n\r\n\t\t\t// Merge buffers.\r\n\t\t\tvar blob = new Blob( buffers, { type: 'application/octet-stream' } );\r\n\r\n\t\t\t// Declare extensions.\r\n\t\t\tvar extensionsUsedList = Object.keys( extensionsUsed );\r\n\t\t\tif ( extensionsUsedList.length > 0 ) outputJSON.extensionsUsed = extensionsUsedList;\r\n\r\n\t\t\t// Update bytelength of the single buffer.\r\n\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) outputJSON.buffers[ 0 ].byteLength = blob.size;\r\n\r\n\t\t\tif ( options.binary === true ) {\r\n\r\n\t\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\r\n\r\n\t\t\t\tvar GLB_HEADER_BYTES = 12;\r\n\t\t\t\tvar GLB_HEADER_MAGIC = 0x46546C67;\r\n\t\t\t\tvar GLB_VERSION = 2;\r\n\r\n\t\t\t\tvar GLB_CHUNK_PREFIX_BYTES = 8;\r\n\t\t\t\tvar GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\r\n\t\t\t\tvar GLB_CHUNK_TYPE_BIN = 0x004E4942;\r\n\r\n\t\t\t\tvar reader = new window.FileReader();\r\n\t\t\t\treader.readAsArrayBuffer( blob );\r\n\t\t\t\treader.onloadend = function () {\r\n\r\n\t\t\t\t\t// Binary chunk.\r\n\t\t\t\t\tvar binaryChunk = getPaddedArrayBuffer( reader.result );\r\n\t\t\t\t\tvar binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\r\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );\r\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true );\r\n\r\n\t\t\t\t\t// JSON chunk.\r\n\t\t\t\t\tvar jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( outputJSON ) ), 0x20 );\r\n\t\t\t\t\tvar jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\r\n\t\t\t\t\tjsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );\r\n\t\t\t\t\tjsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true );\r\n\r\n\t\t\t\t\t// GLB header.\r\n\t\t\t\t\tvar header = new ArrayBuffer( GLB_HEADER_BYTES );\r\n\t\t\t\t\tvar headerView = new DataView( header );\r\n\t\t\t\t\theaderView.setUint32( 0, GLB_HEADER_MAGIC, true );\r\n\t\t\t\t\theaderView.setUint32( 4, GLB_VERSION, true );\r\n\t\t\t\t\tvar totalByteLength = GLB_HEADER_BYTES\r\n\t\t\t\t\t\t+ jsonChunkPrefix.byteLength + jsonChunk.byteLength\r\n\t\t\t\t\t\t+ binaryChunkPrefix.byteLength + binaryChunk.byteLength;\r\n\t\t\t\t\theaderView.setUint32( 8, totalByteLength, true );\r\n\r\n\t\t\t\t\tvar glbBlob = new Blob( [\r\n\t\t\t\t\t\theader,\r\n\t\t\t\t\t\tjsonChunkPrefix,\r\n\t\t\t\t\t\tjsonChunk,\r\n\t\t\t\t\t\tbinaryChunkPrefix,\r\n\t\t\t\t\t\tbinaryChunk\r\n\t\t\t\t\t], { type: 'application/octet-stream' } );\r\n\r\n\t\t\t\t\tvar glbReader = new window.FileReader();\r\n\t\t\t\t\tglbReader.readAsArrayBuffer( glbBlob );\r\n\t\t\t\t\tglbReader.onloadend = function () {\r\n\r\n\t\t\t\t\t\tonDone( glbReader.result );\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) {\r\n\r\n\t\t\t\t\tvar reader = new window.FileReader();\r\n\t\t\t\t\treader.readAsDataURL( blob );\r\n\t\t\t\t\treader.onloadend = function () {\r\n\r\n\t\t\t\t\t\tvar base64data = reader.result;\r\n\t\t\t\t\t\toutputJSON.buffers[ 0 ].uri = base64data;\r\n\t\t\t\t\t\tonDone( outputJSON );\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tonDone( outputJSON );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n};\r\n\r\nGLTFExporter.Utils = {\r\n\r\n\tinsertKeyframe: function ( track, time ) {\r\n\r\n\t\tvar tolerance = 0.001; // 1ms\r\n\t\tvar valueSize = track.getValueSize();\r\n\r\n\t\tvar times = new track.TimeBufferType( track.times.length + 1 );\r\n\t\tvar values = new track.ValueBufferType( track.values.length + valueSize );\r\n\t\tvar interpolant = track.createInterpolant( new track.ValueBufferType( valueSize ) );\r\n\r\n\t\tvar index;\r\n\r\n\t\tif ( track.times.length === 0 ) {\r\n\r\n\t\t\ttimes[ 0 ] = time;\r\n\r\n\t\t\tfor ( var i = 0; i < valueSize; i ++ ) {\r\n\r\n\t\t\t\tvalues[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tindex = 0;\r\n\r\n\t\t} else if ( time < track.times[ 0 ] ) {\r\n\r\n\t\t\tif ( Math.abs( track.times[ 0 ] - time ) < tolerance ) return 0;\r\n\r\n\t\t\ttimes[ 0 ] = time;\r\n\t\t\ttimes.set( track.times, 1 );\r\n\r\n\t\t\tvalues.set( interpolant.evaluate( time ), 0 );\r\n\t\t\tvalues.set( track.values, valueSize );\r\n\r\n\t\t\tindex = 0;\r\n\r\n\t\t} else if ( time > track.times[ track.times.length - 1 ] ) {\r\n\r\n\t\t\tif ( Math.abs( track.times[ track.times.length - 1 ] - time ) < tolerance ) {\r\n\r\n\t\t\t\treturn track.times.length - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttimes[ times.length - 1 ] = time;\r\n\t\t\ttimes.set( track.times, 0 );\r\n\r\n\t\t\tvalues.set( track.values, 0 );\r\n\t\t\tvalues.set( interpolant.evaluate( time ), track.values.length );\r\n\r\n\t\t\tindex = times.length - 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < track.times.length; i ++ ) {\r\n\r\n\t\t\t\tif ( Math.abs( track.times[ i ] - time ) < tolerance ) return i;\r\n\r\n\t\t\t\tif ( track.times[ i ] < time && track.times[ i + 1 ] > time ) {\r\n\r\n\t\t\t\t\ttimes.set( track.times.slice( 0, i + 1 ), 0 );\r\n\t\t\t\t\ttimes[ i + 1 ] = time;\r\n\t\t\t\t\ttimes.set( track.times.slice( i + 1 ), i + 2 );\r\n\r\n\t\t\t\t\tvalues.set( track.values.slice( 0, ( i + 1 ) * valueSize ), 0 );\r\n\t\t\t\t\tvalues.set( interpolant.evaluate( time ), ( i + 1 ) * valueSize );\r\n\t\t\t\t\tvalues.set( track.values.slice( ( i + 1 ) * valueSize ), ( i + 2 ) * valueSize );\r\n\r\n\t\t\t\t\tindex = i + 1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ttrack.times = times;\r\n\t\ttrack.values = values;\r\n\r\n\t\treturn index;\r\n\r\n\t},\r\n\r\n\tmergeMorphTargetTracks: function ( clip, root ) {\r\n\r\n\t\tvar tracks = [];\r\n\t\tvar mergedTracks = {};\r\n\t\tvar sourceTracks = clip.tracks;\r\n\r\n\t\tfor ( var i = 0; i < sourceTracks.length; ++ i ) {\r\n\r\n\t\t\tvar sourceTrack = sourceTracks[ i ];\r\n\t\t\tvar sourceTrackBinding = PropertyBinding.parseTrackName( sourceTrack.name );\r\n\t\t\tvar sourceTrackNode = PropertyBinding.findNode( root, sourceTrackBinding.nodeName );\r\n\r\n\t\t\tif ( sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined ) {\r\n\r\n\t\t\t\t// Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\r\n\t\t\t\ttracks.push( sourceTrack );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete\r\n\t\t\t\t&& sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear ) {\r\n\r\n\t\t\t\tif ( sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\r\n\r\n\t\t\t\t\t// This should never happen, because glTF morph target animations\r\n\t\t\t\t\t// affect all targets already.\r\n\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.' );\r\n\r\n\t\t\t\tsourceTrack = sourceTrack.clone();\r\n\t\t\t\tsourceTrack.setInterpolation( InterpolateLinear );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar targetCount = sourceTrackNode.morphTargetInfluences.length;\r\n\t\t\tvar targetIndex = sourceTrackNode.morphTargetDictionary[ sourceTrackBinding.propertyIndex ];\r\n\r\n\t\t\tif ( targetIndex === undefined ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar mergedTrack;\r\n\r\n\t\t\t// If this is the first time we've seen this object, create a new\r\n\t\t\t// track to store merged keyframe data for each morph target.\r\n\t\t\tif ( mergedTracks[ sourceTrackNode.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmergedTrack = sourceTrack.clone();\r\n\r\n\t\t\t\tvar values = new mergedTrack.ValueBufferType( targetCount * mergedTrack.times.length );\r\n\r\n\t\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\r\n\r\n\t\t\t\t\tvalues[ j * targetCount + targetIndex ] = mergedTrack.values[ j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We need to take into consideration the intended target node\r\n\t\t\t\t// of our original un-merged morphTarget animation.\r\n\t\t\t\tmergedTrack.name = sourceTrackBinding.nodeName + '.morphTargetInfluences';\r\n\t\t\t\tmergedTrack.values = values;\r\n\r\n\t\t\t\tmergedTracks[ sourceTrackNode.uuid ] = mergedTrack;\r\n\t\t\t\ttracks.push( mergedTrack );\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sourceInterpolant = sourceTrack.createInterpolant( new sourceTrack.ValueBufferType( 1 ) );\r\n\r\n\t\t\tmergedTrack = mergedTracks[ sourceTrackNode.uuid ];\r\n\r\n\t\t\t// For every existing keyframe of the merged track, write a (possibly\r\n\t\t\t// interpolated) value from the source track.\r\n\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\r\n\r\n\t\t\t\tmergedTrack.values[ j * targetCount + targetIndex ] = sourceInterpolant.evaluate( mergedTrack.times[ j ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// For every existing keyframe of the source track, write a (possibly\r\n\t\t\t// new) keyframe to the merged track. Values from the previous loop may\r\n\t\t\t// be written again, but keyframes are de-duplicated.\r\n\t\t\tfor ( var j = 0; j < sourceTrack.times.length; j ++ ) {\r\n\r\n\t\t\t\tvar keyframeIndex = this.insertKeyframe( mergedTrack, sourceTrack.times[ j ] );\r\n\t\t\t\tmergedTrack.values[ keyframeIndex * targetCount + targetIndex ] = sourceTrack.values[ j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tclip.tracks = tracks;\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { GLTFExporter };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/exporters/GLTFExporter.js","<template>\r\n    <div class=\"miscExporterGltf-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl - exporter - gltf<br/><br/>\r\n            <el-button type=\"primary\" size=\"mini\" @click=\"handleExportScene\">Export Scene1</el-button>\r\n            <el-button type=\"primary\" size=\"mini\" @click=\"handleExportScenes\">Export Scene1 and this.$THREE.Scene 2</el-button>\r\n            <el-button type=\"primary\" size=\"mini\" @click=\"handleExportObject\">Export Sphere</el-button>\r\n\t\t\t<el-button type=\"primary\" size=\"mini\" @click=\"handleExportObj\">Export WaltHead</el-button><br/>\r\n\t\t\t<el-button type=\"primary\" size=\"mini\" @click=\"handleExportObjects\">Export Sphere and Grid</el-button>\r\n\t\t\t<el-button type=\"primary\" size=\"mini\" @click=\"handleExportSceneObjects\">Export Scene1 and Sphere</el-button>\r\n\t\t\t<br/><br/>\r\n\t\t\t<label><input id=\"option_trs\" name=\"trs\" type=\"checkbox\"/>TRS</label>\r\n\t\t\t<label><input id=\"option_visible\" name=\"visible\" type=\"checkbox\" checked=\"checked\"/>Only Visible</label>\r\n\t\t\t<label><input id=\"option_drawrange\" name=\"visible\" type=\"checkbox\" checked=\"checked\"/>Truncate drawRange</label><br/>\r\n\t\t\t<label><input id=\"option_binary\" name=\"visible\" type=\"checkbox\">Binary (<code>.glb</code>)</label>\r\n\t\t\t<label><input id=\"option_forcepot\" name=\"visible\" type=\"checkbox\">Force POT textures</label>\r\n\t\t\t<label><input id=\"option_maxsize\" name=\"maxSize\" type=\"number\" value=\"4096\" min=\"2\" max=\"8192\" step=\"1\"> Max texture size</label>\r\n\r\n            <button id=\"export_scene\">Export Scene1</button>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OBJLoader } from '@/components/jsm/loaders/OBJLoader.js'\r\nimport { GLTFExporter } from '@/components/jsm/exporters/GLTFExporter.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            link: null,\r\n            container: null,\r\n            camera: null,\r\n            object: null,\r\n            object2: null,\r\n            material: null,\r\n            geometry: null,\r\n            scene1: null,\r\n            scene2: null,\r\n            renderer: null,\r\n            gridHelper: null,\r\n            sphere: null,\r\n            waltHead: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.link = document.createElement('a')\r\n        this.link.style.display = 'none'\r\n        document.getElementsByClassName('miscExporterGltf-container')[0].appendChild(this.link) // Firefox workaround, see #6594\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    methods: {\r\n        exportGLTF(input) {\r\n            var gltfExporter = new GLTFExporter()\r\n            var options = {\r\n                trs: document.getElementById('option_trs').checked,\r\n                onlyVisible: document.getElementById('option_visible').checked,\r\n                truncateDrawRange: document.getElementById('option_drawrange').checked,\r\n                binary: document.getElementById('option_binary').checked,\r\n                forcePowerOfTwoTextures: document.getElementById('option_forcepot').checked,\r\n                maxTextureSize: Number(document.getElementById('option_maxsize').value) || Infinity // To prevent NaN value\r\n            }\r\n            console.log('1111')\r\n            console.log(gltfExporter)\r\n            console.log(input)\r\n            gltfExporter.parse(input, function (result) {\r\n                console.log(result)\r\n                // if (result instanceof ArrayBuffer) {\r\n                //     console.log('222222')\r\n                //     this.saveArrayBuffer(result, 'scene.glb')\r\n                // } else {\r\n                //     console.log('33333')\r\n                //     var output = JSON.stringify(result, null, 2)\r\n                //     console.log(output)\r\n                //     this.saveString(output, 'scene.gltf')\r\n                // }\r\n            }, options)\r\n            console.log('4444444')\r\n        },\r\n        handleExportScene() {\r\n            this.exportGLTF(this.scene1)\r\n        },\r\n        handleExportScenes() {\r\n            this.exportGLTF([ this.scene1, this.scene2 ])\r\n        },\r\n        handleExportObject() {\r\n            this.exportGLTF(this.sphere)\r\n        },\r\n        handleExportObj() {\r\n            this.exportGLTF(this.waltHead)\r\n        },\r\n        handleExportObjects() {\r\n            this.exportGLTF([ this.sphere, this.gridHelper ])\r\n        },\r\n        handleExportSceneObjects() {\r\n            this.exportGLTF([ this.scene1, this.gridHelper ])\r\n        },\r\n        save(blob, filename) {\r\n            this.link.href = URL.createObjectURL(blob)\r\n            this.link.download = filename\r\n            this.link.click()\r\n            // URL.revokeObjectURL(url) breaks Firefox...\r\n        },\r\n        saveString(text, filename) {\r\n            this.save(new Blob([ text ], { type: 'text/plain' }), filename)\r\n        },\r\n        saveArrayBuffer(buffer, filename) {\r\n            this.save(new Blob([ buffer ], { type: 'application/octet-stream' }), filename)\r\n        },\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('miscExporterGltf-container')[0].appendChild(this.container)\r\n            this.scene1 = new this.$THREE.Scene()\r\n            this.scene1.name = 'Scene1'\r\n            // ---------------------------------------------------------------------\r\n            // Perspective Camera\r\n            // ---------------------------------------------------------------------\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000)\r\n            this.camera.position.set(600, 400, 0)\r\n            this.camera.name = \"PerspectiveCamera\"\r\n            this.scene1.add(this.camera)\r\n            // ---------------------------------------------------------------------\r\n            // Ambient light\r\n            // ---------------------------------------------------------------------\r\n            var ambientLight = new this.$THREE.AmbientLight(0xffffff, 0.2)\r\n            ambientLight.name = 'AmbientLight'\r\n            this.scene1.add(ambientLight)\r\n            // ---------------------------------------------------------------------\r\n            // DirectLight\r\n            // ---------------------------------------------------------------------\r\n            var dirLight = new this.$THREE.DirectionalLight(0xffffff, 1)\r\n            dirLight.target.position.set(0, 0, - 1)\r\n            dirLight.add(dirLight.target)\r\n            dirLight.lookAt(- 1, - 1, 0)\r\n            dirLight.name = 'DirectionalLight'\r\n            this.scene1.add(dirLight)\r\n            // ---------------------------------------------------------------------\r\n            // Grid\r\n            // ---------------------------------------------------------------------\r\n            this.gridHelper = new this.$THREE.GridHelper(2000, 20, 0x888888, 0x444444)\r\n            this.gridHelper.position.y = - 50\r\n            this.gridHelper.name = \"Grid\"\r\n            this.scene1.add(this.gridHelper)\r\n            // ---------------------------------------------------------------------\r\n            // Axes\r\n            // ---------------------------------------------------------------------\r\n            var axes = new this.$THREE.AxesHelper(500)\r\n            axes.name = \"AxesHelper\"\r\n            this.scene1.add(axes)\r\n            // ---------------------------------------------------------------------\r\n            // Simple geometry with basic material\r\n            // ---------------------------------------------------------------------\r\n            // Icosahedron\r\n            var mapGrid = new this.$THREE.TextureLoader().load('textures/uv_grid_opengl.jpg')\r\n            mapGrid.wrapS = mapGrid.wrapT = this.$THREE.RepeatWrapping\r\n            this.material = new this.$THREE.MeshBasicMaterial({\r\n                color: 0xffffff,\r\n                map: mapGrid\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.IcosahedronBufferGeometry(75, 0), this.material)\r\n            this.object.position.set(- 200, 0, 200)\r\n            this.object.name = 'Icosahedron'\r\n            this.scene1.add(this.object)\r\n            // Octahedron\r\n            this.material = new this.$THREE.MeshBasicMaterial({\r\n                color: 0x0000ff,\r\n                wireframe: true\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.OctahedronBufferGeometry(75, 1), this.material)\r\n            this.object.position.set(0, 0, 200)\r\n            this.object.name = 'Octahedron'\r\n            this.scene1.add(this.object)\r\n            // Tetrahedron\r\n            this.material = new this.$THREE.MeshBasicMaterial({\r\n                color: 0xff0000,\r\n                transparent: true,\r\n                opacity: 0.5\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.TetrahedronBufferGeometry(75, 0), this.material)\r\n            this.object.position.set(200, 0, 200)\r\n            this.object.name = 'Tetrahedron'\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            // Buffered geometry primitives\r\n            // ---------------------------------------------------------------------\r\n            // Sphere\r\n            this.material = new this.$THREE.MeshStandardMaterial({\r\n                color: 0xffff00,\r\n                metalness: 0.5,\r\n                roughness: 1.0,\r\n                flatShading: true\r\n            })\r\n            this.sphere = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(70, 10, 10), this.material)\r\n            this.sphere.position.set(0, 0, 0)\r\n            this.sphere.name = \"Sphere\"\r\n            this.scene1.add(this.sphere)\r\n            // Cylinder\r\n            this.material = new this.$THREE.MeshStandardMaterial({\r\n                color: 0xff00ff,\r\n                flatShading: true\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.CylinderBufferGeometry(10, 80, 100), this.material)\r\n            this.object.position.set(200, 0, 0)\r\n            this.object.name = \"Cylinder\"\r\n            this.scene1.add(this.object)\r\n            // TorusKnot\r\n            this.material = new this.$THREE.MeshStandardMaterial({\r\n                color: 0xff0000,\r\n                roughness: 1\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.TorusKnotBufferGeometry(50, 15, 40, 10), this.material)\r\n            this.object.position.set(- 200, 0, 0)\r\n            this.object.name = \"Cylinder\"\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            // Hierarchy\r\n            // ---------------------------------------------------------------------\r\n            var mapWood = new this.$THREE.TextureLoader().load('textures/hardwood2_diffuse.jpg')\r\n            this.material = new this.$THREE.MeshStandardMaterial({ map: mapWood, side: this.$THREE.DoubleSide })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(40, 100, 100), this.material)\r\n            this.object.position.set(- 200, 0, 400)\r\n            this.object.name = \"Cube\"\r\n            this.scene1.add(this.object)\r\n            this.object2 = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(40, 40, 40, 2, 2, 2), this.material)\r\n            this.object2.position.set(0, 0, 50)\r\n            this.object2.rotation.set(0, 45, 0)\r\n            this.object2.name = \"SubCube\"\r\n            this.object.add(this.object2)\r\n            // ---------------------------------------------------------------------\r\n            // Groups\r\n            // ---------------------------------------------------------------------\r\n            var group1 = new this.$THREE.Group()\r\n            group1.name = \"Group\"\r\n            this.scene1.add(group1)\r\n            var group2 = new this.$THREE.Group()\r\n            group2.name = \"subGroup\"\r\n            group2.position.set(0, 50, 0)\r\n            group1.add(group2)\r\n            this.object2 = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(30, 30, 30), this.material)\r\n            this.object2.name = \"Cube in group\"\r\n            this.object2.position.set(0, 0, 400)\r\n            group2.add(this.object2)\r\n            // ---------------------------------------------------------------------\r\n            // this.$THREE.Line Strip\r\n            // ---------------------------------------------------------------------\r\n            this.geometry = new this.$THREE.BufferGeometry()\r\n            var numPoints = 100\r\n            var positions = new Float32Array(numPoints * 3)\r\n            for (var i = 0; i < numPoints; i ++) {\r\n                positions[ i * 3 ] = i\r\n                positions[ i * 3 + 1 ] = Math.sin(i / 2) * 20\r\n                positions[ i * 3 + 2 ] = 0\r\n            }\r\n            this.geometry.setAttribute('position', new this.$THREE.BufferAttribute(positions, 3))\r\n            this.object = new this.$THREE.Line(this.geometry, new this.$THREE.LineBasicMaterial({ color: 0xffff00 }))\r\n            this.object.position.set(- 50, 0, - 200)\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            // this.$THREE.Line Loop\r\n            // ---------------------------------------------------------------------\r\n            this.geometry = new this.$THREE.BufferGeometry()\r\n            this.numPoints = 5\r\n            var radius = 70\r\n            this.positions = new Float32Array(this.numPoints * 3)\r\n            for (var i = 0; i < this.numPoints; i ++) {\r\n                var s = i * Math.PI * 2 / this.numPoints\r\n                this.positions[ i * 3 ] = radius * Math.sin(s)\r\n                this.positions[ i * 3 + 1 ] = radius * Math.cos(s)\r\n                this.positions[ i * 3 + 2 ] = 0\r\n            }\r\n            this.geometry.setAttribute('position', new this.$THREE.BufferAttribute(this.positions, 3))\r\n            this.object = new this.$THREE.LineLoop(this.geometry, new this.$THREE.LineBasicMaterial({ color: 0xffff00 }))\r\n            this.object.position.set(0, 0, - 200)\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            // Buffer this.geometry truncated (DrawRange)\r\n            // ---------------------------------------------------------------------\r\n            this.geometry = new this.$THREE.BufferGeometry()\r\n            var numElements = 6\r\n            var outOfRange = 3\r\n            this.positions = new Float32Array((numElements + outOfRange) * 3)\r\n            var colors = new Float32Array((numElements + outOfRange) * 3)\r\n            this.positions.set([\r\n                0, 0, 0,\r\n                0, 80, 0,\r\n                80, 0, 0,\r\n                80, 0, 0,\r\n                0, 80, 0,\r\n                80, 80, 0\r\n            ])\r\n            colors.set([\r\n                1, 0, 0,\r\n                1, 0, 0,\r\n                1, 1, 0,\r\n                1, 1, 0,\r\n                0, 0, 1,\r\n                0, 0, 1,\r\n            ])\r\n            this.geometry.setAttribute('position', new this.$THREE.BufferAttribute(this.positions, 3))\r\n            this.geometry.setAttribute('color', new this.$THREE.BufferAttribute(colors, 3))\r\n            this.geometry.setDrawRange(0, numElements)\r\n            this.object = new this.$THREE.Mesh(this.geometry, new this.$THREE.MeshBasicMaterial({ side: this.$THREE.DoubleSide, vertexColors: true }))\r\n            this.object.name = 'Custom buffered truncated'\r\n            this.object.position.set(140, - 40, - 200)\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            // this.$THREE.Points\r\n            // ---------------------------------------------------------------------\r\n            this.numPoints = 100\r\n            var pointsArray = new Float32Array(this.numPoints * 3)\r\n            for (var i = 0; i < this.numPoints; i ++) {\r\n                pointsArray[ 3 * i ] = - 50 + Math.random() * 100\r\n                pointsArray[ 3 * i + 1 ] = Math.random() * 100\r\n                pointsArray[ 3 * i + 2 ] = - 50 + Math.random() * 100\r\n            }\r\n            var pointsGeo = new this.$THREE.BufferGeometry()\r\n            pointsGeo.setAttribute('position', new this.$THREE.BufferAttribute(pointsArray, 3))\r\n            var pointsMaterial = new this.$THREE.PointsMaterial({ color: 0xffff00, size: 5 })\r\n            var pointCloud = new this.$THREE.Points(pointsGeo, pointsMaterial)\r\n            pointCloud.name = \"Points\"\r\n            pointCloud.position.set(- 200, 0, - 200)\r\n            this.scene1.add(pointCloud)\r\n            // ---------------------------------------------------------------------\r\n            // Ortho camera\r\n            // ---------------------------------------------------------------------\r\n            var cameraOrtho = new this.$THREE.OrthographicCamera(window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, 0.1, 10)\r\n            this.scene1.add(cameraOrtho)\r\n            cameraOrtho.name = 'OrthographicCamera'\r\n            this.material = new this.$THREE.MeshLambertMaterial({\r\n                color: 0xffff00,\r\n                side: this.$THREE.DoubleSide\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.CircleBufferGeometry(50, 20, 0, Math.PI * 2), this.material)\r\n            this.object.position.set(200, 0, - 400)\r\n            this.scene1.add(this.object)\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.RingBufferGeometry(10, 50, 20, 5, 0, Math.PI * 2), this.material)\r\n            this.object.position.set(0, 0, - 400)\r\n            this.scene1.add(this.object)\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.CylinderBufferGeometry(25, 75, 100, 40, 5), this.material)\r\n            this.object.position.set(- 200, 0, - 400)\r\n            this.scene1.add(this.object)\r\n            //\r\n            var points = []\r\n            for (var i = 0; i < 50; i ++) {\r\n                points.push(new this.$THREE.Vector2(Math.sin(i * 0.2) * Math.sin(i * 0.1) * 15 + 50, (i - 5) * 2))\r\n            }\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.LatheBufferGeometry(points, 20), this.material)\r\n            this.object.position.set(200, 0, 400)\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            // Big red box hidden just for testing `onlyVisible` option\r\n            // ---------------------------------------------------------------------\r\n            this.material = new this.$THREE.MeshBasicMaterial({\r\n                color: 0xff0000\r\n            })\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(200, 200, 200), this.material)\r\n            this.object.position.set(0, 0, 0)\r\n            this.object.name = \"CubeHidden\"\r\n            this.object.visible = false\r\n            this.scene1.add(this.object)\r\n            // ---------------------------------------------------------------------\r\n            //\r\n            //\r\n            var loader = new OBJLoader()\r\n            loader.load('static/models/obj/walt/WaltHead.obj', (obj) => {\r\n                this.waltHead = obj\r\n                this.waltHead.scale.multiplyScalar(1.5)\r\n                this.waltHead.position.set(400, 0, 0)\r\n                this.scene1.add(this.waltHead)\r\n            })\r\n            // ---------------------------------------------------------------------\r\n            // 2nd this.$THREE.Scene\r\n            // ---------------------------------------------------------------------\r\n            this.scene2 = new this.$THREE.Scene()\r\n            this.object = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(100, 100, 100), this.material)\r\n            this.object.position.set(0, 0, 0)\r\n            this.object.name = \"Cube2ndScene\"\r\n            this.scene2.name = 'Scene2'\r\n            this.scene2.add(this.object)\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n        },\r\n        render() {\r\n            var timer = Date.now() * 0.0001\r\n            this.camera.position.x = Math.cos(timer) * 800\r\n            this.camera.position.z = Math.sin(timer) * 800\r\n            this.camera.lookAt(this.scene1.position)\r\n            this.renderer.render(this.scene1, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.miscExporterGltf-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/misc/miscExporterGltf.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"miscExporterGltf-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl - exporter - gltf\"),_c('br'),_c('br'),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\"},on:{\"click\":_vm.handleExportScene}},[_vm._v(\"Export Scene1\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\"},on:{\"click\":_vm.handleExportScenes}},[_vm._v(\"Export Scene1 and this.$THREE.Scene 2\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\"},on:{\"click\":_vm.handleExportObject}},[_vm._v(\"Export Sphere\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\"},on:{\"click\":_vm.handleExportObj}},[_vm._v(\"Export WaltHead\")]),_c('br'),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\"},on:{\"click\":_vm.handleExportObjects}},[_vm._v(\"Export Sphere and Grid\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\"},on:{\"click\":_vm.handleExportSceneObjects}},[_vm._v(\"Export Scene1 and Sphere\")]),_vm._v(\" \"),_c('br'),_c('br'),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_vm._m(2),_c('br'),_vm._v(\" \"),_vm._m(3),_vm._v(\" \"),_vm._m(4),_vm._v(\" \"),_vm._m(5),_vm._v(\" \"),_c('button',{attrs:{\"id\":\"export_scene\"}},[_vm._v(\"Export Scene1\")])],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',[_c('input',{attrs:{\"id\":\"option_trs\",\"name\":\"trs\",\"type\":\"checkbox\"}}),_vm._v(\"TRS\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',[_c('input',{attrs:{\"id\":\"option_visible\",\"name\":\"visible\",\"type\":\"checkbox\",\"checked\":\"checked\"}}),_vm._v(\"Only Visible\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',[_c('input',{attrs:{\"id\":\"option_drawrange\",\"name\":\"visible\",\"type\":\"checkbox\",\"checked\":\"checked\"}}),_vm._v(\"Truncate drawRange\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',[_c('input',{attrs:{\"id\":\"option_binary\",\"name\":\"visible\",\"type\":\"checkbox\"}}),_vm._v(\"Binary (\"),_c('code',[_vm._v(\".glb\")]),_vm._v(\")\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',[_c('input',{attrs:{\"id\":\"option_forcepot\",\"name\":\"visible\",\"type\":\"checkbox\"}}),_vm._v(\"Force POT textures\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',[_c('input',{attrs:{\"id\":\"option_maxsize\",\"name\":\"maxSize\",\"type\":\"number\",\"value\":\"4096\",\"min\":\"2\",\"max\":\"8192\",\"step\":\"1\"}}),_vm._v(\" Max texture size\")])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-56c73946\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/misc/miscExporterGltf.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-56c73946\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./miscExporterGltf.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./miscExporterGltf.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./miscExporterGltf.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-56c73946\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./miscExporterGltf.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-56c73946\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/misc/miscExporterGltf.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}