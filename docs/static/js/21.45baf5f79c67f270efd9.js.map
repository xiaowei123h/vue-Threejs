{"version":3,"sources":["webpack:///src/views/geometries/webglGeometrySplineEditor.vue","webpack:///./src/views/geometries/webglGeometrySplineEditor.vue?0d9b","webpack:///./src/views/geometries/webglGeometrySplineEditor.vue","webpack:///./src/utils/geometrySplineEditor.js"],"names":["webglGeometrySplineEditor","data","container","stats","camera","scene","renderer","splineHelperObjects","splinePointsLength","positions","point","raycaster","pointer","onUpPosition","onDownPosition","geometry","transformControl","ARC_SEGMENTS","splines","params","gui","mounted","this","$THREE","Vector3","Raycaster","Vector2","BoxBufferGeometry","uniform","tension","centripetal","chordal","addPoint","removePoint","exportSpline","init","animate","beforeDestroy","destroy","methods","_this","document","getElementById","Scene","background","Color","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","add","AmbientLight","light","SpotLight","angle","Math","PI","castShadow","shadow","near","far","bias","mapSize","width","height","planeGeometry","PlaneBufferGeometry","rotateX","planeMaterial","ShadowMaterial","opacity","plane","Mesh","y","receiveShadow","helper","GridHelper","material","transparent","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","appendChild","domElement","$Stats","dom","style","left","dat_gui_module","step","onChange","value","updateSplineOutline","open","controls","OrbitControls","damping","addEventListener","render","TransformControls","event","onPointerDown","onPointerUp","onPointerMove","i","addSplineObject","length","push","BufferGeometry","setAttribute","BufferAttribute","Float32Array","curve","CatmullRomCurve3","k","curveType","mesh","Line","clone","LineBasicMaterial","color","spline","load","onWindowResize","$onWindowResize","MeshLambertMaterial","random","object","copy","x","z","pop","detach","remove","attributes","t","getPoint","setXYZ","needsUpdate","strplace","p","format","console","log","join","code","prompt","new_positions","requestAnimationFrame","update","visible","clientX","clientY","distanceTo","innerWidth","setFromCamera","intersects","intersectObjects","attach","geometries_webglGeometrySplineEditor","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","String","prototype","str","myArguments","replace"],"mappings":"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","file":"static/js/21.45baf5f79c67f270efd9.js","sourcesContent":["<template>\r\n    <div class=\"webglGeometrySplineEditor-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - geometry - catmull spline editor\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { TransformControls } from '@/components/jsm/controls/TransformControls.js'\r\nimport '@/utils/geometrySplineEditor.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tsplineHelperObjects: [],\r\n\t\t\tsplinePointsLength: 4,\r\n\t\t\tpositions: [],\r\n\t\t\tpoint: null,\r\n\t\t\traycaster: null,\r\n\t\t\tpointer: null,\r\n\t\t\tonUpPosition: null,\r\n\t\t\tonDownPosition: null,\r\n\t\t\tgeometry: null,\r\n\t\t\ttransformControl: null,\r\n\t\t\tARC_SEGMENTS: 200,\r\n\t\t\tsplines: {},\r\n            params: null,\r\n            gui: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.point = new this.$THREE.Vector3()\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.pointer = new this.$THREE.Vector2()\r\n        this.onUpPosition = new this.$THREE.Vector2()\r\n        this.onDownPosition = new this.$THREE.Vector2()\r\n        this.geometry = new this.$THREE.BoxBufferGeometry(20, 20, 20)\r\n        this.ARC_SEGMENTS = 200\r\n        this.splines = {}\r\n        this.params = {\r\n            uniform: true,\r\n            tension: 0.5,\r\n            centripetal: true,\r\n            chordal: true,\r\n            addPoint: this.addPoint,\r\n            removePoint: this.removePoint,\r\n            exportSpline: this.exportSpline\r\n        }\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById('container')\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xf0f0f0)\r\n            this.camera = new this.$THREE.PerspectiveCamera(70, this.$webglInnerWidth / window.innerHeight, 1, 10000)\r\n            this.camera.position.set(0, 250, 1000)\r\n            this.scene.add(this.camera)\r\n            this.scene.add(new this.$THREE.AmbientLight(0xf0f0f0))\r\n            var light = new this.$THREE.SpotLight(0xffffff, 1.5)\r\n            light.position.set(0, 1500, 200)\r\n            light.angle = Math.PI * 0.2\r\n            light.castShadow = true\r\n            light.shadow.camera.near = 200\r\n            light.shadow.camera.far = 2000\r\n            light.shadow.bias = - 0.000222\r\n            light.shadow.mapSize.width = 1024\r\n            light.shadow.mapSize.height = 1024\r\n            this.scene.add(light)\r\n            var planeGeometry = new this.$THREE.PlaneBufferGeometry(2000, 2000)\r\n            planeGeometry.rotateX(- Math.PI / 2)\r\n            var planeMaterial = new this.$THREE.ShadowMaterial({ opacity: 0.2 })\r\n            var plane = new this.$THREE.Mesh(planeGeometry, planeMaterial)\r\n            plane.position.y = - 200\r\n            plane.receiveShadow = true\r\n            this.scene.add(plane)\r\n            var helper = new this.$THREE.GridHelper(2000, 100)\r\n            helper.position.y = - 199\r\n            helper.material.opacity = 0.25\r\n            helper.material.transparent = true\r\n            this.scene.add(helper)\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.shadowMap.enabled = true\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.gui = new GUI()\r\n            this.gui.add(this.params, 'uniform')\r\n            this.gui.add(this.params, 'tension', 0, 1).step(0.01).onChange((value) => {\r\n                this.splines.uniform.tension = value\r\n                this.updateSplineOutline()\r\n            })\r\n            this.gui.add(this.params, 'centripetal')\r\n            this.gui.add(this.params, 'chordal')\r\n            this.gui.add(this.params, 'addPoint')\r\n            this.gui.add(this.params, 'removePoint')\r\n            this.gui.add(this.params, 'exportSpline')\r\n            this.gui.open()\r\n            // Controls\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.damping = 0.2\r\n            controls.addEventListener('change', this.render)\r\n            this.transformControl = new TransformControls(this.camera, this.renderer.domElement)\r\n            this.transformControl.addEventListener('change', this.render)\r\n            this.transformControl.addEventListener('dragging-changed', (event) => {\r\n                controls.enabled = ! event.value\r\n            })\r\n            this.scene.add(this.transformControl)\r\n            this.transformControl.addEventListener('objectChange', () => {\r\n                this.updateSplineOutline()\r\n            })\r\n            document.addEventListener('pointerdown', this.onPointerDown, false)\r\n            document.addEventListener('pointerup', this.onPointerUp, false)\r\n            document.addEventListener('pointermove', this.onPointerMove, false)\r\n            /*******\r\n             * Curves\r\n             *********/\r\n            for (var i = 0; i < this.splinePointsLength; i ++) {\r\n                this.addSplineObject(this.positions[ i ])\r\n            }\r\n            this.positions.length = 0\r\n            for (var i = 0; i < this.splinePointsLength; i ++) {\r\n                this.positions.push(this.splineHelperObjects[ i ].position)\r\n            }\r\n            var geometry = new this.$THREE.BufferGeometry()\r\n            geometry.setAttribute('position', new this.$THREE.BufferAttribute(new Float32Array(this.ARC_SEGMENTS * 3), 3))\r\n            var curve = new this.$THREE.CatmullRomCurve3(this.positions)\r\n            curve.curveType = 'catmullrom'\r\n            curve.mesh = new this.$THREE.Line(geometry.clone(), new this.$THREE.LineBasicMaterial({\r\n                color: 0xff0000,\r\n                opacity: 0.35\r\n            }))\r\n            curve.mesh.castShadow = true\r\n            this.splines.uniform = curve\r\n            curve = new this.$THREE.CatmullRomCurve3(this.positions)\r\n            curve.curveType = 'centripetal'\r\n            curve.mesh = new this.$THREE.Line(geometry.clone(), new this.$THREE.LineBasicMaterial({\r\n                color: 0x00ff00,\r\n                opacity: 0.35\r\n            }))\r\n            curve.mesh.castShadow = true\r\n            this.splines.centripetal = curve\r\n            curve = new this.$THREE.CatmullRomCurve3(this.positions)\r\n            curve.curveType = 'chordal'\r\n            curve.mesh = new this.$THREE.Line(geometry.clone(), new this.$THREE.LineBasicMaterial({\r\n                color: 0x0000ff,\r\n                opacity: 0.35\r\n            }))\r\n            curve.mesh.castShadow = true\r\n            this.splines.chordal = curve\r\n            for (var k in this.splines) {\r\n                var spline = this.splines[ k ]\r\n                this.scene.add(spline.mesh)\r\n            }\r\n            this.load([ new this.$THREE.Vector3(289.76843686945404, 452.51481137238443, 56.10018915737797),\r\n                new this.$THREE.Vector3(- 53.56300074753207, 171.49711742836848, - 14.495472686253045),\r\n                new this.$THREE.Vector3(- 91.40118730204415, 176.4306956436485, - 6.958271935582161),\r\n                new this.$THREE.Vector3(- 383.785318791128, 491.1365363371675, 47.869296953772746) ])\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        addSplineObject(position) {\r\n            var material = new this.$THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff })\r\n            var object = new this.$THREE.Mesh(this.geometry, material)\r\n            if (position) {\r\n                object.position.copy(position)\r\n            } else {\r\n                object.position.x = Math.random() * 1000 - 500\r\n                object.position.y = Math.random() * 600\r\n                object.position.z = Math.random() * 800 - 400\r\n            }\r\n            object.castShadow = true\r\n            object.receiveShadow = true\r\n            this.scene.add(object)\r\n            this.splineHelperObjects.push(object)\r\n            return object\r\n        },\r\n        addPoint() {\r\n            this.splinePointsLength ++\r\n            this.positions.push(this.addSplineObject().position)\r\n            this.updateSplineOutline()\r\n        },\r\n        removePoint() {\r\n            if (this.splinePointsLength <= 4) {\r\n                return\r\n            }\r\n            var point = this.splineHelperObjects.pop()\r\n            this.splinePointsLength --\r\n            this.positions.pop()\r\n            if (this.transformControl.object === point) this.transformControl.detach()\r\n            this.scene.remove(point)\r\n            this.updateSplineOutline()\r\n        },\r\n        updateSplineOutline() {\r\n            for (var k in this.splines) {\r\n                var spline = this.splines[ k ]\r\n                var splineMesh = spline.mesh\r\n                var position = splineMesh.geometry.attributes.position\r\n                for (var i = 0; i < this.ARC_SEGMENTS; i ++) {\r\n                    var t = i / (this.ARC_SEGMENTS - 1)\r\n                    spline.getPoint(t, this.point)\r\n                    position.setXYZ(i, this.point.x, this.point.y, this.point.z)\r\n                }\r\n                position.needsUpdate = true\r\n            }\r\n        },\r\n        exportSpline() {\r\n            var strplace = []\r\n            for (var i = 0; i < this.splinePointsLength; i ++) {\r\n                var p = this.splineHelperObjects[ i ].position\r\n                strplace.push('new this.$THREE.Vector3({0}, {1}, {2})'.format('new this.$THREE.Vector3({0}, {1}, {2})', p.x, p.y, p.z))\r\n            }\r\n            console.log(strplace.join(',\\n'))\r\n            var code = '[' + (strplace.join(',\\n\\t')) + ']'\r\n            prompt('copy and paste code', code)\r\n        },\r\n        load(new_positions) {\r\n            while (new_positions.length > this.positions.length) {\r\n                this.addPoint()\r\n            }\r\n            while (new_positions.length < this.positions.length) {\r\n                this.removePoint()\r\n            }\r\n            for (var i = 0; i < this.positions.length; i ++) {\r\n                this.positions[ i ].copy(new_positions[ i ])\r\n            }\r\n            this.updateSplineOutline()\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            this.splines.uniform.mesh.visible = this.params.uniform\r\n            this.splines.centripetal.mesh.visible = this.params.centripetal\r\n            this.splines.chordal.mesh.visible = this.params.chordal\r\n            this.renderer.render(this.scene, this.camera)\r\n        },\r\n        onPointerDown(event) {\r\n            this.onDownPosition.x = event.clientX\r\n            this.onDownPosition.y = event.clientY\r\n        },\r\n        onPointerUp() {\r\n            this.onUpPosition.x = event.clientX\r\n            this.onUpPosition.y = event.clientY\r\n            if (this.onDownPosition.distanceTo(this.onUpPosition) === 0) this.transformControl.detach()\r\n        },\r\n        onPointerMove(event) {\r\n            this.pointer.x = (event.clientX / window.innerWidth - 281) * 2 - 1\r\n            this.pointer.y = - (event.clientY / window.innerHeight) * 2 + 1\r\n            this.raycaster.setFromCamera(this.pointer, this.camera)\r\n            var intersects = this.raycaster.intersectObjects(this.splineHelperObjects)\r\n            if (intersects.length > 0) {\r\n                var object = intersects[ 0 ].object\r\n                if (object !== this.transformControl.object) {\r\n                    this.transformControl.attach(object)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglGeometrySplineEditor-container {\r\n    width: 100%;\r\n    background-color: #f0f0f0;\r\n}\r\n#info {\t\t\t\r\n    color: #444;\r\n}\r\n#info a {\r\n    color: #08f;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/geometries/webglGeometrySplineEditor.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglGeometrySplineEditor-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - geometry - catmull spline editor\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0e1baf35\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/geometries/webglGeometrySplineEditor.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0e1baf35\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglGeometrySplineEditor.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometrySplineEditor.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometrySplineEditor.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0e1baf35\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglGeometrySplineEditor.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0e1baf35\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/geometries/webglGeometrySplineEditor.vue\n// module id = null\n// module chunks = ","String.prototype.format = (str, x, y, z) => {\r\n    var str = str\r\n    var myArguments = [x, y, z]\r\n    for (var i = 0; i < myArguments.length; i ++) {\r\n        str = str.replace('{' + i + '}', myArguments[i])\r\n    }\r\n    return str\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/utils/geometrySplineEditor.js"],"sourceRoot":""}