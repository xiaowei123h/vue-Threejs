{"version":3,"sources":["webpack:///./src/components/jsm/shaders/HalftoneShader.js","webpack:///./src/components/jsm/postprocessing/HalftonePass.js","webpack:///src/views/postprocessing/webglPostprocessingRgbHalftone.vue","webpack:///./src/views/postprocessing/webglPostprocessingRgbHalftone.vue?ed1f","webpack:///./src/views/postprocessing/webglPostprocessingRgbHalftone.vue"],"names":["HalftoneShader","uniforms","tDiffuse","value","shape","radius","rotateR","Math","PI","rotateG","rotateB","scatter","width","height","blending","blendingMode","greyscale","disable","vertexShader","join","fragmentShader","HalftonePass","params","key","Pass","call","this","undefined","console","error","UniformsUtils","clone","material","ShaderMaterial","hasOwnProperty","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","setSize","webglPostprocessingRgbHalftone","data","clock","camera","stats","rotationSpeed","composer","group","gui","mounted","init","animate","beforeDestroy","destroy","methods","_this","$THREE","WebGLRenderer","setPixelRatio","window","devicePixelRatio","$webglInnerWidth","innerHeight","Clock","PerspectiveCamera","position","z","$Stats","dom","style","left","document","getElementsByClassName","appendChild","domElement","controls","OrbitControls","target","set","update","scene","Scene","background","Color","Group","floor","Mesh","BoxBufferGeometry","MeshPhongMaterial","y","light","PointLight","add","mat","i","mesh","random","rotation","EffectComposer","renderPass","RenderPass","halftonePass","HalftonePass_HalftonePass","addPass","onresize","$onWindowResize","innerWidth","controller","onGUIChange","dat_gui_module","Dot","Ellipse","Line","Square","onChange","Linear","Multiply","Add","Lighter","Darker","requestAnimationFrame","delta","getDelta","postprocessing_webglPostprocessingRgbHalftone","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/215.69797191a62108290591.js","sourcesContent":["/**\r\n * RGB Halftone shader for three.js.\r\n *\tNOTE:\r\n * \t\tShape (1 = Dot, 2 = Ellipse, 3 = Line, 4 = Square)\r\n *\t\tBlending Mode (1 = Linear, 2 = Multiply, 3 = Add, 4 = Lighter, 5 = Darker)\r\n */\r\n\r\nvar HalftoneShader = {\r\n\r\n\tuniforms: {\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"shape\": { value: 1 },\r\n\t\t\"radius\": { value: 4 },\r\n\t\t\"rotateR\": { value: Math.PI / 12 * 1 },\r\n\t\t\"rotateG\": { value: Math.PI / 12 * 2 },\r\n\t\t\"rotateB\": { value: Math.PI / 12 * 3 },\r\n\t\t\"scatter\": { value: 0 },\r\n\t\t\"width\": { value: 1 },\r\n\t\t\"height\": { value: 1 },\r\n\t\t\"blending\": { value: 1 },\r\n\t\t\"blendingMode\": { value: 1 },\r\n\t\t\"greyscale\": { value: false },\r\n\t\t\"disable\": { value: false }\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUV = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"#define SQRT2_MINUS_ONE 0.41421356\",\r\n\t\t\"#define SQRT2_HALF_MINUS_ONE 0.20710678\",\r\n\t\t\"#define PI2 6.28318531\",\r\n\t\t\"#define SHAPE_DOT 1\",\r\n\t\t\"#define SHAPE_ELLIPSE 2\",\r\n\t\t\"#define SHAPE_LINE 3\",\r\n\t\t\"#define SHAPE_SQUARE 4\",\r\n\t\t\"#define BLENDING_LINEAR 1\",\r\n\t\t\"#define BLENDING_MULTIPLY 2\",\r\n\t\t\"#define BLENDING_ADD 3\",\r\n\t\t\"#define BLENDING_LIGHTER 4\",\r\n\t\t\"#define BLENDING_DARKER 5\",\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float radius;\",\r\n\t\t\"uniform float rotateR;\",\r\n\t\t\"uniform float rotateG;\",\r\n\t\t\"uniform float rotateB;\",\r\n\t\t\"uniform float scatter;\",\r\n\t\t\"uniform float width;\",\r\n\t\t\"uniform float height;\",\r\n\t\t\"uniform int shape;\",\r\n\t\t\"uniform bool disable;\",\r\n\t\t\"uniform float blending;\",\r\n\t\t\"uniform int blendingMode;\",\r\n\t\t\"varying vec2 vUV;\",\r\n\t\t\"uniform bool greyscale;\",\r\n\t\t\"const int samples = 8;\",\r\n\r\n\t\t\"float blend( float a, float b, float t ) {\",\r\n\r\n\t\t// linear blend\r\n\t\t\"\treturn a * ( 1.0 - t ) + b * t;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float hypot( float x, float y ) {\",\r\n\r\n\t\t// vector magnitude\r\n\t\t\"\treturn sqrt( x * x + y * y );\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float rand( vec2 seed ){\",\r\n\r\n\t\t// get pseudo-random number\r\n\t    \"return fract( sin( dot( seed.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float distanceToDotRadius( float channel, vec2 coord, vec2 normal, vec2 p, float angle, float rad_max ) {\",\r\n\r\n\t\t// apply shape-specific transforms\r\n\t\t\"\tfloat dist = hypot( coord.x - p.x, coord.y - p.y );\",\r\n\t\t\"\tfloat rad = channel;\",\r\n\r\n\t\t\"\tif ( shape == SHAPE_DOT ) {\",\r\n\r\n\t\t\"\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\",\r\n\r\n\t\t\"\t} else if ( shape == SHAPE_ELLIPSE ) {\",\r\n\r\n\t\t\"\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\",\r\n\r\n\t\t\"\t\tif ( dist != 0.0 ) {\",\r\n\t\t\"\t\t\tfloat dot_p = abs( ( p.x - coord.x ) / dist * normal.x + ( p.y - coord.y ) / dist * normal.y );\",\r\n\t\t\"\t\t\tdist = ( dist * ( 1.0 - SQRT2_HALF_MINUS_ONE ) ) + dot_p * dist * SQRT2_MINUS_ONE;\",\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t} else if ( shape == SHAPE_LINE ) {\",\r\n\r\n\t\t\"\t\trad = pow( abs( rad ), 1.5) * rad_max;\",\r\n\t\t\"\t\tfloat dot_p = ( p.x - coord.x ) * normal.x + ( p.y - coord.y ) * normal.y;\",\r\n\t\t\"\t\tdist = hypot( normal.x * dot_p, normal.y * dot_p );\",\r\n\r\n\t\t\"\t} else if ( shape == SHAPE_SQUARE ) {\",\r\n\r\n\t\t\"\t\tfloat theta = atan( p.y - coord.y, p.x - coord.x ) - angle;\",\r\n\t\t\"\t\tfloat sin_t = abs( sin( theta ) );\",\r\n\t\t\"\t\tfloat cos_t = abs( cos( theta ) );\",\r\n\t\t\"\t\trad = pow( abs( rad ), 1.4 );\",\r\n\t\t\"\t\trad = rad_max * ( rad + ( ( sin_t > cos_t ) ? rad - sin_t * rad : rad - cos_t * rad ) );\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\treturn rad - dist;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"struct Cell {\",\r\n\r\n\t\t// grid sample positions\r\n\t\t\"\tvec2 normal;\",\r\n\t\t\"\tvec2 p1;\",\r\n\t\t\"\tvec2 p2;\",\r\n\t\t\"\tvec2 p3;\",\r\n\t\t\"\tvec2 p4;\",\r\n\t\t\"\tfloat samp2;\",\r\n\t\t\"\tfloat samp1;\",\r\n\t\t\"\tfloat samp3;\",\r\n\t\t\"\tfloat samp4;\",\r\n\r\n\t\t\"};\",\r\n\r\n\t\t\"vec4 getSample( vec2 point ) {\",\r\n\r\n\t\t// multi-sampled point\r\n\t\t\"\tvec4 tex = texture2D( tDiffuse, vec2( point.x / width, point.y / height ) );\",\r\n\t\t\"\tfloat base = rand( vec2( floor( point.x ), floor( point.y ) ) ) * PI2;\",\r\n\t\t\"\tfloat step = PI2 / float( samples );\",\r\n\t\t\"\tfloat dist = radius * 0.66;\",\r\n\r\n\t\t\"\tfor ( int i = 0; i < samples; ++i ) {\",\r\n\r\n\t\t\"\t\tfloat r = base + step * float( i );\",\r\n\t\t\"\t\tvec2 coord = point + vec2( cos( r ) * dist, sin( r ) * dist );\",\r\n\t\t\"\t\ttex += texture2D( tDiffuse, vec2( coord.x / width, coord.y / height ) );\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\ttex /= float( samples ) + 1.0;\",\r\n\t\t\"\treturn tex;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float getDotColour( Cell c, vec2 p, int channel, float angle, float aa ) {\",\r\n\r\n\t\t// get colour for given point\r\n\t\t\"\tfloat dist_c_1, dist_c_2, dist_c_3, dist_c_4, res;\",\r\n\r\n\t\t\"\tif ( channel == 0 ) {\",\r\n\r\n\t\t\"\t\tc.samp1 = getSample( c.p1 ).r;\",\r\n\t\t\"\t\tc.samp2 = getSample( c.p2 ).r;\",\r\n\t\t\"\t\tc.samp3 = getSample( c.p3 ).r;\",\r\n\t\t\"\t\tc.samp4 = getSample( c.p4 ).r;\",\r\n\r\n\t\t\"\t} else if (channel == 1) {\",\r\n\r\n\t\t\"\t\tc.samp1 = getSample( c.p1 ).g;\",\r\n\t\t\"\t\tc.samp2 = getSample( c.p2 ).g;\",\r\n\t\t\"\t\tc.samp3 = getSample( c.p3 ).g;\",\r\n\t\t\"\t\tc.samp4 = getSample( c.p4 ).g;\",\r\n\r\n\t\t\"\t} else {\",\r\n\r\n\t\t\"\t\tc.samp1 = getSample( c.p1 ).b;\",\r\n\t\t\"\t\tc.samp3 = getSample( c.p3 ).b;\",\r\n\t\t\"\t\tc.samp2 = getSample( c.p2 ).b;\",\r\n\t\t\"\t\tc.samp4 = getSample( c.p4 ).b;\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tdist_c_1 = distanceToDotRadius( c.samp1, c.p1, c.normal, p, angle, radius );\",\r\n\t\t\"\tdist_c_2 = distanceToDotRadius( c.samp2, c.p2, c.normal, p, angle, radius );\",\r\n\t\t\"\tdist_c_3 = distanceToDotRadius( c.samp3, c.p3, c.normal, p, angle, radius );\",\r\n\t\t\"\tdist_c_4 = distanceToDotRadius( c.samp4, c.p4, c.normal, p, angle, radius );\",\r\n\t\t\"\tres = ( dist_c_1 > 0.0 ) ? clamp( dist_c_1 / aa, 0.0, 1.0 ) : 0.0;\",\r\n\t\t\"\tres += ( dist_c_2 > 0.0 ) ? clamp( dist_c_2 / aa, 0.0, 1.0 ) : 0.0;\",\r\n\t\t\"\tres += ( dist_c_3 > 0.0 ) ? clamp( dist_c_3 / aa, 0.0, 1.0 ) : 0.0;\",\r\n\t\t\"\tres += ( dist_c_4 > 0.0 ) ? clamp( dist_c_4 / aa, 0.0, 1.0 ) : 0.0;\",\r\n\t\t\"\tres = clamp( res, 0.0, 1.0 );\",\r\n\r\n\t\t\"\treturn res;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"Cell getReferenceCell( vec2 p, vec2 origin, float grid_angle, float step ) {\",\r\n\r\n\t\t// get containing cell\r\n\t\t\"\tCell c;\",\r\n\r\n\t\t// calc grid\r\n\t\t\"\tvec2 n = vec2( cos( grid_angle ), sin( grid_angle ) );\",\r\n\t\t\"\tfloat threshold = step * 0.5;\",\r\n\t\t\"\tfloat dot_normal = n.x * ( p.x - origin.x ) + n.y * ( p.y - origin.y );\",\r\n\t\t\"\tfloat dot_line = -n.y * ( p.x - origin.x ) + n.x * ( p.y - origin.y );\",\r\n\t\t\"\tvec2 offset = vec2( n.x * dot_normal, n.y * dot_normal );\",\r\n\t\t\"\tfloat offset_normal = mod( hypot( offset.x, offset.y ), step );\",\r\n\t\t\"\tfloat normal_dir = ( dot_normal < 0.0 ) ? 1.0 : -1.0;\",\r\n\t\t\"\tfloat normal_scale = ( ( offset_normal < threshold ) ? -offset_normal : step - offset_normal ) * normal_dir;\",\r\n\t\t\"\tfloat offset_line = mod( hypot( ( p.x - offset.x ) - origin.x, ( p.y - offset.y ) - origin.y ), step );\",\r\n\t\t\"\tfloat line_dir = ( dot_line < 0.0 ) ? 1.0 : -1.0;\",\r\n\t\t\"\tfloat line_scale = ( ( offset_line < threshold ) ? -offset_line : step - offset_line ) * line_dir;\",\r\n\r\n\t\t// get closest corner\r\n\t\t\"\tc.normal = n;\",\r\n\t\t\"\tc.p1.x = p.x - n.x * normal_scale + n.y * line_scale;\",\r\n\t\t\"\tc.p1.y = p.y - n.y * normal_scale - n.x * line_scale;\",\r\n\r\n\t\t// scatter\r\n\t\t\"\tif ( scatter != 0.0 ) {\",\r\n\r\n\t\t\"\t\tfloat off_mag = scatter * threshold * 0.5;\",\r\n\t\t\"\t\tfloat off_angle = rand( vec2( floor( c.p1.x ), floor( c.p1.y ) ) ) * PI2;\",\r\n\t\t\"\t\tc.p1.x += cos( off_angle ) * off_mag;\",\r\n\t\t\"\t\tc.p1.y += sin( off_angle ) * off_mag;\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t// find corners\r\n\t\t\"\tfloat normal_step = normal_dir * ( ( offset_normal < threshold ) ? step : -step );\",\r\n\t\t\"\tfloat line_step = line_dir * ( ( offset_line < threshold ) ? step : -step );\",\r\n\t\t\"\tc.p2.x = c.p1.x - n.x * normal_step;\",\r\n\t\t\"\tc.p2.y = c.p1.y - n.y * normal_step;\",\r\n\t\t\"\tc.p3.x = c.p1.x + n.y * line_step;\",\r\n\t\t\"\tc.p3.y = c.p1.y - n.x * line_step;\",\r\n\t\t\"\tc.p4.x = c.p1.x - n.x * normal_step + n.y * line_step;\",\r\n\t\t\"\tc.p4.y = c.p1.y - n.y * normal_step - n.x * line_step;\",\r\n\r\n\t\t\"\treturn c;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float blendColour( float a, float b, float t ) {\",\r\n\r\n\t\t// blend colours\r\n\t\t\"\tif ( blendingMode == BLENDING_LINEAR ) {\",\r\n\t\t\"\t\treturn blend( a, b, 1.0 - t );\",\r\n\t\t\"\t} else if ( blendingMode == BLENDING_ADD ) {\",\r\n\t\t\"\t\treturn blend( a, min( 1.0, a + b ), t );\",\r\n\t\t\"\t} else if ( blendingMode == BLENDING_MULTIPLY ) {\",\r\n\t\t\"\t\treturn blend( a, max( 0.0, a * b ), t );\",\r\n\t\t\"\t} else if ( blendingMode == BLENDING_LIGHTER ) {\",\r\n\t\t\"\t\treturn blend( a, max( a, b ), t );\",\r\n\t\t\"\t} else if ( blendingMode == BLENDING_DARKER ) {\",\r\n\t\t\"\t\treturn blend( a, min( a, b ), t );\",\r\n\t\t\"\t} else {\",\r\n\t\t\"\t\treturn blend( a, b, 1.0 - t );\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tif ( ! disable ) {\",\r\n\r\n\t\t// setup\r\n\t\t\"\t\tvec2 p = vec2( vUV.x * width, vUV.y * height );\",\r\n\t\t\"\t\tvec2 origin = vec2( 0, 0 );\",\r\n\t\t\"\t\tfloat aa = ( radius < 2.5 ) ? radius * 0.5 : 1.25;\",\r\n\r\n\t\t// get channel samples\r\n\t\t\"\t\tCell cell_r = getReferenceCell( p, origin, rotateR, radius );\",\r\n\t\t\"\t\tCell cell_g = getReferenceCell( p, origin, rotateG, radius );\",\r\n\t\t\"\t\tCell cell_b = getReferenceCell( p, origin, rotateB, radius );\",\r\n\t\t\"\t\tfloat r = getDotColour( cell_r, p, 0, rotateR, aa );\",\r\n\t\t\"\t\tfloat g = getDotColour( cell_g, p, 1, rotateG, aa );\",\r\n\t\t\"\t\tfloat b = getDotColour( cell_b, p, 2, rotateB, aa );\",\r\n\r\n\t\t// blend with original\r\n\t\t\"\t\tvec4 colour = texture2D( tDiffuse, vUV );\",\r\n\t\t\"\t\tr = blendColour( r, colour.r, blending );\",\r\n\t\t\"\t\tg = blendColour( g, colour.g, blending );\",\r\n\t\t\"\t\tb = blendColour( b, colour.b, blending );\",\r\n\r\n\t\t\"\t\tif ( greyscale ) {\",\r\n\t\t\"\t\t\tr = g = b = (r + b + g) / 3.0;\",\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t\tgl_FragColor = vec4( r, g, b, 1.0 );\",\r\n\r\n\t\t\"\t} else {\",\r\n\r\n\t\t\"\t\tgl_FragColor = texture2D( tDiffuse, vUV );\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { HalftoneShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/HalftoneShader.js","import {\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { HalftoneShader } from \"../shaders/HalftoneShader.js\";\r\n\r\n/**\r\n * RGB Halftone pass for three.js effects composer. Requires HalftoneShader.\r\n */\r\n\r\nvar HalftonePass = function ( width, height, params ) {\r\n\r\n\tPass.call( this );\r\n\r\n \tif ( HalftoneShader === undefined ) {\r\n\r\n \t\tconsole.error( 'THREE.HalftonePass requires HalftoneShader' );\r\n\r\n \t}\r\n\r\n \tthis.uniforms = UniformsUtils.clone( HalftoneShader.uniforms );\r\n \tthis.material = new ShaderMaterial( {\r\n \t\tuniforms: this.uniforms,\r\n \t\tfragmentShader: HalftoneShader.fragmentShader,\r\n \t\tvertexShader: HalftoneShader.vertexShader\r\n \t} );\r\n\r\n\t// set params\r\n\tthis.uniforms.width.value = width;\r\n\tthis.uniforms.height.value = height;\r\n\r\n\tfor ( var key in params ) {\r\n\r\n\t\tif ( params.hasOwnProperty( key ) && this.uniforms.hasOwnProperty( key ) ) {\r\n\r\n\t\t\tthis.uniforms[ key ].value = params[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\r\n\r\n};\r\n\r\nHalftonePass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: HalftonePass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\r\n\r\n \t\tthis.material.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\r\n\r\n \t\tif ( this.renderToScreen ) {\r\n\r\n \t\t\trenderer.setRenderTarget( null );\r\n \t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n \t\t\trenderer.setRenderTarget( writeBuffer );\r\n \t\t\tif ( this.clear ) renderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n \t},\r\n\r\n \tsetSize: function ( width, height ) {\r\n\r\n \t\tthis.uniforms.width.value = width;\r\n \t\tthis.uniforms.height.value = height;\r\n\r\n \t}\r\n} );\r\n\r\nexport { HalftonePass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/HalftonePass.js","<template>\r\n    <div class=\"webglPostprocessingRgbHalftone-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener noreferrer\">three.js</a> - RGB Halftone post-processing by\r\n\t\t\t<a href=\"https://github.com/meatbags\" target=\"_blank\">Xavier Burrow</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { HalftonePass } from '@/components/jsm/postprocessing/HalftonePass.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            renderer: null,\r\n            clock: null,\r\n            camera: null,\r\n            stats: null,\r\n\t\t\trotationSpeed: Math.PI / 64,\r\n            composer: null,\r\n            group: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.clock = new this.$THREE.Clock()\r\n            this.camera = new this.$THREE.PerspectiveCamera(75, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.z = 12\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            document.getElementsByClassName('webglPostprocessingRgbHalftone-container')[0].appendChild(this.renderer.domElement)\r\n            document.getElementsByClassName('webglPostprocessingRgbHalftone-container')[0].appendChild(this.stats.dom)\r\n            // camera controls\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.target.set(0, 0, 0)\r\n            controls.update()\r\n            // scene\r\n            var scene = new this.$THREE.Scene()\r\n            scene.background = new this.$THREE.Color(0x444444)\r\n            this.group = new this.$THREE.Group()\r\n            var floor = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(100, 1, 100), new this.$THREE.MeshPhongMaterial({}))\r\n            floor.position.y = - 10\r\n            var light = new this.$THREE.PointLight(0xffffff, 1.0, 50, 2)\r\n            light.position.y = 2\r\n            this.group.add(floor, light)\r\n            scene.add(this.group)\r\n            var mat = new this.$THREE.ShaderMaterial({\r\n                uniforms: {},\r\n                vertexShader: [\r\n                    \"varying vec2 vUV;\",\r\n                    \"varying vec3 vNormal;\",\r\n                    \"void main() {\",\r\n                    \"vUV = uv;\",\r\n                    \"vNormal = vec3(normal);\",\r\n                    \"gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\r\n                    \"}\"\r\n                ].join(\"\\n\"),\r\n                fragmentShader: [\r\n                    \"varying vec2 vUV;\",\r\n                    \"varying vec3 vNormal;\",\r\n                    \"void main() {\",\r\n                    \"vec4 c = vec4(abs(vNormal) + vec3(vUV, 0.0), 0.0);\",\r\n                    \"gl_FragColor = c;\",\r\n                    \"}\"\r\n                ].join(\"\\n\")\r\n            })\r\n            for (var i = 0; i < 50; ++ i) {\r\n                // fill scene with coloured cubes\r\n                var mesh = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(2, 2, 2), mat)\r\n                mesh.position.set(Math.random() * 16 - 8, Math.random() * 16 - 8, Math.random() * 16 - 8)\r\n                mesh.rotation.set(Math.random() * Math.PI * 2, Math.random() * Math.PI * 2, Math.random() * Math.PI * 2)\r\n                this.group.add(mesh)\r\n            }\r\n            // post-processing\r\n            this.composer = new EffectComposer(this.renderer)\r\n            var renderPass = new RenderPass(scene, this.camera)\r\n            var params = {\r\n                shape: 1,\r\n                radius: 4,\r\n                rotateR: Math.PI / 12,\r\n                rotateB: Math.PI / 12 * 2,\r\n                rotateG: Math.PI / 12 * 3,\r\n                scatter: 0,\r\n                blending: 1,\r\n                blendingMode: 1,\r\n                greyscale: false,\r\n                disable: false\r\n            }\r\n            var halftonePass = new HalftonePass(this.$webglInnerWidth, window.innerHeight, params)\r\n            this.composer.addPass(renderPass)\r\n            this.composer.addPass(halftonePass)\r\n            window.onresize = () => {\r\n                // resize this.composer\r\n                this.$onWindowResize(this.camera, this.renderer)\r\n                this.composer.setSize(window.innerWidth - 281, window.innerHeight)\r\n            }\r\n            // GUI\r\n            var controller = {\r\n                radius: halftonePass.uniforms[ \"radius\" ].value,\r\n                rotateR: halftonePass.uniforms[ \"rotateR\" ].value / (Math.PI / 180),\r\n                rotateG: halftonePass.uniforms[ \"rotateG\" ].value / (Math.PI / 180),\r\n                rotateB: halftonePass.uniforms[ \"rotateB\" ].value / (Math.PI / 180),\r\n                scatter: halftonePass.uniforms[ \"scatter\" ].value,\r\n                shape: halftonePass.uniforms[ \"shape\" ].value,\r\n                greyscale: halftonePass.uniforms[ \"greyscale\" ].value,\r\n                blending: halftonePass.uniforms[ \"blending\" ].value,\r\n                blendingMode: halftonePass.uniforms[ \"blendingMode\" ].value,\r\n                disable: halftonePass.uniforms[ \"disable\" ].value\r\n            }\r\n            function onGUIChange() {\r\n                // update uniforms\r\n                halftonePass.uniforms[ \"radius\" ].value = controller.radius\r\n                halftonePass.uniforms[ \"rotateR\" ].value = controller.rotateR * (Math.PI / 180)\r\n                halftonePass.uniforms[ \"rotateG\" ].value = controller.rotateG * (Math.PI / 180)\r\n                halftonePass.uniforms[ \"rotateB\" ].value = controller.rotateB * (Math.PI / 180)\r\n                halftonePass.uniforms[ \"scatter\" ].value = controller.scatter\r\n                halftonePass.uniforms[ \"shape\" ].value = controller.shape\r\n                halftonePass.uniforms[ \"greyscale\" ].value = controller.greyscale\r\n                halftonePass.uniforms[ \"blending\" ].value = controller.blending\r\n                halftonePass.uniforms[ \"blendingMode\" ].value = controller.blendingMode\r\n                halftonePass.uniforms[ \"disable\" ].value = controller.disable\r\n            }\r\n            this.gui = new GUI()\r\n            this.gui.add(controller, 'shape', { 'Dot': 1, 'Ellipse': 2, 'Line': 3, 'Square': 4 }).onChange(onGUIChange)\r\n            this.gui.add(controller, 'radius', 1, 25).onChange(onGUIChange)\r\n            this.gui.add(controller, 'rotateR', 0, 90).onChange(onGUIChange)\r\n            this.gui.add(controller, 'rotateG', 0, 90).onChange(onGUIChange)\r\n            this.gui.add(controller, 'rotateB', 0, 90).onChange(onGUIChange)\r\n            this.gui.add(controller, 'scatter', 0, 1, 0.01).onChange(onGUIChange)\r\n            this.gui.add(controller, 'greyscale').onChange(onGUIChange)\r\n            this.gui.add(controller, 'blending', 0, 1, 0.01).onChange(onGUIChange)\r\n            this.gui.add(controller, 'blendingMode', { 'Linear': 1, 'Multiply': 2, 'Add': 3, 'Lighter': 4, 'Darker': 5 }).onChange(onGUIChange)\r\n            this.gui.add(controller, 'disable').onChange(onGUIChange)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            var delta = this.clock.getDelta()\r\n            this.stats.update()\r\n            this.group.rotation.y += delta * this.rotationSpeed\r\n            this.composer.render(delta)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingRgbHalftone-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingRgbHalftone.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingRgbHalftone-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"three.js\")]),_vm._v(\" - RGB Halftone post-processing by\\n\\t\\t\\t\"),_c('a',{attrs:{\"href\":\"https://github.com/meatbags\",\"target\":\"_blank\"}},[_vm._v(\"Xavier Burrow\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-167bc7d7\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingRgbHalftone.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-167bc7d7\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingRgbHalftone.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingRgbHalftone.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingRgbHalftone.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-167bc7d7\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingRgbHalftone.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-167bc7d7\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingRgbHalftone.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}