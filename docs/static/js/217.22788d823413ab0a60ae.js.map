{"version":3,"sources":["webpack:///src/views/buffergeometry/webglBuffergeometryDrawrange.vue","webpack:///./src/views/buffergeometry/webglBuffergeometryDrawrange.vue?a252","webpack:///./src/views/buffergeometry/webglBuffergeometryDrawrange.vue"],"names":["webglBuffergeometryDrawrange","data","group","container","stats","particlesData","camera","scene","renderer","positions","colors","particles","pointCloud","particlePositions","linesMesh","maxParticleCount","particleCount","r","rHalf","effectController","showDots","showLines","minDistance","limitConnections","maxConnections","gui","mounted","this","init","animate","beforeDestroy","destroy","methods","initGUI","_this","dat_gui_module","add","onChange","value","visible","parseInt","setDrawRange","document","getElementById","$THREE","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","z","controls","OrbitControls","maxDistance","Scene","Group","helper","BoxHelper","Mesh","BoxBufferGeometry","material","color","setHex","blending","AdditiveBlending","transparent","segments","Float32Array","pMaterial","PointsMaterial","size","sizeAttenuation","BufferGeometry","i","x","Math","random","y","push","velocity","Vector3","numConnections","setAttribute","BufferAttribute","setUsage","DynamicDrawUsage","Points","geometry","computeBoundingSphere","LineBasicMaterial","vertexColors","LineSegments","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","appendChild","domElement","$Stats","dom","style","left","addEventListener","onWindowResize","$onWindowResize","vertexpos","colorpos","numConnected","particleData","j","particleDataB","dx","dy","dz","dist","sqrt","alpha","attributes","needsUpdate","requestAnimationFrame","update","render","time","Date","now","rotation","buffergeometry_webglBuffergeometryDrawrange","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/217.22788d823413ab0a60ae.js","sourcesContent":["<template>\r\n    <div class=\"webglBuffergeometryDrawrange-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl - buffergeometry drawrange<br/>\r\n\t\t\tby <a href=\"https://twitter.com/fernandojsg\">fernandojsg</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            group: null,\r\n            container: null,\r\n            stats: null,\r\n\t\t\tparticlesData: [],\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            positions: null,\r\n            colors: null,\r\n\t\t\tparticles: null,\r\n\t\t\tpointCloud: null,\r\n\t\t\tparticlePositions: null,\r\n\t\t\tlinesMesh: null,\r\n\t\t\tmaxParticleCount: 1000,\r\n\t\t\tparticleCount: 500,\r\n\t\t\tr: 800,\r\n\t\t\trHalf: null,\r\n\t\t\teffectController: {\r\n\t\t\t\tshowDots: true,\r\n\t\t\t\tshowLines: true,\r\n\t\t\t\tminDistance: 150,\r\n\t\t\t\tlimitConnections: false,\r\n\t\t\t\tmaxConnections: 20,\r\n\t\t\t\tparticleCount: 500\r\n            },\r\n            gui: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.rHalf = this.r / 2\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        initGUI() {\r\n            this.gui = new GUI()\r\n            this.gui.add(this.effectController, \"showDots\").onChange((value) => {\r\n                this.pointCloud.visible = value\r\n            })\r\n            this.gui.add(this.effectController, \"showLines\").onChange((value) => {\r\n                this.linesMesh.visible = value\r\n            })\r\n            this.gui.add(this.effectController, \"minDistance\", 10, 300)\r\n            this.gui.add(this.effectController, \"limitConnections\")\r\n            this.gui.add(this.effectController, \"maxConnections\", 0, 30, 1)\r\n            this.gui.add(this.effectController, \"particleCount\", 0, this.maxParticleCount, 1).onChange((value) => {\r\n                this.particleCount = parseInt(value)\r\n                this.particles.setDrawRange(0, this.particleCount)\r\n            })\r\n        },\r\n        init() {\r\n            this.initGUI()\r\n            this.container = document.getElementById('container')\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, this.$webglInnerWidth / window.innerHeight, 1, 4000)\r\n            this.camera.position.z = 1750\r\n            var controls = new OrbitControls(this.camera, this.container)\r\n            controls.minDistance = 1000\r\n            controls.maxDistance = 3000\r\n            this.scene = new this.$THREE.Scene()\r\n            this.group = new this.$THREE.Group()\r\n            this.scene.add(this.group)\r\n            var helper = new this.$THREE.BoxHelper(new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(this.r, this.r, this.r)))\r\n            helper.material.color.setHex(0x101010)\r\n            helper.material.blending = this.$THREE.AdditiveBlending\r\n            helper.material.transparent = true\r\n            this.group.add(helper)\r\n            var segments = this.maxParticleCount * this.maxParticleCount\r\n            this.positions = new Float32Array(segments * 3)\r\n            this.colors = new Float32Array(segments * 3)\r\n            var pMaterial = new this.$THREE.PointsMaterial({\r\n                color: 0xFFFFFF,\r\n                size: 3,\r\n                blending: this.$THREE.AdditiveBlending,\r\n                transparent: true,\r\n                sizeAttenuation: false\r\n            })\r\n            this.particles = new this.$THREE.BufferGeometry()\r\n            this.particlePositions = new Float32Array(this.maxParticleCount * 3)\r\n            for (var i = 0; i < this.maxParticleCount; i ++) {\r\n                var x = Math.random() * this.r - this.r / 2\r\n                var y = Math.random() * this.r - this.r / 2\r\n                var z = Math.random() * this.r - this.r / 2\r\n                this.particlePositions[ i * 3 ] = x\r\n                this.particlePositions[ i * 3 + 1 ] = y\r\n                this.particlePositions[ i * 3 + 2 ] = z\r\n                // add it to the geometry\r\n                this.particlesData.push({\r\n                    velocity: new this.$THREE.Vector3(- 1 + Math.random() * 2, - 1 + Math.random() * 2, - 1 + Math.random() * 2),\r\n                    numConnections: 0\r\n                })\r\n            }\r\n            this.particles.setDrawRange(0, this.particleCount)\r\n            this.particles.setAttribute('position', new this.$THREE.BufferAttribute(this.particlePositions, 3).setUsage(this.$THREE.DynamicDrawUsage))\r\n            // create the particle system\r\n            this.pointCloud = new this.$THREE.Points(this.particles, pMaterial)\r\n            this.group.add(this.pointCloud)\r\n            var geometry = new this.$THREE.BufferGeometry()\r\n            geometry.setAttribute('position', new this.$THREE.BufferAttribute(this.positions, 3).setUsage(this.$THREE.DynamicDrawUsage))\r\n            geometry.setAttribute('color', new this.$THREE.BufferAttribute(this.colors, 3).setUsage(this.$THREE.DynamicDrawUsage))\r\n            geometry.computeBoundingSphere()\r\n            geometry.setDrawRange(0, 0)\r\n            var material = new this.$THREE.LineBasicMaterial({\r\n                vertexColors: true,\r\n                blending: this.$THREE.AdditiveBlending,\r\n                transparent: true\r\n            })\r\n            this.linesMesh = new this.$THREE.LineSegments(geometry, material)\r\n            this.group.add(this.linesMesh)\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.container.appendChild(this.renderer.domElement)\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            var vertexpos = 0\r\n            var colorpos = 0\r\n            var numConnected = 0\r\n            for (var i = 0; i < this.particleCount; i ++)\r\n                this.particlesData[i].numConnections = 0\r\n            for (var i = 0; i < this.particleCount; i ++) {\r\n                // get the particle\r\n                var particleData = this.particlesData[i]\r\n                this.particlePositions[i * 3] += particleData.velocity.x\r\n                this.particlePositions[i * 3 + 1] += particleData.velocity.y\r\n                this.particlePositions[i * 3 + 2] += particleData.velocity.z\r\n                if (this.particlePositions[i * 3 + 1] < - this.rHalf || this.particlePositions[i * 3 + 1] > this.rHalf)\r\n                    particleData.velocity.y = - particleData.velocity.y\r\n                if (this.particlePositions[i * 3] < - this.rHalf || this.particlePositions[i * 3] > this.rHalf)\r\n                    particleData.velocity.x = - particleData.velocity.x\r\n                if (this.particlePositions[i * 3 + 2] < - this.rHalf || this.particlePositions[i * 3 + 2] > this.rHalf)\r\n                    particleData.velocity.z = - particleData.velocity.z\r\n                if (this.effectController.limitConnections && particleData.numConnections >= this.effectController.maxConnections)\r\n                    continue\r\n                // Check collision\r\n                for (var j = i + 1; j < this.particleCount; j ++) {\r\n                    var particleDataB = this.particlesData[j]\r\n                    if (this.effectController.limitConnections && particleDataB.numConnections >= this.effectController.maxConnections)\r\n                        continue\r\n                    var dx = this.particlePositions[i * 3] - this.particlePositions[j * 3]\r\n                    var dy = this.particlePositions[i * 3 + 1] - this.particlePositions[j * 3 + 1]\r\n                    var dz = this.particlePositions[i * 3 + 2] - this.particlePositions[j * 3 + 2]\r\n                    var dist = Math.sqrt(dx * dx + dy * dy + dz * dz)\r\n                    if (dist < this.effectController.minDistance) {\r\n                        particleData.numConnections ++\r\n                        particleDataB.numConnections ++\r\n                        var alpha = 1.0 - dist / this.effectController.minDistance\r\n                        this.positions[vertexpos ++] = this.particlePositions[i * 3]\r\n                        this.positions[vertexpos ++] = this.particlePositions[i * 3 + 1]\r\n                        this.positions[vertexpos ++] = this.particlePositions[i * 3 + 2]\r\n                        this.positions[vertexpos ++] = this.particlePositions[j * 3]\r\n                        this.positions[vertexpos ++] = this.particlePositions[j * 3 + 1]\r\n                        this.positions[vertexpos ++] = this.particlePositions[j * 3 + 2]\r\n                        this.colors[colorpos ++] = alpha\r\n                        this.colors[colorpos ++] = alpha\r\n                        this.colors[colorpos ++] = alpha\r\n                        this.colors[colorpos ++] = alpha\r\n                        this.colors[colorpos ++] = alpha\r\n                        this.colors[colorpos ++] = alpha\r\n                        numConnected ++\r\n                    }\r\n                }\r\n            }\r\n            this.linesMesh.geometry.setDrawRange(0, numConnected * 2)\r\n            this.linesMesh.geometry.attributes.position.needsUpdate = true\r\n            this.linesMesh.geometry.attributes.color.needsUpdate = true\r\n            this.pointCloud.geometry.attributes.position.needsUpdate = true\r\n            requestAnimationFrame(this.animate)\r\n            this.stats.update()\r\n            this.render()\r\n        },\r\n        render() {\r\n            var time = Date.now() * 0.001\r\n            this.group.rotation.y = time * 0.1\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglBuffergeometryDrawrange-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    margin-left: 0;\r\n}\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/buffergeometry/webglBuffergeometryDrawrange.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglBuffergeometryDrawrange-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl - buffergeometry drawrange\"),_c('br'),_vm._v(\"\\n\\t\\t\\tby \"),_c('a',{attrs:{\"href\":\"https://twitter.com/fernandojsg\"}},[_vm._v(\"fernandojsg\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-50a12b81\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/buffergeometry/webglBuffergeometryDrawrange.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-50a12b81\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglBuffergeometryDrawrange.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglBuffergeometryDrawrange.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglBuffergeometryDrawrange.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-50a12b81\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglBuffergeometryDrawrange.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-50a12b81\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/buffergeometry/webglBuffergeometryDrawrange.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}