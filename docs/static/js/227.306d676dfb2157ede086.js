webpackJsonp([227],{sZ87:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n("TWUs"),r={quicksortIP:function(t,e,n){for(var i,r,o=[],s=-1,a=0,h=t.length/e-1,l=0,c=0,u=0,p=function(n,i){for(n*=e,i*=e,u=0;u<e;u++)l=t[n+u],t[n+u]=t[i+u],t[i+u]=l},f=new Float32Array(e),d=new Float32Array(e);;)if(h-a<=25){for(r=a+1;r<=h;r++){for(c=0;c<e;c++)f[c]=t[r*e+c];for(i=r-1;i>=a&&t[i*e+n]>f[n];){for(c=0;c<e;c++)t[(i+1)*e+c]=t[i*e+c];i--}for(c=0;c<e;c++)t[(i+1)*e+c]=f[c]}if(-1==s)break;h=o[s--],a=o[s--]}else{for(r=h,p(a+h>>1,i=a+1),t[a*e+n]>t[h*e+n]&&p(a,h),t[i*e+n]>t[h*e+n]&&p(i,h),t[a*e+n]>t[i*e+n]&&p(a,i),c=0;c<e;c++)d[c]=t[i*e+c];for(;;){do{i++}while(t[i*e+n]<d[n]);do{r--}while(t[r*e+n]>d[n]);if(r<i)break;p(i,r)}for(c=0;c<e;c++)t[(a+1)*e+c]=t[r*e+c],t[r*e+c]=d[c];h-i+1>=r-a?(o[++s]=i,o[++s]=h,h=r-1):(o[++s]=a,o[++s]=r-1,a=i)}return t},
/**
 * k-d Tree for typed arrays (e.g. for Float32Array), in-place
 * provides fast nearest neighbour search
 * useful e.g. for a custom shader and/or BufferGeometry, saves tons of memory
 * has no insert and remove, only buildup and neares neighbour search
 *
 * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs
 *
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 *
 * Requires typed array quicksort
 *
 * Example:
 * points: [x, y, z, x, y, z, x, y, z, ...]
 * metric: function(a, b){	return Math.pow(a[0] - b[0], 2) +  Math.pow(a[1] - b[1], 2) +  Math.pow(a[2] - b[2], 2); }  //Manhatten distance
 * eleSize: 3 //because of (x, y, z)
 *
 * Further information (including mathematical properties)
 * http://en.wikipedia.org/wiki/Binary_tree
 * http://en.wikipedia.org/wiki/K-d_tree
 *
 * If you want to further minimize memory usage, remove Node.depth and replace in search algorithm with a traversal to root node (see comments at TypedArrayUtils.Kdtree.prototype.Node)
 */
Kdtree:function(t,e,n){var i=this,o=0,s=function(t,e){return t.subarray(e*n,e*n+n)};this.root=function t(e,a,h,l){var c,u,p=a%n,f=e.length/n;return a>o&&(o=a),0===f?null:1===f?new i.Node(s(e,0),a,h,l):(r.quicksortIP(e,n,p),c=Math.floor(f/2),(u=new i.Node(s(e,c),a,h,c+l)).left=t(e.subarray(0,c*n),a+1,u,l),u.right=t(e.subarray((c+1)*n,e.length),a+1,u,l+c+1),u)}(t,0,null,0),this.getMaxDepth=function(){return o},this.nearest=function(t,o,s){var a,h,l;if(l=new r.Kdtree.BinaryHeap(function(t){return-t[1]}),s)for(a=0;a<o;a+=1)l.push([null,s]);for(function i(r){var s,a,h,c,u=r.depth%n,p=e(t,r.obj),f=[];function d(t,e){l.push([t,e]),l.size()>o&&l.pop()}for(c=0;c<n;c+=1)c===r.depth%n?f[c]=t[c]:f[c]=r.obj[c];a=e(f,r.obj),null!==r.right||null!==r.left?(i(s=null===r.right?r.left:null===r.left?r.right:t[u]<r.obj[u]?r.left:r.right),(l.size()<o||p<l.peek()[1])&&d(r,p),(l.size()<o||Math.abs(a)<l.peek()[1])&&null!==(h=s===r.left?r.right:r.left)&&i(h)):(l.size()<o||p<l.peek()[1])&&d(r,p)}(i.root),h=[],a=0;a<o;a+=1)l.content[a][0]&&h.push([l.content[a][0],l.content[a][1]]);return h}}};r.Kdtree.prototype.Node=function(t,e,n,i){this.obj=t,this.left=null,this.right=null,this.parent=n,this.depth=e,this.pos=i},r.Kdtree.BinaryHeap=function(t){this.content=[],this.scoreFunction=t},r.Kdtree.BinaryHeap.prototype={push:function(t){this.content.push(t),this.bubbleUp(this.content.length-1)},pop:function(){var t=this.content[0],e=this.content.pop();return this.content.length>0&&(this.content[0]=e,this.sinkDown(0)),t},peek:function(){return this.content[0]},remove:function(t){for(var e=this.content.length,n=0;n<e;n++)if(this.content[n]==t){var i=this.content.pop();return void(n!=e-1&&(this.content[n]=i,this.scoreFunction(i)<this.scoreFunction(t)?this.bubbleUp(n):this.sinkDown(n)))}throw new Error("Node not found.")},size:function(){return this.content.length},bubbleUp:function(t){for(var e=this.content[t];t>0;){var n=Math.floor((t+1)/2)-1,i=this.content[n];if(!(this.scoreFunction(e)<this.scoreFunction(i)))break;this.content[n]=e,this.content[t]=i,t=n}},sinkDown:function(t){for(var e=this.content.length,n=this.content[t],i=this.scoreFunction(n);;){var r=2*(t+1),o=r-1,s=null;if(o<e){var a=this.content[o],h=this.scoreFunction(a);h<i&&(s=o)}if(r<e){var l=this.content[r];this.scoreFunction(l)<(null===s?i:h)&&(s=r)}if(null===s)break;this.content[t]=this.content[s],this.content[s]=n,t=s}}};var o={data:function(){return{vertexshader:null,fragmentshader:null,camera:null,scene:null,renderer:null,controls:null,amountOfParticles:5e5,maxDistance:null,positions:null,alphas:null,particles:null,_particleGeom:null,kdtree:null,clock:null}},mounted:function(){this.vertexshader="\n            //uniform float zoom;\n\t\t\tattribute float alpha;\n\t\t\tvarying float vAlpha;\n\t\t\tvoid main() {\n\t\t\t\tvAlpha = 1.0 - alpha;\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\t\t\t\tgl_PointSize = 4.0 * (300.0 / -mvPosition.z);\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n            }",this.fragmentshader="\n            uniform sampler2D tex1;\n\t\t\tvarying float vAlpha;\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = texture2D(tex1, gl_PointCoord);\n\t\t\t\tgl_FragColor.r = (1.0 - gl_FragColor.r) * vAlpha + gl_FragColor.r;\n            }",this.maxDistance=Math.pow(120,2),this.clock=new this.$THREE.Clock,this.init(),this.animate()},methods:{init:function(){this.camera=new this.$THREE.PerspectiveCamera(75,this.$webglInnerWidth/window.innerHeight,1,1e6),this.scene=new this.$THREE.Scene;var t=new this.$THREE.CubeTextureLoader;t.setPath("static/textures/cube/skyboxsun25deg/");var e=t.load(["px.jpg","nx.jpg","py.jpg","ny.jpg","pz.jpg","nz.jpg"]);this.scene.background=e,this.renderer=new this.$THREE.WebGLRenderer,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),document.getElementsByClassName("webglNearestneighbour-container")[0].appendChild(this.renderer.domElement),this.controls=new i.a(this.camera,this.renderer.domElement),this.controls.movementSpeed=100,this.controls.lookSpeed=.1,this.controls.lookAt(500,500,500);var n=(new this.$THREE.TextureLoader).load("static/textures/crate.gif");n.minFilter=this.$THREE.LinearMipmapLinearFilter,n.magFilter=this.$THREE.LinearFilter;var o=new this.$THREE.ShaderMaterial({uniforms:{tex1:{value:n},zoom:{value:9}},vertexShader:this.vertexshader,fragmentShader:this.fragmentshader,transparent:!0});this.positions=new Float32Array(3*this.amountOfParticles),this.alphas=new Float32Array(this.amountOfParticles),this._particleGeom=new this.$THREE.BufferGeometry,this._particleGeom.setAttribute("position",new this.$THREE.BufferAttribute(this.positions,3)),this._particleGeom.setAttribute("alpha",new this.$THREE.BufferAttribute(this.alphas,1)),this.particles=new this.$THREE.Points(this._particleGeom,o);for(var s=0;s<this.amountOfParticles;s++)this.positions[3*s+0]=1e3*Math.random(),this.positions[3*s+1]=1e3*Math.random(),this.positions[3*s+2]=1e3*Math.random(),this.alphas[s]=1;var a=(new Date).getTime();this.kdtree=new r.Kdtree(this.positions,this.distanceFunction,3),console.log("TIME building kdtree",(new Date).getTime()-a),this.scene.add(this.particles),window.addEventListener("resize",this.onWindowResize,!1)},onWindowResize:function(){this.$onWindowResize(this.camera,this.renderer),this.controls.handleResize()},animate:function(){requestAnimationFrame(this.animate),this.displayNearest(this.camera.position),this.controls.update(this.clock.getDelta()),this.renderer.render(this.scene,this.camera)},displayNearest:function(t){var e=this.kdtree.nearest([t.x,t.y,t.z],100,this.maxDistance),n=new this.$THREE.Frustum,i=new this.$THREE.Matrix4;i.multiplyMatrices(this.camera.projectionMatrix,this.camera.matrixWorldInverse),n.setFromProjectionMatrix(i);for(var r=0,o=e.length;r<o;r++){var s=e[r],a=(new this.$THREE.Vector3).fromArray(s[0].obj);if(n.containsPoint(a)){var h=s[0].pos;this.alphas[h]=1/this.maxDistance*s[1],this._particleGeom.attributes.alpha.needsUpdate=!0}}},distanceFunction:function(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2)}}},s={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"webglNearestneighbour-container"},[e("div",{attrs:{id:"info"}},[e("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener"}},[this._v("three.js")]),this._v(" webgl - typed arrays"),e("br"),this._v("\n\t\t\tnearest neighbour for 500,000 sprites\n\t\t")])])}]};var a=n("VU/8")(o,s,!1,function(t){n("uyBg")},"data-v-4b335b5c",null);e.default=a.exports},uyBg:function(t,e){}});
//# sourceMappingURL=227.306d676dfb2157ede086.js.map