{"version":3,"sources":["webpack:///./src/components/jsm/utils/TypedArrayUtils.js","webpack:///src/views/nearestneighbour/webglNearestneighbour.vue","webpack:///./src/views/nearestneighbour/webglNearestneighbour.vue?69a7","webpack:///./src/views/nearestneighbour/webglNearestneighbour.vue"],"names":["TypedArrayUtils","arr","eleSize","orderElement","i","j","stack","sp","left","right","length","tmp","x","y","swapF","a","b","swap","Float32Array","temp","points","metric","scope","this","maxDepth","getPointSet","pos","subarray","root","buildTree","depth","parent","median","node","dim","plength","Node","quicksortIP","Math","floor","getMaxDepth","nearest","point","maxNodes","maxDistance","result","bestNodes","Kdtree","BinaryHeap","e","push","nearestSearch","bestChild","linearDistance","otherChild","dimension","ownDistance","obj","linearPoint","saveNode","distance","size","pop","peek","abs","content","prototype","scoreFunction","element","bubbleUp","end","sinkDown","remove","len","Error","n","parentN","elemScore","child2N","child1N","child1","child1Score","child2","webglNearestneighbour","data","vertexshader","fragmentshader","camera","scene","renderer","controls","amountOfParticles","positions","alphas","particles","_particleGeom","kdtree","clock","mounted","pow","$THREE","Clock","init","animate","methods","PerspectiveCamera","$webglInnerWidth","window","innerHeight","Scene","cubeTextureLoader","CubeTextureLoader","setPath","cubeTexture","load","background","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","document","getElementsByClassName","appendChild","domElement","FirstPersonControls","movementSpeed","lookSpeed","lookAt","imagePreviewTexture","TextureLoader","minFilter","LinearMipmapLinearFilter","magFilter","LinearFilter","pointShaderMaterial","ShaderMaterial","uniforms","tex1","value","zoom","vertexShader","fragmentShader","transparent","BufferGeometry","setAttribute","BufferAttribute","Points","random","measureStart","Date","getTime","distanceFunction","console","log","add","addEventListener","onWindowResize","$onWindowResize","handleResize","requestAnimationFrame","displayNearest","position","update","getDelta","render","imagePositionsInRange","z","_frustum","Frustum","_projScreenMatrix","Matrix4","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","il","object","objectPoint","Vector3","fromArray","containsPoint","objectIndex","attributes","alpha","needsUpdate","nearestneighbour_webglNearestneighbour","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/227.306d676dfb2157ede086.js","sourcesContent":["var TypedArrayUtils = {};\r\n\r\n/**\r\n * In-place quicksort for typed arrays (e.g. for Float32Array)\r\n * provides fast sorting\r\n * useful e.g. for a custom shader and/or BufferGeometry\r\n *\r\n * Complexity: http://bigocheatsheet.com/ see Quicksort\r\n *\r\n * Example:\r\n * points: [x, y, z, x, y, z, x, y, z, ...]\r\n * eleSize: 3 //because of (x, y, z)\r\n * orderElement: 0 //order according to x\r\n */\r\n\r\nTypedArrayUtils.quicksortIP = function ( arr, eleSize, orderElement ) {\r\n\r\n\tvar stack = [];\r\n\tvar sp = - 1;\r\n\tvar left = 0;\r\n\tvar right = arr.length / eleSize - 1;\r\n\tvar tmp = 0.0, x = 0, y = 0;\r\n\r\n\tvar swapF = function ( a, b ) {\r\n\r\n\t\ta *= eleSize; b *= eleSize;\r\n\r\n\t\tfor ( y = 0; y < eleSize; y ++ ) {\r\n\r\n\t\t\ttmp = arr[ a + y ];\r\n\t\t\tarr[ a + y ] = arr[ b + y ];\r\n\t\t\tarr[ b + y ] = tmp;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar i, j, swap = new Float32Array( eleSize ), temp = new Float32Array( eleSize );\r\n\r\n\twhile ( true ) {\r\n\r\n\t\tif ( right - left <= 25 ) {\r\n\r\n\t\t\tfor ( j = left + 1; j <= right; j ++ ) {\r\n\r\n\t\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\t\tswap[ x ] = arr[ j * eleSize + x ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti = j - 1;\r\n\r\n\t\t\t\twhile ( i >= left && arr[ i * eleSize + orderElement ] > swap[ orderElement ] ) {\r\n\r\n\t\t\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\t\t\tarr[ ( i + 1 ) * eleSize + x ] = arr[ i * eleSize + x ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\t\tarr[ ( i + 1 ) * eleSize + x ] = swap[ x ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( sp == - 1 ) break;\r\n\r\n\t\t\tright = stack[ sp -- ]; //?\r\n\t\t\tleft = stack[ sp -- ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar median = ( left + right ) >> 1;\r\n\r\n\t\t\ti = left + 1;\r\n\t\t\tj = right;\r\n\r\n\t\t\tswapF( median, i );\r\n\r\n\t\t\tif ( arr[ left * eleSize + orderElement ] > arr[ right * eleSize + orderElement ] ) {\r\n\r\n\t\t\t\tswapF( left, right );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arr[ i * eleSize + orderElement ] > arr[ right * eleSize + orderElement ] ) {\r\n\r\n\t\t\t\tswapF( i, right );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arr[ left * eleSize + orderElement ] > arr[ i * eleSize + orderElement ] ) {\r\n\r\n\t\t\t\tswapF( left, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\ttemp[ x ] = arr[ i * eleSize + x ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( true ) {\r\n\r\n\t\t\t\tdo i ++; while ( arr[ i * eleSize + orderElement ] < temp[ orderElement ] );\r\n\t\t\t\tdo j --; while ( arr[ j * eleSize + orderElement ] > temp[ orderElement ] );\r\n\r\n\t\t\t\tif ( j < i ) break;\r\n\r\n\t\t\t\tswapF( i, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\tarr[ ( left + 1 ) * eleSize + x ] = arr[ j * eleSize + x ];\r\n\t\t\t\tarr[ j * eleSize + x ] = temp[ x ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( right - i + 1 >= j - left ) {\r\n\r\n\t\t\t\tstack[ ++ sp ] = i;\r\n\t\t\t\tstack[ ++ sp ] = right;\r\n\t\t\t\tright = j - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstack[ ++ sp ] = left;\r\n\t\t\t\tstack[ ++ sp ] = j - 1;\r\n\t\t\t\tleft = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn arr;\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * k-d Tree for typed arrays (e.g. for Float32Array), in-place\r\n * provides fast nearest neighbour search\r\n * useful e.g. for a custom shader and/or BufferGeometry, saves tons of memory\r\n * has no insert and remove, only buildup and neares neighbour search\r\n *\r\n * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs\r\n *\r\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\r\n *\r\n * Requires typed array quicksort\r\n *\r\n * Example:\r\n * points: [x, y, z, x, y, z, x, y, z, ...]\r\n * metric: function(a, b){\treturn Math.pow(a[0] - b[0], 2) +  Math.pow(a[1] - b[1], 2) +  Math.pow(a[2] - b[2], 2); }  //Manhatten distance\r\n * eleSize: 3 //because of (x, y, z)\r\n *\r\n * Further information (including mathematical properties)\r\n * http://en.wikipedia.org/wiki/Binary_tree\r\n * http://en.wikipedia.org/wiki/K-d_tree\r\n *\r\n * If you want to further minimize memory usage, remove Node.depth and replace in search algorithm with a traversal to root node (see comments at TypedArrayUtils.Kdtree.prototype.Node)\r\n */\r\n\r\nTypedArrayUtils.Kdtree = function ( points, metric, eleSize ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar maxDepth = 0;\r\n\r\n\tvar getPointSet = function ( points, pos ) {\r\n\r\n\t\treturn points.subarray( pos * eleSize, pos * eleSize + eleSize );\r\n\r\n\t};\r\n\r\n\tfunction buildTree( points, depth, parent, pos ) {\r\n\r\n\t\tvar dim = depth % eleSize,\r\n\t\t\tmedian,\r\n\t\t\tnode,\r\n\t\t\tplength = points.length / eleSize;\r\n\r\n\t\tif ( depth > maxDepth ) maxDepth = depth;\r\n\r\n\t\tif ( plength === 0 ) return null;\r\n\t\tif ( plength === 1 ) {\r\n\r\n\t\t\treturn new scope.Node( getPointSet( points, 0 ), depth, parent, pos );\r\n\r\n\t\t}\r\n\r\n\t\tTypedArrayUtils.quicksortIP( points, eleSize, dim );\r\n\r\n\t\tmedian = Math.floor( plength / 2 );\r\n\r\n\t\tnode = new scope.Node( getPointSet( points, median ), depth, parent, median + pos );\r\n\t\tnode.left = buildTree( points.subarray( 0, median * eleSize ), depth + 1, node, pos );\r\n\t\tnode.right = buildTree( points.subarray( ( median + 1 ) * eleSize, points.length ), depth + 1, node, pos + median + 1 );\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tthis.root = buildTree( points, 0, null, 0 );\r\n\r\n\tthis.getMaxDepth = function () {\r\n\r\n\t\treturn maxDepth;\r\n\r\n\t};\r\n\r\n\tthis.nearest = function ( point, maxNodes, maxDistance ) {\r\n\r\n\t\t /* point: array of size eleSize\r\n\t\t\tmaxNodes: max amount of nodes to return\r\n\t\t\tmaxDistance: maximum distance to point result nodes should have\r\n\t\t\tcondition (not implemented): function to test node before it's added to the result list, e.g. test for view frustum\r\n\t\t*/\r\n\r\n\t\tvar i,\r\n\t\t\tresult,\r\n\t\t\tbestNodes;\r\n\r\n\t\tbestNodes = new TypedArrayUtils.Kdtree.BinaryHeap(\r\n\r\n\t\t\tfunction ( e ) {\r\n\r\n\t\t\t\treturn - e[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t);\r\n\r\n\t\tfunction nearestSearch( node ) {\r\n\r\n\t\t\tvar bestChild,\r\n\t\t\t\tdimension = node.depth % eleSize,\r\n\t\t\t\townDistance = metric( point, node.obj ),\r\n\t\t\t\tlinearDistance = 0,\r\n\t\t\t\totherChild,\r\n\t\t\t\ti,\r\n\t\t\t\tlinearPoint = [];\r\n\r\n\t\t\tfunction saveNode( node, distance ) {\r\n\r\n\t\t\t\tbestNodes.push( [ node, distance ] );\r\n\r\n\t\t\t\tif ( bestNodes.size() > maxNodes ) {\r\n\r\n\t\t\t\t\tbestNodes.pop();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0; i < eleSize; i += 1 ) {\r\n\r\n\t\t\t\tif ( i === node.depth % eleSize ) {\r\n\r\n\t\t\t\t\tlinearPoint[ i ] = point[ i ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlinearPoint[ i ] = node.obj[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlinearDistance = metric( linearPoint, node.obj );\r\n\r\n\t\t\t// if it's a leaf\r\n\r\n\t\t\tif ( node.right === null && node.left === null ) {\r\n\r\n\t\t\t\tif ( bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ] ) {\r\n\r\n\t\t\t\t\tsaveNode( node, ownDistance );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( node.right === null ) {\r\n\r\n\t\t\t\tbestChild = node.left;\r\n\r\n\t\t\t} else if ( node.left === null ) {\r\n\r\n\t\t\t\tbestChild = node.right;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( point[ dimension ] < node.obj[ dimension ] ) {\r\n\r\n\t\t\t\t\tbestChild = node.left;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbestChild = node.right;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// recursive search\r\n\r\n\t\t\tnearestSearch( bestChild );\r\n\r\n\t\t\tif ( bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ] ) {\r\n\r\n\t\t\t\tsaveNode( node, ownDistance );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if there's still room or the current distance is nearer than the best distance\r\n\r\n\t\t\tif ( bestNodes.size() < maxNodes || Math.abs( linearDistance ) < bestNodes.peek()[ 1 ] ) {\r\n\r\n\t\t\t\tif ( bestChild === node.left ) {\r\n\r\n\t\t\t\t\totherChild = node.right;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\totherChild = node.left;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( otherChild !== null ) {\r\n\r\n\t\t\t\t\tnearestSearch( otherChild );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( maxDistance ) {\r\n\r\n\t\t\tfor ( i = 0; i < maxNodes; i += 1 ) {\r\n\r\n\t\t\t\tbestNodes.push( [ null, maxDistance ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnearestSearch( scope.root );\r\n\r\n\t\tresult = [];\r\n\r\n\t\tfor ( i = 0; i < maxNodes; i += 1 ) {\r\n\r\n\t\t\tif ( bestNodes.content[ i ][ 0 ] ) {\r\n\r\n\t\t\t\tresult.push( [ bestNodes.content[ i ][ 0 ], bestNodes.content[ i ][ 1 ] ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**\r\n * If you need to free up additional memory and agree with an additional O( log n ) traversal time you can get rid of \"depth\" and \"pos\" in Node:\r\n * Depth can be easily done by adding 1 for every parent (care: root node has depth 0, not 1)\r\n * Pos is a bit tricky: Assuming the tree is balanced (which is the case when after we built it up), perform the following steps:\r\n *   By traversing to the root store the path e.g. in a bit pattern (01001011, 0 is left, 1 is right)\r\n *   From buildTree we know that \"median = Math.floor( plength / 2 );\", therefore for each bit...\r\n *     0: amountOfNodesRelevantForUs = Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *     1: amountOfNodesRelevantForUs = Math.ceil( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *        pos += Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *     when recursion done, we still need to add all left children of target node:\r\n *        pos += Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *        and I think you need to +1 for the current position, not sure.. depends, try it out ^^\r\n *\r\n * I experienced that for 200'000 nodes you can get rid of 4 MB memory each, leading to 8 MB memory saved.\r\n */\r\nTypedArrayUtils.Kdtree.prototype.Node = function ( obj, depth, parent, pos ) {\r\n\r\n\tthis.obj = obj;\r\n\tthis.left = null;\r\n\tthis.right = null;\r\n\tthis.parent = parent;\r\n\tthis.depth = depth;\r\n\tthis.pos = pos;\r\n\r\n};\r\n\r\n/**\r\n * Binary heap implementation\r\n */\r\n\r\nTypedArrayUtils.Kdtree.BinaryHeap = function ( scoreFunction ) {\r\n\r\n\tthis.content = [];\r\n\tthis.scoreFunction = scoreFunction;\r\n\r\n};\r\n\r\nTypedArrayUtils.Kdtree.BinaryHeap.prototype = {\r\n\r\n\tpush: function ( element ) {\r\n\r\n\t\t// Add the new element to the end of the array.\r\n\t\tthis.content.push( element );\r\n\r\n\t\t// Allow it to bubble up.\r\n\t\tthis.bubbleUp( this.content.length - 1 );\r\n\r\n\t},\r\n\r\n\tpop: function () {\r\n\r\n\t\t// Store the first element so we can return it later.\r\n\t\tvar result = this.content[ 0 ];\r\n\r\n\t\t// Get the element at the end of the array.\r\n\t\tvar end = this.content.pop();\r\n\r\n\t\t// If there are any elements left, put the end element at the\r\n\t\t// start, and let it sink down.\r\n\t\tif ( this.content.length > 0 ) {\r\n\r\n\t\t\tthis.content[ 0 ] = end;\r\n\t\t\tthis.sinkDown( 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tpeek: function () {\r\n\r\n\t\treturn this.content[ 0 ];\r\n\r\n\t},\r\n\r\n\tremove: function ( node ) {\r\n\r\n\t\tvar len = this.content.length;\r\n\r\n\t\t// To remove a value, we must search through the array to find it.\r\n\t\tfor ( var i = 0; i < len; i ++ ) {\r\n\r\n\t\t\tif ( this.content[ i ] == node ) {\r\n\r\n\t\t\t\t// When it is found, the process seen in 'pop' is repeated\r\n\t\t\t\t// to fill up the hole.\r\n\t\t\t\tvar end = this.content.pop();\r\n\r\n\t\t\t\tif ( i != len - 1 ) {\r\n\r\n\t\t\t\t\tthis.content[ i ] = end;\r\n\r\n\t\t\t\t\tif ( this.scoreFunction( end ) < this.scoreFunction( node ) ) {\r\n\r\n\t\t\t\t\t\tthis.bubbleUp( i );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.sinkDown( i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( \"Node not found.\" );\r\n\r\n\t},\r\n\r\n\tsize: function () {\r\n\r\n\t\treturn this.content.length;\r\n\r\n\t},\r\n\r\n\tbubbleUp: function ( n ) {\r\n\r\n\t\t// Fetch the element that has to be moved.\r\n\t\tvar element = this.content[ n ];\r\n\r\n\t\t// When at 0, an element can not go up any further.\r\n\t\twhile ( n > 0 ) {\r\n\r\n\t\t\t// Compute the parent element's index, and fetch it.\r\n\t\t\tvar parentN = Math.floor( ( n + 1 ) / 2 ) - 1,\r\n\t\t\t\tparent = this.content[ parentN ];\r\n\r\n\t\t\t// Swap the elements if the parent is greater.\r\n\t\t\tif ( this.scoreFunction( element ) < this.scoreFunction( parent ) ) {\r\n\r\n\t\t\t\tthis.content[ parentN ] = element;\r\n\t\t\t\tthis.content[ n ] = parent;\r\n\r\n\t\t\t\t// Update 'n' to continue at the new position.\r\n\t\t\t\tn = parentN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Found a parent that is less, no need to move it further.\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tsinkDown: function ( n ) {\r\n\r\n\t\t// Look up the target element and its score.\r\n\t\tvar length = this.content.length,\r\n\t\t\telement = this.content[ n ],\r\n\t\t\telemScore = this.scoreFunction( element );\r\n\r\n\t\twhile ( true ) {\r\n\r\n\t\t\t// Compute the indices of the child elements.\r\n\t\t\tvar child2N = ( n + 1 ) * 2, child1N = child2N - 1;\r\n\r\n\t\t\t// This is used to store the new position of the element, if any.\r\n\t\t\tvar swap = null;\r\n\r\n\t\t\t// If the first child exists (is inside the array)...\r\n\t\t\tif ( child1N < length ) {\r\n\r\n\t\t\t\t// Look it up and compute its score.\r\n\t\t\t\tvar child1 = this.content[ child1N ],\r\n\t\t\t\t\tchild1Score = this.scoreFunction( child1 );\r\n\r\n\t\t\t\t// If the score is less than our element's, we need to swap.\r\n\t\t\t\tif ( child1Score < elemScore ) swap = child1N;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Do the same checks for the other child.\r\n\t\t\tif ( child2N < length ) {\r\n\r\n\t\t\t\tvar child2 = this.content[ child2N ],\r\n\t\t\t\t\tchild2Score = this.scoreFunction( child2 );\r\n\r\n\t\t\t\tif ( child2Score < ( swap === null ? elemScore : child1Score ) ) swap = child2N;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// If the element needs to be moved, swap it, and continue.\r\n\t\t\tif ( swap !== null ) {\r\n\r\n\t\t\t\tthis.content[ n ] = this.content[ swap ];\r\n\t\t\t\tthis.content[ swap ] = element;\r\n\t\t\t\tn = swap;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Otherwise, we are done.\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { TypedArrayUtils };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/utils/TypedArrayUtils.js","<template>\r\n    <div class=\"webglNearestneighbour-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl - typed arrays<br/>\r\n\t\t\tnearest neighbour for 500,000 sprites\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { FirstPersonControls } from '@/components/jsm/controls/FirstPersonControls.js'\r\nimport { TypedArrayUtils } from '@/components/jsm/utils/TypedArrayUtils.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            vertexshader: null,\r\n            fragmentshader: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tcontrols: null,\r\n            amountOfParticles: 500000,\r\n            maxDistance: null,\r\n            positions: null,\r\n            alphas: null,\r\n            particles: null,\r\n            _particleGeom: null,\r\n\t\t\tkdtree: null,\r\n\t\t\tclock: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.vertexshader = `\r\n            //uniform float zoom;\r\n\t\t\tattribute float alpha;\r\n\t\t\tvarying float vAlpha;\r\n\t\t\tvoid main() {\r\n\t\t\t\tvAlpha = 1.0 - alpha;\r\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n\t\t\t\tgl_PointSize = 4.0 * (300.0 / -mvPosition.z);\r\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\r\n            }`\r\n        this.fragmentshader = `\r\n            uniform sampler2D tex1;\r\n\t\t\tvarying float vAlpha;\r\n\t\t\tvoid main() {\r\n\t\t\t\tgl_FragColor = texture2D(tex1, gl_PointCoord);\r\n\t\t\t\tgl_FragColor.r = (1.0 - gl_FragColor.r) * vAlpha + gl_FragColor.r;\r\n            }`\r\n        this.maxDistance = Math.pow(120, 2)\r\n        this.clock = new this.$THREE.Clock()\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.camera = new this.$THREE.PerspectiveCamera(75, this.$webglInnerWidth / window.innerHeight, 1, 1000000)\r\n            this.scene = new this.$THREE.Scene()\r\n            // add a skybox background\r\n            var cubeTextureLoader = new this.$THREE.CubeTextureLoader()\r\n            cubeTextureLoader.setPath('static/textures/cube/skyboxsun25deg/')\r\n            var cubeTexture = cubeTextureLoader.load([\r\n                'px.jpg', 'nx.jpg',\r\n                'py.jpg', 'ny.jpg',\r\n                'pz.jpg', 'nz.jpg',\r\n            ])\r\n            this.scene.background = cubeTexture\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            document.getElementsByClassName('webglNearestneighbour-container')[0].appendChild(this.renderer.domElement)\r\n            this.controls = new FirstPersonControls(this.camera, this.renderer.domElement)\r\n            this.controls.movementSpeed = 100\r\n            this.controls.lookSpeed = 0.1\r\n            this.controls.lookAt(500, 500, 500)\r\n            // create the custom shader\r\n            var textureLoader = new this.$THREE.TextureLoader()\r\n            var imagePreviewTexture = textureLoader.load('static/textures/crate.gif')\r\n            imagePreviewTexture.minFilter = this.$THREE.LinearMipmapLinearFilter\r\n            imagePreviewTexture.magFilter = this.$THREE.LinearFilter\r\n            var pointShaderMaterial = new this.$THREE.ShaderMaterial({\r\n                uniforms: {\r\n                    tex1: { value: imagePreviewTexture },\r\n                    zoom: { value: 9.0 }\r\n                },\r\n                vertexShader: this.vertexshader,\r\n                fragmentShader: this.fragmentshader,\r\n                transparent: true\r\n            })\r\n            //create particles with buffer geometry\r\n            this.positions = new Float32Array(this.amountOfParticles * 3)\r\n            this.alphas = new Float32Array(this.amountOfParticles)\r\n            this._particleGeom = new this.$THREE.BufferGeometry()\r\n            this._particleGeom.setAttribute('position', new this.$THREE.BufferAttribute(this.positions, 3))\r\n            this._particleGeom.setAttribute('alpha', new this.$THREE.BufferAttribute(this.alphas, 1))\r\n            this.particles = new this.$THREE.Points(this._particleGeom, pointShaderMaterial)\r\n            for (var x = 0; x < this.amountOfParticles; x ++) {\r\n                this.positions[ x * 3 + 0 ] = Math.random() * 1000\r\n                this.positions[ x * 3 + 1 ] = Math.random() * 1000\r\n                this.positions[ x * 3 + 2 ] = Math.random() * 1000\r\n                this.alphas[ x ] = 1.0\r\n            }\r\n            var measureStart = new Date().getTime()\r\n            // creating the kdtree takes a lot of time to execute, in turn the nearest neighbour search will be much faster\r\n            this.kdtree = new TypedArrayUtils.Kdtree(this.positions, this.distanceFunction, 3)\r\n            console.log('TIME building kdtree', new Date().getTime() - measureStart)\r\n            // display this.particles after the kd-tree was generated and the sorting of the positions-array is done\r\n            this.scene.add(this.particles)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.controls.handleResize()\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            //\r\n            this.displayNearest(this.camera.position)\r\n            this.controls.update(this.clock.getDelta())\r\n            this.renderer.render(this.scene, this.camera)\r\n        },\r\n        displayNearest(position) {\r\n            // take the nearest 200 around him. distance^2 'cause we use the manhattan distance and no square is applied in the distance function\r\n            var imagePositionsInRange = this.kdtree.nearest([ position.x, position.y, position.z ], 100, this.maxDistance)\r\n            // We combine the nearest neighbour with a view frustum. Doesn't make sense if we change the sprites not in our view... well maybe it does. Whatever you want.\r\n            var _frustum = new this.$THREE.Frustum()\r\n            var _projScreenMatrix = new this.$THREE.Matrix4()\r\n            _projScreenMatrix.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse)\r\n            _frustum.setFromProjectionMatrix(_projScreenMatrix)\r\n            for (var i = 0, il = imagePositionsInRange.length; i < il; i ++) {\r\n                var object = imagePositionsInRange[ i ]\r\n                var objectPoint = new this.$THREE.Vector3().fromArray(object[ 0 ].obj)\r\n                if (_frustum.containsPoint(objectPoint)) {\r\n                    var objectIndex = object[ 0 ].pos\r\n                    // set the alpha according to distance\r\n                    this.alphas[ objectIndex ] = 1.0 / this.maxDistance * object[ 1 ]\r\n                    // update the attribute\r\n                    this._particleGeom.attributes.alpha.needsUpdate = true\r\n                }\r\n            }\r\n        },\r\n        distanceFunction(a, b) {\r\n            return Math.pow(a[ 0 ] - b[ 0 ], 2) + Math.pow(a[ 1 ] - b[ 1 ], 2) + Math.pow(a[ 2 ] - b[ 2 ], 2)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglNearestneighbour-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/nearestneighbour/webglNearestneighbour.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglNearestneighbour-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl - typed arrays\"),_c('br'),_vm._v(\"\\n\\t\\t\\tnearest neighbour for 500,000 sprites\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4b335b5c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/nearestneighbour/webglNearestneighbour.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4b335b5c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglNearestneighbour.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglNearestneighbour.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglNearestneighbour.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4b335b5c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglNearestneighbour.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4b335b5c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/nearestneighbour/webglNearestneighbour.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}