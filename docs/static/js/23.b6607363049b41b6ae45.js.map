{"version":3,"sources":["webpack:///./src/components/jsm/shaders/SSAOShader.js","webpack:///./src/components/jsm/postprocessing/SSAOPass.js","webpack:///src/views/postprocessing/webglPostprocessingSsao.vue","webpack:///./src/views/postprocessing/webglPostprocessingSsao.vue?d134","webpack:///./src/views/postprocessing/webglPostprocessingSsao.vue","webpack:///./src/components/jsm/math/SimplexNoise.js"],"names":["SSAOShader","defines","PERSPECTIVE_CAMERA","KERNEL_SIZE","uniforms","tDiffuse","value","tNormal","tDepth","tNoise","kernel","cameraNear","cameraFar","resolution","Vector2","cameraProjectionMatrix","Matrix4","cameraInverseProjectionMatrix","kernelRadius","minDistance","maxDistance","vertexShader","join","fragmentShader","SSAODepthShader","SSAOBlurShader","SSAOPass","scene","camera","width","height","Pass","call","this","undefined","clear","kernelSize","noiseTexture","output","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","DepthTexture","type","UnsignedShortType","minFilter","NearestFilter","maxFilter","beautyRenderTarget","WebGLRenderTarget","LinearFilter","magFilter","format","RGBAFormat","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","ShaderMaterial","Object","assign","UniformsUtils","blending","NoBlending","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","MeshNormalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","Color","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","CustomBlending","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","Vector3","x","Math","random","y","z","normalize","scale","MathUtils","lerp","multiplyScalar","push","SimplexNoise","simplex","data","Float32Array","size","stride","noise","noise3d","DataTexture","FloatType","wrapS","RepeatWrapping","wrapT","cache","traverse","object","visible","isPoints","isLine","get","webglPostprocessingSsao","container","stats","composer","group","gui","mounted","init","animate","beforeDestroy","destroy","methods","document","createElement","getElementsByClassName","appendChild","$THREE","WebGLRenderer","$webglInnerWidth","window","innerHeight","domElement","PerspectiveCamera","position","Scene","background","add","DirectionalLight","HemisphereLight","Group","geometry","BoxBufferGeometry","MeshLambertMaterial","color","mesh","Mesh","rotation","setScalar","$Stats","dom","style","left","EffectComposer","ssaoPass","SSAOPass_SSAOPass","addPass","dat_gui_module","SSAO Only","SSAO Only + Blur","onChange","parseInt","min","max","addEventListener","onWindowResize","innerWidth","$onWindowResize","requestAnimationFrame","begin","end","timer","performance","now","postprocessing_webglPostprocessingSsao","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","r","grad3","grad4","p","floor","perm","dot","g","dot3","dot4","w","xin","yin","i1","j1","s","sqrt","j","G2","t","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4"],"mappings":"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","file":"static/js/23.b6607363049b41b6ae45.js","sourcesContent":["import {\r\n\tMatrix4,\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * References:\r\n * http://john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html\r\n * https://learnopengl.com/Advanced-Lighting/SSAO\r\n * https://github.com/McNopper/OpenGL/blob/master/Example28/shader/ssao.frag.glsl\r\n */\r\n\r\nvar SSAOShader = {\r\n\r\n\tdefines: {\r\n\t\t\"PERSPECTIVE_CAMERA\": 1,\r\n\t\t\"KERNEL_SIZE\": 32\r\n\t},\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"tNormal\": { value: null },\r\n\t\t\"tDepth\": { value: null },\r\n\t\t\"tNoise\": { value: null },\r\n\t\t\"kernel\": { value: null },\r\n\t\t\"cameraNear\": { value: null },\r\n\t\t\"cameraFar\": { value: null },\r\n\t\t\"resolution\": { value: new Vector2() },\r\n\t\t\"cameraProjectionMatrix\": { value: new Matrix4() },\r\n\t\t\"cameraInverseProjectionMatrix\": { value: new Matrix4() },\r\n\t\t\"kernelRadius\": { value: 8 },\r\n\t\t\"minDistance\": { value: 0.005 },\r\n\t\t\"maxDistance\": { value: 0.05 },\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform sampler2D tNormal;\",\r\n\t\t\"uniform sampler2D tDepth;\",\r\n\t\t\"uniform sampler2D tNoise;\",\r\n\r\n\t\t\"uniform vec3 kernel[ KERNEL_SIZE ];\",\r\n\r\n\t\t\"uniform vec2 resolution;\",\r\n\r\n\t\t\"uniform float cameraNear;\",\r\n\t\t\"uniform float cameraFar;\",\r\n\t\t\"uniform mat4 cameraProjectionMatrix;\",\r\n\t\t\"uniform mat4 cameraInverseProjectionMatrix;\",\r\n\r\n\t\t\"uniform float kernelRadius;\",\r\n\t\t\"uniform float minDistance;\", // avoid artifacts caused by neighbour fragments with minimal depth difference\r\n\t\t\"uniform float maxDistance;\", // avoid the influence of fragments which are too far away\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#include <packing>\",\r\n\r\n\t\t\"float getDepth( const in vec2 screenPosition ) {\",\r\n\r\n\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float getLinearDepth( const in vec2 screenPosition ) {\",\r\n\r\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\r\n\r\n\t\t\"\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\",\r\n\t\t\"\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\",\r\n\t\t\"\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\",\r\n\r\n\t\t\"\t#else\",\r\n\r\n\t\t\"\t\treturn texture2D( tDepth, screenPosition ).x;\",\r\n\r\n\t\t\"\t#endif\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"float getViewZ( const in float depth ) {\",\r\n\r\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\r\n\r\n\t\t\"\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\r\n\r\n\t\t\"\t#else\",\r\n\r\n\t\t\"\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\r\n\r\n\t\t\"\t#endif\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\r\n\r\n\t\t\"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\r\n\r\n\t\t\"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\r\n\r\n\t\t\"\tclipPosition *= clipW; // unprojection.\",\r\n\r\n\t\t\"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"vec3 getViewNormal( const in vec2 screenPosition ) {\",\r\n\r\n\t\t\"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tfloat depth = getDepth( vUv );\",\r\n\t\t\"\tfloat viewZ = getViewZ( depth );\",\r\n\r\n\t\t\"\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );\",\r\n\t\t\"\tvec3 viewNormal = getViewNormal( vUv );\",\r\n\r\n\t\t\" vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );\",\r\n\t\t\"\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;\",\r\n\r\n\t\t// compute matrix used to reorient a kernel vector\r\n\r\n\t\t\"\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );\",\r\n\t\t\"\tvec3 bitangent = cross( viewNormal, tangent );\",\r\n\t\t\"\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );\",\r\n\r\n\t\t\" float occlusion = 0.0;\",\r\n\r\n\t\t\" for ( int i = 0; i < KERNEL_SIZE; i ++ ) {\",\r\n\r\n\t\t\"\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];\", // reorient sample vector in view space\r\n\t\t\"\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );\", // calculate sample point\r\n\r\n\t\t\"\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );\", // project point and calculate NDC\r\n\t\t\"\t\tsamplePointNDC /= samplePointNDC.w;\",\r\n\r\n\t\t\"\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;\", // compute uv coordinates\r\n\r\n\t\t\"\t\tfloat realDepth = getLinearDepth( samplePointUv );\", // get linear depth from depth texture\r\n\t\t\"\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );\", // compute linear depth of the sample view Z value\r\n\t\t\"\t\tfloat delta = sampleDepth - realDepth;\",\r\n\r\n\t\t\"\t\tif ( delta > minDistance && delta < maxDistance ) {\", // if fragment is before sample point, increase occlusion\r\n\r\n\t\t\"\t\t\tocclusion += 1.0;\",\r\n\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nvar SSAODepthShader = {\r\n\r\n\tdefines: {\r\n\t\t\"PERSPECTIVE_CAMERA\": 1\r\n\t},\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDepth\": { value: null },\r\n\t\t\"cameraNear\": { value: null },\r\n\t\t\"cameraFar\": { value: null },\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDepth;\",\r\n\r\n\t\t\"uniform float cameraNear;\",\r\n\t\t\"uniform float cameraFar;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#include <packing>\",\r\n\r\n\t\t\"float getLinearDepth( const in vec2 screenPosition ) {\",\r\n\r\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\r\n\r\n\t\t\"\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\",\r\n\t\t\"\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\",\r\n\t\t\"\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\",\r\n\r\n\t\t\"\t#else\",\r\n\r\n\t\t\"\t\treturn texture2D( tDepth, screenPosition ).x;\",\r\n\r\n\t\t\"\t#endif\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tfloat depth = getLinearDepth( vUv );\",\r\n\t\t\"\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nvar SSAOBlurShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"resolution\": { value: new Vector2() }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"uniform vec2 resolution;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvec2 texelSize = ( 1.0 / resolution );\",\r\n\t\t\"\tfloat result = 0.0;\",\r\n\r\n\t\t\"\tfor ( int i = - 2; i <= 2; i ++ ) {\",\r\n\r\n\t\t\"\t\tfor ( int j = - 2; j <= 2; j ++ ) {\",\r\n\r\n\t\t\"\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;\",\r\n\t\t\"\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;\",\r\n\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { SSAOShader, SSAODepthShader, SSAOBlurShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/SSAOShader.js","import {\r\n\tAddEquation,\r\n\tColor,\r\n\tCustomBlending,\r\n\tDataTexture,\r\n\tDepthTexture,\r\n\tDstAlphaFactor,\r\n\tDstColorFactor,\r\n\tFloatType,\r\n\tLinearFilter,\r\n\tMathUtils,\r\n\tMeshNormalMaterial,\r\n\tNearestFilter,\r\n\tNoBlending,\r\n\tRGBAFormat,\r\n\tRepeatWrapping,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tUnsignedShortType,\r\n\tVector3,\r\n\tWebGLRenderTarget,\r\n\tZeroFactor\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\r\nimport { SSAOShader } from \"../shaders/SSAOShader.js\";\r\nimport { SSAOBlurShader } from \"../shaders/SSAOShader.js\";\r\nimport { SSAODepthShader } from \"../shaders/SSAOShader.js\";\r\nimport { CopyShader } from \"../shaders/CopyShader.js\";\r\n\r\nvar SSAOPass = function ( scene, camera, width, height ) {\r\n\r\n\tPass.call( this );\r\n\r\n\tthis.width = ( width !== undefined ) ? width : 512;\r\n\tthis.height = ( height !== undefined ) ? height : 512;\r\n\r\n\tthis.clear = true;\r\n\r\n\tthis.camera = camera;\r\n\tthis.scene = scene;\r\n\r\n\tthis.kernelRadius = 8;\r\n\tthis.kernelSize = 32;\r\n\tthis.kernel = [];\r\n\tthis.noiseTexture = null;\r\n\tthis.output = 0;\r\n\r\n\tthis.minDistance = 0.005;\r\n\tthis.maxDistance = 0.1;\r\n\r\n\tthis._visibilityCache = new Map();\r\n\r\n\t//\r\n\r\n\tthis.generateSampleKernel();\r\n\tthis.generateRandomKernelRotations();\r\n\r\n\t// beauty render target\r\n\r\n\tvar depthTexture = new DepthTexture();\r\n\tdepthTexture.type = UnsignedShortType;\r\n\tdepthTexture.minFilter = NearestFilter;\r\n\tdepthTexture.maxFilter = NearestFilter;\r\n\r\n\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\tformat: RGBAFormat\r\n\t} );\r\n\r\n\t// normal render target with depth buffer\r\n\r\n\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\r\n\t\tminFilter: NearestFilter,\r\n\t\tmagFilter: NearestFilter,\r\n\t\tformat: RGBAFormat,\r\n\t\tdepthTexture: depthTexture\r\n\t} );\r\n\r\n\t// ssao render target\r\n\r\n\tthis.ssaoRenderTarget = new WebGLRenderTarget( this.width, this.height, {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\tformat: RGBAFormat\r\n\t} );\r\n\r\n\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\r\n\r\n\t// ssao material\r\n\r\n\tif ( SSAOShader === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.SSAOPass: The pass relies on SSAOShader.' );\r\n\r\n\t}\r\n\r\n\tthis.ssaoMaterial = new ShaderMaterial( {\r\n\t\tdefines: Object.assign( {}, SSAOShader.defines ),\r\n\t\tuniforms: UniformsUtils.clone( SSAOShader.uniforms ),\r\n\t\tvertexShader: SSAOShader.vertexShader,\r\n\t\tfragmentShader: SSAOShader.fragmentShader,\r\n\t\tblending: NoBlending\r\n\t} );\r\n\r\n\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\r\n\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\r\n\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\r\n\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\r\n\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\r\n\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\r\n\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\r\n\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t// normal material\r\n\r\n\tthis.normalMaterial = new MeshNormalMaterial();\r\n\tthis.normalMaterial.blending = NoBlending;\r\n\r\n\t// blur material\r\n\r\n\tthis.blurMaterial = new ShaderMaterial( {\r\n\t\tdefines: Object.assign( {}, SSAOBlurShader.defines ),\r\n\t\tuniforms: UniformsUtils.clone( SSAOBlurShader.uniforms ),\r\n\t\tvertexShader: SSAOBlurShader.vertexShader,\r\n\t\tfragmentShader: SSAOBlurShader.fragmentShader\r\n\t} );\r\n\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\r\n\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\r\n\r\n\t// material for rendering the depth\r\n\r\n\tthis.depthRenderMaterial = new ShaderMaterial( {\r\n\t\tdefines: Object.assign( {}, SSAODepthShader.defines ),\r\n\t\tuniforms: UniformsUtils.clone( SSAODepthShader.uniforms ),\r\n\t\tvertexShader: SSAODepthShader.vertexShader,\r\n\t\tfragmentShader: SSAODepthShader.fragmentShader,\r\n\t\tblending: NoBlending\r\n\t} );\r\n\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\r\n\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\r\n\t// material for rendering the content of a render target\r\n\r\n\tthis.copyMaterial = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\r\n\t\tvertexShader: CopyShader.vertexShader,\r\n\t\tfragmentShader: CopyShader.fragmentShader,\r\n\t\ttransparent: true,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false,\r\n\t\tblendSrc: DstColorFactor,\r\n\t\tblendDst: ZeroFactor,\r\n\t\tblendEquation: AddEquation,\r\n\t\tblendSrcAlpha: DstAlphaFactor,\r\n\t\tblendDstAlpha: ZeroFactor,\r\n\t\tblendEquationAlpha: AddEquation\r\n\t} );\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\r\n\r\n\tthis.originalClearColor = new Color();\r\n\r\n};\r\n\r\nSSAOPass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: SSAOPass,\r\n\r\n\tdispose: function () {\r\n\r\n\t\t// dispose render targets\r\n\r\n\t\tthis.beautyRenderTarget.dispose();\r\n\t\tthis.normalRenderTarget.dispose();\r\n\t\tthis.ssaoRenderTarget.dispose();\r\n\t\tthis.blurRenderTarget.dispose();\r\n\r\n\t\t// dispose materials\r\n\r\n\t\tthis.normalMaterial.dispose();\r\n\t\tthis.blurMaterial.dispose();\r\n\t\tthis.copyMaterial.dispose();\r\n\t\tthis.depthRenderMaterial.dispose();\r\n\r\n\t\t// dipsose full screen quad\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t},\r\n\r\n\trender: function ( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\t// render beauty\r\n\r\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\r\n\t\trenderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\r\n\r\n\t\tthis.overrideVisibility();\r\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\r\n\t\tthis.restoreVisibility();\r\n\r\n\t\t// render SSAO\r\n\r\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\r\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\r\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\r\n\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\r\n\r\n\t\t// render blur\r\n\r\n\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\r\n\r\n\t\t// output result to screen\r\n\r\n\t\tswitch ( this.output ) {\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.SSAO:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Blur:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Beauty:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Depth:\r\n\r\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Normal:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Default:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = CustomBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\t// save original state\r\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\r\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\r\n\t\tvar originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t// setup pass state\r\n\t\trenderer.autoClear = false;\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad.material = passMaterial;\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// restore original state\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t},\r\n\r\n\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\r\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\r\n\t\tvar originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\r\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = overrideMaterial;\r\n\t\trenderer.render( this.scene, this.camera );\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t\t// restore original state\r\n\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.beautyRenderTarget.setSize( width, height );\r\n\t\tthis.ssaoRenderTarget.setSize( width, height );\r\n\t\tthis.normalRenderTarget.setSize( width, height );\r\n\t\tthis.blurRenderTarget.setSize( width, height );\r\n\r\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\r\n\r\n\t},\r\n\r\n\tgenerateSampleKernel: function () {\r\n\r\n\t\tvar kernelSize = this.kernelSize;\r\n\t\tvar kernel = this.kernel;\r\n\r\n\t\tfor ( var i = 0; i < kernelSize; i ++ ) {\r\n\r\n\t\t\tvar sample = new Vector3();\r\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\r\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\r\n\t\t\tsample.z = Math.random();\r\n\r\n\t\t\tsample.normalize();\r\n\r\n\t\t\tvar scale = i / kernelSize;\r\n\t\t\tscale = MathUtils.lerp( 0.1, 1, scale * scale );\r\n\t\t\tsample.multiplyScalar( scale );\r\n\r\n\t\t\tkernel.push( sample );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgenerateRandomKernelRotations: function () {\r\n\r\n\t\tvar width = 4, height = 4;\r\n\r\n\t\tif ( SimplexNoise === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on SimplexNoise.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar simplex = new SimplexNoise();\r\n\r\n\t\tvar size = width * height;\r\n\t\tvar data = new Float32Array( size * 4 );\r\n\r\n\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\tvar stride = i * 4;\r\n\r\n\t\t\tvar x = ( Math.random() * 2 ) - 1;\r\n\t\t\tvar y = ( Math.random() * 2 ) - 1;\r\n\t\t\tvar z = 0;\r\n\r\n\t\t\tvar noise = simplex.noise3d( x, y, z );\r\n\r\n\t\t\tdata[ stride ] = noise;\r\n\t\t\tdata[ stride + 1 ] = noise;\r\n\t\t\tdata[ stride + 2 ] = noise;\r\n\t\t\tdata[ stride + 3 ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tthis.noiseTexture = new DataTexture( data, width, height, RGBAFormat, FloatType );\r\n\t\tthis.noiseTexture.wrapS = RepeatWrapping;\r\n\t\tthis.noiseTexture.wrapT = RepeatWrapping;\r\n\r\n\t},\r\n\r\n\toverrideVisibility: function () {\r\n\r\n\t\tvar scene = this.scene;\r\n\t\tvar cache = this._visibilityCache;\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tcache.set( object, object.visible );\r\n\r\n\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\trestoreVisibility: function () {\r\n\r\n\t\tvar scene = this.scene;\r\n\t\tvar cache = this._visibilityCache;\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tvar visible = cache.get( object );\r\n\t\t\tobject.visible = visible;\r\n\r\n\t\t} );\r\n\r\n\t\tcache.clear();\r\n\r\n\t}\r\n\r\n} );\r\n\r\nSSAOPass.OUTPUT = {\r\n\t'Default': 0,\r\n\t'SSAO': 1,\r\n\t'Blur': 2,\r\n\t'Beauty': 3,\r\n\t'Depth': 4,\r\n\t'Normal': 5\r\n};\r\n\r\nexport { SSAOPass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/SSAOPass.js","<template>\r\n    <div class=\"webglPostprocessingSsao-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - screen space ambient occlusion<br/>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { SSAOPass } from '@/components/jsm/postprocessing/SSAOPass.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tcomposer: null,\r\n            group: null, \r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglPostprocessingSsao-container')[0].appendChild(this.container)\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            document.getElementsByClassName('webglPostprocessingSsao-container')[0].appendChild(this.renderer.domElement)\r\n            this.camera = new this.$THREE.PerspectiveCamera(65, this.$webglInnerWidth / window.innerHeight, 100, 700)\r\n            this.camera.position.z = 500\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xaaaaaa)\r\n            this.scene.add(new this.$THREE.DirectionalLight())\r\n            this.scene.add(new this.$THREE.HemisphereLight())\r\n            this.group = new this.$THREE.Group()\r\n            this.scene.add(this.group)\r\n            var geometry = new this.$THREE.BoxBufferGeometry(10, 10, 10)\r\n            for (var i = 0; i < 100; i ++) {\r\n                var material = new this.$THREE.MeshLambertMaterial({\r\n                    color: Math.random() * 0xffffff\r\n                })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.x = Math.random() * 400 - 200\r\n                mesh.position.y = Math.random() * 400 - 200\r\n                mesh.position.z = Math.random() * 400 - 200\r\n                mesh.rotation.x = Math.random()\r\n                mesh.rotation.y = Math.random()\r\n                mesh.rotation.z = Math.random()\r\n                mesh.scale.setScalar(Math.random() * 10 + 2)\r\n                this.group.add(mesh)\r\n            }\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            var width = this.$webglInnerWidth\r\n            var height = window.innerHeight\r\n            this.composer = new EffectComposer(this.renderer)\r\n            var ssaoPass = new SSAOPass(this.scene, this.camera, width, height)\r\n            ssaoPass.kernelRadius = 16\r\n            this.composer.addPass(ssaoPass)\r\n            // Init gui\r\n            this.gui = new GUI()\r\n            this.gui.add(ssaoPass, 'output', {\r\n                'Default': SSAOPass.OUTPUT.Default,\r\n                'SSAO Only': SSAOPass.OUTPUT.SSAO,\r\n                'SSAO Only + Blur': SSAOPass.OUTPUT.Blur,\r\n                'Beauty': SSAOPass.OUTPUT.Beauty,\r\n                'Depth': SSAOPass.OUTPUT.Depth,\r\n                'Normal': SSAOPass.OUTPUT.Normal\r\n            }).onChange(function (value) {\r\n                ssaoPass.output = parseInt(value)\r\n            })\r\n            this.gui.add(ssaoPass, 'kernelRadius').min(0).max(32)\r\n            this.gui.add(ssaoPass, 'minDistance').min(0.001).max(0.02)\r\n            this.gui.add(ssaoPass, 'maxDistance').min(0.01).max(0.3)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            var width = window.innerWidth - 281\r\n            var height = window.innerHeight\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.composer.setSize(width, height)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.stats.begin()\r\n            this.render()\r\n            this.stats.end()\r\n        },\r\n        render() {\r\n            var timer = performance.now()\r\n            this.group.rotation.x = timer * 0.0002\r\n            this.group.rotation.y = timer * 0.0001\r\n            this.composer.render()\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingSsao-container {\r\n    width: 100%;\r\n    background-color: #aaa;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingSsao.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingSsao-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - screen space ambient occlusion\"),_c('br')])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4a054fa4\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingSsao.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4a054fa4\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingSsao.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingSsao.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingSsao.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4a054fa4\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingSsao.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4a054fa4\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingSsao.vue\n// module id = null\n// module chunks = ","// Ported from Stefan Gustavson's java implementation\r\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\r\n// Read Stefan's excellent paper for details on how this code works.\r\n//\r\n// Sean McCullough banksean@gmail.com\r\n//\r\n// Added 4D noise\r\n\r\n/**\r\n * You can pass in a random number generator object if you like.\r\n * It is assumed to have a random() method.\r\n */\r\nvar SimplexNoise = function ( r ) {\r\n\r\n\tif ( r == undefined ) r = Math;\r\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\r\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\r\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\r\n\r\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\r\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\r\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\r\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\r\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\r\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\r\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\r\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\r\n\r\n\tthis.p = [];\r\n\r\n\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\r\n\r\n\t}\r\n\r\n\t// To remove the need for index wrapping, double the permutation table length\r\n\tthis.perm = [];\r\n\r\n\tfor ( var i = 0; i < 512; i ++ ) {\r\n\r\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\r\n\r\n\t}\r\n\r\n\t// A lookup table to traverse the simplex around a given point in 4D.\r\n\t// Details can be found where this table is used, in the 4D noise method.\r\n\tthis.simplex = [\r\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\r\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\r\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\r\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\r\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\r\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\r\n\r\n};\r\n\r\nSimplexNoise.prototype.dot = function ( g, x, y ) {\r\n\r\n\treturn g[ 0 ] * x + g[ 1 ] * y;\r\n\r\n};\r\n\r\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\r\n\r\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\r\n\r\n};\r\n\r\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\r\n\r\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\r\n\r\n};\r\n\r\nSimplexNoise.prototype.noise = function ( xin, yin ) {\r\n\r\n\tvar n0, n1, n2; // Noise contributions from the three corners\r\n\t// Skew the input space to determine which simplex cell we're in\r\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\r\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\r\n\tvar i = Math.floor( xin + s );\r\n\tvar j = Math.floor( yin + s );\r\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\r\n\tvar t = ( i + j ) * G2;\r\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\r\n\tvar Y0 = j - t;\r\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\r\n\tvar y0 = yin - Y0;\r\n\t// For the 2D case, the simplex shape is an equilateral triangle.\r\n\t// Determine which simplex we are in.\r\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n\tif ( x0 > y0 ) {\r\n\r\n\t\ti1 = 1; j1 = 0;\r\n\r\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n\r\n\t}\telse {\r\n\r\n\t\ti1 = 0; j1 = 1;\r\n\r\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n\r\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n\t// c = (3-sqrt(3))/6\r\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n\tvar y1 = y0 - j1 + G2;\r\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\r\n\t// Work out the hashed gradient indices of the three simplex corners\r\n\tvar ii = i & 255;\r\n\tvar jj = j & 255;\r\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\r\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\r\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\r\n\t// Calculate the contribution from the three corners\r\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\r\n\tif ( t0 < 0 ) n0 = 0.0;\r\n\telse {\r\n\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\r\n\r\n\t}\r\n\r\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\r\n\tif ( t1 < 0 ) n1 = 0.0;\r\n\telse {\r\n\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\r\n\r\n\t}\r\n\r\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\r\n\tif ( t2 < 0 ) n2 = 0.0;\r\n\telse {\r\n\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\r\n\r\n\t}\r\n\r\n\t// Add contributions from each corner to get the final noise value.\r\n\t// The result is scaled to return values in the interval [-1,1].\r\n\treturn 70.0 * ( n0 + n1 + n2 );\r\n\r\n};\r\n\r\n// 3D simplex noise\r\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\r\n\r\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\r\n\t// Skew the input space to determine which simplex cell we're in\r\n\tvar F3 = 1.0 / 3.0;\r\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\r\n\tvar i = Math.floor( xin + s );\r\n\tvar j = Math.floor( yin + s );\r\n\tvar k = Math.floor( zin + s );\r\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\r\n\tvar t = ( i + j + k ) * G3;\r\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\r\n\tvar Y0 = j - t;\r\n\tvar Z0 = k - t;\r\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\r\n\tvar y0 = yin - Y0;\r\n\tvar z0 = zin - Z0;\r\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n\t// Determine which simplex we are in.\r\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n\tif ( x0 >= y0 ) {\r\n\r\n\t\tif ( y0 >= z0 ) {\r\n\r\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t\t// X Y Z order\r\n\r\n\t\t} else if ( x0 >= z0 ) {\r\n\r\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t\t// X Z Y order\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t} // Z X Y order\r\n\r\n\t} else { // x0<y0\r\n\r\n\t\tif ( y0 < z0 ) {\r\n\r\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t// Z Y X order\r\n\r\n\t\t} else if ( x0 < z0 ) {\r\n\r\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t// Y Z X order\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t} // Y X Z order\r\n\r\n\t}\r\n\r\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n\t// c = 1/6.\r\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\r\n\tvar y1 = y0 - j1 + G3;\r\n\tvar z1 = z0 - k1 + G3;\r\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\r\n\tvar y2 = y0 - j2 + 2.0 * G3;\r\n\tvar z2 = z0 - k2 + 2.0 * G3;\r\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\r\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\r\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\r\n\t// Work out the hashed gradient indices of the four simplex corners\r\n\tvar ii = i & 255;\r\n\tvar jj = j & 255;\r\n\tvar kk = k & 255;\r\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\r\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\r\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\r\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\r\n\t// Calculate the contribution from the four corners\r\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n\tif ( t0 < 0 ) n0 = 0.0;\r\n\telse {\r\n\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\r\n\r\n\t}\r\n\r\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n\tif ( t1 < 0 ) n1 = 0.0;\r\n\telse {\r\n\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\r\n\r\n\t}\r\n\r\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n\tif ( t2 < 0 ) n2 = 0.0;\r\n\telse {\r\n\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\r\n\r\n\t}\r\n\r\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n\tif ( t3 < 0 ) n3 = 0.0;\r\n\telse {\r\n\r\n\t\tt3 *= t3;\r\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\r\n\r\n\t}\r\n\r\n\t// Add contributions from each corner to get the final noise value.\r\n\t// The result is scaled to stay just inside [-1,1]\r\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\r\n\r\n};\r\n\r\n// 4D simplex noise\r\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\r\n\r\n\t// For faster and easier lookups\r\n\tvar grad4 = this.grad4;\r\n\tvar simplex = this.simplex;\r\n\tvar perm = this.perm;\r\n\r\n\t// The skewing and unskewing factors are hairy again for the 4D case\r\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\r\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\r\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\r\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\r\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\r\n\tvar i = Math.floor( x + s );\r\n\tvar j = Math.floor( y + s );\r\n\tvar k = Math.floor( z + s );\r\n\tvar l = Math.floor( w + s );\r\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\r\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\r\n\tvar Y0 = j - t;\r\n\tvar Z0 = k - t;\r\n\tvar W0 = l - t;\r\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\r\n\tvar y0 = y - Y0;\r\n\tvar z0 = z - Z0;\r\n\tvar w0 = w - W0;\r\n\r\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\r\n\t// To find out which of the 24 possible simplices we're in, we need to\r\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\r\n\t// The method below is a good way of finding the ordering of x,y,z,w and\r\n\t// then find the correct traversal order for the simplex we’re in.\r\n\t// First, six pair-wise comparisons are performed between each possible pair\r\n\t// of the four coordinates, and the results are used to add up binary bits\r\n\t// for an integer index.\r\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\r\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\r\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\r\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\r\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\r\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\r\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\r\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\r\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\r\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\r\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\r\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\r\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\r\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\r\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\r\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\r\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\r\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\r\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\r\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\r\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\r\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\r\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\r\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\r\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\r\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\r\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\r\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\r\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\r\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\r\n\tvar y1 = y0 - j1 + G4;\r\n\tvar z1 = z0 - k1 + G4;\r\n\tvar w1 = w0 - l1 + G4;\r\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\r\n\tvar y2 = y0 - j2 + 2.0 * G4;\r\n\tvar z2 = z0 - k2 + 2.0 * G4;\r\n\tvar w2 = w0 - l2 + 2.0 * G4;\r\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\r\n\tvar y3 = y0 - j3 + 3.0 * G4;\r\n\tvar z3 = z0 - k3 + 3.0 * G4;\r\n\tvar w3 = w0 - l3 + 3.0 * G4;\r\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\r\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\r\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\r\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\r\n\t// Work out the hashed gradient indices of the five simplex corners\r\n\tvar ii = i & 255;\r\n\tvar jj = j & 255;\r\n\tvar kk = k & 255;\r\n\tvar ll = l & 255;\r\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\r\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\r\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\r\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\r\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\r\n\t// Calculate the contribution from the five corners\r\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\r\n\tif ( t0 < 0 ) n0 = 0.0;\r\n\telse {\r\n\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\r\n\r\n\t}\r\n\r\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\r\n\tif ( t1 < 0 ) n1 = 0.0;\r\n\telse {\r\n\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\r\n\r\n\t}\r\n\r\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\r\n\tif ( t2 < 0 ) n2 = 0.0;\r\n\telse {\r\n\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\r\n\r\n\t}\r\n\r\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\r\n\tif ( t3 < 0 ) n3 = 0.0;\r\n\telse {\r\n\r\n\t\tt3 *= t3;\r\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\r\n\r\n\t}\r\n\r\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\r\n\tif ( t4 < 0 ) n4 = 0.0;\r\n\telse {\r\n\r\n\t\tt4 *= t4;\r\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\r\n\r\n\t}\r\n\r\n\t// Sum up and scale the result to cover the range [-1,1]\r\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\r\n\r\n};\r\n\r\nexport { SimplexNoise };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/math/SimplexNoise.js"],"sourceRoot":""}