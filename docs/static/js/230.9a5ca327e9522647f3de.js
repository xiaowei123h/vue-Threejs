webpackJsonp([230],{b0mO:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("QEtz"),a=r("85s5"),n=r("6+nK"),s=r("Ah8h"),o=r("uSAz"),l={defines:{PERSPECTIVE_CAMERA:1,KERNEL_SIZE:32},uniforms:{tDiffuse:{value:null},tNormal:{value:null},tDepth:{value:null},tNoise:{value:null},kernel:{value:null},cameraNear:{value:null},cameraFar:{value:null},resolution:{value:new n.Vector2},cameraProjectionMatrix:{value:new n.Matrix4},cameraInverseProjectionMatrix:{value:new n.Matrix4},kernelRadius:{value:8},minDistance:{value:.005},maxDistance:{value:.05}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform sampler2D tNormal;","uniform sampler2D tDepth;","uniform sampler2D tNoise;","uniform vec3 kernel[ KERNEL_SIZE ];","uniform vec2 resolution;","uniform float cameraNear;","uniform float cameraFar;","uniform mat4 cameraProjectionMatrix;","uniform mat4 cameraInverseProjectionMatrix;","uniform float kernelRadius;","uniform float minDistance;","uniform float maxDistance;","varying vec2 vUv;","#include <packing>","float getDepth( const in vec2 screenPosition ) {","\treturn texture2D( tDepth, screenPosition ).x;","}","float getLinearDepth( const in vec2 screenPosition ) {","\t#if PERSPECTIVE_CAMERA == 1","\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;","\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );","\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );","\t#else","\t\treturn texture2D( tDepth, screenPosition ).x;","\t#endif","}","float getViewZ( const in float depth ) {","\t#if PERSPECTIVE_CAMERA == 1","\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","\t#else","\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );","\t#endif","}","vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {","\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];","\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );","\tclipPosition *= clipW; // unprojection.","\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;","}","vec3 getViewNormal( const in vec2 screenPosition ) {","\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );","}","void main() {","\tfloat depth = getDepth( vUv );","\tfloat viewZ = getViewZ( depth );","\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );","\tvec3 viewNormal = getViewNormal( vUv );"," vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );","\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;","\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );","\tvec3 bitangent = cross( viewNormal, tangent );","\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );"," float occlusion = 0.0;"," for ( int i = 0; i < KERNEL_SIZE; i ++ ) {","\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];","\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );","\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );","\t\tsamplePointNDC /= samplePointNDC.w;","\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;","\t\tfloat realDepth = getLinearDepth( samplePointUv );","\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );","\t\tfloat delta = sampleDepth - realDepth;","\t\tif ( delta > minDistance && delta < maxDistance ) {","\t\t\tocclusion += 1.0;","\t\t}","\t}","\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );","\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );","}"].join("\n")},h={defines:{PERSPECTIVE_CAMERA:1},uniforms:{tDepth:{value:null},cameraNear:{value:null},cameraFar:{value:null}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDepth;","uniform float cameraNear;","uniform float cameraFar;","varying vec2 vUv;","#include <packing>","float getLinearDepth( const in vec2 screenPosition ) {","\t#if PERSPECTIVE_CAMERA == 1","\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;","\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );","\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );","\t#else","\t\treturn texture2D( tDepth, screenPosition ).x;","\t#endif","}","void main() {","\tfloat depth = getLinearDepth( vUv );","\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );","}"].join("\n")},c={uniforms:{tDiffuse:{value:null},resolution:{value:new n.Vector2}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec2 resolution;","varying vec2 vUv;","void main() {","\tvec2 texelSize = ( 1.0 / resolution );","\tfloat result = 0.0;","\tfor ( int i = - 2; i <= 2; i ++ ) {","\t\tfor ( int j = - 2; j <= 2; j ++ ) {","\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;","\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;","\t\t}","\t}","\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );","}"].join("\n")},u=r("fcDU"),d=function(e,t,r,i){s.a.call(this),this.width=void 0!==r?r:512,this.height=void 0!==i?i:512,this.clear=!0,this.camera=t,this.scene=e,this.kernelRadius=8,this.kernelSize=32,this.kernel=[],this.noiseTexture=null,this.output=0,this.minDistance=.005,this.maxDistance=.1,this._visibilityCache=new Map,this.generateSampleKernel(),this.generateRandomKernelRotations();var a=new n.DepthTexture;a.type=n.UnsignedShortType,a.minFilter=n.NearestFilter,a.maxFilter=n.NearestFilter,this.beautyRenderTarget=new n.WebGLRenderTarget(this.width,this.height,{minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat}),this.normalRenderTarget=new n.WebGLRenderTarget(this.width,this.height,{minFilter:n.NearestFilter,magFilter:n.NearestFilter,format:n.RGBAFormat,depthTexture:a}),this.ssaoRenderTarget=new n.WebGLRenderTarget(this.width,this.height,{minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:n.RGBAFormat}),this.blurRenderTarget=this.ssaoRenderTarget.clone(),void 0===l&&console.error("THREE.SSAOPass: The pass relies on SSAOShader."),this.ssaoMaterial=new n.ShaderMaterial({defines:Object.assign({},l.defines),uniforms:n.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,blending:n.NoBlending}),this.ssaoMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.ssaoMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture,this.ssaoMaterial.uniforms.tDepth.value=this.normalRenderTarget.depthTexture,this.ssaoMaterial.uniforms.tNoise.value=this.noiseTexture,this.ssaoMaterial.uniforms.kernel.value=this.kernel,this.ssaoMaterial.uniforms.cameraNear.value=this.camera.near,this.ssaoMaterial.uniforms.cameraFar.value=this.camera.far,this.ssaoMaterial.uniforms.resolution.value.set(this.width,this.height),this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse),this.normalMaterial=new n.MeshNormalMaterial,this.normalMaterial.blending=n.NoBlending,this.blurMaterial=new n.ShaderMaterial({defines:Object.assign({},c.defines),uniforms:n.UniformsUtils.clone(c.uniforms),vertexShader:c.vertexShader,fragmentShader:c.fragmentShader}),this.blurMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture,this.blurMaterial.uniforms.resolution.value.set(this.width,this.height),this.depthRenderMaterial=new n.ShaderMaterial({defines:Object.assign({},h.defines),uniforms:n.UniformsUtils.clone(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,blending:n.NoBlending}),this.depthRenderMaterial.uniforms.tDepth.value=this.normalRenderTarget.depthTexture,this.depthRenderMaterial.uniforms.cameraNear.value=this.camera.near,this.depthRenderMaterial.uniforms.cameraFar.value=this.camera.far,this.copyMaterial=new n.ShaderMaterial({uniforms:n.UniformsUtils.clone(u.a.uniforms),vertexShader:u.a.vertexShader,fragmentShader:u.a.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,blendSrc:n.DstColorFactor,blendDst:n.ZeroFactor,blendEquation:n.AddEquation,blendSrcAlpha:n.DstAlphaFactor,blendDstAlpha:n.ZeroFactor,blendEquationAlpha:n.AddEquation}),this.fsQuad=new s.a.FullScreenQuad(null),this.originalClearColor=new n.Color};d.prototype=Object.assign(Object.create(s.a.prototype),{constructor:d,dispose:function(){this.beautyRenderTarget.dispose(),this.normalRenderTarget.dispose(),this.ssaoRenderTarget.dispose(),this.blurRenderTarget.dispose(),this.normalMaterial.dispose(),this.blurMaterial.dispose(),this.copyMaterial.dispose(),this.depthRenderMaterial.dispose(),this.fsQuad.dispose()},render:function(e,t){switch(e.setRenderTarget(this.beautyRenderTarget),e.clear(),e.render(this.scene,this.camera),this.overrideVisibility(),this.renderOverride(e,this.normalMaterial,this.normalRenderTarget,7829503,1),this.restoreVisibility(),this.ssaoMaterial.uniforms.kernelRadius.value=this.kernelRadius,this.ssaoMaterial.uniforms.minDistance.value=this.minDistance,this.ssaoMaterial.uniforms.maxDistance.value=this.maxDistance,this.renderPass(e,this.ssaoMaterial,this.ssaoRenderTarget),this.renderPass(e,this.blurMaterial,this.blurRenderTarget),this.output){case d.OUTPUT.SSAO:this.copyMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture,this.copyMaterial.blending=n.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case d.OUTPUT.Blur:this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture,this.copyMaterial.blending=n.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case d.OUTPUT.Beauty:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=n.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case d.OUTPUT.Depth:this.renderPass(e,this.depthRenderMaterial,this.renderToScreen?null:t);break;case d.OUTPUT.Normal:this.copyMaterial.uniforms.tDiffuse.value=this.normalRenderTarget.texture,this.copyMaterial.blending=n.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case d.OUTPUT.Default:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=n.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t),this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture,this.copyMaterial.blending=n.CustomBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;default:console.warn("THREE.SSAOPass: Unknown output type.")}},renderPass:function(e,t,r,i,a){this.originalClearColor.copy(e.getClearColor());var n=e.getClearAlpha(),s=e.autoClear;e.setRenderTarget(r),e.autoClear=!1,void 0!==i&&null!==i&&(e.setClearColor(i),e.setClearAlpha(a||0),e.clear()),this.fsQuad.material=t,this.fsQuad.render(e),e.autoClear=s,e.setClearColor(this.originalClearColor),e.setClearAlpha(n)},renderOverride:function(e,t,r,i,a){this.originalClearColor.copy(e.getClearColor());var n=e.getClearAlpha(),s=e.autoClear;e.setRenderTarget(r),e.autoClear=!1,i=t.clearColor||i,a=t.clearAlpha||a,void 0!==i&&null!==i&&(e.setClearColor(i),e.setClearAlpha(a||0),e.clear()),this.scene.overrideMaterial=t,e.render(this.scene,this.camera),this.scene.overrideMaterial=null,e.autoClear=s,e.setClearColor(this.originalClearColor),e.setClearAlpha(n)},setSize:function(e,t){this.width=e,this.height=t,this.beautyRenderTarget.setSize(e,t),this.ssaoRenderTarget.setSize(e,t),this.normalRenderTarget.setSize(e,t),this.blurRenderTarget.setSize(e,t),this.ssaoMaterial.uniforms.resolution.value.set(e,t),this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse),this.blurMaterial.uniforms.resolution.value.set(e,t)},generateSampleKernel:function(){for(var e=this.kernelSize,t=this.kernel,r=0;r<e;r++){var i=new n.Vector3;i.x=2*Math.random()-1,i.y=2*Math.random()-1,i.z=Math.random(),i.normalize();var a=r/e;a=n.MathUtils.lerp(.1,1,a*a),i.multiplyScalar(a),t.push(i)}},generateRandomKernelRotations:function(){void 0===o.a&&console.error("THREE.SSAOPass: The pass relies on SimplexNoise.");for(var e=new o.a,t=new Float32Array(64),r=0;r<16;r++){var i=4*r,a=2*Math.random()-1,s=2*Math.random()-1,l=e.noise3d(a,s,0);t[i]=l,t[i+1]=l,t[i+2]=l,t[i+3]=1}this.noiseTexture=new n.DataTexture(t,4,4,n.RGBAFormat,n.FloatType),this.noiseTexture.wrapS=n.RepeatWrapping,this.noiseTexture.wrapT=n.RepeatWrapping},overrideVisibility:function(){var e=this.scene,t=this._visibilityCache;e.traverse(function(e){t.set(e,e.visible),(e.isPoints||e.isLine)&&(e.visible=!1)})},restoreVisibility:function(){var e=this.scene,t=this._visibilityCache;e.traverse(function(e){var r=t.get(e);e.visible=r}),t.clear()}}),d.OUTPUT={Default:0,SSAO:1,Blur:2,Beauty:3,Depth:4,Normal:5};var m={data:function(){return{container:null,stats:null,camera:null,scene:null,renderer:null,composer:null,group:null,gui:null}},mounted:function(){this.init(),this.animate()},beforeDestroy:function(){this.gui.destroy()},methods:{init:function(){this.container=document.createElement("div"),document.getElementsByClassName("webglPostprocessingSsao-container")[0].appendChild(this.container),this.renderer=new this.$THREE.WebGLRenderer,this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),document.getElementsByClassName("webglPostprocessingSsao-container")[0].appendChild(this.renderer.domElement),this.camera=new this.$THREE.PerspectiveCamera(65,this.$webglInnerWidth/window.innerHeight,100,700),this.camera.position.z=500,this.scene=new this.$THREE.Scene,this.scene.background=new this.$THREE.Color(11184810),this.scene.add(new this.$THREE.DirectionalLight),this.scene.add(new this.$THREE.HemisphereLight),this.group=new this.$THREE.Group,this.scene.add(this.group);for(var e=new this.$THREE.BoxBufferGeometry(10,10,10),t=0;t<100;t++){var r=new this.$THREE.MeshLambertMaterial({color:16777215*Math.random()}),n=new this.$THREE.Mesh(e,r);n.position.x=400*Math.random()-200,n.position.y=400*Math.random()-200,n.position.z=400*Math.random()-200,n.rotation.x=Math.random(),n.rotation.y=Math.random(),n.rotation.z=Math.random(),n.scale.setScalar(10*Math.random()+2),this.group.add(n)}this.stats=new this.$Stats,this.stats.dom.style.left="280px",this.container.appendChild(this.stats.dom);var s=this.$webglInnerWidth,o=window.innerHeight;this.composer=new a.a(this.renderer);var l=new d(this.scene,this.camera,s,o);l.kernelRadius=16,this.composer.addPass(l),this.gui=new i.a,this.gui.add(l,"output",{Default:d.OUTPUT.Default,"SSAO Only":d.OUTPUT.SSAO,"SSAO Only + Blur":d.OUTPUT.Blur,Beauty:d.OUTPUT.Beauty,Depth:d.OUTPUT.Depth,Normal:d.OUTPUT.Normal}).onChange(function(e){l.output=parseInt(e)}),this.gui.add(l,"kernelRadius").min(0).max(32),this.gui.add(l,"minDistance").min(.001).max(.02),this.gui.add(l,"maxDistance").min(.01).max(.3),window.addEventListener("resize",this.onWindowResize,!1)},onWindowResize:function(){var e=window.innerWidth-281,t=window.innerHeight;this.$onWindowResize(this.camera,this.renderer),this.composer.setSize(e,t)},animate:function(){requestAnimationFrame(this.animate),this.stats.begin(),this.render(),this.stats.end()},render:function(){var e=performance.now();this.group.rotation.x=2e-4*e,this.group.rotation.y=1e-4*e,this.composer.render()}}},v={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"webglPostprocessingSsao-container"},[t("div",{attrs:{id:"info"}},[t("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener"}},[this._v("three.js")]),this._v(" - screen space ambient occlusion"),t("br")])])}]};var p=r("VU/8")(m,v,!1,function(e){r("oiTN")},"data-v-4a054fa4",null);t.default=p.exports},oiTN:function(e,t){}});
//# sourceMappingURL=230.9a5ca327e9522647f3de.js.map