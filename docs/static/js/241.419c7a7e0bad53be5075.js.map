{"version":3,"sources":["webpack:///src/views/clipping/webglClippingAdvanced.vue","webpack:///./src/views/clipping/webglClippingAdvanced.vue?65f5","webpack:///./src/views/clipping/webglClippingAdvanced.vue"],"names":["webglClippingAdvanced","data","Vertices","Indices","Planes","PlaneMatrices","GlobalClippingPlanes","Empty","camera","scene","renderer","startTime","stats","object","clipMaterial","volumeVisualization","globalClippingPlanes","gui","transform","tmpMatrix","mounted","this","$THREE","Vector3","Math","SQRT1_2","planesFromMesh","map","planeToMatrix","cylindricalPlanes","Object","freeze","Matrix4","init","animate","beforeDestroy","destroy","methods","vertices","indices","n","length","result","Array","i","j","a","b","c","Plane","setFromCoplanarPoints","createPlanes","assignTransformedPlanes","planesOut","planesIn","matrix","copy","applyMatrix4","innerRadius","plane","angle","PI","normal","set","cos","sin","varant","xAxis","yAxis","trans","that","zAxis","abs","x","z","y","crossVectors","normalize","coplanarPoint","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","Scene","add","AmbientLight","spotLight","SpotLight","penumbra","castShadow","shadow","near","far","mapSize","width","height","dirLight","DirectionalLight","right","left","top","bottom","MeshPhongMaterial","color","shininess","side","DoubleSide","clippingPlanes","clipShadows","Group","geometry","BoxBufferGeometry","mesh","Mesh","planeGeometry","PlaneBufferGeometry","Color","visible","material","MeshBasicMaterial","setHSL","getHex","opacity","transparent","filter","_","matrixAutoUpdate","ground","rotation","scale","multiplyScalar","receiveShadow","container","document","getElementsByClassName","WebGLRenderer","shadowMap","enabled","setPixelRatio","devicePixelRatio","setSize","addEventListener","onWindowResize","appendChild","domElement","localClippingEnabled","$Stats","dom","style","controls","OrbitControls","minDistance","maxDistance","target","update","dat_gui_module","folder","addFolder","props","Enabled","v","Shadows","Visualize","listen","Date","now","$onWindowResize","setObjectWorldMatrix","parent","updateMatrixWorld","matrixWorld","invert","time","requestAnimationFrame","updateMatrix","bouncy","multiply","makeScale","children","multiplyMatrices","makeRotationY","begin","render","end","clipping_webglClippingAdvanced","_h","$createElement","_self","_c","staticClass","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/241.419c7a7e0bad53be5075.js","sourcesContent":["<template>\r\n    <div class=\"webglClippingAdvanced-container\">\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            // A regular tetrahedron for the clipping volume:\r\n\t\t\tVertices: [],\r\n            Indices: [\r\n                0, 1, 2,\t0, 2, 3,\t0, 3, 1,\t1, 3, 2\r\n            ],\r\n            Planes: null,\r\n            PlaneMatrices: null,\r\n            GlobalClippingPlanes: null,\r\n            Empty: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            startTime: null,\r\n            stats: null,\r\n            object: null,\r\n            clipMaterial: null,\r\n\t\t\tvolumeVisualization: null,\r\n            globalClippingPlanes: null,\r\n            gui: null,\r\n            transform: null,\r\n            tmpMatrix: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.Vertices = [\r\n            new this.$THREE.Vector3(+ 1, 0, + Math.SQRT1_2),\r\n            new this.$THREE.Vector3(- 1, 0, + Math.SQRT1_2),\r\n            new this.$THREE.Vector3(0, + 1, - Math.SQRT1_2),\r\n            new this.$THREE.Vector3(0, - 1, - Math.SQRT1_2)\r\n        ]\r\n        this.Planes = this.planesFromMesh(this.Vertices, this.Indices)\r\n        this.PlaneMatrices = this.Planes.map(this.planeToMatrix())\r\n        this.GlobalClippingPlanes = this.cylindricalPlanes(5, 2.5)\r\n        this.Empty = Object.freeze([])\r\n        this.transform = new this.$THREE.Matrix4()\r\n        this.tmpMatrix = new this.$THREE.Matrix4()\r\n        // this.planeToMatrix()\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        planesFromMesh(vertices, indices) {\r\n            // creates a clipping volume from a convex triangular mesh\r\n            // specified by the arrays 'vertices' and 'indices'\r\n            var n = indices.length / 3,\r\n                result = new Array(n)\r\n            for (var i = 0, j = 0; i < n; ++ i, j += 3) {\r\n                var a = vertices[indices[j]],\r\n                    b = vertices[indices[j + 1]],\r\n                    c = vertices[indices[j + 2]]\r\n                result[i] = new this.$THREE.Plane().\r\n                    setFromCoplanarPoints(a, b, c)\r\n            }\r\n            return result\r\n        },\r\n        createPlanes(n) {\r\n            // creates an array of n uninitialized plane objects\r\n            var result = new Array(n)\r\n            for (var i = 0; i !== n; ++ i)\r\n                result[ i ] = new this.$THREE.Plane()\r\n            return result\r\n        },\r\n        assignTransformedPlanes(planesOut, planesIn, matrix) {\r\n            // sets an array of existing planes to transformed 'planesIn'\r\n            for (var i = 0, n = planesIn.length; i !== n; ++ i)\r\n                planesOut[ i ].copy(planesIn[ i ]).applyMatrix4(matrix)\r\n        },\r\n        cylindricalPlanes(n, innerRadius) {\r\n            var result = this.createPlanes(n)\r\n            for (var i = 0; i !== n; ++ i) {\r\n                var plane = result[ i ],\r\n                    angle = i * Math.PI * 2 / n\r\n                plane.normal.set(\r\n                    Math.cos(angle), 0, Math.sin(angle))\r\n                plane.varant = innerRadius\r\n            }\r\n            return result\r\n        },\r\n        planeToMatrix() {\r\n            // creates a matrix that aligns X/Y to a given plane\r\n            // temporaries:\r\n            var xAxis = new this.$THREE.Vector3(),\r\n                yAxis = new this.$THREE.Vector3(),\r\n                trans = new this.$THREE.Vector3(),\r\n                that = this\r\n            return function planeToMatrix(plane) {\r\n                var zAxis = plane.normal,\r\n                    matrix = new that.$THREE.Matrix4()\r\n                // Hughes & Moeller '99\r\n                // \"Building an Orthonormal Basis from a Unit Vector.\"\r\n                if (Math.abs(zAxis.x) > Math.abs(zAxis.z)) {\r\n                    yAxis.set(- zAxis.y, zAxis.x, 0)\r\n                } else {\r\n                    yAxis.set(0, - zAxis.z, zAxis.y)\r\n                }\r\n                xAxis.crossVectors(yAxis.normalize(), zAxis)\r\n                plane.coplanarPoint(trans)\r\n                return matrix.set(\r\n                    xAxis.x, yAxis.x, zAxis.x, trans.x,\r\n                    xAxis.y, yAxis.y, zAxis.y, trans.y,\r\n                    xAxis.z, yAxis.z, zAxis.z, trans.z,\r\n                    0, 0, 0, 1)\r\n            }\r\n        },\r\n        init() {\r\n            this.camera = new this.$THREE.PerspectiveCamera(36, this.$webglInnerWidth / window.innerHeight, 0.25, 16)\r\n            this.camera.position.set(0, 1.5, 3)\r\n            this.scene = new this.$THREE.Scene()\r\n            // Lights\r\n            this.scene.add(new this.$THREE.AmbientLight(0xffffff, 0.3))\r\n            var spotLight = new this.$THREE.SpotLight(0xffffff, 0.5)\r\n            spotLight.angle = Math.PI / 5\r\n            spotLight.penumbra = 0.2\r\n            spotLight.position.set(2, 3, 3)\r\n            spotLight.castShadow = true\r\n            spotLight.shadow.camera.near = 3\r\n            spotLight.shadow.camera.far = 10\r\n            spotLight.shadow.mapSize.width = 1024\r\n            spotLight.shadow.mapSize.height = 1024\r\n            this.scene.add(spotLight)\r\n            var dirLight = new this.$THREE.DirectionalLight(0xffffff, 0.5)\r\n            dirLight.position.set(0, 2, 0)\r\n            dirLight.castShadow = true\r\n            dirLight.shadow.camera.near = 1\r\n            dirLight.shadow.camera.far = 10\r\n            dirLight.shadow.camera.right = 1\r\n            dirLight.shadow.camera.left = - 1\r\n            dirLight.shadow.camera.top\t= 1\r\n            dirLight.shadow.camera.bottom = - 1\r\n            dirLight.shadow.mapSize.width = 1024\r\n            dirLight.shadow.mapSize.height = 1024\r\n            this.scene.add(dirLight)\r\n            // Geometry\r\n            this.clipMaterial = new this.$THREE.MeshPhongMaterial({\r\n                color: 0xee0a10,\r\n                shininess: 100,\r\n                side: this.$THREE.DoubleSide,\r\n                // Clipping setup:\r\n                clippingPlanes: this.createPlanes(this.Planes.length),\r\n                clipShadows: true\r\n            })\r\n            this.object = new this.$THREE.Group()\r\n            var geometry = new this.$THREE.BoxBufferGeometry(0.18, 0.18, 0.18)\r\n            for (var z = - 2; z <= 2; ++ z)\r\n                for (var y = - 2; y <= 2; ++ y)\r\n                    for (var x = - 2; x <= 2; ++ x) {\r\n                        var mesh = new this.$THREE.Mesh(geometry, this.clipMaterial)\r\n                        mesh.position.set(x / 5, y / 5, z / 5)\r\n                        mesh.castShadow = true\r\n                        this.object.add(mesh)\r\n                    }\r\n            this.scene.add(this.object)\r\n            var planeGeometry = new this.$THREE.PlaneBufferGeometry(3, 3, 1, 1),\r\n                color = new this.$THREE.Color()\r\n            this.volumeVisualization = new this.$THREE.Group()\r\n            this.volumeVisualization.visible = false\r\n            for (var i = 0, n = this.Planes.length; i !== n; ++ i) {\r\n                var material = new this.$THREE.MeshBasicMaterial({\r\n                    color: color.setHSL(i / n, 0.5, 0.5).getHex(),\r\n                    side: this.$THREE.DoubleSide,\r\n                    opacity: 0.2,\r\n                    transparent: true,\r\n                    // clip to the others to show the volume (wildly\r\n                    // intersecting transparent planes look bad)\r\n                    clippingPlanes: this.clipMaterial.clippingPlanes.\r\n                        filter(function (_, j) {\r\n                            return j !== i\r\n                        })\r\n                    // no need to enable shadow clipping - the plane\r\n                    // visualization does not cast shadows\r\n                })\r\n                var mesh = new this.$THREE.Mesh(planeGeometry, material)\r\n                mesh.matrixAutoUpdate = false\r\n                this.volumeVisualization.add(mesh)\r\n            }\r\n            this.scene.add(this.volumeVisualization)\r\n            var ground = new this.$THREE.Mesh(planeGeometry,\r\n                new this.$THREE.MeshPhongMaterial({\r\n                    color: 0xa0adaf, shininess: 10 }))\r\n            ground.rotation.x = - Math.PI / 2\r\n            ground.scale.multiplyScalar(3)\r\n            ground.receiveShadow = true\r\n            this.scene.add(ground)\r\n            // Renderer\r\n            var container = document.getElementsByClassName('webglClippingAdvanced-container')[0]\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.shadowMap.enabled = true\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            container.appendChild(this.renderer.domElement)\r\n            // Clipping setup:\r\n            this.globalClippingPlanes = this.createPlanes(this.GlobalClippingPlanes.length)\r\n            this.renderer.clippingPlanes = this.Empty\r\n            this.renderer.localClippingEnabled = true\r\n            // Stats\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            container.appendChild(this.stats.dom)\r\n            // Controls\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 1\r\n            controls.maxDistance = 8\r\n            controls.target.set(0, 1, 0)\r\n            controls.update()\r\n            // GUI\r\n            this.gui = new GUI()\r\n            var that = this\r\n            var folder = this.gui.addFolder(\"Local Clipping\"),\r\n                props = {\r\n                    get 'Enabled'() {\r\n                        return that.renderer.localClippingEnabled\r\n                    },\r\n                    set 'Enabled'(v) {\r\n                        that.renderer.localClippingEnabled = v\r\n                        if (! v) that.volumeVisualization.visible = false\r\n                    },\r\n                    get 'Shadows'() {\r\n                        return that.clipMaterial.clipShadows\r\n                    },\r\n                    set 'Shadows'(v) {\r\n                        that.clipMaterial.clipShadows = v\r\n                    },\r\n                    get 'Visualize'() {\r\n                        return that.volumeVisualization.visible\r\n                    },\r\n                    set 'Visualize'(v) {\r\n                        if (that.renderer.localClippingEnabled)\r\n                            that.volumeVisualization.visible = v\r\n                    }\r\n                }\r\n            folder.add(props, 'Enabled')\r\n            folder.add(props, 'Shadows')\r\n            folder.add(props, 'Visualize').listen()\r\n            this.gui.addFolder(\"Global Clipping\").\r\n                add({\r\n                    get 'Enabled'() {\r\n                        return that.renderer.clippingPlanes !== that.Empty\r\n                    },\r\n                    set 'Enabled'(v) {\r\n                        that.renderer.clippingPlanes = v ?\r\n                            that.globalClippingPlanes : that.Empty\r\n                    }\r\n                }, \"Enabled\")\r\n            // Start\r\n            this.startTime = Date.now()\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        setObjectWorldMatrix(object, matrix) {\r\n            // set the orientation of an object based on a world matrix\r\n            // console.log('object')\r\n            \r\n            var parent = object.parent\r\n            this.scene.updateMatrixWorld()\r\n            // console.log(object.matrix.copy(parent.matrixWorld).invert())\r\n            object.matrix.copy(parent.matrixWorld).invert()\r\n            object.applyMatrix4(matrix)\r\n        },\r\n        animate() {\r\n            var currentTime = Date.now(),\r\n                time = (currentTime - this.startTime) / 1000\r\n            requestAnimationFrame(this.animate)\r\n            this.object.position.y = 1\r\n            this.object.rotation.x = time * 0.5\r\n            this.object.rotation.y = time * 0.2\r\n            this.object.updateMatrix()\r\n            this.transform.copy(this.object.matrix)\r\n            var bouncy = Math.cos(time * .5) * 0.5 + 0.7\r\n            this.transform.multiply(\r\n                this.tmpMatrix.makeScale(bouncy, bouncy, bouncy))\r\n            this.assignTransformedPlanes(\r\n                this.clipMaterial.clippingPlanes, this.Planes, this.transform)\r\n            var planeMeshes = this.volumeVisualization.children\r\n            for ( var i = 0, n = planeMeshes.length; i !== n; ++ i ) {\r\n                this.tmpMatrix.multiplyMatrices( this.transform, this.PlaneMatrices[ i ] )\r\n                // this.setObjectWorldMatrix( planeMeshes[ i ], this.tmpMatrix )\r\n            }\r\n            this.transform.makeRotationY(time * 0.1)\r\n            this.assignTransformedPlanes(this.globalClippingPlanes, this.GlobalClippingPlanes, this.transform)\r\n            this.stats.begin()\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.stats.end()\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglClippingAdvanced-container {\r\n    width: 100%;\r\n}\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/clipping/webglClippingAdvanced.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglClippingAdvanced-container\"})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4449de4e\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/clipping/webglClippingAdvanced.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4449de4e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglClippingAdvanced.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglClippingAdvanced.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglClippingAdvanced.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4449de4e\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglClippingAdvanced.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4449de4e\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/clipping/webglClippingAdvanced.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}