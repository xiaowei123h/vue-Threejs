{"version":3,"sources":["webpack:///./src/components/jsm/loaders/BasisTextureLoader.js","webpack:///src/views/loader/webglLoaderTextureBasis.vue","webpack:///./src/views/loader/webglLoaderTextureBasis.vue?d782","webpack:///./src/views/loader/webglLoaderTextureBasis.vue"],"names":["BasisTextureLoader","manager","Loader","call","this","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","format","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","taskCache","WeakMap","prototype","Object","assign","create","constructor","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","config","extensions","has","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","Error","cTFETC1","load","url","onLoad","onProgress","onError","_this","loader","FileLoader","setResponseType","setWithCredentials","withCredentials","buffer","get","promise","then","catch","_createTexture","worker","taskID","_this2","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","texture","width","height","mipmaps","CompressedTexture","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","cTFBC1","DXT_FORMAT_MAP","UnsignedByteType","RGB_ETC1_Format","cTFPVRTC1_4_RGB","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","minFilter","length","LinearFilter","LinearMipmapLinearFilter","magFilter","generateMipmaps","needsUpdate","_taskLoad","set","_initTranscoder","_this3","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","_ref","_ref2","_slicedToArray","fn","BasisWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this4","Worker","onmessage","e","data","console","error","push","sort","a","b","dispose","i","terminate","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","wasmBinary","BasisModule","onRuntimeInitialized","BASIS","_BasisModule","BasisFile","initializeBasis","_transcode","basisFile","Uint8Array","getImageWidth","getImageHeight","levels","getNumLevels","hasAlpha","getHasAlpha","cleanup","close","delete","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","transcode","buffers","self","webglLoaderTextureBasis","camera","scene","mesh","clock","mounted","$THREE","Clock","init","animate","methods","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","outputEncoding","sRGBEncoding","document","getElementsByClassName","appendChild","domElement","PerspectiveCamera","position","z","Scene","geometry","BoxBufferGeometry","material","MeshBasicMaterial","Mesh","add","BasisTextureLoader_BasisTextureLoader","encoding","map","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","delta","getDelta","rotation","x","y","render","loader_webglLoaderTextureBasis","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"4hBA0BIA,EAAqB,SAAWC,GAEnCC,SAAOC,KAAMC,KAAMH,GAEnBG,KAAKC,eAAiB,GACtBD,KAAKE,iBAAmB,KACxBF,KAAKG,kBAAoB,KAEzBH,KAAKI,YAAc,EACnBJ,KAAKK,cACLL,KAAKM,iBAAmB,EACxBN,KAAKO,gBAAkB,GACvBP,KAAKQ,cACJC,OAAQ,KACRC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,gBAAgB,IAKlBlB,EAAmBmB,UAAY,IAAIC,QAEnCpB,EAAmBqB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQtB,SAAOmB,YAEnEI,YAAazB,EAEb0B,kBAAmB,SAAWC,GAI7B,OAFAvB,KAAKC,eAAiBsB,EAEfvB,MAIRwB,eAAgB,SAAWpB,GAI1B,OAFAJ,KAAKI,YAAcA,EAEZJ,MAIRyB,cAAe,SAAWC,GAEzB,IAAIC,EAAS3B,KAAKQ,aASlB,GAPAmB,EAAOjB,cAAgBgB,EAASE,WAAWC,IAAK,iCAChDF,EAAOhB,cAAgBe,EAASE,WAAWC,IAAK,gCAChDF,EAAOf,aAAec,EAASE,WAAWC,IAAK,iCAC/CF,EAAOd,aAAea,EAASE,WAAWC,IAAK,iCAC/CF,EAAOb,eAAiBY,EAASE,WAAWC,IAAK,mCAC7CH,EAASE,WAAWC,IAAK,yCAExBF,EAAOjB,cAEXiB,EAAOlB,OAASb,EAAmBkC,aAAaC,iBAE1C,GAAKJ,EAAOhB,cAElBgB,EAAOlB,OAASb,EAAmBkC,aAAaE,eAE1C,GAAKL,EAAOd,aAElBc,EAAOlB,OAASb,EAAmBkC,aAAaG,YAE1C,GAAKN,EAAOb,eAElBa,EAAOlB,OAASb,EAAmBkC,aAAaI,qBAE1C,KAAKP,EAAOf,aAMlB,MAAM,IAAIuB,MAAO,0EAJjBR,EAAOlB,OAASb,EAAmBkC,aAAaM,QAQjD,OAAOpC,MAIRqC,KAAM,SAAWC,EAAKC,EAAQC,EAAYC,GAAU,IAAAC,EAAA1C,KAE/C2C,EAAS,IAAIC,aAAY5C,KAAKH,SAElC8C,EAAOE,gBAAiB,eACxBF,EAAOG,mBAAoB9C,KAAK+C,iBAEhCJ,EAAON,KAAMC,EAAK,SAAEU,GAInB,GAAKpD,EAAmBmB,UAAUc,IAAKmB,GAItC,OAFiBpD,EAAmBmB,UAAUkC,IAAKD,GAEjCE,QAAQC,KAAMZ,GAASa,MAAOX,GAIjDC,EAAKW,eAAgBL,EAAQV,GAC3Ba,KAAMZ,GACNa,MAAOX,IAEPD,EAAYC,IAShBY,eAAgB,SAAWL,EAAQV,GAAM,IAEpCgB,EACAC,EAHoCC,EAAAxD,KAKpCyD,EAAWT,EAAOU,WAElBC,EAAiB3D,KAAK4D,gBAAiBH,GACzCN,KAAM,SAAEU,GAKR,OAHAP,EAASO,EACTN,EAASC,EAAKlD,mBAEP,IAAIwD,QAAS,SAAEC,EAASC,GAE9BV,EAAOW,WAAYV,IAAaQ,UAASC,UAEzCV,EAAOY,aAAeC,KAAM,YAAaC,GAAIb,EAAQP,WAAYA,QAKlEG,KAAM,SAAEkB,GAER,IAIIC,EAJA3C,EAAS6B,EAAKhD,aAEZ+D,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,OAAQC,EAAoBJ,EAApBI,QAIrB,OAJyCJ,EAAX5D,QAM7B,KAAKb,EAAmBkC,aAAaC,YACpCuC,EAAU,IAAII,oBAAmBD,EAASF,EAAOC,EAAQG,wBACzD,MACD,KAAK/E,EAAmBkC,aAAaE,UACpCsC,EAAU,IAAII,oBAAmBD,EAASF,EAAOC,EAAQI,oBACzD,MACD,KAAKhF,EAAmBkC,aAAa+C,OACrC,KAAKjF,EAAmBkC,aAAaG,OACpCqC,EAAU,IAAII,oBAAmBD,EAASF,EAAOC,EAAQ5E,EAAmBkF,eAAgBnD,EAAOlB,QAAUsE,oBAC7G,MACD,KAAKnF,EAAmBkC,aAAaM,QACpCkC,EAAU,IAAII,oBAAmBD,EAASF,EAAOC,EAAQQ,mBACzD,MACD,KAAKpF,EAAmBkC,aAAamD,gBACpCX,EAAU,IAAII,oBAAmBD,EAASF,EAAOC,EAAQU,2BACzD,MACD,KAAKtF,EAAmBkC,aAAaI,iBACpCoC,EAAU,IAAII,oBAAmBD,EAASF,EAAOC,EAAQW,4BACzD,MACD,QACC,MAAM,IAAIhD,MAAO,4DASnB,OALAmC,EAAQc,UAA+B,IAAnBX,EAAQY,OAAeC,eAAeC,2BAC1DjB,EAAQkB,UAAYF,eACpBhB,EAAQmB,iBAAkB,EAC1BnB,EAAQoB,aAAc,EAEfpB,IA0BT,OArBAX,EACEP,MAAO,kBAAM,IACbD,KAAM,WAEDG,GAAUC,IAEdD,EAAOqC,WAAalC,SACbH,EAAOW,WAAYV,MAO7B3D,EAAmBmB,UAAU6E,IAAK5C,GAEjCV,IAAKA,EACLY,QAASS,IAIHA,GAIRkC,gBAAiB,WAAY,IAAAC,EAAA9F,KAE5B,IAAOA,KAAKG,kBAAoB,CAG/B,IAAI4F,EAAW,IAAInD,aAAY5C,KAAKH,SACpCkG,EAASC,QAAShG,KAAKC,gBACvB8F,EAASjD,mBAAoB9C,KAAK+C,iBAClC,IAAIkD,EAAY,IAAInC,QAAS,SAAEC,EAASC,GAEvC+B,EAAS1D,KAAM,sBAAuB0B,OAASmC,EAAWlC,KAKvDmC,EAAe,IAAIvD,aAAY5C,KAAKH,SACxCsG,EAAaH,QAAShG,KAAKC,gBAC3BkG,EAAatD,gBAAiB,eAC9BsD,EAAarD,mBAAoB9C,KAAK+C,iBACtC,IAAIqD,EAAgB,IAAItC,QAAS,SAAEC,EAASC,GAE3CmC,EAAa9D,KAAM,wBAAyB0B,OAASmC,EAAWlC,KAIjEhE,KAAKG,kBAAoB2D,QAAQuC,KAAOJ,EAAWG,IACjDjD,KAAM,SAAAmD,GAAoC,IAAAC,EAAAC,EAAAF,EAAA,GAAhCL,EAAgCM,EAAA,GAArBH,EAAqBG,EAAA,GAEtCE,EAAK7G,EAAmB8G,YAAYC,WAEpCC,GACH,4BACAX,EACA,eACAQ,EAAGI,UAAWJ,EAAGK,QAAS,KAAQ,EAAGL,EAAGM,YAAa,OACpDC,KAAM,MAERlB,EAAKvF,gBAAkB0G,IAAIC,gBAAiB,IAAIC,MAAQP,KACxDd,EAAK5F,iBAAmBkG,IAM3B,OAAOpG,KAAKG,mBAIbyD,gBAAiB,SAAWH,GAAW,IAAA2D,EAAApH,KAEtC,OAAOA,KAAK6F,kBAAkB1C,KAAM,WAIlC,IA4CGG,EA9CC8D,EAAK/G,WAAWgF,OAAS+B,EAAKhH,cAE9BkD,EAAS,IAAI+D,OAAQD,EAAK7G,kBAEvB0D,cACPX,EAAOqC,UAAY,EAEnBrC,EAAOY,aACNC,KAAM,OACNxC,OAAQyF,EAAK5G,aACbN,iBAAkBkH,EAAKlH,mBAGxBoD,EAAOgE,UAAY,SAAWC,GAE7B,IAAIlD,EAAUkD,EAAEC,KAEhB,OAASnD,EAAQF,MAEhB,IAAK,YACJb,EAAOW,WAAYI,EAAQD,IAAKL,QAASM,GACzC,MAED,IAAK,QACJf,EAAOW,WAAYI,EAAQD,IAAKJ,OAAQK,GACxC,MAED,QACCoD,QAAQC,MAAO,kDAAoDrD,EAAQF,KAAO,OAMrFiD,EAAK/G,WAAWsH,KAAMrE,IAItB8D,EAAK/G,WAAWuH,KAAM,SAAWC,EAAGC,GAEnC,OAAOD,EAAElC,UAAYmC,EAAEnC,WAAc,EAAI,IAU3C,OAJIrC,EAAS8D,EAAK/G,WAAY+G,EAAK/G,WAAWgF,OAAS,IAEhDM,WAAalC,EAEbH,KAMTyE,QAAS,WAER,IAAM,IAAIC,EAAI,EAAGA,EAAIhI,KAAKK,WAAWgF,OAAQ2C,IAE5ChI,KAAKK,WAAY2H,GAAIC,YAMtB,OAFAjI,KAAKK,WAAWgF,OAAS,EAElBrF,QAQTJ,EAAmBkC,cAClBM,QAAS,EACT8F,QAAS,EACTrD,OAAQ,EACR5C,OAAQ,EACRkG,OAAQ,EACRC,OAAQ,EACRC,sBAAuB,EACvBrG,UAAW,EACXiD,gBAAiB,EACjB/C,iBAAkB,EAClBH,YAAa,GACbuG,WAAY,GACZC,+BAAgC,GAChCC,UAAW,GACXC,UAAW,GACXC,UAAW,GACXC,YAAa,IAKd/I,EAAmBgJ,YAClBC,6BAA8B,MAC9BC,8BAA+B,MAC/BC,8BAA+B,MAC/BC,8BAA+B,QAEhCpJ,EAAmBkF,mBACgBlF,EAAmBkC,aAAa+C,QAClEjF,EAAmBgJ,WAAWC,6BAC/BjJ,EAAmBkF,eAAgBlF,EAAmBkC,aAAaG,QAClErC,EAAmBgJ,WAAWI,8BAI/BpJ,EAAmB8G,YAAc,WAEhC,IAAI/E,EACAxB,EACA8I,EAEJ3B,UAAY,SAAWC,GAEtB,IAyCc2B,EAEVC,EA3CA9E,EAAUkD,EAAEC,KAEhB,OAASnD,EAAQF,MAEhB,IAAK,OACJxC,EAAS0C,EAAQ1C,OAoCLuH,EAnCN7E,EAAQnE,iBAsChBC,EAAoB,IAAI2D,QAAS,SAAEC,GAElCoF,GAAgBD,aAAYE,qBAAsBrF,GAClDsF,MAAOF,KAEJhG,KAAM,WAAM,IAAAmG,EAEsBH,EAA/BI,EAFSD,EAETC,UAAWC,EAFFF,EAEEE,gBAEjBP,EAAaM,EAEbC,MAhDC,MAED,IAAK,YACJrJ,EAAkBgD,KAAM,WAEvB,IAMC,IANG,IAAAsG,EAiDR,SAAoBzG,GAEnB,IAAI0G,EAAY,IAAIT,EAAY,IAAIU,WAAY3G,IAE5CuB,EAAQmF,EAAUE,cAAe,EAAG,GACpCpF,EAASkF,EAAUG,eAAgB,EAAG,GACtCC,EAASJ,EAAUK,aAAc,GACjCC,EAAWN,EAAUO,cAEzB,SAASC,IAERR,EAAUS,QACVT,EAAUU,SAIX,IAAOJ,EAEN,OAASrI,EAAOlB,QAEf,KAAK,EACJkB,EAAOlB,OAAS,EASnB,IAAO8D,IAAWC,IAAYsF,EAG7B,MADAI,IACM,IAAI/H,MAAO,kDAIlB,IAAOuH,EAAUW,mBAGhB,MADAH,IACM,IAAI/H,MAAO,sDAMlB,IAFA,IAAIsC,KAEM6F,EAAM,EAAGA,EAAMR,EAAQQ,IAAS,CAEzC,IAAIC,EAAWb,EAAUE,cAAe,EAAGU,GACvCE,EAAYd,EAAUG,eAAgB,EAAGS,GACzCG,EAAM,IAAId,WAAYD,EAAUgB,8BAA+B,EAAGJ,EAAK3I,EAAOlB,SAE9EkK,EAASjB,EAAUkB,eACtBH,EACA,EACAH,EACA3I,EAAOlB,OACP,EACAuJ,GAGD,IAAOW,EAGN,MADAT,IACM,IAAI/H,MAAO,qDAIlBsC,EAAQkD,MAAQH,KAAMiD,EAAKlG,MAAOgG,EAAU/F,OAAQgG,IAMrD,OAFAN,KAES3F,QAAOC,SAAQwF,WAAUvF,UAAShE,OAAQkB,EAAOlB,QAzHHoK,CAAWxG,EAAQrB,QAAhEuB,EAFHkF,EAEGlF,MAAOC,EAFViF,EAEUjF,OAAQwF,EAFlBP,EAEkBO,SAAUvF,EAF5BgF,EAE4BhF,QAAShE,EAFrCgJ,EAEqChJ,OAEpCqK,KAEM9C,EAAI,EAAGA,EAAIvD,EAAQY,SAAW2C,EAEvC8C,EAAQnD,KAAMlD,EAASuD,GAAIR,KAAKxE,QAIjC+H,KAAK7G,aAAeC,KAAM,YAAaC,GAAIC,EAAQD,GAAIG,QAAOC,SAAQwF,WAAUvF,UAAShE,UAAUqK,GAElG,MAAQpD,GAETD,QAAQC,MAAOA,GAEfqD,KAAK7G,aAAeC,KAAM,QAASC,GAAIC,EAAQD,GAAIsD,MAAOA,EAAMrD,gBCxatE,IAAA2G,GACAxD,KADA,WAEA,OACAyD,OAAA,KACAC,MAAA,KACAxJ,SAAA,KACAyJ,KAAA,KACAC,MAAA,OAGAC,QAVA,WAWArL,KAAAoL,MAAA,IAAApL,KAAAsL,OAAAC,MACAvL,KAAAwL,OACAxL,KAAAyL,WAEAC,SACAF,KADA,WACA,IAAA9I,EAAA1C,KACAA,KAAA0B,SAAA,IAAA1B,KAAAsL,OAAAK,eAAAC,WAAA,IACA5L,KAAA0B,SAAAmK,cAAAC,OAAAC,kBACA/L,KAAA0B,SAAAsK,QAAAhM,KAAAiM,iBAAAH,OAAAI,aACAlM,KAAA0B,SAAAyK,eAAAnM,KAAAsL,OAAAc,aACAC,SAAAC,uBAAA,wCAAAC,YAAAvM,KAAA0B,SAAA8K,YACAxM,KAAAiL,OAAA,IAAAjL,KAAAsL,OAAAmB,kBAAA,GAAAzM,KAAAiM,iBAAAH,OAAAI,YAAA,OACAlM,KAAAiL,OAAAyB,SAAAC,EAAA,IACA3M,KAAAkL,MAAA,IAAAlL,KAAAsL,OAAAsB,MACA,IAAAC,EAAA,IAAA7M,KAAAsL,OAAAwB,kBAAA,aACAC,EAAA,IAAA/M,KAAAsL,OAAA0B,kBACAhN,KAAAmL,KAAA,IAAAnL,KAAAsL,OAAA2B,KAAAJ,EAAAE,GACA/M,KAAAkL,MAAAgC,IAAAlN,KAAAmL,MACA,IAAAxI,EAAA,IAAAwK,EACAxK,EAAArB,kBAAA,yBACAqB,EAAAlB,cAAAzB,KAAA0B,UACAiB,EAAAN,KAAA,yDAAAiC,GACAA,EAAA8I,SAAA1K,EAAA4I,OAAAc,aACAW,EAAAM,IAAA/I,EACAyI,EAAArH,aAAA,QACAQ,EAAA,SAAAwB,GACAD,QAAAC,WAEAoE,OAAAwB,iBAAA,SAAAtN,KAAAuN,gBAAA,IAEAA,eA1BA,WA2BAvN,KAAAwN,gBAAAxN,KAAAiL,OAAAjL,KAAA0B,WAEA+J,QA7BA,WA8BAgC,sBAAAzN,KAAAyL,SACA,IAAAiC,EAAA,GAAA1N,KAAAoL,MAAAuC,WACA3N,KAAAmL,KAAAyC,SAAAC,GAAAH,EACA1N,KAAAmL,KAAAyC,SAAAE,GAAAJ,EACA1N,KAAA0B,SAAAqM,OAAA/N,KAAAkL,MAAAlL,KAAAiL,WCzDe+C,GADED,OAFjB,WAA0B/N,KAAaiO,eAAbjO,KAAuCkO,MAAAC,GAAwB,OAA/DnO,KAA+DoO,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAbtO,KAAaiO,eAA0BE,EAAvCnO,KAAuCkO,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAiBI,YAAA,sCAAgDJ,EAAA,OAAYK,OAAOpK,GAAA,UAAa+J,EAAA,KAAUK,OAAOC,KAAA,sBAAAC,OAAA,SAAAC,IAAA,cAAjL3O,KAAkP4O,GAAA,cAAlP5O,KAAkP4O,GAAA,mCAAAT,EAAA,MAAlPnO,KAAkP4O,GAAA,KAAAT,EAAA,KAA8FK,OAAOC,KAAA,iDAAAC,OAAA,YAAvV1O,KAAka4O,GAAA,8CCEtc,IAcAC,EAdyBC,EAAQ,OAcjCC,CACE/D,EACAgD,GATF,EAVA,SAAAgB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/244.30a2e2741d4b043542e9.js","sourcesContent":["import {\r\n\tCompressedTexture,\r\n\tFileLoader,\r\n\tLinearFilter,\r\n\tLinearMipmapLinearFilter,\r\n\tLoader,\r\n\tRGBA_ASTC_4x4_Format,\r\n\tRGBA_BPTC_Format,\r\n\tRGBA_PVRTC_4BPPV1_Format,\r\n\tRGB_ETC1_Format,\r\n\tRGB_PVRTC_4BPPV1_Format,\r\n\tUnsignedByteType\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Loader for Basis Universal GPU Texture Codec.\r\n *\r\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\r\n * compression system that outputs a highly compressed intermediate file format\r\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\r\n * compression formats.\r\n *\r\n * This loader parallelizes the transcoding process across a configurable number\r\n * of web workers, before transferring the transcoded compressed texture back\r\n * to the main thread.\r\n */\r\nvar BasisTextureLoader = function ( manager ) {\r\n\r\n\tLoader.call( this, manager );\r\n\r\n\tthis.transcoderPath = '';\r\n\tthis.transcoderBinary = null;\r\n\tthis.transcoderPending = null;\r\n\r\n\tthis.workerLimit = 4;\r\n\tthis.workerPool = [];\r\n\tthis.workerNextTaskID = 1;\r\n\tthis.workerSourceURL = '';\r\n\tthis.workerConfig = {\r\n\t\tformat: null,\r\n\t\tastcSupported: false,\r\n\t\tbptcSupported: false,\r\n\t\tetcSupported: false,\r\n\t\tdxtSupported: false,\r\n\t\tpvrtcSupported: false,\r\n\t};\r\n\r\n};\r\n\r\nBasisTextureLoader.taskCache = new WeakMap();\r\n\r\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\tconstructor: BasisTextureLoader,\r\n\r\n\tsetTranscoderPath: function ( path ) {\r\n\r\n\t\tthis.transcoderPath = path;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetWorkerLimit: function ( workerLimit ) {\r\n\r\n\t\tthis.workerLimit = workerLimit;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdetectSupport: function ( renderer ) {\r\n\r\n\t\tvar config = this.workerConfig;\r\n\r\n\t\tconfig.astcSupported = renderer.extensions.has( 'WEBGL_compressed_texture_astc' );\r\n\t\tconfig.bptcSupported = renderer.extensions.has( 'EXT_texture_compression_bptc' );\r\n\t\tconfig.etcSupported = renderer.extensions.has( 'WEBGL_compressed_texture_etc1' );\r\n\t\tconfig.dxtSupported = renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' );\r\n\t\tconfig.pvrtcSupported = renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\r\n\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\tif ( config.astcSupported ) {\r\n\r\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\r\n\r\n\t\t} else if ( config.bptcSupported ) {\r\n\r\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\r\n\r\n\t\t} else if ( config.dxtSupported ) {\r\n\r\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\r\n\r\n\t\t} else if ( config.pvrtcSupported ) {\r\n\r\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\r\n\r\n\t\t} else if ( config.etcSupported ) {\r\n\r\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar loader = new FileLoader( this.manager );\r\n\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\r\n\t\tloader.load( url, ( buffer ) => {\r\n\r\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\r\n\t\t\t// again from this thread.\r\n\t\t\tif ( BasisTextureLoader.taskCache.has( buffer ) ) {\r\n\r\n\t\t\t\tvar cachedTask = BasisTextureLoader.taskCache.get( buffer );\r\n\r\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._createTexture( buffer, url )\r\n\t\t\t\t.then( onLoad )\r\n\t\t\t\t.catch( onError );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * @param\t{ArrayBuffer} buffer\r\n\t * @param\t{string} url\r\n\t * @return {Promise<CompressedTexture>}\r\n\t */\r\n\t_createTexture: function ( buffer, url ) {\r\n\r\n\t\tvar worker;\r\n\t\tvar taskID;\r\n\r\n\t\tvar taskCost = buffer.byteLength;\r\n\r\n\t\tvar texturePending = this._allocateWorker( taskCost )\r\n\t\t\t.then( ( _worker ) => {\r\n\r\n\t\t\t\tworker = _worker;\r\n\t\t\t\ttaskID = this.workerNextTaskID ++;\r\n\r\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\r\n\r\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\r\n\r\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} )\r\n\t\t\t.then( ( message ) => {\r\n\r\n\t\t\t\tvar config = this.workerConfig;\r\n\r\n\t\t\t\tvar { width, height, mipmaps, format } = message;\r\n\r\n\t\t\t\tvar texture;\r\n\r\n\t\t\t\tswitch ( format ) {\r\n\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\r\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\r\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_BPTC_Format );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\r\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\r\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\r\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\r\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\r\n\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\treturn texture;\r\n\r\n\t\t\t} );\r\n\r\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\r\n\t\ttexturePending\r\n\t\t\t.catch( () => true )\r\n\t\t\t.then( () => {\r\n\r\n\t\t\t\tif ( worker && taskID ) {\r\n\r\n\t\t\t\t\tworker._taskLoad -= taskCost;\r\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t// Cache the task result.\r\n\t\tBasisTextureLoader.taskCache.set( buffer, {\r\n\r\n\t\t\turl: url,\r\n\t\t\tpromise: texturePending\r\n\r\n\t\t} );\r\n\r\n\t\treturn texturePending;\r\n\r\n\t},\r\n\r\n\t_initTranscoder: function () {\r\n\r\n\t\tif ( ! this.transcoderPending ) {\r\n\r\n\t\t\t// Load transcoder wrapper.\r\n\t\t\tvar jsLoader = new FileLoader( this.manager );\r\n\t\t\tjsLoader.setPath( this.transcoderPath );\r\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\r\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\r\n\r\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// Load transcoder WASM binary.\r\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\r\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\r\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\r\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\r\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\r\n\r\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\r\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\r\n\r\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\r\n\r\n\t\t\t\t\tvar body = [\r\n\t\t\t\t\t\t'/* basis_transcoder.js */',\r\n\t\t\t\t\t\tjsContent,\r\n\t\t\t\t\t\t'/* worker */',\r\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\r\n\t\t\t\t\t].join( '\\n' );\r\n\r\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\r\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.transcoderPending;\r\n\r\n\t},\r\n\r\n\t_allocateWorker: function ( taskCost ) {\r\n\r\n\t\treturn this._initTranscoder().then( () => {\r\n\r\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\r\n\r\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\r\n\r\n\t\t\t\tworker._callbacks = {};\r\n\t\t\t\tworker._taskLoad = 0;\r\n\r\n\t\t\t\tworker.postMessage( {\r\n\t\t\t\t\ttype: 'init',\r\n\t\t\t\t\tconfig: this.workerConfig,\r\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tworker.onmessage = function ( e ) {\r\n\r\n\t\t\t\t\tvar message = e.data;\r\n\r\n\t\t\t\t\tswitch ( message.type ) {\r\n\r\n\t\t\t\t\t\tcase 'transcode':\r\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.workerPool.push( worker );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\r\n\r\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\r\n\r\n\t\t\tworker._taskLoad += taskCost;\r\n\r\n\t\t\treturn worker;\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\r\n\r\n\t\t\tthis.workerPool[ i ].terminate();\r\n\r\n\t\t}\r\n\r\n\t\tthis.workerPool.length = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n/* CONSTANTS */\r\n\r\nBasisTextureLoader.BASIS_FORMAT = {\r\n\tcTFETC1: 0,\r\n\tcTFETC2: 1,\r\n\tcTFBC1: 2,\r\n\tcTFBC3: 3,\r\n\tcTFBC4: 4,\r\n\tcTFBC5: 5,\r\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\r\n\tcTFBC7_M5: 7,\r\n\tcTFPVRTC1_4_RGB: 8,\r\n\tcTFPVRTC1_4_RGBA: 9,\r\n\tcTFASTC_4x4: 10,\r\n\tcTFATC_RGB: 11,\r\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\r\n\tcTFRGBA32: 13,\r\n\tcTFRGB565: 14,\r\n\tcTFBGR565: 15,\r\n\tcTFRGBA4444: 16,\r\n};\r\n\r\n// DXT formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\nBasisTextureLoader.DXT_FORMAT = {\r\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\r\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\r\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\r\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\r\n};\r\nBasisTextureLoader.DXT_FORMAT_MAP = {};\r\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\r\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\r\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n/* WEB WORKER */\r\n\r\nBasisTextureLoader.BasisWorker = function () {\r\n\r\n\tvar config;\r\n\tvar transcoderPending;\r\n\tvar _BasisFile;\r\n\r\n\tonmessage = function ( e ) {\r\n\r\n\t\tvar message = e.data;\r\n\r\n\t\tswitch ( message.type ) {\r\n\r\n\t\t\tcase 'init':\r\n\t\t\t\tconfig = message.config;\r\n\t\t\t\tinit( message.transcoderBinary );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'transcode':\r\n\t\t\t\ttranscoderPending.then( () => {\r\n\r\n\t\t\t\t\ttry {\r\n\r\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\r\n\r\n\t\t\t\t\t\tvar buffers = [];\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\r\n\r\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\r\n\r\n\t\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\t\tconsole.error( error );\r\n\r\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction init( wasmBinary ) {\r\n\r\n\t\tvar BasisModule;\r\n\t\ttranscoderPending = new Promise( ( resolve ) => {\r\n\r\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\r\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\r\n\r\n\t\t} ).then( () => {\r\n\r\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\r\n\r\n\t\t\t_BasisFile = BasisFile;\r\n\r\n\t\t\tinitializeBasis();\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tfunction transcode( buffer ) {\r\n\r\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\r\n\r\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\r\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\r\n\t\tvar levels = basisFile.getNumLevels( 0 );\r\n\t\tvar hasAlpha = basisFile.getHasAlpha();\r\n\r\n\t\tfunction cleanup() {\r\n\r\n\t\t\tbasisFile.close();\r\n\t\t\tbasisFile.delete();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! hasAlpha ) {\r\n\r\n\t\t\tswitch ( config.format ) {\r\n\r\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\r\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! width || ! height || ! levels ) {\r\n\r\n\t\t\tcleanup();\r\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:\tInvalid .basis file' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! basisFile.startTranscoding() ) {\r\n\r\n\t\t\tcleanup();\r\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\r\n\r\n\t\t}\r\n\r\n\t\tvar mipmaps = [];\r\n\r\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\r\n\r\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\r\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\r\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\r\n\r\n\t\t\tvar status = basisFile.transcodeImage(\r\n\t\t\t\tdst,\r\n\t\t\t\t0,\r\n\t\t\t\tmip,\r\n\t\t\t\tconfig.format,\r\n\t\t\t\t0,\r\n\t\t\t\thasAlpha\r\n\t\t\t);\r\n\r\n\t\t\tif ( ! status ) {\r\n\r\n\t\t\t\tcleanup();\r\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\r\n\r\n\t\t}\r\n\r\n\t\tcleanup();\r\n\r\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { BasisTextureLoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/BasisTextureLoader.js","<template>\r\n    <div class=\"webglLoaderTextureBasis-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl - basis texture loader<br />\r\n\t\t\t<a href=\"https://github.com/binomialLLC/basis_universal\" target=\"_blank\">Basis Universal GPU Texture Codec</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { BasisTextureLoader } from '@/components/jsm/loaders/BasisTextureLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tmesh: null,\r\n\t\t\tclock: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock();\r\n        this.init();\r\n        this.animate();\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true });\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight);\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding;\r\n            document.getElementsByClassName('webglLoaderTextureBasis-container')[0].appendChild(this.renderer.domElement);\r\n            this.camera = new this.$THREE.PerspectiveCamera(50, this.$webglInnerWidth / window.innerHeight, 1, 2000);\r\n            this.camera.position.z = 500;\r\n            this.scene = new this.$THREE.Scene();\r\n            var geometry = new this.$THREE.BoxBufferGeometry(200, 200, 200);\r\n            var material = new this.$THREE.MeshBasicMaterial();\r\n            this.mesh = new this.$THREE.Mesh(geometry, material);\r\n            this.scene.add(this.mesh);\r\n            var loader = new BasisTextureLoader();\r\n            loader.setTranscoderPath('static/js/libs/basis/');\r\n            loader.detectSupport(this.renderer);\r\n            loader.load('static/textures/compressed/PavingStones.basis', (texture) => {\r\n                texture.encoding = this.$THREE.sRGBEncoding;\r\n                material.map = texture;\r\n                material.needsUpdate = true;\r\n            }, undefined, (error) => {\r\n                console.error(error);\r\n            });\r\n            window.addEventListener('resize', this.onWindowResize, false);\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate);\r\n            var delta = this.clock.getDelta() * 0.5;\r\n            this.mesh.rotation.x += delta;\r\n            this.mesh.rotation.y += delta;\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderTextureBasis-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    margin-left: 0;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderTextureBasis.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderTextureBasis-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl - basis texture loader\"),_c('br'),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"https://github.com/binomialLLC/basis_universal\",\"target\":\"_blank\"}},[_vm._v(\"Basis Universal GPU Texture Codec\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4214d04b\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderTextureBasis.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4214d04b\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderTextureBasis.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderTextureBasis.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderTextureBasis.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4214d04b\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderTextureBasis.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4214d04b\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderTextureBasis.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}