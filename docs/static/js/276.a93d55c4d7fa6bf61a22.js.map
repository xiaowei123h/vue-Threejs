{"version":3,"sources":["webpack:///./src/components/jsm/objects/Lensflare.js","webpack:///src/views/lensflares/webglLensflares.vue","webpack:///./src/views/lensflares/webglLensflares.vue?301d","webpack:///./src/views/lensflares/webglLensflares.vue"],"names":["Lensflare","Mesh","call","this","Geometry","MeshBasicMaterial","opacity","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","Vector3","positionView","tempMap","DataTexture","Uint8Array","RGBFormat","minFilter","NearestFilter","magFilter","wrapS","ClampToEdgeWrapping","wrapT","occlusionMap","geometry","material1a","RawShaderMaterial","uniforms","scale","value","screenPosition","vertexShader","join","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","Color","Vector2","blending","AdditiveBlending","mesh2","addElement","element","push","screenPositionPixels","validArea","Box2","viewport","Vector4","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","Object","create","constructor","isLensflare","float32Array","interleavedBuffer","BufferGeometry","Float32Array","InterleavedBuffer","setIndex","setAttribute","InterleavedBufferAttribute","webglLensflares","data","container","stats","controls","clock","mounted","$THREE","Clock","init","animate","methods","document","createElement","getElementsByClassName","appendChild","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","Scene","background","setHSL","fog","Fog","BoxBufferGeometry","material","MeshPhongMaterial","specular","shininess","mesh","Math","random","rotation","PI","matrixAutoUpdate","updateMatrix","add","dirLight","DirectionalLight","normalize","textureLoader","TextureLoader","textureFlare0","load","textureFlare3","that","addLight","h","s","light","PointLight","lensflare","Lensflare_Lensflare","Lensflare_LensflareElement","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","domElement","FlyControls","movementSpeed","rollSpeed","autoForward","dragToLook","$Stats","dom","style","left","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","render","update","delta","getDelta","lensflares_webglLensflares","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/276.a93d55c4d7fa6bf61a22.js","sourcesContent":["import {\r\n\tAdditiveBlending,\r\n\tBox2,\r\n\tBufferGeometry,\r\n\tClampToEdgeWrapping,\r\n\tColor,\r\n\tDataTexture,\r\n\tInterleavedBuffer,\r\n\tInterleavedBufferAttribute,\r\n\tMesh,\r\n\tMeshBasicMaterial,\r\n\tNearestFilter,\r\n\tRGBFormat,\r\n\tRawShaderMaterial,\r\n\tVector2,\r\n\tVector3,\r\n\tVector4\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar Lensflare = function () {\r\n\r\n\tMesh.call( this, Lensflare.Geometry, new MeshBasicMaterial( { opacity: 0, transparent: true } ) );\r\n\r\n\tthis.type = 'Lensflare';\r\n\tthis.frustumCulled = false;\r\n\tthis.renderOrder = Infinity;\r\n\r\n\t//\r\n\r\n\tvar positionScreen = new Vector3();\r\n\tvar positionView = new Vector3();\r\n\r\n\t// textures\r\n\r\n\tvar tempMap = new DataTexture( new Uint8Array( 16 * 16 * 3 ), 16, 16, RGBFormat );\r\n\ttempMap.minFilter = NearestFilter;\r\n\ttempMap.magFilter = NearestFilter;\r\n\ttempMap.wrapS = ClampToEdgeWrapping;\r\n\ttempMap.wrapT = ClampToEdgeWrapping;\r\n\r\n\tvar occlusionMap = new DataTexture( new Uint8Array( 16 * 16 * 3 ), 16, 16, RGBFormat );\r\n\tocclusionMap.minFilter = NearestFilter;\r\n\tocclusionMap.magFilter = NearestFilter;\r\n\tocclusionMap.wrapS = ClampToEdgeWrapping;\r\n\tocclusionMap.wrapT = ClampToEdgeWrapping;\r\n\r\n\t// material\r\n\r\n\tvar geometry = Lensflare.Geometry;\r\n\r\n\tvar material1a = new RawShaderMaterial( {\r\n\t\tuniforms: {\r\n\t\t\t'scale': { value: null },\r\n\t\t\t'screenPosition': { value: null }\r\n\t\t},\r\n\t\tvertexShader: [\r\n\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'uniform vec3 screenPosition;',\r\n\t\t\t'uniform vec2 scale;',\r\n\r\n\t\t\t'attribute vec3 position;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t'\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ),\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t'\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ),\r\n\t\tdepthTest: true,\r\n\t\tdepthWrite: false,\r\n\t\ttransparent: false\r\n\t} );\r\n\r\n\tvar material1b = new RawShaderMaterial( {\r\n\t\tuniforms: {\r\n\t\t\t'map': { value: tempMap },\r\n\t\t\t'scale': { value: null },\r\n\t\t\t'screenPosition': { value: null }\r\n\t\t},\r\n\t\tvertexShader: [\r\n\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'uniform vec3 screenPosition;',\r\n\t\t\t'uniform vec2 scale;',\r\n\r\n\t\t\t'attribute vec3 position;',\r\n\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t'\tvUV = uv;',\r\n\r\n\t\t\t'\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ),\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t'precision highp float;',\r\n\r\n\t\t\t'uniform sampler2D map;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t'\tgl_FragColor = texture2D( map, vUV );',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ),\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false,\r\n\t\ttransparent: false\r\n\t} );\r\n\r\n\t// the following object is used for occlusionMap generation\r\n\r\n\tvar mesh1 = new Mesh( geometry, material1a );\r\n\r\n\t//\r\n\r\n\tvar elements = [];\r\n\r\n\tvar shader = LensflareElement.Shader;\r\n\r\n\tvar material2 = new RawShaderMaterial( {\r\n\t\tuniforms: {\r\n\t\t\t'map': { value: null },\r\n\t\t\t'occlusionMap': { value: occlusionMap },\r\n\t\t\t'color': { value: new Color( 0xffffff ) },\r\n\t\t\t'scale': { value: new Vector2() },\r\n\t\t\t'screenPosition': { value: new Vector3() }\r\n\t\t},\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tfragmentShader: shader.fragmentShader,\r\n\t\tblending: AdditiveBlending,\r\n\t\ttransparent: true,\r\n\t\tdepthWrite: false\r\n\t} );\r\n\r\n\tvar mesh2 = new Mesh( geometry, material2 );\r\n\r\n\tthis.addElement = function ( element ) {\r\n\r\n\t\telements.push( element );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar scale = new Vector2();\r\n\tvar screenPositionPixels = new Vector2();\r\n\tvar validArea = new Box2();\r\n\tvar viewport = new Vector4();\r\n\r\n\tthis.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\trenderer.getCurrentViewport( viewport );\r\n\r\n\t\tvar invAspect = viewport.w / viewport.z;\r\n\t\tvar halfViewportWidth = viewport.z / 2.0;\r\n\t\tvar halfViewportHeight = viewport.w / 2.0;\r\n\r\n\t\tvar size = 16 / viewport.w;\r\n\t\tscale.set( size * invAspect, size );\r\n\r\n\t\tvalidArea.min.set( viewport.x, viewport.y );\r\n\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\r\n\r\n\t\t// calculate position in screen space\r\n\r\n\t\tpositionView.setFromMatrixPosition( this.matrixWorld );\r\n\t\tpositionView.applyMatrix4( camera.matrixWorldInverse );\r\n\r\n\t\tif ( positionView.z > 0 ) return; // lensflare is behind the camera\r\n\r\n\t\tpositionScreen.copy( positionView ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\r\n\r\n\t\tscreenPositionPixels.x = viewport.x + ( positionScreen.x * halfViewportWidth ) + halfViewportWidth - 8;\r\n\t\tscreenPositionPixels.y = viewport.y + ( positionScreen.y * halfViewportHeight ) + halfViewportHeight - 8;\r\n\r\n\t\t// screen cull\r\n\r\n\t\tif ( validArea.containsPoint( screenPositionPixels ) ) {\r\n\r\n\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, tempMap );\r\n\r\n\t\t\t// render pink quad\r\n\r\n\t\t\tvar uniforms = material1a.uniforms;\r\n\t\t\tuniforms[ \"scale\" ].value = scale;\r\n\t\t\tuniforms[ \"screenPosition\" ].value = positionScreen;\r\n\r\n\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1a, mesh1, null );\r\n\r\n\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, occlusionMap );\r\n\r\n\t\t\t// restore graphics\r\n\r\n\t\t\tvar uniforms = material1b.uniforms;\r\n\t\t\tuniforms[ \"scale\" ].value = scale;\r\n\t\t\tuniforms[ \"screenPosition\" ].value = positionScreen;\r\n\r\n\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1b, mesh1, null );\r\n\r\n\t\t\t// render elements\r\n\r\n\t\t\tvar vecX = - positionScreen.x * 2;\r\n\t\t\tvar vecY = - positionScreen.y * 2;\r\n\r\n\t\t\tfor ( var i = 0, l = elements.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar element = elements[ i ];\r\n\r\n\t\t\t\tvar uniforms = material2.uniforms;\r\n\r\n\t\t\t\tuniforms[ \"color\" ].value.copy( element.color );\r\n\t\t\t\tuniforms[ \"map\" ].value = element.texture;\r\n\t\t\t\tuniforms[ \"screenPosition\" ].value.x = positionScreen.x + vecX * element.distance;\r\n\t\t\t\tuniforms[ \"screenPosition\" ].value.y = positionScreen.y + vecY * element.distance;\r\n\r\n\t\t\t\tvar size = element.size / viewport.w;\r\n\t\t\t\tvar invAspect = viewport.w / viewport.z;\r\n\r\n\t\t\t\tuniforms[ \"scale\" ].value.set( size * invAspect, size );\r\n\r\n\t\t\t\tmaterial2.uniformsNeedUpdate = true;\r\n\r\n\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material2, mesh2, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.dispose = function () {\r\n\r\n\t\tmaterial1a.dispose();\r\n\t\tmaterial1b.dispose();\r\n\t\tmaterial2.dispose();\r\n\r\n\t\ttempMap.dispose();\r\n\t\tocclusionMap.dispose();\r\n\r\n\t\tfor ( var i = 0, l = elements.length; i < l; i ++ ) {\r\n\r\n\t\t\telements[ i ].texture.dispose();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nLensflare.prototype = Object.create( Mesh.prototype );\r\nLensflare.prototype.constructor = Lensflare;\r\nLensflare.prototype.isLensflare = true;\r\n\r\n//\r\n\r\nvar LensflareElement = function ( texture, size, distance, color ) {\r\n\r\n\tthis.texture = texture;\r\n\tthis.size = size || 1;\r\n\tthis.distance = distance || 0;\r\n\tthis.color = color || new Color( 0xffffff );\r\n\r\n};\r\n\r\nLensflareElement.Shader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'map': { value: null },\r\n\t\t'occlusionMap': { value: null },\r\n\t\t'color': { value: null },\r\n\t\t'scale': { value: null },\r\n\t\t'screenPosition': { value: null }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t'precision highp float;',\r\n\r\n\t\t'uniform vec3 screenPosition;',\r\n\t\t'uniform vec2 scale;',\r\n\r\n\t\t'uniform sampler2D occlusionMap;',\r\n\r\n\t\t'attribute vec3 position;',\r\n\t\t'attribute vec2 uv;',\r\n\r\n\t\t'varying vec2 vUV;',\r\n\t\t'varying float vVisibility;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvUV = uv;',\r\n\r\n\t\t'\tvec2 pos = position.xy;',\r\n\r\n\t\t'\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\r\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\r\n\r\n\t\t'\tvVisibility =        visibility.r / 9.0;',\r\n\t\t'\tvVisibility *= 1.0 - visibility.g / 9.0;',\r\n\t\t'\tvVisibility *=       visibility.b / 9.0;',\r\n\r\n\t\t'\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\r\n\r\n\t\t'}'\r\n\r\n\t].join( '\\n' ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t'precision highp float;',\r\n\r\n\t\t'uniform sampler2D map;',\r\n\t\t'uniform vec3 color;',\r\n\r\n\t\t'varying vec2 vUV;',\r\n\t\t'varying float vVisibility;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvec4 texture = texture2D( map, vUV );',\r\n\t\t'\ttexture.a *= vVisibility;',\r\n\t\t'\tgl_FragColor = texture;',\r\n\t\t'\tgl_FragColor.rgb *= color;',\r\n\r\n\t\t'}'\r\n\r\n\t].join( '\\n' )\r\n\r\n};\r\n\r\nLensflare.Geometry = ( function () {\r\n\r\n\tvar geometry = new BufferGeometry();\r\n\r\n\tvar float32Array = new Float32Array( [\r\n\t\t- 1, - 1, 0, 0, 0,\r\n\t\t1, - 1, 0, 1, 0,\r\n\t\t1, 1, 0, 1, 1,\r\n\t\t- 1, 1, 0, 0, 1\r\n\t] );\r\n\r\n\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\tgeometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\tgeometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\treturn geometry;\r\n\r\n} )();\r\n\r\nexport { Lensflare, LensflareElement };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/Lensflare.js","<template>\r\n    <div class=\"webglLensflares-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - lensflares<br/>\r\n\t\t\ttextures from <a href=\"http://www.ro.me\" target=\"_blank\" rel=\"noopener\">ro.me</a><br/>\r\n\t\t\tfly with WASD/RF/QE + mouse\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { FlyControls } from '@/components/jsm/controls/FlyControls.js'\r\nimport { Lensflare, LensflareElement } from '@/components/jsm/objects/Lensflare.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            controls: null,\r\n\t\t\tclock: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglLensflares-container')[0].appendChild(this.container)\r\n            // camera\r\n            this.camera = new this.$THREE.PerspectiveCamera(40, this.$webglInnerWidth / window.innerHeight, 1, 15000)\r\n            this.camera.position.z = 250\r\n            // scene\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color().setHSL(0.51, 0.4, 0.01)\r\n            this.scene.fog = new this.$THREE.Fog(this.scene.background, 3500, 15000)\r\n            // world\r\n            var s = 250\r\n            var geometry = new this.$THREE.BoxBufferGeometry(s, s, s)\r\n            var material = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0xffffff, shininess: 50 })\r\n            for (var i = 0; i < 3000; i ++) {\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.x = 8000 * (2.0 * Math.random() - 1.0)\r\n                mesh.position.y = 8000 * (2.0 * Math.random() - 1.0)\r\n                mesh.position.z = 8000 * (2.0 * Math.random() - 1.0)\r\n                mesh.rotation.x = Math.random() * Math.PI\r\n                mesh.rotation.y = Math.random() * Math.PI\r\n                mesh.rotation.z = Math.random() * Math.PI\r\n                mesh.matrixAutoUpdate = false\r\n                mesh.updateMatrix()\r\n                this.scene.add(mesh)\r\n            }\r\n            // lights\r\n            var dirLight = new this.$THREE.DirectionalLight(0xffffff, 0.05)\r\n            dirLight.position.set(0, - 1, 0).normalize()\r\n            dirLight.color.setHSL(0.1, 0.7, 0.5)\r\n            this.scene.add(dirLight)\r\n            // lensflares\r\n            var textureLoader = new this.$THREE.TextureLoader()\r\n            var textureFlare0 = textureLoader.load('static/textures/lensflare/lensflare0.png')\r\n            var textureFlare3 = textureLoader.load('static/textures/lensflare/lensflare3.png')\r\n            var that = this\r\n            addLight(0.55, 0.9, 0.5, 5000, 0, - 1000)\r\n            addLight(0.08, 0.8, 0.5, 0, 0, - 1000)\r\n            addLight(0.995, 0.5, 0.9, 5000, 5000, - 1000)\r\n            function addLight(h, s, l, x, y, z) {\r\n                var light = new that.$THREE.PointLight(0xffffff, 1.5, 2000)\r\n                light.color.setHSL(h, s, l)\r\n                light.position.set(x, y, z)\r\n                that.scene.add(light)\r\n                var lensflare = new Lensflare()\r\n                lensflare.addElement(new LensflareElement(textureFlare0, 700, 0, light.color))\r\n                lensflare.addElement(new LensflareElement(textureFlare3, 60, 0.6))\r\n                lensflare.addElement(new LensflareElement(textureFlare3, 70, 0.7))\r\n                lensflare.addElement(new LensflareElement(textureFlare3, 120, 0.9))\r\n                lensflare.addElement(new LensflareElement(textureFlare3, 70, 1))\r\n                light.add(lensflare)\r\n            }\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.container.appendChild(this.renderer.domElement)\r\n            //\r\n            this.controls = new FlyControls(this.camera, this.renderer.domElement)\r\n            this.controls.movementSpeed = 2500\r\n            this.controls.domElement = this.container\r\n            this.controls.rollSpeed = Math.PI / 6\r\n            this.controls.autoForward = false\r\n            this.controls.dragToLook = false\r\n            // stats\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            // events\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var delta = this.clock.getDelta()\r\n            this.controls.update(delta)\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLensflares-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    margin-left: 0;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/lensflares/webglLensflares.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLensflares-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - lensflares\"),_c('br'),_vm._v(\"\\n\\t\\t\\ttextures from \"),_c('a',{attrs:{\"href\":\"http://www.ro.me\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"ro.me\")]),_c('br'),_vm._v(\"\\n\\t\\t\\tfly with WASD/RF/QE + mouse\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-2e2dae92\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/lensflares/webglLensflares.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2e2dae92\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLensflares.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLensflares.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLensflares.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2e2dae92\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLensflares.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2e2dae92\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/lensflares/webglLensflares.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}