{"version":3,"sources":["webpack:///src/views/physics/physicsAmmoCloth.vue","webpack:///./src/views/physics/physicsAmmoCloth.vue?c610","webpack:///./src/views/physics/physicsAmmoCloth.vue"],"names":["physicsAmmoCloth","data","container","stats","camera","controls","scene","renderer","textureLoader","clock","gravityConstant","physicsWorld","rigidBodies","margin","hinge","cloth","transformAux1","armMovement","mounted","_this","this","$THREE","Clock","Ammo","then","AmmoLib","init","animate","methods","initGraphics","initPhysics","createObjects","initInput","document","getElementById","PerspectiveCamera","$webglInnerWidth","window","innerHeight","Scene","background","Color","position","set","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","appendChild","domElement","OrbitControls","target","update","TextureLoader","ambientLight","AmbientLight","add","light","DirectionalLight","castShadow","shadow","left","right","top","bottom","near","far","mapSize","x","y","bias","$Stats","dom","style","addEventListener","onWindowResize","collisionConfiguration","btSoftBodyRigidBodyCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","softBodySolver","btDefaultSoftBodySolver","btSoftRigidDynamicsWorld","setGravity","btVector3","getWorldInfo","set_m_gravity","btTransform","_this2","pos","Vector3","quat","Quaternion","ground","createParalellepiped","MeshPhongMaterial","color","receiveShadow","load","texture","wrapS","RepeatWrapping","wrapT","repeat","material","map","needsUpdate","z0","brickHeight","j","oddRow","z","nRow","numBricksLength","i","brickLengthCurrent","brickMassCurrent","brick","brickLength","createMaterial","clothPos","clothGeometry","PlaneBufferGeometry","clothWidth","clothHeight","rotateY","Math","PI","translate","clothMaterial","MeshLambertMaterial","side","DoubleSide","Mesh","softBodyHelpers","btSoftBodyHelpers","clothCorner00","clothCorner01","clothCorner10","clothCorner11","clothSoftBody","CreatePatch","clothNumSegmentsZ","clothNumSegmentsY","sbConfig","get_m_cfg","set_viterations","set_piterations","setTotalMass","castObject","btCollisionObject","getCollisionShape","setMargin","addSoftBody","userData","physicsBody","setActivationState","pylonHeight","baseMaterial","base","pylon","arm","armLength","appendAnchor","pivotA","pivotB","axis","btHingeConstraint","addConstraint","sx","sy","sz","mass","threeObject","BoxBufferGeometry","shape","btBoxShape","createRigidBody","physicsShape","copy","quaternion","transform","setIdentity","setOrigin","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","push","addRigidBody","createRandomColor","floor","random","_this3","event","keyCode","$onWindowResize","requestAnimationFrame","render","deltaTime","getDelta","updatePhysics","enableAngularMotor","stepSimulation","softBody","clothPositions","geometry","attributes","array","numVerts","length","nodes","get_m_nodes","indexFloat","nodePos","at","get_m_x","computeVertexNormals","normal","il","objThree","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","physics_physicsAmmoCloth","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/289.92b1a70af558a8493d50.js","sourcesContent":["<template>\r\n    <div class=\"physicsAmmoCloth-container\">\r\n        <div id=\"info\">Ammo.js physics soft body cloth demo<br>Press Q or A to move the arm.</div>\r\n\t\t<div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            // Graphics variables\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            controls: null,scene: null,renderer: null,\r\n\t\t\ttextureLoader: null,\r\n\t\t\tclock: null,\r\n\t\t\t// Physics variables\r\n\t\t\tgravityConstant: - 9.8,\r\n\t\t\tphysicsWorld: null,\r\n\t\t\trigidBodies: [],\r\n\t\t\tmargin: 0.05,\r\n\t\t\thinge: null,\r\n\t\t\tcloth: null,\r\n\t\t\ttransformAux1: null,\r\n\t\t\tarmMovement: 0,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        Ammo().then((AmmoLib) => {\r\n            Ammo = AmmoLib\r\n            this.init()\r\n            this.animate()\r\n        })\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.initGraphics()\r\n            this.initPhysics()\r\n            this.createObjects()\r\n            this.initInput()\r\n        },\r\n        initGraphics() {\r\n            this.container = document.getElementById('container')\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.2, 2000)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xbfd1e5)\r\n            this.camera.position.set(- 12, 7, 4)\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.shadowMap.enabled = true\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.controls.target.set(0, 2, 0)\r\n            this.controls.update()\r\n            this.textureLoader = new this.$THREE.TextureLoader()\r\n            var ambientLight = new this.$THREE.AmbientLight(0x404040)\r\n            this.scene.add(ambientLight)\r\n            var light = new this.$THREE.DirectionalLight(0xffffff, 1)\r\n            light.position.set(- 7, 10, 15)\r\n            light.castShadow = true\r\n            var d = 10\r\n            light.shadow.camera.left = - d\r\n            light.shadow.camera.right = d\r\n            light.shadow.camera.top = d\r\n            light.shadow.camera.bottom = - d\r\n            light.shadow.camera.near = 2\r\n            light.shadow.camera.far = 50\r\n            light.shadow.mapSize.x = 1024\r\n            light.shadow.mapSize.y = 1024\r\n            light.shadow.bias = - 0.003\r\n            this.scene.add(light)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.stats.domElement.style.position = 'absolute'\r\n            this.stats.domElement.style.top = '0px'\r\n            this.container.appendChild(this.stats.domElement)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        initPhysics() {\r\n            // Physics configuration\r\n            var collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration()\r\n            var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration)\r\n            var broadphase = new Ammo.btDbvtBroadphase()\r\n            var solver = new Ammo.btSequentialImpulseConstraintSolver()\r\n            var softBodySolver = new Ammo.btDefaultSoftBodySolver()\r\n            this.physicsWorld = new Ammo.btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration, softBodySolver)\r\n            this.physicsWorld.setGravity(new Ammo.btVector3(0, this.gravityConstant, 0))\r\n            this.physicsWorld.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, this.gravityConstant, 0))\r\n            this.transformAux1 = new Ammo.btTransform()\r\n        },\r\n        createObjects() {\r\n            var pos = new this.$THREE.Vector3()\r\n            var quat = new this.$THREE.Quaternion()\r\n            // Ground\r\n            pos.set(0, - 0.5, 0)\r\n            quat.set(0, 0, 0, 1)\r\n            var ground = this.createParalellepiped(40, 1, 40, 0, pos, quat, new this.$THREE.MeshPhongMaterial({ color: 0xFFFFFF }))\r\n            ground.castShadow = true\r\n            ground.receiveShadow = true\r\n            this.textureLoader.load(\"static/textures/grid.png\", (texture) => {\r\n                texture.wrapS = this.$THREE.RepeatWrapping\r\n                texture.wrapT = this.$THREE.RepeatWrapping\r\n                texture.repeat.set(40, 40)\r\n                ground.material.map = texture\r\n                ground.material.needsUpdate = true\r\n            })\r\n            // Wall\r\n            var brickMass = 0.5\r\n            var brickLength = 1.2\r\n            var brickDepth = 0.6\r\n            var brickHeight = brickLength * 0.5\r\n            var numBricksLength = 6\r\n            var numBricksHeight = 8\r\n            var z0 = - numBricksLength * brickLength * 0.5\r\n            pos.set(0, brickHeight * 0.5, z0)\r\n            quat.set(0, 0, 0, 1)\r\n            for (var j = 0; j < numBricksHeight; j ++) {\r\n                var oddRow = (j % 2) == 1\r\n                pos.z = z0\r\n                if (oddRow) {\r\n                    pos.z -= 0.25 * brickLength\r\n                }\r\n                var nRow = oddRow ? numBricksLength + 1 : numBricksLength\r\n                for (var i = 0; i < nRow; i ++) {\r\n                    var brickLengthCurrent = brickLength\r\n                    var brickMassCurrent = brickMass\r\n                    if (oddRow && (i == 0 || i == nRow - 1)) {\r\n                        brickLengthCurrent *= 0.5\r\n                        brickMassCurrent *= 0.5\r\n                    }\r\n                    var brick = this.createParalellepiped(brickDepth, brickHeight, brickLengthCurrent, brickMassCurrent, pos, quat, this.createMaterial())\r\n                    brick.castShadow = true\r\n                    brick.receiveShadow = true\r\n                    if (oddRow && (i == 0 || i == nRow - 2)) {\r\n                        pos.z += 0.75 * brickLength\r\n                    } else {\r\n                        pos.z += brickLength\r\n                    }\r\n                }\r\n                pos.y += brickHeight\r\n            }\r\n            // The cloth\r\n            // Cloth graphic object\r\n            var clothWidth = 4\r\n            var clothHeight = 3\r\n            var clothNumSegmentsZ = clothWidth * 5\r\n            var clothNumSegmentsY = clothHeight * 5\r\n            var clothPos = new this.$THREE.Vector3(- 3, 3, 2)\r\n            var clothGeometry = new this.$THREE.PlaneBufferGeometry(clothWidth, clothHeight, clothNumSegmentsZ, clothNumSegmentsY)\r\n            clothGeometry.rotateY(Math.PI * 0.5)\r\n            clothGeometry.translate(clothPos.x, clothPos.y + clothHeight * 0.5, clothPos.z - clothWidth * 0.5)\r\n            var clothMaterial = new this.$THREE.MeshLambertMaterial({ color: 0xFFFFFF, side: this.$THREE.DoubleSide })\r\n            this.cloth = new this.$THREE.Mesh(clothGeometry, clothMaterial)\r\n            this.cloth.castShadow = true\r\n            this.cloth.receiveShadow = true\r\n            this.scene.add(this.cloth)\r\n            this.textureLoader.load(\"static/textures/grid.png\", (texture) => {\r\n                texture.wrapS = this.$THREE.RepeatWrapping\r\n                texture.wrapT = this.$THREE.RepeatWrapping\r\n                texture.repeat.set(clothNumSegmentsZ, clothNumSegmentsY)\r\n                this.cloth.material.map = texture\r\n                this.cloth.material.needsUpdate = true\r\n            })\r\n            // Cloth physic object\r\n            var softBodyHelpers = new Ammo.btSoftBodyHelpers()\r\n            var clothCorner00 = new Ammo.btVector3(clothPos.x, clothPos.y + clothHeight, clothPos.z)\r\n            var clothCorner01 = new Ammo.btVector3(clothPos.x, clothPos.y + clothHeight, clothPos.z - clothWidth)\r\n            var clothCorner10 = new Ammo.btVector3(clothPos.x, clothPos.y, clothPos.z)\r\n            var clothCorner11 = new Ammo.btVector3(clothPos.x, clothPos.y, clothPos.z - clothWidth)\r\n            var clothSoftBody = softBodyHelpers.CreatePatch(this.physicsWorld.getWorldInfo(), clothCorner00, clothCorner01, clothCorner10, clothCorner11, clothNumSegmentsZ + 1, clothNumSegmentsY + 1, 0, true)\r\n            var sbConfig = clothSoftBody.get_m_cfg()\r\n            sbConfig.set_viterations(10)\r\n            sbConfig.set_piterations(10)\r\n            clothSoftBody.setTotalMass(0.9, false)\r\n            Ammo.castObject(clothSoftBody, Ammo.btCollisionObject).getCollisionShape().setMargin(this.margin * 3)\r\n            this.physicsWorld.addSoftBody(clothSoftBody, 1, - 1)\r\n            this.cloth.userData.physicsBody = clothSoftBody\r\n            // Disable deactivation\r\n            clothSoftBody.setActivationState(4)\r\n            // The base\r\n            var armMass = 2\r\n            var armLength = 3 + clothWidth\r\n            var pylonHeight = clothPos.y + clothHeight\r\n            var baseMaterial = new this.$THREE.MeshPhongMaterial({ color: 0x606060 })\r\n            pos.set(clothPos.x, 0.1, clothPos.z - armLength)\r\n            quat.set(0, 0, 0, 1)\r\n            var base = this.createParalellepiped(1, 0.2, 1, 0, pos, quat, baseMaterial)\r\n            base.castShadow = true\r\n            base.receiveShadow = true\r\n            pos.set(clothPos.x, 0.5 * pylonHeight, clothPos.z - armLength)\r\n            var pylon = this.createParalellepiped(0.4, pylonHeight, 0.4, 0, pos, quat, baseMaterial)\r\n            pylon.castShadow = true\r\n            pylon.receiveShadow = true\r\n            pos.set(clothPos.x, pylonHeight + 0.2, clothPos.z - 0.5 * armLength)\r\n            var arm = this.createParalellepiped(0.4, 0.4, armLength + 0.4, armMass, pos, quat, baseMaterial)\r\n            arm.castShadow = true\r\n            arm.receiveShadow = true\r\n            // Glue the cloth to the arm\r\n            var influence = 0.5\r\n            clothSoftBody.appendAnchor(0, arm.userData.physicsBody, false, influence)\r\n            clothSoftBody.appendAnchor(clothNumSegmentsZ, arm.userData.physicsBody, false, influence)\r\n            // Hinge varraint to move the arm\r\n            var pivotA = new Ammo.btVector3(0, pylonHeight * 0.5, 0)\r\n            var pivotB = new Ammo.btVector3(0, - 0.2, - armLength * 0.5)\r\n            var axis = new Ammo.btVector3(0, 1, 0)\r\n            this.hinge = new Ammo.btHingeConstraint(pylon.userData.physicsBody, arm.userData.physicsBody, pivotA, pivotB, axis, axis, true)\r\n            this.physicsWorld.addConstraint(this.hinge, true)\r\n        },\r\n        createParalellepiped(sx, sy, sz, mass, pos, quat, material) {\r\n            var threeObject = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(sx, sy, sz, 1, 1, 1), material)\r\n            var shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5))\r\n            shape.setMargin(this.margin)\r\n            this.createRigidBody(threeObject, shape, mass, pos, quat)\r\n            return threeObject\r\n        },\r\n        createRigidBody(threeObject, physicsShape, mass, pos, quat) {\r\n            threeObject.position.copy(pos)\r\n            threeObject.quaternion.copy(quat)\r\n            var transform = new Ammo.btTransform()\r\n            transform.setIdentity()\r\n            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z))\r\n            transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w))\r\n            var motionState = new Ammo.btDefaultMotionState(transform)\r\n            var localInertia = new Ammo.btVector3(0, 0, 0)\r\n            physicsShape.calculateLocalInertia(mass, localInertia)\r\n            var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia)\r\n            var body = new Ammo.btRigidBody(rbInfo)\r\n            threeObject.userData.physicsBody = body\r\n            this.scene.add(threeObject)\r\n            if (mass > 0) {\r\n                this.rigidBodies.push(threeObject)\r\n                // Disable deactivation\r\n                body.setActivationState(4)\r\n            }\r\n            this.physicsWorld.addRigidBody(body)\r\n        },\r\n        createRandomColor() {\r\n            return Math.floor(Math.random() * (1 << 24))\r\n        },\r\n        createMaterial() {\r\n            return new this.$THREE.MeshPhongMaterial({ color: this.createRandomColor() })\r\n        },\r\n        initInput() {\r\n            window.addEventListener('keydown', (event) => {\r\n                switch (event.keyCode) {\r\n                    // Q\r\n                    case 81:\r\n                        this.armMovement = 1\r\n                        break\r\n                        // A\r\n                    case 65:\r\n                        this.armMovement = - 1\r\n                        break\r\n                }\r\n            }, false)\r\n            window.addEventListener('keyup', () => {\r\n                this.armMovement = 0\r\n            }, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var deltaTime = this.clock.getDelta()\r\n            this.updatePhysics(deltaTime)\r\n            this.renderer.render(this.scene, this.camera)\r\n        },\r\n        updatePhysics(deltaTime) {\r\n            // Hinge control\r\n            this.hinge.enableAngularMotor(true, 0.8 * this.armMovement, 50)\r\n            // Step world\r\n            this.physicsWorld.stepSimulation(deltaTime, 10)\r\n            // Update cloth\r\n            var softBody = this.cloth.userData.physicsBody\r\n            var clothPositions = this.cloth.geometry.attributes.position.array\r\n            var numVerts = clothPositions.length / 3\r\n            var nodes = softBody.get_m_nodes()\r\n            var indexFloat = 0\r\n            for (var i = 0; i < numVerts; i ++) {\r\n                var node = nodes.at(i)\r\n                var nodePos = node.get_m_x()\r\n                clothPositions[ indexFloat ++ ] = nodePos.x()\r\n                clothPositions[ indexFloat ++ ] = nodePos.y()\r\n                clothPositions[ indexFloat ++ ] = nodePos.z()\r\n            }\r\n            this.cloth.geometry.computeVertexNormals()\r\n            this.cloth.geometry.attributes.position.needsUpdate = true\r\n            this.cloth.geometry.attributes.normal.needsUpdate = true\r\n            // Update rigid bodies\r\n            for (var i = 0, il = this.rigidBodies.length; i < il; i ++) {\r\n                var objThree = this.rigidBodies[ i ]\r\n                var objPhys = objThree.userData.physicsBody\r\n                var ms = objPhys.getMotionState()\r\n                if (ms) {\r\n                    ms.getWorldTransform(this.transformAux1)\r\n                    var p = this.transformAux1.getOrigin()\r\n                    var q = this.transformAux1.getRotation()\r\n                    objThree.position.set(p.x(), p.y(), p.z())\r\n                    objThree.quaternion.set(q.x(), q.y(), q.z(), q.w())\r\n                }\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.physicsAmmoCloth-container {\r\n    width: 100%;\r\n    color: #333;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/physics/physicsAmmoCloth.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"physicsAmmoCloth-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_vm._v(\"Ammo.js physics soft body cloth demo\"),_c('br'),_vm._v(\"Press Q or A to move the arm.\")]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"container\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-291531da\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/physics/physicsAmmoCloth.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-291531da\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./physicsAmmoCloth.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoCloth.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoCloth.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-291531da\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./physicsAmmoCloth.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-291531da\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/physics/physicsAmmoCloth.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}