webpackJsonp([292],{"9dVM":function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i("QEtz"),a=i("wIBv"),n=i("6+nK"),s={};s.ocean_sim_vertex={vertexShader:["varying vec2 vUV;","void main (void) {","\tvUV = position.xy * 0.5 + 0.5;","\tgl_Position = vec4(position, 1.0 );","}"].join("\n")},s.ocean_subtransform={uniforms:{u_input:{value:null},u_transformSize:{value:512},u_subtransformSize:{value:250}},fragmentShader:["precision highp float;","#include <common>","uniform sampler2D u_input;","uniform float u_transformSize;","uniform float u_subtransformSize;","varying vec2 vUV;","vec2 multiplyComplex (vec2 a, vec2 b) {","\treturn vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);","}","void main (void) {","\t#ifdef HORIZONTAL","\tfloat index = vUV.x * u_transformSize - 0.5;","\t#else","\tfloat index = vUV.y * u_transformSize - 0.5;","\t#endif","\tfloat evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);","\t#ifdef HORIZONTAL","\tvec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;","\tvec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;","\t#else","\tvec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;","\tvec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;","\t#endif","\tfloat twiddleArgument = -2.0 * PI * (index / u_subtransformSize);","\tvec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));","\tvec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);","\tvec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);","\tgl_FragColor = vec4(outputA, outputB);","}"].join("\n")},s.ocean_initial_spectrum={uniforms:{u_wind:{value:new n.Vector2(10,10)},u_resolution:{value:512},u_size:{value:250}},vertexShader:["void main (void) {","\tgl_Position = vec4(position, 1.0);","}"].join("\n"),fragmentShader:["precision highp float;","#include <common>","const float G = 9.81;","const float KM = 370.0;","const float CM = 0.23;","uniform vec2 u_wind;","uniform float u_resolution;","uniform float u_size;","float omega (float k) {","\treturn sqrt(G * k * (1.0 + pow2(k / KM)));","}","#if __VERSION__ == 100","float tanh (float x) {","\treturn (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));","}","#endif","void main (void) {","\tvec2 coordinates = gl_FragCoord.xy - 0.5;","\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;","\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;","\tvec2 K = (2.0 * PI * vec2(n, m)) / u_size;","\tfloat k = length(K);","\tfloat l_wind = length(u_wind);","\tfloat Omega = 0.84;","\tfloat kp = G * pow2(Omega / l_wind);","\tfloat c = omega(k) / k;","\tfloat cp = omega(kp) / kp;","\tfloat Lpm = exp(-1.25 * pow2(kp / k));","\tfloat gamma = 1.7;","\tfloat sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));","\tfloat Gamma = exp(-pow2(sqrt(k / kp) - 1.0) / 2.0 * pow2(sigma));","\tfloat Jp = pow(gamma, Gamma);","\tfloat Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));","\tfloat alphap = 0.006 * sqrt(Omega);","\tfloat Bl = 0.5 * alphap * cp / c * Fp;","\tfloat z0 = 0.000037 * pow2(l_wind) / G * pow(l_wind / cp, 0.9);","\tfloat uStar = 0.41 * l_wind / log(10.0 / z0);","\tfloat alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));","\tfloat Fm = exp(-0.25 * pow2(k / KM - 1.0));","\tfloat Bh = 0.5 * alpham * CM / c * Fm * Lpm;","\tfloat a0 = log(2.0) / 4.0;","\tfloat am = 0.13 * uStar / CM;","\tfloat Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));","\tfloat cosPhi = dot(normalize(u_wind), normalize(K));","\tfloat S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));","\tfloat dk = 2.0 * PI / u_size;","\tfloat h = sqrt(S / 2.0) * dk;","\tif (K.x == 0.0 && K.y == 0.0) {","\t\th = 0.0;","\t}","\tgl_FragColor = vec4(h, 0.0, 0.0, 0.0);","}"].join("\n")},s.ocean_phase={uniforms:{u_phases:{value:null},u_deltaTime:{value:null},u_resolution:{value:null},u_size:{value:null}},fragmentShader:["precision highp float;","#include <common>","const float G = 9.81;","const float KM = 370.0;","varying vec2 vUV;","uniform sampler2D u_phases;","uniform float u_deltaTime;","uniform float u_resolution;","uniform float u_size;","float omega (float k) {","\treturn sqrt(G * k * (1.0 + k * k / KM * KM));","}","void main (void) {","\tfloat deltaTime = 1.0 / 60.0;","\tvec2 coordinates = gl_FragCoord.xy - 0.5;","\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;","\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;","\tvec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;","\tfloat phase = texture2D(u_phases, vUV).r;","\tfloat deltaPhase = omega(length(waveVector)) * u_deltaTime;","\tphase = mod(phase + deltaPhase, 2.0 * PI);","\tgl_FragColor = vec4(phase, 0.0, 0.0, 0.0);","}"].join("\n")},s.ocean_spectrum={uniforms:{u_size:{value:null},u_resolution:{value:null},u_choppiness:{value:null},u_phases:{value:null},u_initialSpectrum:{value:null}},fragmentShader:["precision highp float;","#include <common>","const float G = 9.81;","const float KM = 370.0;","varying vec2 vUV;","uniform float u_size;","uniform float u_resolution;","uniform float u_choppiness;","uniform sampler2D u_phases;","uniform sampler2D u_initialSpectrum;","vec2 multiplyComplex (vec2 a, vec2 b) {","\treturn vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);","}","vec2 multiplyByI (vec2 z) {","\treturn vec2(-z[1], z[0]);","}","float omega (float k) {","\treturn sqrt(G * k * (1.0 + k * k / KM * KM));","}","void main (void) {","\tvec2 coordinates = gl_FragCoord.xy - 0.5;","\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;","\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;","\tvec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;","\tfloat phase = texture2D(u_phases, vUV).r;","\tvec2 phaseVector = vec2(cos(phase), sin(phase));","\tvec2 h0 = texture2D(u_initialSpectrum, vUV).rg;","\tvec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;","\th0Star.y *= -1.0;","\tvec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));","\tvec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;","\tvec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;","\tif (waveVector.x == 0.0 && waveVector.y == 0.0) {","\t\th = vec2(0.0);","\t\thX = vec2(0.0);","\t\thZ = vec2(0.0);","\t}","\tgl_FragColor = vec4(hX + multiplyByI(h), hZ);","}"].join("\n")},s.ocean_normals={uniforms:{u_displacementMap:{value:null},u_resolution:{value:null},u_size:{value:null}},fragmentShader:["precision highp float;","varying vec2 vUV;","uniform sampler2D u_displacementMap;","uniform float u_resolution;","uniform float u_size;","void main (void) {","\tfloat texel = 1.0 / u_resolution;","\tfloat texelSize = u_size / u_resolution;","\tvec3 center = texture2D(u_displacementMap, vUV).rgb;","\tvec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;","\tvec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;","\tvec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;","\tvec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;","\tvec3 topRight = cross(right, top);","\tvec3 topLeft = cross(top, left);","\tvec3 bottomLeft = cross(left, bottom);","\tvec3 bottomRight = cross(bottom, right);","\tgl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);","}"].join("\n")},s.ocean_main={uniforms:{u_displacementMap:{value:null},u_normalMap:{value:null},u_geometrySize:{value:null},u_size:{value:null},u_projectionMatrix:{value:null},u_viewMatrix:{value:null},u_cameraPosition:{value:null},u_skyColor:{value:null},u_oceanColor:{value:null},u_sunDirection:{value:null},u_exposure:{value:null}},vertexShader:["precision highp float;","varying vec3 vPos;","varying vec2 vUV;","uniform mat4 u_projectionMatrix;","uniform mat4 u_viewMatrix;","uniform float u_size;","uniform float u_geometrySize;","uniform sampler2D u_displacementMap;","void main (void) {","\tvec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);","\tvPos = newPos;","\tvUV = uv;","\tgl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);","}"].join("\n"),fragmentShader:["precision highp float;","varying vec3 vPos;","varying vec2 vUV;","uniform sampler2D u_displacementMap;","uniform sampler2D u_normalMap;","uniform vec3 u_cameraPosition;","uniform vec3 u_oceanColor;","uniform vec3 u_skyColor;","uniform vec3 u_sunDirection;","uniform float u_exposure;","vec3 hdr (vec3 color, float exposure) {","\treturn 1.0 - exp(-color * exposure);","}","void main (void) {","\tvec3 normal = texture2D(u_normalMap, vUV).rgb;","\tvec3 view = normalize(u_cameraPosition - vPos);","\tfloat fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);","\tvec3 sky = fresnel * u_skyColor;","\tfloat diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);","\tvec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;","\tvec3 color = sky + water;","\tgl_FragColor = vec4(hdr(color, u_exposure), 1.0);","}"].join("\n")};var o=function(e,t,i,r){function a(e,t){return void 0!==e?e:t}this.changed=!0,this.initial=!0,this.oceanCamera=new n.OrthographicCamera,this.oceanCamera.position.z=1,this.renderer=e,this.renderer.clearColor(16777215),this.scene=new n.Scene,r=r||{},this.clearColor=a(r.CLEAR_COLOR,[1,1,1,0]),this.geometryOrigin=a(r.GEOMETRY_ORIGIN,[-1e3,-1e3]),this.sunDirectionX=a(r.SUN_DIRECTION[0],-1),this.sunDirectionY=a(r.SUN_DIRECTION[1],1),this.sunDirectionZ=a(r.SUN_DIRECTION[2],1),this.oceanColor=a(r.OCEAN_COLOR,new n.Vector3(.004,.016,.047)),this.skyColor=a(r.SKY_COLOR,new n.Vector3(3.2,9.6,12.8)),this.exposure=a(r.EXPOSURE,.35),this.geometryResolution=a(r.GEOMETRY_RESOLUTION,32),this.geometrySize=a(r.GEOMETRY_SIZE,2e3),this.resolution=a(r.RESOLUTION,64),this.floatSize=a(r.SIZE_OF_FLOAT,4),this.windX=a(r.INITIAL_WIND[0],10),this.windY=a(r.INITIAL_WIND[1],10),this.size=a(r.INITIAL_SIZE,250),this.choppiness=a(r.INITIAL_CHOPPINESS,1.5),this.matrixNeedsUpdate=!1;var o=a(r.USE_HALF_FLOAT,!1)?n.HalfFloatType:n.FloatType,l={minFilter:n.LinearFilter,magFilter:n.LinearFilter,wrapS:n.ClampToEdgeWrapping,wrapT:n.ClampToEdgeWrapping,format:n.RGBAFormat,depthBuffer:!1,premultiplyAlpha:!1,type:o},u={minFilter:n.NearestFilter,magFilter:n.NearestFilter,wrapS:n.ClampToEdgeWrapping,wrapT:n.ClampToEdgeWrapping,format:n.RGBAFormat,depthBuffer:!1,premultiplyAlpha:!1,type:o},m={minFilter:n.NearestFilter,magFilter:n.NearestFilter,wrapS:n.RepeatWrapping,wrapT:n.RepeatWrapping,format:n.RGBAFormat,depthBuffer:!1,premultiplyAlpha:!1,type:o};this.initialSpectrumFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,m),this.spectrumFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,u),this.pingPhaseFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,u),this.pongPhaseFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,u),this.pingTransformFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,u),this.pongTransformFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,u),this.displacementMapFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,l),this.normalMapFramebuffer=new n.WebGLRenderTarget(this.resolution,this.resolution,l);var h=s.ocean_sim_vertex,c=s.ocean_subtransform,f=n.UniformsUtils.clone(c.uniforms);this.materialOceanHorizontal=new n.ShaderMaterial({uniforms:f,vertexShader:h.vertexShader,fragmentShader:"#define HORIZONTAL \n"+c.fragmentShader}),this.materialOceanHorizontal.uniforms.u_transformSize={value:this.resolution},this.materialOceanHorizontal.uniforms.u_subtransformSize={value:null},this.materialOceanHorizontal.uniforms.u_input={value:null},this.materialOceanHorizontal.depthTest=!1;var p=s.ocean_subtransform,d=n.UniformsUtils.clone(p.uniforms);this.materialOceanVertical=new n.ShaderMaterial({uniforms:d,vertexShader:h.vertexShader,fragmentShader:p.fragmentShader}),this.materialOceanVertical.uniforms.u_transformSize={value:this.resolution},this.materialOceanVertical.uniforms.u_subtransformSize={value:null},this.materialOceanVertical.uniforms.u_input={value:null},this.materialOceanVertical.depthTest=!1;var _=s.ocean_initial_spectrum,v=n.UniformsUtils.clone(_.uniforms);this.materialInitialSpectrum=new n.ShaderMaterial({uniforms:v,vertexShader:_.vertexShader,fragmentShader:_.fragmentShader}),this.materialInitialSpectrum.uniforms.u_wind={value:new n.Vector2},this.materialInitialSpectrum.uniforms.u_resolution={value:this.resolution},this.materialInitialSpectrum.depthTest=!1;var g=s.ocean_phase,S=n.UniformsUtils.clone(g.uniforms);this.materialPhase=new n.ShaderMaterial({uniforms:S,vertexShader:h.vertexShader,fragmentShader:g.fragmentShader}),this.materialPhase.uniforms.u_resolution={value:this.resolution},this.materialPhase.depthTest=!1;var O=s.ocean_spectrum,x=n.UniformsUtils.clone(O.uniforms);this.materialSpectrum=new n.ShaderMaterial({uniforms:x,vertexShader:h.vertexShader,fragmentShader:O.fragmentShader}),this.materialSpectrum.uniforms.u_initialSpectrum={value:null},this.materialSpectrum.uniforms.u_resolution={value:this.resolution},this.materialSpectrum.depthTest=!1;var w=s.ocean_normals,b=n.UniformsUtils.clone(w.uniforms);this.materialNormal=new n.ShaderMaterial({uniforms:b,vertexShader:h.vertexShader,fragmentShader:w.fragmentShader}),this.materialNormal.uniforms.u_displacementMap={value:null},this.materialNormal.uniforms.u_resolution={value:this.resolution},this.materialNormal.depthTest=!1;var C=s.ocean_main,T=n.UniformsUtils.clone(C.uniforms);this.materialOcean=new n.ShaderMaterial({uniforms:T,vertexShader:C.vertexShader,fragmentShader:C.fragmentShader}),this.materialOcean.uniforms.u_geometrySize={value:this.resolution},this.materialOcean.uniforms.u_displacementMap={value:this.displacementMapFramebuffer.texture},this.materialOcean.uniforms.u_normalMap={value:this.normalMapFramebuffer.texture},this.materialOcean.uniforms.u_oceanColor={value:this.oceanColor},this.materialOcean.uniforms.u_skyColor={value:this.skyColor},this.materialOcean.uniforms.u_sunDirection={value:new n.Vector3(this.sunDirectionX,this.sunDirectionY,this.sunDirectionZ)},this.materialOcean.uniforms.u_exposure={value:this.exposure},this.materialOcean.uniforms.u_size={value:this.size},this.materialOceanHorizontal.blending=0,this.materialOceanVertical.blending=0,this.materialInitialSpectrum.blending=0,this.materialPhase.blending=0,this.materialSpectrum.blending=0,this.materialNormal.blending=0,this.materialOcean.blending=0,this.screenQuad=new n.Mesh(new n.PlaneBufferGeometry(2,2)),this.scene.add(this.screenQuad),this.generateSeedPhaseTexture(),this.generateMesh()};o.prototype.generateMesh=function(){var e=new n.PlaneBufferGeometry(this.geometrySize,this.geometrySize,this.geometryResolution,this.geometryResolution);e.rotateX(-Math.PI/2),this.oceanMesh=new n.Mesh(e,this.materialOcean)},o.prototype.render=function(){var e=this.renderer.getRenderTarget();this.scene.overrideMaterial=null,this.changed&&this.renderInitialSpectrum(),this.renderWavePhase(),this.renderSpectrum(),this.renderSpectrumFFT(),this.renderNormalMap(),this.scene.overrideMaterial=null,this.renderer.setRenderTarget(e)},o.prototype.generateSeedPhaseTexture=function(){this.pingPhase=!0;for(var e=new window.Float32Array(this.resolution*this.resolution*4),t=0;t<this.resolution;t++)for(var i=0;i<this.resolution;i++)e[t*this.resolution*4+4*i]=2*Math.random()*Math.PI,e[t*this.resolution*4+4*i+1]=0,e[t*this.resolution*4+4*i+2]=0,e[t*this.resolution*4+4*i+3]=0;this.pingPhaseTexture=new n.DataTexture(e,this.resolution,this.resolution,n.RGBAFormat),this.pingPhaseTexture.wrapS=n.ClampToEdgeWrapping,this.pingPhaseTexture.wrapT=n.ClampToEdgeWrapping,this.pingPhaseTexture.type=n.FloatType},o.prototype.renderInitialSpectrum=function(){this.scene.overrideMaterial=this.materialInitialSpectrum,this.materialInitialSpectrum.uniforms.u_wind.value.set(this.windX,this.windY),this.materialInitialSpectrum.uniforms.u_size.value=this.size,this.renderer.setRenderTarget(this.initialSpectrumFramebuffer),this.renderer.clear(),this.renderer.render(this.scene,this.oceanCamera)},o.prototype.renderWavePhase=function(){this.scene.overrideMaterial=this.materialPhase,this.screenQuad.material=this.materialPhase,this.initial?(this.materialPhase.uniforms.u_phases.value=this.pingPhaseTexture,this.initial=!1):this.materialPhase.uniforms.u_phases.value=this.pingPhase?this.pingPhaseFramebuffer.texture:this.pongPhaseFramebuffer.texture,this.materialPhase.uniforms.u_deltaTime.value=this.deltaTime,this.materialPhase.uniforms.u_size.value=this.size,this.renderer.setRenderTarget(this.pingPhase?this.pongPhaseFramebuffer:this.pingPhaseFramebuffer),this.renderer.render(this.scene,this.oceanCamera),this.pingPhase=!this.pingPhase},o.prototype.renderSpectrum=function(){this.scene.overrideMaterial=this.materialSpectrum,this.materialSpectrum.uniforms.u_initialSpectrum.value=this.initialSpectrumFramebuffer.texture,this.materialSpectrum.uniforms.u_phases.value=this.pingPhase?this.pingPhaseFramebuffer.texture:this.pongPhaseFramebuffer.texture,this.materialSpectrum.uniforms.u_choppiness.value=this.choppiness,this.materialSpectrum.uniforms.u_size.value=this.size,this.renderer.setRenderTarget(this.spectrumFramebuffer),this.renderer.render(this.scene,this.oceanCamera)},o.prototype.renderSpectrumFFT=function(){var e=Math.log(this.resolution)/Math.log(2);this.scene.overrideMaterial=this.materialOceanHorizontal;for(var t=0;t<e;t++)0===t?(this.materialOceanHorizontal.uniforms.u_input.value=this.spectrumFramebuffer.texture,this.materialOceanHorizontal.uniforms.u_subtransformSize.value=Math.pow(2,t%e+1),this.renderer.setRenderTarget(this.pingTransformFramebuffer),this.renderer.render(this.scene,this.oceanCamera)):t%2==1?(this.materialOceanHorizontal.uniforms.u_input.value=this.pingTransformFramebuffer.texture,this.materialOceanHorizontal.uniforms.u_subtransformSize.value=Math.pow(2,t%e+1),this.renderer.setRenderTarget(this.pongTransformFramebuffer),this.renderer.render(this.scene,this.oceanCamera)):(this.materialOceanHorizontal.uniforms.u_input.value=this.pongTransformFramebuffer.texture,this.materialOceanHorizontal.uniforms.u_subtransformSize.value=Math.pow(2,t%e+1),this.renderer.setRenderTarget(this.pingTransformFramebuffer),this.renderer.render(this.scene,this.oceanCamera));this.scene.overrideMaterial=this.materialOceanVertical;for(t=e;t<2*e;t++)t===2*e-1?(this.materialOceanVertical.uniforms.u_input.value=e%2==0?this.pingTransformFramebuffer.texture:this.pongTransformFramebuffer.texture,this.materialOceanVertical.uniforms.u_subtransformSize.value=Math.pow(2,t%e+1),this.renderer.setRenderTarget(this.displacementMapFramebuffer),this.renderer.render(this.scene,this.oceanCamera)):t%2==1?(this.materialOceanVertical.uniforms.u_input.value=this.pingTransformFramebuffer.texture,this.materialOceanVertical.uniforms.u_subtransformSize.value=Math.pow(2,t%e+1),this.renderer.setRenderTarget(this.pongTransformFramebuffer),this.renderer.render(this.scene,this.oceanCamera)):(this.materialOceanVertical.uniforms.u_input.value=this.pongTransformFramebuffer.texture,this.materialOceanVertical.uniforms.u_subtransformSize.value=Math.pow(2,t%e+1),this.renderer.setRenderTarget(this.pingTransformFramebuffer),this.renderer.render(this.scene,this.oceanCamera))},o.prototype.renderNormalMap=function(){this.scene.overrideMaterial=this.materialNormal,this.changed&&(this.materialNormal.uniforms.u_size.value=this.size),this.materialNormal.uniforms.u_displacementMap.value=this.displacementMapFramebuffer.texture,this.renderer.setRenderTarget(this.normalMapFramebuffer),this.renderer.clear(),this.renderer.render(this.scene,this.oceanCamera)};var l={data:function(){return{stats:null,lastTime:null,DEMO:null,gui:null}},mounted:function(){var e=this;this.stats=new this.$Stats,this.stats.dom.style.left="280px",document.getElementsByClassName("webglShadersOcean2-container")[0].appendChild(this.stats.dom),this.lastTime=(new Date).getTime();var t=this;this.DEMO={ms_Renderer:null,ms_Camera:null,ms_Scene:null,ms_Controls:null,ms_Ocean:null,Initialize:function(){this.ms_Renderer=new t.$THREE.WebGLRenderer,this.ms_Renderer.setPixelRatio(window.devicePixelRatio),document.getElementsByClassName("webglShadersOcean2-container")[0].appendChild(this.ms_Renderer.domElement),this.ms_Scene=new t.$THREE.Scene,this.ms_Camera=new t.$THREE.PerspectiveCamera(55,this.$webglInnerWidth/window.innerHeight,.5,3e5),this.ms_Camera.position.set(450,350,450),this.ms_Camera.lookAt(0,0,0),this.ms_Controls=new a.b(this.ms_Camera,this.ms_Renderer.domElement),this.ms_Controls.userPan=!1,this.ms_Controls.userPanSpeed=0,this.ms_Controls.minDistance=0,this.ms_Controls.maxDistance=2e3,this.ms_Controls.minPolarAngle=0,this.ms_Controls.maxPolarAngle=.495*Math.PI;this.ms_Ocean=new o(this.ms_Renderer,this.ms_Camera,this.ms_Scene,{USE_HALF_FLOAT:!1,INITIAL_SIZE:256,INITIAL_WIND:[10,10],INITIAL_CHOPPINESS:1.5,CLEAR_COLOR:[1,1,1,0],GEOMETRY_ORIGIN:[-256,-256],SUN_DIRECTION:[-1,1,1],OCEAN_COLOR:new t.$THREE.Vector3(.004,.016,.047),SKY_COLOR:new t.$THREE.Vector3(3.2,9.6,12.8),EXPOSURE:.35,GEOMETRY_RESOLUTION:512,GEOMETRY_SIZE:512,RESOLUTION:1024}),this.ms_Ocean.materialOcean.uniforms.u_projectionMatrix={value:this.ms_Camera.projectionMatrix},this.ms_Ocean.materialOcean.uniforms.u_viewMatrix={value:this.ms_Camera.matrixWorldInverse},this.ms_Ocean.materialOcean.uniforms.u_cameraPosition={value:this.ms_Camera.position},this.ms_Scene.add(this.ms_Ocean.oceanMesh),t.gui=new r.a,t.gui.add(this.ms_Ocean,"size",100,5e3).onChange(function(e){this.object.size=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"choppiness",.1,4).onChange(function(e){this.object.choppiness=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"windX",-15,15).onChange(function(e){this.object.windX=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"windY",-15,15).onChange(function(e){this.object.windY=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"sunDirectionX",-1,1).onChange(function(e){this.object.sunDirectionX=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"sunDirectionY",-1,1).onChange(function(e){this.object.sunDirectionY=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"sunDirectionZ",-1,1).onChange(function(e){this.object.sunDirectionZ=e,this.object.changed=!0}),t.gui.add(this.ms_Ocean,"exposure",0,.5).onChange(function(e){this.object.exposure=e,this.object.changed=!0})},Display:function(){this.ms_Renderer.render(this.ms_Scene,this.ms_Camera)},Update:function(){var e=(new Date).getTime();this.ms_Ocean.deltaTime=(e-t.lastTime)/1e3||0,t.lastTime=e,this.ms_Ocean.render(this.ms_Ocean.deltaTime),this.ms_Ocean.overrideMaterial=this.ms_Ocean.materialOcean,this.ms_Ocean.changed&&(this.ms_Ocean.materialOcean.uniforms.u_size.value=this.ms_Ocean.size,this.ms_Ocean.materialOcean.uniforms.u_sunDirection.value.set(this.ms_Ocean.sunDirectionX,this.ms_Ocean.sunDirectionY,this.ms_Ocean.sunDirectionZ),this.ms_Ocean.materialOcean.uniforms.u_exposure.value=this.ms_Ocean.exposure,this.ms_Ocean.changed=!1),this.ms_Ocean.materialOcean.uniforms.u_normalMap.value=this.ms_Ocean.normalMapFramebuffer.texture,this.ms_Ocean.materialOcean.uniforms.u_displacementMap.value=this.ms_Ocean.displacementMapFramebuffer.texture,this.ms_Ocean.materialOcean.uniforms.u_projectionMatrix.value=this.ms_Camera.projectionMatrix,this.ms_Ocean.materialOcean.uniforms.u_viewMatrix.value=this.ms_Camera.matrixWorldInverse,this.ms_Ocean.materialOcean.uniforms.u_cameraPosition.value=this.ms_Camera.position,this.ms_Ocean.materialOcean.depthTest=!0,this.Display()},Resize:function(e,t){this.ms_Camera.aspect=e/t,this.ms_Camera.updateProjectionMatrix(),this.ms_Renderer.setSize(e,t),this.Display()}},this.DEMO.Initialize(),window.addEventListener("resize",function(){e.DEMO.Resize(window.innerWidth-281,window.innerHeight)}),this.DEMO.Resize(window.innerWidth-281,window.innerHeight),this.render()},beforeDestroy:function(){this.gui.destroy()},methods:{render:function(){requestAnimationFrame(this.render),this.DEMO.Update(),this.stats.update()}}},u={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"webglShadersOcean2-container"},[t("div",{attrs:{id:"info"}},[t("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener"}},[this._v("three.js")]),this._v(" - webgl ocean simulation\n\t\t")])])}]};var m=i("VU/8")(l,u,!1,function(e){i("tsb4")},"data-v-257c7153",null);t.default=m.exports},tsb4:function(e,t){}});
//# sourceMappingURL=292.d40113ad808445b4c0ef.js.map