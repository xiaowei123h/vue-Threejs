{"version":3,"sources":["webpack:///./src/components/jsm/shaders/OceanShaders.js","webpack:///./src/components/jsm/misc/Ocean.js","webpack:///src/views/shaders/webglShadersOcean2.vue","webpack:///./src/views/shaders/webglShadersOcean2.vue?1926","webpack:///./src/views/shaders/webglShadersOcean2.vue"],"names":["OceanShaders","vertexShader","join","uniforms","u_input","value","u_transformSize","u_subtransformSize","fragmentShader","u_wind","Vector2","u_resolution","u_size","u_phases","u_deltaTime","u_choppiness","u_initialSpectrum","u_displacementMap","u_normalMap","u_geometrySize","u_projectionMatrix","u_viewMatrix","u_cameraPosition","u_skyColor","u_oceanColor","u_sunDirection","u_exposure","Ocean","renderer","camera","scene","options","optionalParameter","defaultValue","undefined","this","changed","initial","oceanCamera","OrthographicCamera","position","z","clearColor","Scene","CLEAR_COLOR","geometryOrigin","GEOMETRY_ORIGIN","sunDirectionX","SUN_DIRECTION","sunDirectionY","sunDirectionZ","oceanColor","OCEAN_COLOR","Vector3","skyColor","SKY_COLOR","exposure","EXPOSURE","geometryResolution","GEOMETRY_RESOLUTION","geometrySize","GEOMETRY_SIZE","resolution","RESOLUTION","floatSize","SIZE_OF_FLOAT","windX","INITIAL_WIND","windY","size","INITIAL_SIZE","choppiness","INITIAL_CHOPPINESS","matrixNeedsUpdate","renderTargetType","USE_HALF_FLOAT","HalfFloatType","FloatType","LinearClampParams","minFilter","LinearFilter","magFilter","wrapS","ClampToEdgeWrapping","wrapT","format","RGBAFormat","depthBuffer","premultiplyAlpha","type","NearestClampParams","NearestFilter","NearestRepeatParams","RepeatWrapping","initialSpectrumFramebuffer","WebGLRenderTarget","spectrumFramebuffer","pingPhaseFramebuffer","pongPhaseFramebuffer","pingTransformFramebuffer","pongTransformFramebuffer","displacementMapFramebuffer","normalMapFramebuffer","fullscreeenVertexShader","oceanHorizontalShader","oceanHorizontalUniforms","UniformsUtils","clone","materialOceanHorizontal","ShaderMaterial","depthTest","oceanVerticalShader","oceanVerticalUniforms","materialOceanVertical","initialSpectrumShader","initialSpectrumUniforms","materialInitialSpectrum","phaseShader","phaseUniforms","materialPhase","spectrumShader","spectrumUniforms","materialSpectrum","normalShader","normalUniforms","materialNormal","oceanShader","oceanUniforms","materialOcean","texture","blending","screenQuad","Mesh","PlaneBufferGeometry","add","generateSeedPhaseTexture","generateMesh","prototype","geometry","rotateX","Math","PI","oceanMesh","render","currentRenderTarget","getRenderTarget","overrideMaterial","renderInitialSpectrum","renderWavePhase","renderSpectrum","renderSpectrumFFT","renderNormalMap","setRenderTarget","pingPhase","phaseArray","window","Float32Array","i","j","random","pingPhaseTexture","DataTexture","set","clear","material","deltaTime","iterations","log","pow","webglShadersOcean2","data","stats","lastTime","DEMO","gui","mounted","_this","$Stats","dom","style","left","document","getElementsByClassName","appendChild","Date","getTime","that","ms_Renderer","ms_Camera","ms_Scene","ms_Controls","ms_Ocean","Initialize","$THREE","WebGLRenderer","setPixelRatio","devicePixelRatio","domElement","PerspectiveCamera","$webglInnerWidth","innerHeight","lookAt","OrbitControls","userPan","userPanSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","Ocean_Ocean","res","projectionMatrix","matrixWorldInverse","dat_gui_module","onChange","v","object","Display","Update","currentTime","Resize","inWidth","inHeight","aspect","updateProjectionMatrix","setSize","addEventListener","innerWidth","beforeDestroy","destroy","methods","requestAnimationFrame","update","shaders_webglShadersOcean2","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"iJAwBIA,KACJA,EAAA,kBACCC,cACC,oBAEA,qBACA,mCACA,wCACA,KACCC,KAAM,OAETF,EAAA,oBACCG,UACCC,SAAaC,MAAO,MACpBC,iBAAqBD,MAAO,KAC5BE,oBAAwBF,MAAO,MAEhCG,gBAGC,yBACA,oBAEA,6BACA,iCACA,oCAEA,oBAEA,0CACA,uEACA,IAEA,qBACA,sBACA,iDACA,UACA,iDACA,WAEA,6HAGA,sBACA,kGACA,yHACA,UACA,kGACA,yHACA,WAEA,sEACA,qEAEA,+DACA,+DAEA,2CACA,KACCN,KAAM,OAETF,EAAA,wBACCG,UACCM,QAAYJ,MAAO,IAAIK,UAAS,GAAM,KACtCC,cAAkBN,MAAO,KACzBO,QAAYP,MAAO,MAEpBJ,cACC,qBACA,uCACA,KACCC,KAAM,MACRM,gBACC,yBACA,oBAEA,wBACA,0BACA,yBAEA,uBACA,8BACA,wBAEA,0BACA,+CACA,IAEA,yBACA,yBACA,0DACA,IACA,SAEA,qBACA,8CAEA,mGACA,mGAEA,+CACA,yBAEA,mCAEA,wBACA,yCAEA,4BACA,+BAEA,2CACA,uBACA,yDACA,sEACA,kCACA,2EACA,wCACA,2CAEA,oEACA,kDACA,oGACA,gDACA,iDAEA,+BACA,kCACA,6EAEA,yDAEA,6GAEA,kCACA,kCAEA,oCACA,eACA,MACA,2CACA,KACCN,KAAM,OAETF,EAAA,aACCG,UACCU,UAAcR,MAAO,MACrBS,aAAiBT,MAAO,MACxBM,cAAkBN,MAAO,MACzBO,QAAYP,MAAO,OAEpBG,gBACC,yBACA,oBAEA,wBACA,0BAEA,oBAEA,8BACA,6BACA,8BACA,wBAEA,0BACA,kDACA,IAEA,qBACA,kCACA,8CACA,mGACA,mGACA,wDAEA,8CACA,gEACA,+CAEA,+CACA,KACCN,KAAM,OAETF,EAAA,gBACCG,UACCS,QAAYP,MAAO,MACnBM,cAAkBN,MAAO,MACzBU,cAAkBV,MAAO,MACzBQ,UAAcR,MAAO,MACrBW,mBAAuBX,MAAO,OAE/BG,gBACC,yBACA,oBAEA,wBACA,0BAEA,oBAEA,wBACA,8BACA,8BACA,8BACA,uC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","file":"static/js/292.d40113ad808445b4c0ef.js","sourcesContent":["import {\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n// Description: A deep water ocean shader set\r\n// based on an implementation of a Tessendorf Waves\r\n// originally presented by David Li ( www.david.li/waves )\r\n\r\n// The general method is to apply shaders to simulation Framebuffers\r\n// and then sample these framebuffers when rendering the ocean mesh\r\n\r\n// The set uses 7 shaders:\r\n\r\n// -- Simulation shaders\r\n// [1] ocean_sim_vertex         -> Vertex shader used to set up a 2x2 simulation plane centered at (0,0)\r\n// [2] ocean_subtransform       -> Fragment shader used to subtransform the mesh (generates the displacement map)\r\n// [3] ocean_initial_spectrum   -> Fragment shader used to set intitial wave frequency at a texel coordinate\r\n// [4] ocean_phase              -> Fragment shader used to set wave phase at a texel coordinate\r\n// [5] ocean_spectrum           -> Fragment shader used to set current wave frequency at a texel coordinate\r\n// [6] ocean_normal             -> Fragment shader used to set face normals at a texel coordinate\r\n\r\n// -- Rendering Shader\r\n// [7] ocean_main               -> Vertex and Fragment shader used to create the final render\r\n\r\nvar OceanShaders = {};\r\nOceanShaders[ \"ocean_sim_vertex\" ] = {\r\n\tvertexShader: [\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tvUV = position.xy * 0.5 + 0.5;\",\r\n\t\t\"\tgl_Position = vec4(position, 1.0 );\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\nOceanShaders[ \"ocean_subtransform\" ] = {\r\n\tuniforms: {\r\n\t\t\"u_input\": { value: null },\r\n\t\t\"u_transformSize\": { value: 512.0 },\r\n\t\t\"u_subtransformSize\": { value: 250.0 }\r\n\t},\r\n\tfragmentShader: [\r\n\t\t//GPU FFT using a Stockham formulation\r\n\r\n\t\t\"precision highp float;\",\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"uniform sampler2D u_input;\",\r\n\t\t\"uniform float u_transformSize;\",\r\n\t\t\"uniform float u_subtransformSize;\",\r\n\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"vec2 multiplyComplex (vec2 a, vec2 b) {\",\r\n\t\t\"\treturn vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);\",\r\n\t\t\"}\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\t#ifdef HORIZONTAL\",\r\n\t\t\"\tfloat index = vUV.x * u_transformSize - 0.5;\",\r\n\t\t\"\t#else\",\r\n\t\t\"\tfloat index = vUV.y * u_transformSize - 0.5;\",\r\n\t\t\"\t#endif\",\r\n\r\n\t\t\"\tfloat evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);\",\r\n\r\n\t\t//transform two complex sequences simultaneously\r\n\t\t\"\t#ifdef HORIZONTAL\",\r\n\t\t\"\tvec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;\",\r\n\t\t\"\tvec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;\",\r\n\t\t\"\t#else\",\r\n\t\t\"\tvec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;\",\r\n\t\t\"\tvec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;\",\r\n\t\t\"\t#endif\",\r\n\r\n\t\t\"\tfloat twiddleArgument = -2.0 * PI * (index / u_subtransformSize);\",\r\n\t\t\"\tvec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));\",\r\n\r\n\t\t\"\tvec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);\",\r\n\t\t\"\tvec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);\",\r\n\r\n\t\t\"\tgl_FragColor = vec4(outputA, outputB);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\nOceanShaders[ \"ocean_initial_spectrum\" ] = {\r\n\tuniforms: {\r\n\t\t\"u_wind\": { value: new Vector2( 10.0, 10.0 ) },\r\n\t\t\"u_resolution\": { value: 512.0 },\r\n\t\t\"u_size\": { value: 250.0 }\r\n\t},\r\n\tvertexShader: [\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tgl_Position = vec4(position, 1.0);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" ),\r\n\tfragmentShader: [\r\n\t\t\"precision highp float;\",\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"const float G = 9.81;\",\r\n\t\t\"const float KM = 370.0;\",\r\n\t\t\"const float CM = 0.23;\",\r\n\r\n\t\t\"uniform vec2 u_wind;\",\r\n\t\t\"uniform float u_resolution;\",\r\n\t\t\"uniform float u_size;\",\r\n\r\n\t\t\"float omega (float k) {\",\r\n\t\t\"\treturn sqrt(G * k * (1.0 + pow2(k / KM)));\",\r\n\t\t\"}\",\r\n\r\n\t\t\"#if __VERSION__ == 100\",\r\n\t\t\"float tanh (float x) {\",\r\n\t\t\"\treturn (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));\",\r\n\t\t\"}\",\r\n\t\t\"#endif\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tvec2 coordinates = gl_FragCoord.xy - 0.5;\",\r\n\r\n\t\t\"\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\r\n\t\t\"\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\r\n\r\n\t\t\"\tvec2 K = (2.0 * PI * vec2(n, m)) / u_size;\",\r\n\t\t\"\tfloat k = length(K);\",\r\n\r\n\t\t\"\tfloat l_wind = length(u_wind);\",\r\n\r\n\t\t\"\tfloat Omega = 0.84;\",\r\n\t\t\"\tfloat kp = G * pow2(Omega / l_wind);\",\r\n\r\n\t\t\"\tfloat c = omega(k) / k;\",\r\n\t\t\"\tfloat cp = omega(kp) / kp;\",\r\n\r\n\t\t\"\tfloat Lpm = exp(-1.25 * pow2(kp / k));\",\r\n\t\t\"\tfloat gamma = 1.7;\",\r\n\t\t\"\tfloat sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));\",\r\n\t\t\"\tfloat Gamma = exp(-pow2(sqrt(k / kp) - 1.0) / 2.0 * pow2(sigma));\",\r\n\t\t\"\tfloat Jp = pow(gamma, Gamma);\",\r\n\t\t\"\tfloat Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));\",\r\n\t\t\"\tfloat alphap = 0.006 * sqrt(Omega);\",\r\n\t\t\"\tfloat Bl = 0.5 * alphap * cp / c * Fp;\",\r\n\r\n\t\t\"\tfloat z0 = 0.000037 * pow2(l_wind) / G * pow(l_wind / cp, 0.9);\",\r\n\t\t\"\tfloat uStar = 0.41 * l_wind / log(10.0 / z0);\",\r\n\t\t\"\tfloat alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));\",\r\n\t\t\"\tfloat Fm = exp(-0.25 * pow2(k / KM - 1.0));\",\r\n\t\t\"\tfloat Bh = 0.5 * alpham * CM / c * Fm * Lpm;\",\r\n\r\n\t\t\"\tfloat a0 = log(2.0) / 4.0;\",\r\n\t\t\"\tfloat am = 0.13 * uStar / CM;\",\r\n\t\t\"\tfloat Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));\",\r\n\r\n\t\t\"\tfloat cosPhi = dot(normalize(u_wind), normalize(K));\",\r\n\r\n\t\t\"\tfloat S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));\",\r\n\r\n\t\t\"\tfloat dk = 2.0 * PI / u_size;\",\r\n\t\t\"\tfloat h = sqrt(S / 2.0) * dk;\",\r\n\r\n\t\t\"\tif (K.x == 0.0 && K.y == 0.0) {\",\r\n\t\t\"\t\th = 0.0;\", //no DC term\r\n\t\t\"\t}\",\r\n\t\t\"\tgl_FragColor = vec4(h, 0.0, 0.0, 0.0);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\nOceanShaders[ \"ocean_phase\" ] = {\r\n\tuniforms: {\r\n\t\t\"u_phases\": { value: null },\r\n\t\t\"u_deltaTime\": { value: null },\r\n\t\t\"u_resolution\": { value: null },\r\n\t\t\"u_size\": { value: null }\r\n\t},\r\n\tfragmentShader: [\r\n\t\t\"precision highp float;\",\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"const float G = 9.81;\",\r\n\t\t\"const float KM = 370.0;\",\r\n\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"uniform sampler2D u_phases;\",\r\n\t\t\"uniform float u_deltaTime;\",\r\n\t\t\"uniform float u_resolution;\",\r\n\t\t\"uniform float u_size;\",\r\n\r\n\t\t\"float omega (float k) {\",\r\n\t\t\"\treturn sqrt(G * k * (1.0 + k * k / KM * KM));\",\r\n\t\t\"}\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tfloat deltaTime = 1.0 / 60.0;\",\r\n\t\t\"\tvec2 coordinates = gl_FragCoord.xy - 0.5;\",\r\n\t\t\"\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\r\n\t\t\"\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\r\n\t\t\"\tvec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;\",\r\n\r\n\t\t\"\tfloat phase = texture2D(u_phases, vUV).r;\",\r\n\t\t\"\tfloat deltaPhase = omega(length(waveVector)) * u_deltaTime;\",\r\n\t\t\"\tphase = mod(phase + deltaPhase, 2.0 * PI);\",\r\n\r\n\t\t\"\tgl_FragColor = vec4(phase, 0.0, 0.0, 0.0);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\nOceanShaders[ \"ocean_spectrum\" ] = {\r\n\tuniforms: {\r\n\t\t\"u_size\": { value: null },\r\n\t\t\"u_resolution\": { value: null },\r\n\t\t\"u_choppiness\": { value: null },\r\n\t\t\"u_phases\": { value: null },\r\n\t\t\"u_initialSpectrum\": { value: null }\r\n\t},\r\n\tfragmentShader: [\r\n\t\t\"precision highp float;\",\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"const float G = 9.81;\",\r\n\t\t\"const float KM = 370.0;\",\r\n\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"uniform float u_size;\",\r\n\t\t\"uniform float u_resolution;\",\r\n\t\t\"uniform float u_choppiness;\",\r\n\t\t\"uniform sampler2D u_phases;\",\r\n\t\t\"uniform sampler2D u_initialSpectrum;\",\r\n\r\n\t\t\"vec2 multiplyComplex (vec2 a, vec2 b) {\",\r\n\t\t\"\treturn vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);\",\r\n\t\t\"}\",\r\n\r\n\t\t\"vec2 multiplyByI (vec2 z) {\",\r\n\t\t\"\treturn vec2(-z[1], z[0]);\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float omega (float k) {\",\r\n\t\t\"\treturn sqrt(G * k * (1.0 + k * k / KM * KM));\",\r\n\t\t\"}\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tvec2 coordinates = gl_FragCoord.xy - 0.5;\",\r\n\t\t\"\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\r\n\t\t\"\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\r\n\t\t\"\tvec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;\",\r\n\r\n\t\t\"\tfloat phase = texture2D(u_phases, vUV).r;\",\r\n\t\t\"\tvec2 phaseVector = vec2(cos(phase), sin(phase));\",\r\n\r\n\t\t\"\tvec2 h0 = texture2D(u_initialSpectrum, vUV).rg;\",\r\n\t\t\"\tvec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;\",\r\n\t\t\"\th0Star.y *= -1.0;\",\r\n\r\n\t\t\"\tvec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));\",\r\n\r\n\t\t\"\tvec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;\",\r\n\t\t\"\tvec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;\",\r\n\r\n\t\t//no DC term\r\n\t\t\"\tif (waveVector.x == 0.0 && waveVector.y == 0.0) {\",\r\n\t\t\"\t\th = vec2(0.0);\",\r\n\t\t\"\t\thX = vec2(0.0);\",\r\n\t\t\"\t\thZ = vec2(0.0);\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tgl_FragColor = vec4(hX + multiplyByI(h), hZ);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\nOceanShaders[ \"ocean_normals\" ] = {\r\n\tuniforms: {\r\n\t\t\"u_displacementMap\": { value: null },\r\n\t\t\"u_resolution\": { value: null },\r\n\t\t\"u_size\": { value: null }\r\n\t},\r\n\tfragmentShader: [\r\n\t\t\"precision highp float;\",\r\n\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"uniform sampler2D u_displacementMap;\",\r\n\t\t\"uniform float u_resolution;\",\r\n\t\t\"uniform float u_size;\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tfloat texel = 1.0 / u_resolution;\",\r\n\t\t\"\tfloat texelSize = u_size / u_resolution;\",\r\n\r\n\t\t\"\tvec3 center = texture2D(u_displacementMap, vUV).rgb;\",\r\n\t\t\"\tvec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;\",\r\n\t\t\"\tvec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;\",\r\n\t\t\"\tvec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;\",\r\n\t\t\"\tvec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;\",\r\n\r\n\t\t\"\tvec3 topRight = cross(right, top);\",\r\n\t\t\"\tvec3 topLeft = cross(top, left);\",\r\n\t\t\"\tvec3 bottomLeft = cross(left, bottom);\",\r\n\t\t\"\tvec3 bottomRight = cross(bottom, right);\",\r\n\r\n\t\t\"\tgl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\nOceanShaders[ \"ocean_main\" ] = {\r\n\tuniforms: {\r\n\t\t\"u_displacementMap\": { value: null },\r\n\t\t\"u_normalMap\": { value: null },\r\n\t\t\"u_geometrySize\": { value: null },\r\n\t\t\"u_size\": { value: null },\r\n\t\t\"u_projectionMatrix\": { value: null },\r\n\t\t\"u_viewMatrix\": { value: null },\r\n\t\t\"u_cameraPosition\": { value: null },\r\n\t\t\"u_skyColor\": { value: null },\r\n\t\t\"u_oceanColor\": { value: null },\r\n\t\t\"u_sunDirection\": { value: null },\r\n\t\t\"u_exposure\": { value: null }\r\n\t},\r\n\tvertexShader: [\r\n\t\t\"precision highp float;\",\r\n\r\n\t\t\"varying vec3 vPos;\",\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"uniform mat4 u_projectionMatrix;\",\r\n\t\t\"uniform mat4 u_viewMatrix;\",\r\n\t\t\"uniform float u_size;\",\r\n\t\t\"uniform float u_geometrySize;\",\r\n\t\t\"uniform sampler2D u_displacementMap;\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tvec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);\",\r\n\t\t\"\tvPos = newPos;\",\r\n\t\t\"\tvUV = uv;\",\r\n\t\t\"\tgl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" ),\r\n\tfragmentShader: [\r\n\t\t\"precision highp float;\",\r\n\r\n\t\t\"varying vec3 vPos;\",\r\n\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\"uniform sampler2D u_displacementMap;\",\r\n\t\t\"uniform sampler2D u_normalMap;\",\r\n\t\t\"uniform vec3 u_cameraPosition;\",\r\n\t\t\"uniform vec3 u_oceanColor;\",\r\n\t\t\"uniform vec3 u_skyColor;\",\r\n\t\t\"uniform vec3 u_sunDirection;\",\r\n\t\t\"uniform float u_exposure;\",\r\n\r\n\t\t\"vec3 hdr (vec3 color, float exposure) {\",\r\n\t\t\"\treturn 1.0 - exp(-color * exposure);\",\r\n\t\t\"}\",\r\n\r\n\t\t\"void main (void) {\",\r\n\t\t\"\tvec3 normal = texture2D(u_normalMap, vUV).rgb;\",\r\n\r\n\t\t\"\tvec3 view = normalize(u_cameraPosition - vPos);\",\r\n\t\t\"\tfloat fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);\",\r\n\t\t\"\tvec3 sky = fresnel * u_skyColor;\",\r\n\r\n\t\t\"\tfloat diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);\",\r\n\t\t\"\tvec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;\",\r\n\r\n\t\t\"\tvec3 color = sky + water;\",\r\n\r\n\t\t\"\tgl_FragColor = vec4(hdr(color, u_exposure), 1.0);\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\n\r\nexport { OceanShaders };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/OceanShaders.js","import {\r\n\tClampToEdgeWrapping,\r\n\tDataTexture,\r\n\tFloatType,\r\n\tHalfFloatType,\r\n\tLinearFilter,\r\n\tMesh,\r\n\tNearestFilter,\r\n\tOrthographicCamera,\r\n\tPlaneBufferGeometry,\r\n\tRGBAFormat,\r\n\tRepeatWrapping,\r\n\tScene,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\nimport { OceanShaders } from \"../shaders/OceanShaders.js\";\r\n\r\nvar Ocean = function ( renderer, camera, scene, options ) {\r\n\r\n\t// flag used to trigger parameter changes\r\n\tthis.changed = true;\r\n\tthis.initial = true;\r\n\r\n\t// Assign required parameters as object properties\r\n\tthis.oceanCamera = new OrthographicCamera(); //camera.clone();\r\n\tthis.oceanCamera.position.z = 1;\r\n\tthis.renderer = renderer;\r\n\tthis.renderer.clearColor( 0xffffff );\r\n\r\n\tthis.scene = new Scene();\r\n\r\n\t// Assign optional parameters as variables and object properties\r\n\tfunction optionalParameter( value, defaultValue ) {\r\n\r\n\t\treturn value !== undefined ? value : defaultValue;\r\n\r\n\t}\r\n\r\n\toptions = options || {};\r\n\tthis.clearColor = optionalParameter( options.CLEAR_COLOR, [ 1.0, 1.0, 1.0, 0.0 ] );\r\n\tthis.geometryOrigin = optionalParameter( options.GEOMETRY_ORIGIN, [ - 1000.0, - 1000.0 ] );\r\n\tthis.sunDirectionX = optionalParameter( options.SUN_DIRECTION[ 0 ], - 1.0 );\r\n\tthis.sunDirectionY = optionalParameter( options.SUN_DIRECTION[ 1 ], 1.0 );\r\n\tthis.sunDirectionZ = optionalParameter( options.SUN_DIRECTION[ 2 ], 1.0 );\r\n\tthis.oceanColor = optionalParameter( options.OCEAN_COLOR, new Vector3( 0.004, 0.016, 0.047 ) );\r\n\tthis.skyColor = optionalParameter( options.SKY_COLOR, new Vector3( 3.2, 9.6, 12.8 ) );\r\n\tthis.exposure = optionalParameter( options.EXPOSURE, 0.35 );\r\n\tthis.geometryResolution = optionalParameter( options.GEOMETRY_RESOLUTION, 32 );\r\n\tthis.geometrySize = optionalParameter( options.GEOMETRY_SIZE, 2000 );\r\n\tthis.resolution = optionalParameter( options.RESOLUTION, 64 );\r\n\tthis.floatSize = optionalParameter( options.SIZE_OF_FLOAT, 4 );\r\n\tthis.windX = optionalParameter( options.INITIAL_WIND[ 0 ], 10.0 );\r\n\tthis.windY = optionalParameter( options.INITIAL_WIND[ 1 ], 10.0 );\r\n\tthis.size = optionalParameter( options.INITIAL_SIZE, 250.0 );\r\n\tthis.choppiness = optionalParameter( options.INITIAL_CHOPPINESS, 1.5 );\r\n\r\n\t//\r\n\tthis.matrixNeedsUpdate = false;\r\n\r\n\t// Setup framebuffer pipeline\r\n\tvar renderTargetType = optionalParameter( options.USE_HALF_FLOAT, false ) ? HalfFloatType : FloatType;\r\n\tvar LinearClampParams = {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\twrapS: ClampToEdgeWrapping,\r\n\t\twrapT: ClampToEdgeWrapping,\r\n\t\tformat: RGBAFormat,\r\n\t\tdepthBuffer: false,\r\n\t\tpremultiplyAlpha: false,\r\n\t\ttype: renderTargetType\r\n\t};\r\n\tvar NearestClampParams = {\r\n\t\tminFilter: NearestFilter,\r\n\t\tmagFilter: NearestFilter,\r\n\t\twrapS: ClampToEdgeWrapping,\r\n\t\twrapT: ClampToEdgeWrapping,\r\n\t\tformat: RGBAFormat,\r\n\t\tdepthBuffer: false,\r\n\t\tpremultiplyAlpha: false,\r\n\t\ttype: renderTargetType\r\n\t};\r\n\tvar NearestRepeatParams = {\r\n\t\tminFilter: NearestFilter,\r\n\t\tmagFilter: NearestFilter,\r\n\t\twrapS: RepeatWrapping,\r\n\t\twrapT: RepeatWrapping,\r\n\t\tformat: RGBAFormat,\r\n\t\tdepthBuffer: false,\r\n\t\tpremultiplyAlpha: false,\r\n\t\ttype: renderTargetType\r\n\t};\r\n\tthis.initialSpectrumFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestRepeatParams );\r\n\tthis.spectrumFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\r\n\tthis.pingPhaseFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\r\n\tthis.pongPhaseFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\r\n\tthis.pingTransformFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\r\n\tthis.pongTransformFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\r\n\tthis.displacementMapFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, LinearClampParams );\r\n\tthis.normalMapFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, LinearClampParams );\r\n\r\n\t// Define shaders and constant uniforms\r\n\t////////////////////////////////////////\r\n\r\n\t// 0 - The vertex shader used in all of the simulation steps\r\n\tvar fullscreeenVertexShader = OceanShaders[ \"ocean_sim_vertex\" ];\r\n\r\n\t// 1 - Horizontal wave vertices used for FFT\r\n\tvar oceanHorizontalShader = OceanShaders[ \"ocean_subtransform\" ];\r\n\tvar oceanHorizontalUniforms = UniformsUtils.clone( oceanHorizontalShader.uniforms );\r\n\tthis.materialOceanHorizontal = new ShaderMaterial( {\r\n\t\tuniforms: oceanHorizontalUniforms,\r\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\r\n\t\tfragmentShader: \"#define HORIZONTAL \\n\" + oceanHorizontalShader.fragmentShader\r\n\t} );\r\n\tthis.materialOceanHorizontal.uniforms.u_transformSize = { value: this.resolution };\r\n\tthis.materialOceanHorizontal.uniforms.u_subtransformSize = { value: null };\r\n\tthis.materialOceanHorizontal.uniforms.u_input = { value: null };\r\n\tthis.materialOceanHorizontal.depthTest = false;\r\n\r\n\t// 2 - Vertical wave vertices used for FFT\r\n\tvar oceanVerticalShader = OceanShaders[ \"ocean_subtransform\" ];\r\n\tvar oceanVerticalUniforms = UniformsUtils.clone( oceanVerticalShader.uniforms );\r\n\tthis.materialOceanVertical = new ShaderMaterial( {\r\n\t\tuniforms: oceanVerticalUniforms,\r\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\r\n\t\tfragmentShader: oceanVerticalShader.fragmentShader\r\n\t} );\r\n\tthis.materialOceanVertical.uniforms.u_transformSize = { value: this.resolution };\r\n\tthis.materialOceanVertical.uniforms.u_subtransformSize = { value: null };\r\n\tthis.materialOceanVertical.uniforms.u_input = { value: null };\r\n\tthis.materialOceanVertical.depthTest = false;\r\n\r\n\t// 3 - Initial spectrum used to generate height map\r\n\tvar initialSpectrumShader = OceanShaders[ \"ocean_initial_spectrum\" ];\r\n\tvar initialSpectrumUniforms = UniformsUtils.clone( initialSpectrumShader.uniforms );\r\n\tthis.materialInitialSpectrum = new ShaderMaterial( {\r\n\t\tuniforms: initialSpectrumUniforms,\r\n\t\tvertexShader: initialSpectrumShader.vertexShader,\r\n\t\tfragmentShader: initialSpectrumShader.fragmentShader\r\n\t} );\r\n\tthis.materialInitialSpectrum.uniforms.u_wind = { value: new Vector2() };\r\n\tthis.materialInitialSpectrum.uniforms.u_resolution = { value: this.resolution };\r\n\tthis.materialInitialSpectrum.depthTest = false;\r\n\r\n\t// 4 - Phases used to animate heightmap\r\n\tvar phaseShader = OceanShaders[ \"ocean_phase\" ];\r\n\tvar phaseUniforms = UniformsUtils.clone( phaseShader.uniforms );\r\n\tthis.materialPhase = new ShaderMaterial( {\r\n\t\tuniforms: phaseUniforms,\r\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\r\n\t\tfragmentShader: phaseShader.fragmentShader\r\n\t} );\r\n\tthis.materialPhase.uniforms.u_resolution = { value: this.resolution };\r\n\tthis.materialPhase.depthTest = false;\r\n\r\n\t// 5 - Shader used to update spectrum\r\n\tvar spectrumShader = OceanShaders[ \"ocean_spectrum\" ];\r\n\tvar spectrumUniforms = UniformsUtils.clone( spectrumShader.uniforms );\r\n\tthis.materialSpectrum = new ShaderMaterial( {\r\n\t\tuniforms: spectrumUniforms,\r\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\r\n\t\tfragmentShader: spectrumShader.fragmentShader\r\n\t} );\r\n\tthis.materialSpectrum.uniforms.u_initialSpectrum = { value: null };\r\n\tthis.materialSpectrum.uniforms.u_resolution = { value: this.resolution };\r\n\tthis.materialSpectrum.depthTest = false;\r\n\r\n\t// 6 - Shader used to update spectrum normals\r\n\tvar normalShader = OceanShaders[ \"ocean_normals\" ];\r\n\tvar normalUniforms = UniformsUtils.clone( normalShader.uniforms );\r\n\tthis.materialNormal = new ShaderMaterial( {\r\n\t\tuniforms: normalUniforms,\r\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\r\n\t\tfragmentShader: normalShader.fragmentShader\r\n\t} );\r\n\tthis.materialNormal.uniforms.u_displacementMap = { value: null };\r\n\tthis.materialNormal.uniforms.u_resolution = { value: this.resolution };\r\n\tthis.materialNormal.depthTest = false;\r\n\r\n\t// 7 - Shader used to update normals\r\n\tvar oceanShader = OceanShaders[ \"ocean_main\" ];\r\n\tvar oceanUniforms = UniformsUtils.clone( oceanShader.uniforms );\r\n\tthis.materialOcean = new ShaderMaterial( {\r\n\t\tuniforms: oceanUniforms,\r\n\t\tvertexShader: oceanShader.vertexShader,\r\n\t\tfragmentShader: oceanShader.fragmentShader\r\n\t} );\r\n\t// this.materialOcean.wireframe = true;\r\n\tthis.materialOcean.uniforms.u_geometrySize = { value: this.resolution };\r\n\tthis.materialOcean.uniforms.u_displacementMap = { value: this.displacementMapFramebuffer.texture };\r\n\tthis.materialOcean.uniforms.u_normalMap = { value: this.normalMapFramebuffer.texture };\r\n\tthis.materialOcean.uniforms.u_oceanColor = { value: this.oceanColor };\r\n\tthis.materialOcean.uniforms.u_skyColor = { value: this.skyColor };\r\n\tthis.materialOcean.uniforms.u_sunDirection = { value: new Vector3( this.sunDirectionX, this.sunDirectionY, this.sunDirectionZ ) };\r\n\tthis.materialOcean.uniforms.u_exposure = { value: this.exposure };\r\n\tthis.materialOcean.uniforms.u_size = { value: this.size };\r\n\r\n\t// Disable blending to prevent default premultiplied alpha values\r\n\tthis.materialOceanHorizontal.blending = 0;\r\n\tthis.materialOceanVertical.blending = 0;\r\n\tthis.materialInitialSpectrum.blending = 0;\r\n\tthis.materialPhase.blending = 0;\r\n\tthis.materialSpectrum.blending = 0;\r\n\tthis.materialNormal.blending = 0;\r\n\tthis.materialOcean.blending = 0;\r\n\r\n\t// Create the simulation plane\r\n\tthis.screenQuad = new Mesh( new PlaneBufferGeometry( 2, 2 ) );\r\n\tthis.scene.add( this.screenQuad );\r\n\r\n\t// Initialise spectrum data\r\n\tthis.generateSeedPhaseTexture();\r\n\r\n\t// Generate the ocean mesh\r\n\tthis.generateMesh();\r\n\r\n};\r\n\r\nOcean.prototype.generateMesh = function () {\r\n\r\n\tvar geometry = new PlaneBufferGeometry( this.geometrySize, this.geometrySize, this.geometryResolution, this.geometryResolution );\r\n\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tthis.oceanMesh = new Mesh( geometry, this.materialOcean );\r\n\r\n};\r\n\r\nOcean.prototype.render = function () {\r\n\r\n\tvar currentRenderTarget = this.renderer.getRenderTarget();\r\n\r\n\tthis.scene.overrideMaterial = null;\r\n\r\n\tif ( this.changed )\r\n\t\tthis.renderInitialSpectrum();\r\n\r\n\tthis.renderWavePhase();\r\n\tthis.renderSpectrum();\r\n\tthis.renderSpectrumFFT();\r\n\tthis.renderNormalMap();\r\n\tthis.scene.overrideMaterial = null;\r\n\r\n\tthis.renderer.setRenderTarget( currentRenderTarget );\r\n\r\n};\r\n\r\nOcean.prototype.generateSeedPhaseTexture = function () {\r\n\r\n\t// Setup the seed texture\r\n\tthis.pingPhase = true;\r\n\tvar phaseArray = new window.Float32Array( this.resolution * this.resolution * 4 );\r\n\tfor ( var i = 0; i < this.resolution; i ++ ) {\r\n\r\n\t\tfor ( var j = 0; j < this.resolution; j ++ ) {\r\n\r\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 ] = Math.random() * 2.0 * Math.PI;\r\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 + 1 ] = 0.0;\r\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 + 2 ] = 0.0;\r\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 + 3 ] = 0.0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.pingPhaseTexture = new DataTexture( phaseArray, this.resolution, this.resolution, RGBAFormat );\r\n\tthis.pingPhaseTexture.wrapS = ClampToEdgeWrapping;\r\n\tthis.pingPhaseTexture.wrapT = ClampToEdgeWrapping;\r\n\tthis.pingPhaseTexture.type = FloatType;\r\n\r\n};\r\n\r\nOcean.prototype.renderInitialSpectrum = function () {\r\n\r\n\tthis.scene.overrideMaterial = this.materialInitialSpectrum;\r\n\tthis.materialInitialSpectrum.uniforms.u_wind.value.set( this.windX, this.windY );\r\n\tthis.materialInitialSpectrum.uniforms.u_size.value = this.size;\r\n\r\n\tthis.renderer.setRenderTarget( this.initialSpectrumFramebuffer );\r\n\tthis.renderer.clear();\r\n\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n};\r\n\r\nOcean.prototype.renderWavePhase = function () {\r\n\r\n\tthis.scene.overrideMaterial = this.materialPhase;\r\n\tthis.screenQuad.material = this.materialPhase;\r\n\r\n\tif ( this.initial ) {\r\n\r\n\t\tthis.materialPhase.uniforms.u_phases.value = this.pingPhaseTexture;\r\n\t\tthis.initial = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.materialPhase.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture;\r\n\r\n\t}\r\n\r\n\tthis.materialPhase.uniforms.u_deltaTime.value = this.deltaTime;\r\n\tthis.materialPhase.uniforms.u_size.value = this.size;\r\n\tthis.renderer.setRenderTarget( this.pingPhase ? this.pongPhaseFramebuffer : this.pingPhaseFramebuffer );\r\n\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\tthis.pingPhase = ! this.pingPhase;\r\n\r\n};\r\n\r\nOcean.prototype.renderSpectrum = function () {\r\n\r\n\tthis.scene.overrideMaterial = this.materialSpectrum;\r\n\tthis.materialSpectrum.uniforms.u_initialSpectrum.value = this.initialSpectrumFramebuffer.texture;\r\n\tthis.materialSpectrum.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture;\r\n\tthis.materialSpectrum.uniforms.u_choppiness.value = this.choppiness;\r\n\tthis.materialSpectrum.uniforms.u_size.value = this.size;\r\n\r\n\tthis.renderer.setRenderTarget( this.spectrumFramebuffer );\r\n\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n};\r\n\r\nOcean.prototype.renderSpectrumFFT = function () {\r\n\r\n\t// GPU FFT using Stockham formulation\r\n\tvar iterations = Math.log( this.resolution ) / Math.log( 2 ); // log2\r\n\r\n\tthis.scene.overrideMaterial = this.materialOceanHorizontal;\r\n\r\n\tfor ( var i = 0; i < iterations; i ++ ) {\r\n\r\n\t\tif ( i === 0 ) {\r\n\r\n\t\t\tthis.materialOceanHorizontal.uniforms.u_input.value = this.spectrumFramebuffer.texture;\r\n\t\t\tthis.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\r\n\r\n\t\t\tthis.renderer.setRenderTarget( this.pingTransformFramebuffer );\r\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n\t\t} else if ( i % 2 === 1 ) {\r\n\r\n\t\t\tthis.materialOceanHorizontal.uniforms.u_input.value = this.pingTransformFramebuffer.texture;\r\n\t\t\tthis.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\r\n\r\n\t\t\tthis.renderer.setRenderTarget( this.pongTransformFramebuffer );\r\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.materialOceanHorizontal.uniforms.u_input.value = this.pongTransformFramebuffer.texture;\r\n\t\t\tthis.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\r\n\r\n\t\t\tthis.renderer.setRenderTarget( this.pingTransformFramebuffer );\r\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.scene.overrideMaterial = this.materialOceanVertical;\r\n\r\n\tfor ( var i = iterations; i < iterations * 2; i ++ ) {\r\n\r\n\t\tif ( i === iterations * 2 - 1 ) {\r\n\r\n\t\t\tthis.materialOceanVertical.uniforms.u_input.value = ( iterations % 2 === 0 ) ? this.pingTransformFramebuffer.texture : this.pongTransformFramebuffer.texture;\r\n\t\t\tthis.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\r\n\r\n\t\t\tthis.renderer.setRenderTarget( this.displacementMapFramebuffer );\r\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n\t\t} else if ( i % 2 === 1 ) {\r\n\r\n\t\t\tthis.materialOceanVertical.uniforms.u_input.value = this.pingTransformFramebuffer.texture;\r\n\t\t\tthis.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\r\n\r\n\t\t\tthis.renderer.setRenderTarget( this.pongTransformFramebuffer );\r\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.materialOceanVertical.uniforms.u_input.value = this.pongTransformFramebuffer.texture;\r\n\t\t\tthis.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\r\n\r\n\t\t\tthis.renderer.setRenderTarget( this.pingTransformFramebuffer );\r\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nOcean.prototype.renderNormalMap = function () {\r\n\r\n\tthis.scene.overrideMaterial = this.materialNormal;\r\n\tif ( this.changed ) this.materialNormal.uniforms.u_size.value = this.size;\r\n\tthis.materialNormal.uniforms.u_displacementMap.value = this.displacementMapFramebuffer.texture;\r\n\r\n\tthis.renderer.setRenderTarget( this.normalMapFramebuffer );\r\n\tthis.renderer.clear();\r\n\tthis.renderer.render( this.scene, this.oceanCamera );\r\n\r\n};\r\n\r\nexport { Ocean };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/misc/Ocean.js","<template>\r\n    <div class=\"webglShadersOcean2-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl ocean simulation\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { Ocean } from '@/components/jsm/misc/Ocean.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            stats: null,\r\n\t\t\tlastTime: null,\r\n            DEMO: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.stats = new this.$Stats();\r\n        this.stats.dom.style.left = '280px'\r\n        document.getElementsByClassName('webglShadersOcean2-container')[0].appendChild(this.stats.dom);\r\n        this.lastTime = (new Date()).getTime();\r\n        var that = this\r\n        this.DEMO = {\r\n            ms_Renderer: null,\r\n            ms_Camera: null,\r\n            ms_Scene: null,\r\n            ms_Controls: null,\r\n            ms_Ocean: null,\r\n            Initialize: function () {\r\n                this.ms_Renderer = new that.$THREE.WebGLRenderer();\r\n                this.ms_Renderer.setPixelRatio(window.devicePixelRatio);\r\n                document.getElementsByClassName('webglShadersOcean2-container')[0].appendChild(this.ms_Renderer.domElement);\r\n                this.ms_Scene = new that.$THREE.Scene();\r\n                this.ms_Camera = new that.$THREE.PerspectiveCamera(55.0, this.$webglInnerWidth / window.innerHeight, 0.5, 300000);\r\n                this.ms_Camera.position.set(450, 350, 450);\r\n                this.ms_Camera.lookAt(0, 0, 0);\r\n                // Initialize Orbit control\r\n                this.ms_Controls = new OrbitControls(this.ms_Camera, this.ms_Renderer.domElement);\r\n                this.ms_Controls.userPan = false;\r\n                this.ms_Controls.userPanSpeed = 0.0;\r\n                this.ms_Controls.minDistance = 0;\r\n                this.ms_Controls.maxDistance = 2000.0;\r\n                this.ms_Controls.minPolarAngle = 0;\r\n                this.ms_Controls.maxPolarAngle = Math.PI * 0.495;\r\n                var gsize = 512;\r\n                var res = 1024;\r\n                var gres = res / 2;\r\n                var origx = - gsize / 2;\r\n                var origz = - gsize / 2;\r\n                this.ms_Ocean = new Ocean(this.ms_Renderer, this.ms_Camera, this.ms_Scene,\r\n                    {\r\n                        USE_HALF_FLOAT: false,\r\n                        INITIAL_SIZE: 256.0,\r\n                        INITIAL_WIND: [ 10.0, 10.0 ],\r\n                        INITIAL_CHOPPINESS: 1.5,\r\n                        CLEAR_COLOR: [ 1.0, 1.0, 1.0, 0.0 ],\r\n                        GEOMETRY_ORIGIN: [ origx, origz ],\r\n                        SUN_DIRECTION: [ - 1.0, 1.0, 1.0 ],\r\n                        OCEAN_COLOR: new that.$THREE.Vector3(0.004, 0.016, 0.047),\r\n                        SKY_COLOR: new that.$THREE.Vector3(3.2, 9.6, 12.8),\r\n                        EXPOSURE: 0.35,\r\n                        GEOMETRY_RESOLUTION: gres,\r\n                        GEOMETRY_SIZE: gsize,\r\n                        RESOLUTION: res\r\n                    });\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_projectionMatrix\" ] = { value: this.ms_Camera.projectionMatrix };\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_viewMatrix\" ] = { value: this.ms_Camera.matrixWorldInverse };\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_cameraPosition\" ] = { value: this.ms_Camera.position };\r\n                this.ms_Scene.add(this.ms_Ocean.oceanMesh);\r\n                that.gui = new GUI();\r\n                that.gui.add(this.ms_Ocean, \"size\", 100, 5000).onChange(function (v) {\r\n                    this.object.size = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"choppiness\", 0.1, 4).onChange(function (v) {\r\n                    this.object.choppiness = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"windX\", - 15, 15).onChange(function (v) {\r\n                    this.object.windX = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"windY\", - 15, 15).onChange(function (v) {\r\n                    this.object.windY = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"sunDirectionX\", - 1.0, 1.0).onChange(function (v) {\r\n                    this.object.sunDirectionX = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"sunDirectionY\", - 1.0, 1.0).onChange(function (v) {\r\n                    this.object.sunDirectionY = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"sunDirectionZ\", - 1.0, 1.0).onChange(function (v) {\r\n                    this.object.sunDirectionZ = v;\r\n                    this.object.changed = true;\r\n                });\r\n                that.gui.add(this.ms_Ocean, \"exposure\", 0.0, 0.5).onChange(function (v) {\r\n                    this.object.exposure = v;\r\n                    this.object.changed = true;\r\n                });\r\n            },\r\n            Display: function () {\r\n                this.ms_Renderer.render(this.ms_Scene, this.ms_Camera);\r\n            },\r\n            Update: function () {\r\n                var currentTime = new Date().getTime();\r\n                this.ms_Ocean.deltaTime = (currentTime - that.lastTime) / 1000 || 0.0;\r\n                that.lastTime = currentTime;\r\n                this.ms_Ocean.render(this.ms_Ocean.deltaTime);\r\n                this.ms_Ocean.overrideMaterial = this.ms_Ocean.materialOcean;\r\n                if (this.ms_Ocean.changed) {\r\n                    this.ms_Ocean.materialOcean.uniforms[ \"u_size\" ].value = this.ms_Ocean.size;\r\n                    this.ms_Ocean.materialOcean.uniforms[ \"u_sunDirection\" ].value.set(this.ms_Ocean.sunDirectionX, this.ms_Ocean.sunDirectionY, this.ms_Ocean.sunDirectionZ);\r\n                    this.ms_Ocean.materialOcean.uniforms[ \"u_exposure\" ].value = this.ms_Ocean.exposure;\r\n                    this.ms_Ocean.changed = false;\r\n                }\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_normalMap\" ].value = this.ms_Ocean.normalMapFramebuffer.texture;\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_displacementMap\" ].value = this.ms_Ocean.displacementMapFramebuffer.texture;\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_projectionMatrix\" ].value = this.ms_Camera.projectionMatrix;\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_viewMatrix\" ].value = this.ms_Camera.matrixWorldInverse;\r\n                this.ms_Ocean.materialOcean.uniforms[ \"u_cameraPosition\" ].value = this.ms_Camera.position;\r\n                this.ms_Ocean.materialOcean.depthTest = true;\r\n                this.Display();\r\n            },\r\n            Resize: function (inWidth, inHeight) {\r\n                this.ms_Camera.aspect = inWidth / inHeight;\r\n                this.ms_Camera.updateProjectionMatrix();\r\n                this.ms_Renderer.setSize(inWidth, inHeight);\r\n                this.Display();\r\n            }\r\n        };\r\n        this.DEMO.Initialize();\r\n        window.addEventListener('resize', () => {\r\n            this.DEMO.Resize(window.innerWidth - 281, window.innerHeight);\r\n        });\r\n        this.DEMO.Resize(window.innerWidth - 281, window.innerHeight);\r\n        this.render()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        render() {\r\n            requestAnimationFrame(this.render);\r\n            this.DEMO.Update();\r\n            this.stats.update();\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglShadersOcean2-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    margin-left: 0;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/shaders/webglShadersOcean2.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglShadersOcean2-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl ocean simulation\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-257c7153\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/shaders/webglShadersOcean2.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-257c7153\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglShadersOcean2.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadersOcean2.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadersOcean2.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-257c7153\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglShadersOcean2.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-257c7153\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/shaders/webglShadersOcean2.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}