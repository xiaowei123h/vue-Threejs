{"version":3,"sources":["webpack:///./src/components/jsm/geometries/LightningStrike.js","webpack:///./src/components/jsm/objects/LightningStorm.js","webpack:///src/views/lightningstrike/webglLightningstrike.vue","webpack:///./src/views/lightningstrike/webglLightningstrike.vue?d934","webpack:///./src/views/lightningstrike/webglLightningstrike.vue","webpack:///./src/components/jsm/postprocessing/OutlinePass.js","webpack:///./src/views/lightningstrike/webglLightningstrike.vue?f883"],"names":["LightningStrike","rayParameters","BufferGeometry","call","this","type","init","copyParameters","createMesh","prototype","Object","create","constructor","isLightningStrike","RAY_INITIALIZED","RAY_UNBORN","RAY_PROPAGATING","RAY_STEADY","RAY_VANISHING","RAY_EXTINGUISHED","COS30DEG","Math","cos","PI","SIN30DEG","sin","createRandomGenerator","seeds","i","push","random","generator","currentSeed","value","getSeed","setSeed","seed","floor","dest","source","vecCopy","v","clone","sourceOffset","undefined","Vector3","destOffset","timeScale","roughness","straightness","up0","up1","radius0","radius1","radius0Factor","radius1Factor","minRadius","isEternal","birthTime","deathTime","propagationTimeFactor","vanishingTimeFactor","subrayPeriod","subrayDutyCycle","maxIterations","isStatic","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","noiseSeed","onDecideSubrayCreation","onSubrayCreation","update","time","updateMesh","subrays","endPropagationTime","state","beginVanishingTime","visible","seedGenerator","createDefaultSubrayCreationCallbacks","maxSubrays","ceil","pow","max","maxRaySegments","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","SimplexNoise","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","Uint32BufferAttribute","Float32BufferAttribute","setAttribute","index","usage","DynamicDrawUsage","array","drawRange","count","needsUpdate","scope","fractalRay","segment","subray","recursion","createPrism","fraction0","fraction1","addNewSubray","initSubray","pos0","copy","pos1","segmentCallback","subrayIndex","MathUtils","lerp","random1","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","length","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","sub","u","uv","vertex","lightningStrike","period","dutyCycle","phase0","phase","currentCycle","childSubraySeed","probability","childSubray","parentSeed","min","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","LightningStorm","stormParams","Object3D","size","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","lightningMaterial","MeshBasicMaterial","color","onRayPosition","height","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","lightning","mesh","Mesh","isLightningStorm","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","il","prevState","splice","indexOf","remove","currentTime","webglLightningstrike","data","container","stats","scene","renderer","composer","gui","currentSceneIndex","sceneCreators","clock","raycaster","mouse","mounted","createConesScene","createPlasmaBallScene","createStormScene","$THREE","Clock","Raycaster","Vector2","animate","beforeDestroy","destroy","methods","document","getElementById","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","outputEncoding","sRGBEncoding","appendChild","domElement","EffectComposer","$Stats","dom","style","left","addEventListener","onWindowResize","createScene","createGUI","userData","camera","aspect","innerWidth","updateProjectionMatrix","_this","dat_gui_module","width","sceneFolder","addFolder","sceneIndex","Electric Cones","Plasma Ball","Storm","name","onChange","timeRate","canGoBackwardsInTime","open","graphicsFolder","lightningColorRGB","lightningColor","r","g","b","addColor","setRGB","outlineColorRGB","outlineColor","rayFolder","rayParams","recreateRay","raySlowFolder","step","onFinishChange","requestAnimationFrame","render","getDelta","createOutline","objectsArray","visibleColor","outlinePass","OutlinePass","edgeStrength","edgeGlow","edgeThickness","visibleEdgeColor","hiddenEdgeColor","addPass","outlineEnabled","Scene","background","Color","PerspectiveCamera","posLight","PointLight","ground","PlaneBufferGeometry","MeshPhongMaterial","shininess","rotation","position","coneMesh1","ConeBufferGeometry","emissive","conesDistance","lightningStrikeMesh","coneMesh2","coneHeight","outlineMeshArray","that","LightningStrike_LightningStrike","passes","RenderPass","controls","OrbitControls","target","enableDamping","dampingFactor","_this2","ballScene","ambientLight","AmbientLight","light1","DirectionalLight","light2","DoubleSide","urls","textureCube","CubeTextureLoader","load","mapping","CubeReflectionMapping","encoding","sphereMaterial","MeshPhysicalMaterial","transparent","transmission","depthWrite","metalness","envMap","sphereMesh","SphereBufferGeometry","sphere","Sphere","spherePlasma","sphereRadius","scale","post","CylinderBufferGeometry","MeshLambertMaterial","sphereHeight","box","BoxBufferGeometry","material","rayDirection","rayLength","vec1","vec2","setLength","addVectors","rayPass","clear","enabled","touchAction","event","isPrimary","clientX","clientY","setFromCamera","ray","intersectSphere","intersection","GROUND_SIZE","proj","dot","starVertices","prevPoint","currPoint","starGeometry","starMesh","storm","LightningStorm_LightningStorm","star1","lightningstrike_webglLightningstrike","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","__WEBPACK_IMPORTED_MODULE_1__postprocessing_Pass_js__","__WEBPACK_IMPORTED_MODULE_2__shaders_CopyShader_js__","resolution","selectedObjects","renderScene","renderCamera","usePatternTexture","downSampleRatio","pulsePeriod","_visibilityCache","Map","Pass","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","resx","round","resy","maskBufferMaterial","renderTargetMaskBuffer","WebGLRenderTarget","texture","generateMipmaps","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","string","isPerspectiveCamera","replace","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","CopyShader","console","error","copyShader","copyUniforms","UniformsUtils","materialCopy","ShaderMaterial","vertexShader","depthTest","needsSwap","oldClearColor","oldClearAlpha","fsQuad","FullScreenQuad","tempPulseColor1","tempPulseColor2","textureMatrix","Matrix4","assign","dispose","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","get","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","isSprite","bFound","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","buffers","stencil","setTest","setClearColor","currentBackground","overrideMaterial","setRenderTarget","near","far","scalar","performance","now","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","depthTexture","cameraNearFar","join","maskTexture","texSize","edgeTexture1"],"mappings":"4JA+GIA,EAAkB,SAAlBA,EAA6BC,GAEhCC,iBAAeC,KAAMC,MAErBA,KAAKC,KAAO,kBAGZJ,EAAgBA,MAChBG,KAAKE,KAAMN,EAAgBO,eAAgBN,EAAeA,IAG1DG,KAAKI,eAINR,EAAgBS,UAAYC,OAAOC,OAAQT,iBAAeO,YAEhCG,YAAcZ,EAExCA,EAAgBS,UAAUI,mBAAoB,EAG9Cb,EAAgBc,gBAAkB,EAClCd,EAAgBe,WAAa,EAC7Bf,EAAgBgB,gBAAkB,EAClChB,EAAgBiB,WAAa,EAC7BjB,EAAgBkB,cAAgB,EAChClB,EAAgBmB,iBAAmB,EAEnCnB,EAAgBoB,SAAWC,KAAKC,IAAK,GAAKD,KAAKE,GAAK,KACpDvB,EAAgBwB,SAAWH,KAAKI,IAAK,GAAKJ,KAAKE,GAAK,KAEpDvB,EAAgB0B,sBAAwB,WAKvC,IAHA,IACIC,KAEMC,EAAI,EAAGA,EAHF,KAGgBA,IAE9BD,EAAME,KAAMR,KAAKS,UAIlB,IAAIC,GAEHC,YAAa,EAEbF,OAAQ,WAEP,IAAIG,EAAQN,EAAOI,EAAUC,aAI7B,OAFAD,EAAUC,aAAgBD,EAAUC,YAAc,GAjBrC,KAmBNC,GAIRC,QAAS,WAER,OAAOH,EAAUC,YAzBJ,MA6BdG,QAAS,SAAWC,GAEnBL,EAAUC,YAAcX,KAAKgB,MA/BhB,KA+BuBD,GA/BvB,OAqCf,OAAOL,GAIR/B,EAAgBO,eAAiB,SAAW+B,EAAMC,GAEjDA,EAASA,MAGT,IAAIC,EAAU,SAAWC,GAExB,OAAKF,IAAWD,EAERG,EAIAA,EAAEC,SA4CX,OAtDAJ,EAAOA,OAgBFK,kBAAuCC,IAAxBL,EAAOI,aAA6BH,EAASD,EAAOI,cAAiB,IAAIE,UAAS,EAAG,IAAK,GAC9GP,EAAKQ,gBAAmCF,IAAtBL,EAAOO,WAA2BN,EAASD,EAAOO,YAAe,IAAID,UAAS,EAAG,EAAG,GAEtGP,EAAKS,eAAiCH,IAArBL,EAAOQ,UAA0BR,EAAOQ,UAAY,EACrET,EAAKU,eAAiCJ,IAArBL,EAAOS,UAA0BT,EAAOS,UAAY,GACrEV,EAAKW,kBAAuCL,IAAxBL,EAAOU,aAA6BV,EAAOU,aAAe,GAE9EX,EAAKY,SAAqBN,IAAfL,EAAOW,IAAoBV,EAASD,EAAOW,KAAQ,IAAIL,UAAS,EAAG,EAAG,GACjFP,EAAKa,SAAqBP,IAAfL,EAAOY,IAAoBX,EAASD,EAAOY,KAAQ,IAAIN,UAAS,EAAG,EAAG,GACjFP,EAAKc,aAA6BR,IAAnBL,EAAOa,QAAwBb,EAAOa,QAAU,EAC/Dd,EAAKe,aAA6BT,IAAnBL,EAAOc,QAAwBd,EAAOc,QAAU,EAC/Df,EAAKgB,mBAAyCV,IAAzBL,EAAOe,cAA8Bf,EAAOe,cAAgB,GACjFhB,EAAKiB,mBAAyCX,IAAzBL,EAAOgB,cAA8BhB,EAAOgB,cAAgB,GACjFjB,EAAKkB,eAAiCZ,IAArBL,EAAOiB,UAA0BjB,EAAOiB,UAAY,GAIrElB,EAAKmB,eAAiCb,IAArBL,EAAOkB,UAA0BlB,EAAOkB,eAAmCb,IAArBL,EAAOmB,gBAAgDd,IAArBL,EAAOoB,UAChHrB,EAAKoB,UAAYnB,EAAOmB,UACxBpB,EAAKqB,UAAYpB,EAAOoB,UACxBrB,EAAKsB,2BAAyDhB,IAAjCL,EAAOqB,sBAAsCrB,EAAOqB,sBAAwB,GACzGtB,EAAKuB,yBAAqDjB,IAA/BL,EAAOsB,oBAAoCtB,EAAOsB,oBAAsB,GACnGvB,EAAKwB,kBAAuClB,IAAxBL,EAAOuB,aAA6BvB,EAAOuB,aAAe,EAC9ExB,EAAKyB,qBAA6CnB,IAA3BL,EAAOwB,gBAAgCxB,EAAOwB,gBAAkB,GAIvFzB,EAAK0B,mBAAyCpB,IAAzBL,EAAOyB,cAA8BzB,EAAOyB,cAAgB,EACjF1B,EAAK2B,cAA+BrB,IAApBL,EAAO0B,UAAyB1B,EAAO0B,SACvD3B,EAAK4B,kBAAuCtB,IAAxBL,EAAO2B,aAA6B3B,EAAO2B,aAAe,EAC9E5B,EAAK6B,wBAAmDvB,IAA9BL,EAAO4B,mBAAmC5B,EAAO4B,mBAAqB,EAChG7B,EAAK8B,0BAAuDxB,IAAhCL,EAAO6B,qBAAqC7B,EAAO6B,qBAAuB,GACtG9B,EAAK+B,iBAAqCzB,IAAvBL,EAAO8B,aAA4B9B,EAAO8B,YAC7D/B,EAAKgC,gBAAkB/B,EAAO+B,gBAC9BhC,EAAKiC,UAAYhC,EAAOgC,UACxBjC,EAAKkC,uBAAyBjC,EAAOiC,uBACrClC,EAAKmC,iBAAmBlC,EAAOkC,iBAExBnC,GAIRtC,EAAgBS,UAAUiE,OAAS,SAAWC,GAExCvE,KAAK6D,WAEL7D,KAAKH,cAAcwD,WAAerD,KAAKH,cAAcyD,WAAaiB,GAAQA,GAAQvE,KAAKH,cAAc0D,WAEzGvD,KAAKwE,WAAYD,GAEZA,EAAOvE,KAAKyE,QAAS,GAAIC,mBAE7B1E,KAAK2E,MAAQ/E,EAAgBgB,gBAElB2D,EAAOvE,KAAKyE,QAAS,GAAIG,mBAEpC5E,KAAK2E,MAAQ/E,EAAgBkB,cAI7Bd,KAAK2E,MAAQ/E,EAAgBiB,WAI9Bb,KAAK6E,SAAU,IAIf7E,KAAK6E,SAAU,EAEVN,EAAOvE,KAAKH,cAAcyD,UAE9BtD,KAAK2E,MAAQ/E,EAAgBe,WAI7BX,KAAK2E,MAAQ/E,EAAgBmB,oBAQhCnB,EAAgBS,UAAUH,KAAO,SAAWL,GAI3CG,KAAKH,cAAgBA,EAIrBG,KAAK4D,mBAAgDpB,IAAhC3C,EAAc+D,cAA8B3C,KAAKgB,MAAOpC,EAAc+D,eAAkB,EAC7G/D,EAAc+D,cAAgB5D,KAAK4D,cACnC5D,KAAK6D,cAAsCrB,IAA3B3C,EAAcgE,UAAyBhE,EAAcgE,SACrEhE,EAAcgE,SAAW7D,KAAK6D,SAC9B7D,KAAK8D,kBAA8CtB,IAA/B3C,EAAciE,aAA6B7C,KAAKgB,MAAOpC,EAAciE,cAAiB,EAC1GjE,EAAciE,aAAe9D,KAAK8D,aAClC9D,KAAK+D,wBAA0DvB,IAArC3C,EAAckE,mBAAmC9C,KAAKgB,MAAOpC,EAAckE,oBAAuB,EAC5HlE,EAAckE,mBAAqB/D,KAAK+D,mBACxC/D,KAAKgE,0BAA8DxB,IAAvC3C,EAAcmE,qBAAqCnE,EAAcmE,qBAAuB,GACpHnE,EAAcmE,qBAAuBhE,KAAKgE,qBAC1ChE,KAAKiE,iBAA4CzB,IAA9B3C,EAAcoE,aAA4BpE,EAAcoE,YAC3EpE,EAAcoE,YAAcjE,KAAKiE,iBAGMzB,IAAlC3C,EAAcqE,iBAElBlE,KAAKkE,gBAAkBrE,EAAcqE,gBACrClE,KAAK8E,cAAgBjF,EAAcqE,qBAEF1B,IAA5B3C,EAAcsE,WAElBnE,KAAK8E,cAAc/C,QAASlC,EAAcsE,aAM3CnE,KAAKkE,gBAAkBtE,EAAgB0B,wBACvCtB,KAAK8E,cAAgB7D,WAKwBuB,IAAzC3C,EAAcuE,uBAElBpE,KAAKoE,uBAAyBvE,EAAcuE,wBAI5CpE,KAAK+E,4CAEmCvC,IAAnC3C,EAAcwE,mBAElBrE,KAAKqE,iBAAmBxE,EAAcwE,mBAQxCrE,KAAK2E,MAAQ/E,EAAgBc,gBAE7BV,KAAKgF,WAAa/D,KAAKgE,KAAM,EAAIhE,KAAKiE,IAAKlF,KAAK8D,aAAc7C,KAAKkE,IAAK,EAAGnF,KAAK+D,mBAAqB,KACrGlE,EAAcmF,WAAahF,KAAKgF,WAEhChF,KAAKoF,eAAiB,GAAM,GAAKpF,KAAK4D,eAEtC5D,KAAKyE,WAEL,IAAM,IAAIjD,EAAI,EAAGA,EAAIxB,KAAKgF,WAAYxD,IAErCxB,KAAKyE,QAAQhD,KAAMzB,KAAKqF,gBAIzBrF,KAAKsF,eAEL,IAAU9D,EAAI,EAAGA,EAAIxB,KAAKoF,eAAgB5D,IAEzCxB,KAAKsF,YAAY7D,KAAMzB,KAAKuF,iBAI7BvF,KAAKuE,KAAO,EACZvE,KAAKwF,aAAe,EACpBxF,KAAKyF,uBAAyB,KAC9BzF,KAAK0F,8BAAgC1F,KAAKiE,YAAcjE,KAAK2F,8BAAgC3F,KAAK4F,iCAClG5F,KAAK6F,WAAa,EAClB7F,KAAK8F,cAAgB,KACrB9F,KAAK+F,oBAAsB,EAC3B/F,KAAKgG,kBAAmB,EACxBhG,KAAKiG,kBAAoB,EAEzBjG,KAAKkG,cAAgB,EACrBlG,KAAKmG,aAAe,EACpBnG,KAAKoG,kBAAoB,EACzBpG,KAAKqG,oBAAsB,EAC3BrG,KAAKsG,SAAW,KAChBtG,KAAKuG,IAAM,KACXvG,KAAKwG,QAAU,KACfxG,KAAKyG,kBAAoB,KACzBzG,KAAK0G,aAAe,KAEpB1G,KAAK2G,SAAW,IAAIC,IAAc5G,KAAK8E,eACvC9E,KAAK6G,SAAW,IAAID,IAAc5G,KAAK8E,eACvC9E,KAAK8G,SAAW,IAAIF,IAAc5G,KAAK8E,eAGvC9E,KAAK+G,SAAW,IAAItE,UACpBzC,KAAKgH,aAAe,IAAIvE,UACxBzC,KAAKiH,KAAO,IAAIxE,UAChBzC,KAAKkH,KAAO,IAAIzE,UAChBzC,KAAKmH,UAAY,IAAI1E,UACrBzC,KAAKoH,aAAe,IAAI3E,UACxBzC,KAAKqH,OAAS,IAAI5E,UAClBzC,KAAKsH,KAAO,IAAI7E,UAChBzC,KAAKuH,OAAS,IAAI9E,WAInB7C,EAAgBS,UAAUD,WAAa,WAEtC,IAAIoH,EAA+B,GAAKxH,KAAK4D,cAEzC6D,EAAW,GAAMD,EAA+B,GAAMxH,KAAKgF,WAC3D0C,EAAa,GAAKF,EAA+BxH,KAAKgF,WAE1DhF,KAAKsG,SAAW,IAAIqB,aAAyB,EAAXF,GAClCzH,KAAKwG,QAAU,IAAIoB,YAAaF,GAC3B1H,KAAKiE,cAETjE,KAAKuG,IAAM,IAAIoB,aAAyB,EAAXF,IAK9BzH,KAAK6H,SAAU,GAEf7H,KAAK8H,SAAU,IAAIC,wBAAuB/H,KAAKwG,QAAS,IAExDxG,KAAKyG,kBAAoB,IAAIuB,yBAAwBhI,KAAKsG,SAAU,GACpEtG,KAAKiI,aAAc,WAAYjI,KAAKyG,mBAE/BzG,KAAKiE,cAETjE,KAAK0G,aAAe,IAAIsB,yBAAwB,IAAIL,aAAc3H,KAAKuG,KAAO,GAC9EvG,KAAKiI,aAAc,KAAMjI,KAAK0G,eAIxB1G,KAAK6D,WAEX7D,KAAKkI,MAAMC,MAAQC,mBACnBpI,KAAKyG,kBAAkB0B,MAAQC,mBAC1BpI,KAAKiE,cAETjE,KAAK0G,aAAayB,MAAQC,qBAO5BpI,KAAKsG,SAAWtG,KAAKyG,kBAAkB4B,MACvCrI,KAAKwG,QAAUxG,KAAKkI,MAAMG,MACrBrI,KAAKiE,cAETjE,KAAKuG,IAAMvG,KAAK0G,aAAa2B,QAM/BzI,EAAgBS,UAAUmE,WAAa,SAAWD,GAEjDvE,KAAK6H,SAAUtD,GAEfvE,KAAKsI,UAAUC,MAAQvI,KAAKmG,aAE5BnG,KAAKkI,MAAMM,aAAc,EAEzBxI,KAAKyG,kBAAkB+B,aAAc,EAEhCxI,KAAKiE,cAETjE,KAAK0G,aAAa8B,aAAc,IAMlC5I,EAAgBS,UAAUwH,SAAW,SAAWtD,GAE/C,IAAIkE,EAAQzI,KAEZA,KAAKkG,cAAgB,EACrBlG,KAAKmG,aAAe,EACpBnG,KAAKoG,kBAAoB,EACzBpG,KAAKqG,oBAAsB,EAE3BrG,KAAK0I,WAAYnE,EAAM,SAAuBoE,GAE7C,IAAIC,EAASH,EAAM3C,cAEdvB,EAAOqE,EAAOtF,YAIPtD,KAAKH,cAAcwD,WAA8C,GAAjCoF,EAAM3C,cAAc+C,WAI/DJ,EAAMK,YAAaH,GAEnBF,EAAMrE,uBAAwBuE,EAASF,IAE5BlE,EAAOqE,EAAOlE,mBAEpB+D,EAAMjD,cAAgBmD,EAAQI,UAAYH,EAAOpF,wBAIrDiF,EAAMK,YAAaH,GAEnBF,EAAMrE,uBAAwBuE,EAASF,IAI7BlE,EAAOqE,EAAOhE,oBAIzB6D,EAAMK,YAAaH,GAEnBF,EAAMrE,uBAAwBuE,EAASF,KAIlCA,EAAMjD,cAAgBoD,EAAOnF,oBAAsBkF,EAAQK,WAAc,EAAIJ,EAAOnF,sBAIxFgF,EAAMK,YAAaH,GAIpBF,EAAMrE,uBAAwBuE,EAASF,QAQ1C7I,EAAgBS,UAAU4I,aAAe,WAExC,OAAOjJ,KAAKyE,QAASzE,KAAK6F,eAI3BjG,EAAgBS,UAAU6I,WAAa,SAAWN,EAAQ/I,GAEzD+I,EAAOO,KAAKC,KAAMvJ,EAAc0C,cAChCqG,EAAOS,KAAKD,KAAMvJ,EAAc6C,YAChCkG,EAAO9F,IAAIsG,KAAMvJ,EAAciD,KAC/B8F,EAAO7F,IAAIqG,KAAMvJ,EAAckD,KAC/B6F,EAAO5F,QAAUnD,EAAcmD,QAC/B4F,EAAO3F,QAAUpD,EAAcoD,QAC/B2F,EAAOtF,UAAYzD,EAAcyD,UACjCsF,EAAOrF,UAAY1D,EAAc0D,UACjCqF,EAAOjG,UAAY9C,EAAc8C,UACjCiG,EAAOhG,UAAY/C,EAAc+C,UACjCgG,EAAO/F,aAAehD,EAAcgD,aACpC+F,EAAOpF,sBAAwB3D,EAAc2D,sBAC7CoF,EAAOnF,oBAAsB5D,EAAc4D,oBAE3CmF,EAAOhF,cAAgB5D,KAAK4D,cAC5BgF,EAAO5G,UAAmCQ,IAA5B3C,EAAcsE,UAA0BtE,EAAcsE,UAAY,EAChFyE,EAAOC,UAAY,GAIpBjJ,EAAgBS,UAAUqI,WAAa,SAAWnE,EAAM+E,GAEvDtJ,KAAKuE,KAAOA,EACZvE,KAAKyF,uBAAyB6D,EAC9BtJ,KAAK6F,WAAa,EAGlB7F,KAAKkJ,WAAYlJ,KAAKiJ,eAAgBjJ,KAAKH,eAG3C,IAAM,IAAI0J,EAAc,EAAGA,EAAcvJ,KAAK6F,WAAY0D,IAAiB,CAE1E,IAAIX,EAAS5I,KAAKyE,QAAS8E,GAC3BvJ,KAAK8F,cAAgB8C,EAErB5I,KAAKkE,gBAAgBnC,QAAS6G,EAAO5G,MAErC4G,EAAOlE,mBAAqB8E,YAAUC,KAAMb,EAAOtF,UAAWsF,EAAOrF,UAAWqF,EAAOpF,uBACvFoF,EAAOhE,mBAAqB4E,YAAUC,KAAMb,EAAOrF,UAAWqF,EAAOtF,UAAW,EAAIsF,EAAOnF,qBAE3F,IAAIiG,EAAU1J,KAAKkE,gBAAgBxC,OACnCkH,EAAOe,QAAQC,IAAKF,IAAWA,IAAWA,KAAYG,eAAgB,KACtEjB,EAAOkB,QAAQF,IAAKF,IAAWA,IAAWA,KAAYG,eAAgB,KAEtE7J,KAAKwF,cAAiBjB,EAAOqE,EAAOtF,YAAgBsF,EAAOrF,UAAYqF,EAAOtF,WAE9EtD,KAAK+F,oBAAsB,EAC3B/F,KAAKgG,kBAAmB,EAExB,IAAI2C,EAAU3I,KAAK+J,gBACnBpB,EAAQqB,UAAY,EACpBrB,EAAQQ,KAAKC,KAAMR,EAAOO,MAC1BR,EAAQU,KAAKD,KAAMR,EAAOS,MAC1BV,EAAQgB,QAAQP,KAAMR,EAAOe,SAC7BhB,EAAQmB,QAAQV,KAAMR,EAAOkB,SAC7BnB,EAAQ7F,IAAIsG,KAAMR,EAAO9F,KACzB6F,EAAQ5F,IAAIqG,KAAMR,EAAO7F,KACzB4F,EAAQ3F,QAAU4F,EAAO5F,QACzB2F,EAAQ1F,QAAU2F,EAAO3F,QACzB0F,EAAQI,UAAY,EACpBJ,EAAQK,UAAY,EACpBL,EAAQsB,wBAA0B,EAAIrB,EAAO/F,aAE7C7C,KAAKiG,kBAAoBjG,KAAK8D,aAAe7C,KAAKiE,IAAKlF,KAAKgE,qBAAsB4E,EAAOC,YAAgB,GAAKD,EAAOhF,eAErH5D,KAAKkK,oBAAqBvB,GAI3B3I,KAAKyF,uBAAyB,KAC9BzF,KAAK8F,cAAgB,MAItBlG,EAAgBS,UAAU6J,oBAAsB,SAAWvB,GAG1D,GAAKA,EAAQqB,WAAahK,KAAK8F,cAAclC,cAE5C5D,KAAKyF,uBAAwBkD,OAF9B,CASA3I,KAAK+G,SAASoD,WAAYxB,EAAQU,KAAMV,EAAQQ,MAChD,IAAIiB,EAAYpK,KAAK+G,SAASsD,SAEzBD,EAAY,OAEhBpK,KAAK+G,SAAS6C,IAAK,EAAG,EAAG,KACzBQ,EAAYpK,KAAK+G,SAASsD,UAI3B,IAAIC,EAAuD,IAAtC3B,EAAQ3F,QAAU2F,EAAQ1F,SAC3CsH,EAA6D,IAA1C5B,EAAQI,UAAYJ,EAAQK,WAE/CwB,EAAgBxK,KAAKuE,KAAOvE,KAAK8F,cAAcnD,UAAY1B,KAAKiE,IAAK,EAAGyD,EAAQqB,WAEpFhK,KAAKmH,UAAUsD,YAAa9B,EAAQQ,KAAMR,EAAQU,KAAM,IACxDrJ,KAAKoH,aAAaqD,YAAa9B,EAAQgB,QAAShB,EAAQmB,QAAS,IACjE,IAAIY,EAAI1K,KAAKoH,aAGbpH,KAAKqH,OAAOuC,IAAK5J,KAAK2G,SAASgE,QAASD,EAAEE,EAAGF,EAAEG,EAAGH,EAAEI,EAAGN,GACtDxK,KAAK6G,SAAS8D,QAASD,EAAEE,EAAGF,EAAEG,EAAGH,EAAEI,EAAGN,GACtCxK,KAAK8G,SAAS6D,QAASD,EAAEE,EAAGF,EAAEG,EAAGH,EAAEI,EAAGN,IAEvCxK,KAAKqH,OAAOwC,eAAgBlB,EAAQsB,wBAA0BG,GAC9DpK,KAAKqH,OAAO0D,IAAK/K,KAAKmH,WAItB,IAAI6D,EAAchL,KAAK+J,gBACvBiB,EAAY7B,KAAKC,KAAMT,EAAQQ,MAC/B6B,EAAY3B,KAAKD,KAAMpJ,KAAKqH,QAC5B2D,EAAYrB,QAAQP,KAAMT,EAAQgB,SAClCqB,EAAYlB,QAAQV,KAAMpJ,KAAKoH,cAC/B4D,EAAYlI,IAAIsG,KAAMT,EAAQ7F,KAC9BkI,EAAYjI,IAAIqG,KAAMT,EAAQ5F,KAC9BiI,EAAYhI,QAAU2F,EAAQ3F,QAC9BgI,EAAY/H,QAAUqH,EACtBU,EAAYjC,UAAYJ,EAAQI,UAChCiC,EAAYhC,UAAYuB,EACxBS,EAAYf,wBAA0BtB,EAAQsB,wBAA0BjK,KAAK8F,cAAclD,UAC3FoI,EAAYhB,UAAYrB,EAAQqB,UAAY,EAE5C,IAAIiB,EAAcjL,KAAK+J,gBACvBkB,EAAY9B,KAAKC,KAAMpJ,KAAKqH,QAC5B4D,EAAY5B,KAAKD,KAAMT,EAAQU,MAC/B4B,EAAYtB,QAAQP,KAAMpJ,KAAKoH,cAC/B6D,EAAYnB,QAAQV,KAAMT,EAAQmB,SAClC9J,KAAKuH,OAAO2D,aAAcvC,EAAQ7F,IAAK9C,KAAK+G,SAASoE,aACrDF,EAAYnI,IAAIoI,aAAclL,KAAK+G,SAAU/G,KAAKuH,QAAS4D,YAC3DF,EAAYlI,IAAIqG,KAAMT,EAAQ5F,KAC9BkI,EAAYjI,QAAUsH,EACtBW,EAAYhI,QAAU0F,EAAQ1F,QAC9BgI,EAAYlC,UAAYwB,EACxBU,EAAYjC,UAAYL,EAAQK,UAChCiC,EAAYhB,wBAA0BtB,EAAQsB,wBAA0BjK,KAAK8F,cAAclD,UAC3FqI,EAAYjB,UAAYrB,EAAQqB,UAAY,EAE5ChK,KAAKkK,oBAAqBc,GAE1BhL,KAAKkK,oBAAqBe,KAI3BrL,EAAgBS,UAAUyI,YAAc,SAAWH,GAIlD3I,KAAKgH,aAAamD,WAAYxB,EAAQU,KAAMV,EAAQQ,MAAOgC,YAEtDnL,KAAKgG,mBAEThG,KAAK0F,8BAA+BiD,EAAQQ,KAAMR,EAAQ7F,IAAK9C,KAAKgH,aAAc2B,EAAQ3F,QAAS,GAEnGhD,KAAKgG,kBAAmB,GAIzBhG,KAAK0F,8BAA+BiD,EAAQU,KAAMV,EAAQ7F,IAAK9C,KAAKgH,aAAc2B,EAAQ1F,QAAS0F,EAAQK,WAE3GhJ,KAAKoL,oBAINxL,EAAgBS,UAAUuF,iCAAmC,SAAWyF,EAAKC,EAAIvE,EAAUwE,GAI1FvL,KAAKiH,KAAKiE,aAAcI,EAAIvE,GAAW8C,eAAgB0B,EAAS3L,EAAgBoB,UAChFhB,KAAKkH,KAAKkC,KAAMkC,GAAKzB,gBAAkB0B,EAAS3L,EAAgBwB,UAEhE,IAAIsJ,EAAI1K,KAAKsH,KACTjF,EAAIrC,KAAKsG,SAEboE,EAAEtB,KAAMiC,GAAMG,IAAKxL,KAAKiH,MAAO8D,IAAK/K,KAAKkH,MAEzC7E,EAAGrC,KAAKoG,qBAAyBsE,EAAEE,EACnCvI,EAAGrC,KAAKoG,qBAAyBsE,EAAEG,EACnCxI,EAAGrC,KAAKoG,qBAAyBsE,EAAEI,EAEnCJ,EAAEtB,KAAMiC,GAAMN,IAAK/K,KAAKiH,MAAO8D,IAAK/K,KAAKkH,MAEzC7E,EAAGrC,KAAKoG,qBAAyBsE,EAAEE,EACnCvI,EAAGrC,KAAKoG,qBAAyBsE,EAAEG,EACnCxI,EAAGrC,KAAKoG,qBAAyBsE,EAAEI,EAEnCJ,EAAEtB,KAAMkC,GAAKzB,eAAgB0B,GAASR,IAAKM,GAE3ChJ,EAAGrC,KAAKoG,qBAAyBsE,EAAEE,EACnCvI,EAAGrC,KAAKoG,qBAAyBsE,EAAEG,EACnCxI,EAAGrC,KAAKoG,qBAAyBsE,EAAEI,EAEnC9K,KAAKkG,eAAiB,GAIvBtG,EAAgBS,UAAUsF,8BAAgC,SAAW0F,EAAKC,EAAIvE,EAAUwE,EAAQE,GAI/FzL,KAAKiH,KAAKiE,aAAcI,EAAIvE,GAAW8C,eAAgB0B,EAAS3L,EAAgBoB,UAChFhB,KAAKkH,KAAKkC,KAAMkC,GAAKzB,gBAAkB0B,EAAS3L,EAAgBwB,UAEhE,IAAIsJ,EAAI1K,KAAKsH,KACTjF,EAAIrC,KAAKsG,SACToF,EAAK1L,KAAKuG,IAEdmE,EAAEtB,KAAMiC,GAAMG,IAAKxL,KAAKiH,MAAO8D,IAAK/K,KAAKkH,MAEzC7E,EAAGrC,KAAKoG,qBAAyBsE,EAAEE,EACnCvI,EAAGrC,KAAKoG,qBAAyBsE,EAAEG,EACnCxI,EAAGrC,KAAKoG,qBAAyBsE,EAAEI,EAEnCY,EAAI1L,KAAKqG,uBAA2BoF,EACpCC,EAAI1L,KAAKqG,uBAA2B,EAEpCqE,EAAEtB,KAAMiC,GAAMN,IAAK/K,KAAKiH,MAAO8D,IAAK/K,KAAKkH,MAEzC7E,EAAGrC,KAAKoG,qBAAyBsE,EAAEE,EACnCvI,EAAGrC,KAAKoG,qBAAyBsE,EAAEG,EACnCxI,EAAGrC,KAAKoG,qBAAyBsE,EAAEI,EAEnCY,EAAI1L,KAAKqG,uBAA2BoF,EACpCC,EAAI1L,KAAKqG,uBAA2B,GAEpCqE,EAAEtB,KAAMkC,GAAKzB,eAAgB0B,GAASR,IAAKM,GAE3ChJ,EAAGrC,KAAKoG,qBAAyBsE,EAAEE,EACnCvI,EAAGrC,KAAKoG,qBAAyBsE,EAAEG,EACnCxI,EAAGrC,KAAKoG,qBAAyBsE,EAAEI,EAEnCY,EAAI1L,KAAKqG,uBAA2BoF,EACpCC,EAAI1L,KAAKqG,uBAA2B,EAEpCrG,KAAKkG,eAAiB,GAIvBtG,EAAgBS,UAAU+K,iBAAmB,SAAWO,GAEvD,IAAInF,EAAUxG,KAAKwG,QACfmF,EAAS3L,KAAKkG,cAAgB,EAElCM,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,EAC3CnF,EAASxG,KAAKmG,gBAAoBwF,EAAS,GAI5C/L,EAAgBS,UAAU0E,qCAAuC,WAEhE,IAAI2E,EAAU1J,KAAKkE,gBAAgBxC,OAEnC1B,KAAKoE,uBAAyB,SAAWuE,EAASiD,GAIjD,IAAIhD,EAASgD,EAAgB9F,cAEzB+F,EAASD,EAAgB/L,cAAc6D,aACvCoI,EAAYF,EAAgB/L,cAAc8D,gBAE1CoI,EAAWH,EAAgB/L,cAAcwD,WAAiC,GAApBuF,EAAOC,WAAqBa,IAAYmC,EAASrC,YAAUC,KAAMb,EAAOtF,UAAWsF,EAAOlE,mBAAoBiE,EAAQI,WAAcW,IAAYmC,EAEtMG,EAAQJ,EAAgBrH,KAAOwH,EAC/BE,EAAehL,KAAKgB,MAAO+J,EAAQH,GAEnCK,EAAkBxC,KAAcuC,EAAe,GAI/CE,EAAc,EASlB,GAXeH,EAAQH,GAAUC,EAAYD,IAM5CM,EAAcP,EAAgB3F,mBAK1B2C,EAAOC,UAAY+C,EAAgB7H,oBAAsB6H,EAAgB/F,WAAa+F,EAAgB5G,YAAc0E,IAAYyC,EAAc,CAElJ,IAAIC,EAAcR,EAAgB3C,eAE9BoD,EAAaT,EAAgB1H,gBAAgBpC,UACjDsK,EAAYpK,KAAOkK,EACnBN,EAAgB1H,gBAAgBnC,QAASmK,GAEzCE,EAAYvD,UAAYD,EAAOC,UAAY,EAC3CuD,EAAYxI,cAAgB3C,KAAKkE,IAAK,EAAGyD,EAAOhF,cAAgB,GAEhEwI,EAAYzC,QAAQC,IAAKF,IAAWA,IAAWA,KAAYG,eAAgB,KAC3EuC,EAAYtC,QAAQF,IAAKF,IAAWA,IAAWA,KAAYG,eAAgB,KAC3EuC,EAAYtJ,IAAIsG,KAAMR,EAAO9F,KAC7BsJ,EAAYrJ,IAAIqG,KAAMR,EAAO7F,KAC7BqJ,EAAYpJ,QAAU2F,EAAQ3F,QAAU4I,EAAgB/L,cAAcqD,cACtEkJ,EAAYnJ,QAAUhC,KAAKqL,IAAKV,EAAgB/L,cAAcuD,UAAWuF,EAAQ1F,QAAU2I,EAAgB/L,cAAcsD,eAEzHiJ,EAAY9I,UAAYyI,EAAWE,EAAiBJ,EACpDO,EAAY7I,UAAY6I,EAAY9I,UAAYuI,EAASC,EAElDF,EAAgB/L,cAAcwD,WAAiC,GAApBuF,EAAOC,YAExDuD,EAAY9I,UAAYrC,KAAKkE,IAAKiH,EAAY9I,UAAWsF,EAAOtF,WAChE8I,EAAY7I,UAAYtC,KAAKqL,IAAKF,EAAY7I,UAAWqF,EAAOrF,YAIjE6I,EAAYzJ,UAA+B,EAAnBiG,EAAOjG,UAC/ByJ,EAAYxJ,UAAYgG,EAAOhG,UAC/BwJ,EAAYvJ,aAAe+F,EAAO/F,aAClCuJ,EAAY5I,sBAAwBoF,EAAOpF,sBAC3C4I,EAAY3I,oBAAsBmF,EAAOnF,oBAEzCmI,EAAgBvH,iBAAkBsE,EAASC,EAAQwD,EAAaR,GAEhEA,EAAgB1H,gBAAgBnC,QAASsK,KAM3C,IAAIE,EAAU,IAAI9J,UACd+J,EAAc,IAAI/J,UAClBgK,EAAW,IAAIhK,UACfiK,EAAS,IAAIjK,UAEjBzC,KAAKqE,iBAAmB,SAAWsE,EAASgE,EAAcP,EAAaR,GAKtEA,EAAgBgB,uBAAwBjE,EAASgE,EAAcP,EAAa,GAAK,GAAK,KAIvFpM,KAAK6M,mBAAqB,SAAWlE,EAASgE,EAAcP,EAAaU,EAAcC,EAAiBC,GAIvGZ,EAAYjD,KAAKC,KAAMT,EAAQQ,MAE/BoD,EAAQpC,WAAYwC,EAAatD,KAAMsD,EAAaxD,MACpDqD,EAAYpD,KAAMmD,GAAUpB,YAC5BoB,EAAQ1C,eAAgBlB,EAAQI,WAAc,EAAIJ,EAAQI,YAAgBW,IAAYoD,IACtF,IAAIzC,EAASkC,EAAQlC,SACrBoC,EAASvB,aAAcyB,EAAa7J,IAAK0J,GACzC,IAAIS,EAAQ,EAAIhM,KAAKE,GAAKuI,IAC1B+C,EAAS5C,eAAgB5I,KAAKC,IAAK+L,IACnCP,EAAOtD,KAAMuD,EAAa7J,KAAM+G,eAAgB5I,KAAKI,IAAK4L,IAE1Db,EAAY/C,KAAKD,KAAMqD,GAAW1B,IAAK2B,GAAS7C,eAAgBQ,EAAS0C,GAAoBC,EAAqBtD,KAAc,EAAIsD,KAAyBjC,IAAKwB,GAAUxB,IAAK4B,EAAaxD,OAI/LnJ,KAAK4M,uBAAyB,SAAWjE,EAASgE,EAAcP,EAAaU,EAAcC,EAAiBC,GAI3GZ,EAAYjD,KAAKC,KAAMT,EAAQQ,MAE/BoD,EAAQpC,WAAYwC,EAAatD,KAAMsD,EAAaxD,MACpDqD,EAAYpD,KAAMmD,GAAUpB,YAC5BoB,EAAQ1C,eAAgBlB,EAAQI,WAAc,EAAIJ,EAAQI,aAAkB,EAAIW,IAAY,GAAMoD,IAClG,IAAIzC,EAASkC,EAAQlC,SACrBoC,EAASvB,aAAcyB,EAAa7J,IAAK0J,GACzC,IAAIS,EAAQ,EAAIhM,KAAKE,GAAKuI,IAC1B+C,EAAS5C,eAAgB5I,KAAKC,IAAK+L,IACnCP,EAAOtD,KAAMuD,EAAa7J,KAAM+G,eAAgB5I,KAAKI,IAAK4L,IAE1Db,EAAY/C,KAAKD,KAAMqD,GAAW1B,IAAK2B,GAAS7C,eAAgBQ,EAAS0C,GAAoBC,EAAqBtD,KAAc,EAAIsD,KAAyBjC,IAAKwB,GAAUxB,IAAK4B,EAAaxD,QAMhMvJ,EAAgBS,UAAUgF,aAAe,WAExC,OAECrD,KAAM,EACN4B,cAAe,EACfiF,UAAW,EACXM,KAAM,IAAI1G,UACV4G,KAAM,IAAI5G,UACVkH,QAAS,IAAIlH,UACbqH,QAAS,IAAIrH,UACbK,IAAK,IAAIL,UACTM,IAAK,IAAIN,UACTO,QAAS,EACTC,QAAS,EACTK,UAAW,EACXC,UAAW,EACXZ,UAAW,EACXC,UAAW,EACXC,aAAc,EACdW,sBAAuB,EACvBC,oBAAqB,EACrBiB,mBAAoB,EACpBE,mBAAoB,IAMtBhF,EAAgBS,UAAUkF,cAAgB,WAEzC,OACCyE,UAAW,EACXb,KAAM,IAAI1G,UACV4G,KAAM,IAAI5G,UACVkH,QAAS,IAAIlH,UACbqH,QAAS,IAAIrH,UACbK,IAAK,IAAIL,UACTM,IAAK,IAAIN,UACTO,QAAS,EACTC,QAAS,EACT8F,UAAW,EACXC,UAAW,EACXiB,wBAAyB,IAK3BrK,EAAgBS,UAAU0J,cAAgB,WAEzC,OAAO/J,KAAKsF,YAAatF,KAAK+F,wBAI/BnG,EAAgBS,UAAU+I,KAAO,SAAWjH,GAM3C,OAJArC,iBAAeO,UAAU+I,KAAKrJ,KAAMC,KAAMmC,GAE1CnC,KAAKE,KAAMN,EAAgBO,kBAAoBgC,EAAOtC,gBAE/CG,MAIRJ,EAAgBS,UAAUiC,MAAQ,WAEjC,OAAO,IAAItC,KAAKQ,YAAaZ,EAAgBO,kBAAoBH,KAAKH,iBC/7BvE,IAAIqN,EAAiB,SAAWC,GAE/BC,WAASrN,KAAMC,MAIfmN,EAAcA,MACdnN,KAAKmN,YAAcA,EAEnBA,EAAYE,UAA4B7K,IAArB2K,EAAYE,KAAqBF,EAAYE,KAAO,IACvEF,EAAYG,eAAsC9K,IAA1B2K,EAAYG,UAA0BH,EAAYG,UAAY,GACtFH,EAAYI,eAAsC/K,IAA1B2K,EAAYI,UAA0BJ,EAAYI,UAAY,IACtFJ,EAAYK,cAAoChL,IAAzB2K,EAAYK,SAAyBL,EAAYK,SAAW,IAEnFL,EAAYM,mBAA8CjL,IAA9B2K,EAAYM,cAA8BN,EAAYM,cAAgB,EAElGN,EAAYO,wBAAwDlL,IAAnC2K,EAAYO,mBAAmCP,EAAYO,mBAAqB,EACjHP,EAAYQ,wBAAwDnL,IAAnC2K,EAAYQ,mBAAmCR,EAAYQ,mBAAqB,EAEjHR,EAAYS,0BAA4DpL,IAArC2K,EAAYS,qBAAqCT,EAAYS,qBAAuB,EACvHT,EAAYU,0BAA4DrL,IAArC2K,EAAYU,qBAAqCV,EAAYU,qBAAuB,IAEvH7N,KAAK8N,oBAAsBlO,EAAgBO,eAAgBgN,EAAYW,oBAAqBX,EAAYW,qBAExG9N,KAAK8N,oBAAoBzK,WAAY,EAErCrD,KAAK+N,uBAAsDvL,IAAlC2K,EAAYY,kBAAkCZ,EAAYY,kBAAoB,IAAIC,qBAAqBC,MAAO,gBAEpGzL,IAA9B2K,EAAYe,cAEhBlO,KAAKkO,cAAgBf,EAAYe,cAIjClO,KAAKkO,cAAgB,SAAW/L,EAAQD,GAEvCA,EAAK0H,KAAO3I,KAAKS,SAAW,IAAQyL,EAAYE,KAAM,GAAKpM,KAAKS,SAAW,IAAQyL,EAAYE,MAE/F,IAAIc,EAAS3E,YAAUC,KAAM0D,EAAYG,UAAWH,EAAYI,UAAWtM,KAAKS,UAEhFS,EAAOyH,IAAKuD,EAAYK,UAAa,EAAIvM,KAAKS,SAAW,GAAK,EAAGyL,EAAYK,UAAa,EAAIvM,KAAKS,SAAW,IAAMmI,eAAgBsE,GAASpD,IAAK7I,IAMpJlC,KAAKoO,gBAAkBjB,EAAYiB,gBAInCpO,KAAKqO,QAAS,EACdrO,KAAKsO,kBAAoB,EACzBtO,KAAKuO,oBACLvO,KAAKwO,wBAEL,IAAM,IAAIhN,EAAI,EAAGA,EAAIxB,KAAKmN,YAAYM,cAAejM,IAAO,CAE3D,IAAIiN,EAAY,IAAI7O,EAAiBA,EAAgBO,kBAAoBH,KAAK8N,sBAC1EY,EAAO,IAAIC,OAAMF,EAAWzO,KAAK+N,mBACrC/N,KAAKwO,qBAAqB/M,KAAMiN,MAMlCxB,EAAe7M,UAAYC,OAAOC,OAAQ6M,WAAS/M,YAE1BG,YAAc0M,EAEvCA,EAAe7M,UAAUuO,kBAAmB,EAE5C1B,EAAe7M,UAAUiE,OAAS,SAAWC,GAS5C,GAPOvE,KAAKqO,SAEXrO,KAAKsO,kBAAoBtO,KAAK6O,qBAAsBtK,GAAStD,KAAKS,SAClE1B,KAAKqO,QAAS,GAIV9J,GAAQvE,KAAKsO,kBAAoB,CAIrC,IAAIQ,EAAgB9O,KAAKwO,qBAAqBO,MAE9C,GAAKD,EAAgB,CAEpB,IAAIE,EAAmBpP,EAAgBO,eAAgB2O,EAAcG,SAASpP,cAAeG,KAAK8N,qBAElGkB,EAAiB1L,UAAYiB,EAC7ByK,EAAiBzL,UAAYgB,EAAOiF,YAAUC,KAAMzJ,KAAKmN,YAAYS,qBAAsB5N,KAAKmN,YAAYU,qBAAsB5M,KAAKS,UAEvI1B,KAAKkO,cAAec,EAAiBzM,aAAcyM,EAAiBtM,YAEpEsM,EAAiB7K,UAAYlD,KAAKS,SAElC1B,KAAK+K,IAAK+D,GAEV9O,KAAKuO,iBAAiB9M,KAAMqN,GAK7B9O,KAAKsO,kBAAoBtO,KAAK6O,qBAAsBtK,GAMrD,IAFA,IAAI/C,EAAI,EAAG0N,EAAKlP,KAAKuO,iBAAiBlE,OAE9B7I,EAAI0N,GAAK,CAEhB,IAAIR,EAAO1O,KAAKuO,iBAAkB/M,GAE9BiN,EAAYC,EAAKO,SAEjBE,EAAYV,EAAU9J,MAE1B8J,EAAUnK,OAAQC,GAEb4K,IAAcvP,EAAgBgB,iBAAmB6N,EAAU9J,MAAQwK,GAElEnP,KAAKoO,iBAETpO,KAAKoO,gBAAiBK,GAMnBA,EAAU9J,QAAU/E,EAAgBmB,kBAIxCf,KAAKuO,iBAAiBa,OAAQpP,KAAKuO,iBAAiBc,QAASX,GAAQ,GAErE1O,KAAKwO,qBAAqB/M,KAAMiN,GAEhC1O,KAAKsP,OAAQZ,GAEbQ,KAIA1N,MAQH0L,EAAe7M,UAAUwO,qBAAuB,SAAWU,GAE1D,OAAOA,EAAc/F,YAAUC,KAAMzJ,KAAKmN,YAAYO,mBAAoB1N,KAAKmN,YAAYQ,mBAAoB1M,KAAKS,WAAe1B,KAAKmN,YAAYM,cAAgB,IAIrKP,EAAe7M,UAAU+I,KAAO,SAAWjH,GAuB1C,OArBAiL,WAAS/M,UAAU+I,KAAKrJ,KAAMC,KAAMmC,GAEpCnC,KAAKmN,YAAYE,KAAOlL,EAAOgL,YAAYE,KAC3CrN,KAAKmN,YAAYG,UAAYnL,EAAOgL,YAAYG,UAChDtN,KAAKmN,YAAYI,UAAYpL,EAAOgL,YAAYI,UAChDvN,KAAKmN,YAAYK,SAAWrL,EAAOgL,YAAYK,SAE/CxN,KAAKmN,YAAYM,cAAgBtL,EAAOgL,YAAYM,cAEpDzN,KAAKmN,YAAYO,mBAAqBvL,EAAOgL,YAAYO,mBACzD1N,KAAKmN,YAAYQ,mBAAqBxL,EAAOgL,YAAYQ,mBAEzD3N,KAAKmN,YAAYS,qBAAuBzL,EAAOgL,YAAYS,qBAC3D5N,KAAKmN,YAAYU,qBAAuB1L,EAAOgL,YAAYU,qBAE3D7N,KAAK8N,oBAAsBlO,EAAgBO,kBAAoBgC,EAAO2L,qBAEtE9N,KAAK+N,kBAAoB5L,EAAOgL,YAAYY,kBAE5C/N,KAAKoO,gBAAkBjM,EAAOiM,gBAEvBpO,MAIRJ,EAAgBS,UAAUiC,MAAQ,WAEjC,OAAO,IAAItC,KAAKQ,YAAaR,KAAKmN,aAAc/D,KAAMpJ,+CClOvDwP,GACAC,KADA,WAEA,OACAC,UAAA,KACAC,MAAA,KACAC,MAAA,KACAC,SAAA,KACAC,SAAA,KACAC,IAAA,KACAC,kBAAA,EACAT,YAAA,EACAU,cAAA,KACAC,MAAA,KACAC,UAAA,KACAC,MAAA,OAGAC,QAjBA,WAkBArQ,KAAAiQ,eACAjQ,KAAAsQ,iBACAtQ,KAAAuQ,sBACAvQ,KAAAwQ,kBAEAxQ,KAAAkQ,MAAA,IAAAlQ,KAAAyQ,OAAAC,MACA1Q,KAAAmQ,UAAA,IAAAnQ,KAAAyQ,OAAAE,UACA3Q,KAAAoQ,MAAA,IAAApQ,KAAAyQ,OAAAG,QACA5Q,KAAAE,OACAF,KAAA6Q,WAEAC,cA7BA,WA8BA9Q,KAAA+P,IAAAgB,WAEAC,SACA9Q,KADA,WAEAF,KAAA0P,UAAAuB,SAAAC,eAAA,aACAlR,KAAA6P,SAAA,IAAA7P,KAAAyQ,OAAAU,cACAnR,KAAA6P,SAAAuB,cAAAC,OAAAC,kBACAtR,KAAA6P,SAAA0B,QAAAvR,KAAAwR,iBAAAH,OAAAI,aACAzR,KAAA6P,SAAA6B,eAAA1R,KAAAyQ,OAAAkB,aACA3R,KAAA0P,UAAAkC,YAAA5R,KAAA6P,SAAAgC,YACA7R,KAAA8P,SAAA,IAAAgC,EAAA,EAAA9R,KAAA6P,UACA7P,KAAA2P,MAAA,IAAA3P,KAAA+R,OACA/R,KAAA2P,MAAAqC,IAAAC,MAAAC,KAAA,QACAlS,KAAA0P,UAAAkC,YAAA5R,KAAA2P,MAAAqC,KACAX,OAAAc,iBAAA,SAAAnS,KAAAoS,gBAAA,GACApS,KAAAqS,eAEAA,YAfA,WAgBArS,KAAA4P,MAAA5P,KAAAiQ,cAAAjQ,KAAAgQ,qBACAhQ,KAAAsS,aAEAF,eAnBA,WAoBApS,KAAA4P,MAAA2C,SAAAC,OAAAC,QAAApB,OAAAqB,WAAA,KAAArB,OAAAI,YACAzR,KAAA4P,MAAA2C,SAAAC,OAAAG,yBACA3S,KAAA6P,SAAA0B,QAAAF,OAAAqB,WAAA,IAAArB,OAAAI,aACAzR,KAAA8P,SAAAyB,QAAAF,OAAAqB,WAAA,IAAArB,OAAAI,cAEAa,UAzBA,WAyBA,IAAAM,EAAA5S,KACAA,KAAA+P,KACA/P,KAAA+P,IAAAgB,UAEA/Q,KAAA+P,IAAA,IAAA8C,EAAA,GAAAC,MAAA,MACA,IAAAC,EAAA/S,KAAA+P,IAAAiD,UAAA,SACAhT,KAAA4P,MAAA2C,SAAAU,WAAAjT,KAAAgQ,kBACA+C,EAAAhI,IAAA/K,KAAA4P,MAAA2C,SAAA,cAAAW,iBAAA,EAAAC,cAAA,EAAAC,MAAA,IAAAC,KAAA,SAAAC,SAAA,SAAAzR,GACA+Q,EAAA5C,kBAAAnO,EACA+Q,EAAAP,gBAEArS,KAAA4P,MAAA2C,SAAAgB,SAAA,EACAR,EAAAhI,IAAA/K,KAAA4P,MAAA2C,SAAA,WAAAvS,KAAA4P,MAAA2C,SAAAiB,sBAAA,OAAAH,KAAA,aACAN,EAAAU,OACA,IAAAC,EAAA1T,KAAA+P,IAAAiD,UAAA,YACAU,EAAA3I,IAAA/K,KAAA4P,MAAA2C,SAAA,kBAAAc,KAAA,gBACArT,KAAA4P,MAAA2C,SAAAoB,mBACA,IAAA3T,KAAA4P,MAAA2C,SAAAqB,eAAAC,EACA,IAAA7T,KAAA4P,MAAA2C,SAAAqB,eAAAE,EACA,IAAA9T,KAAA4P,MAAA2C,SAAAqB,eAAAG,GAEAL,EAAAM,SAAAhU,KAAA4P,MAAA2C,SAAA,qBAAAc,KAAA,SAAAC,SAAA,SAAAzR,GACA+Q,EAAAhD,MAAA2C,SAAAxE,kBAAAE,MAAAgG,OAAApS,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAgI,eAAA,SAEA7J,KAAA4P,MAAA2C,SAAA2B,iBACA,IAAAlU,KAAA4P,MAAA2C,SAAA4B,aAAAN,EACA,IAAA7T,KAAA4P,MAAA2C,SAAA4B,aAAAL,EACA,IAAA9T,KAAA4P,MAAA2C,SAAA4B,aAAAJ,GAEAL,EAAAM,SAAAhU,KAAA4P,MAAA2C,SAAA,mBAAAc,KAAA,cAAAC,SAAA,SAAAzR,GACA+Q,EAAAhD,MAAA2C,SAAA4B,aAAAF,OAAApS,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAgI,eAAA,SAEA6J,EAAAD,OACA,IAAAW,EAAApU,KAAA+P,IAAAiD,UAAA,kBAUA,GATAoB,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,oBAAAhB,KAAA,gBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,iBAAAhB,KAAA,aACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,iBAAAhB,KAAA,kBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,iBAAAhB,KAAA,gBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,qBAAAhB,KAAA,yBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,qBAAAhB,KAAA,uBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,iBAAAhB,KAAA,kBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,sBAAAhB,KAAA,qBACAe,EAAArJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,uBAAAhB,KAAA,qBACArT,KAAA4P,MAAA2C,SAAA+B,YAAA,CAEA,IAAAC,EAAAvU,KAAA+P,IAAAiD,UAAA,yBACAuB,EAAAxJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,qBAAAG,KAAA,GAAAnB,KAAA,gBAAAoB,eAAA,WACA7B,EAAAhD,MAAA2C,SAAA+B,gBAEAC,EAAAxJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,0BAAAG,KAAA,GAAAnB,KAAA,aAAAoB,eAAA,WACA7B,EAAAhD,MAAA2C,SAAA+B,gBAEAC,EAAAxJ,IAAA/K,KAAA4P,MAAA2C,SAAA8B,UAAA,4BAAAhB,KAAA,oBAAAoB,eAAA,WACA7B,EAAAhD,MAAA2C,SAAA+B,gBAEAC,EAAAd,OAEAW,EAAAX,QAEA5C,QApFA,WAqFA6D,sBAAA1U,KAAA6Q,SACA7Q,KAAA2U,SACA3U,KAAA2P,MAAArL,UAEAqQ,OAzFA,WA0FA3U,KAAAuP,aAAAvP,KAAA4P,MAAA2C,SAAAgB,SAAAvT,KAAAkQ,MAAA0E,WACA5U,KAAAuP,YAAA,IACAvP,KAAAuP,YAAA,GAEAvP,KAAA4P,MAAA2C,SAAAoC,OAAA3U,KAAAuP,cAEAsF,cAhGA,SAgGAjF,EAAAkF,EAAAC,GACA,IAAAC,EAAA,IAAAC,EAAA,MAAAjV,KAAAyQ,OAAAG,QAAA5Q,KAAAwR,iBAAAH,OAAAI,aAAA7B,IAAA2C,SAAAC,OAAAsC,GAQA,OAPAE,EAAAE,aAAA,IACAF,EAAAG,SAAA,GACAH,EAAAI,cAAA,IACAJ,EAAAK,iBAAAN,EACAC,EAAAM,gBAAA1L,IAAA,GACA5J,KAAA8P,SAAAyF,QAAAP,GACApF,EAAA2C,SAAAiD,gBAAA,EACAR,GAEA1E,iBA3GA,WA4GA,IAAAV,EAAA,IAAA5P,KAAAyQ,OAAAgF,MACA7F,EAAA8F,WAAA,IAAA1V,KAAAyQ,OAAAkF,MAAA,QACA/F,EAAA2C,SAAAiB,sBAAA,EACA5D,EAAA2C,SAAAC,OAAA,IAAAxS,KAAAyQ,OAAAmF,kBAAA,GAAA5V,KAAAwR,iBAAAH,OAAAI,YAAA,SAEA7B,EAAA2C,SAAAqB,eAAA,IAAA5T,KAAAyQ,OAAAkF,MAAA,UACA/F,EAAA2C,SAAA4B,aAAA,IAAAnU,KAAAyQ,OAAAkF,MAAA,OACA,IAAAE,EAAA,IAAA7V,KAAAyQ,OAAAqF,WAAA,eACAlG,EAAA7E,IAAA8K,GAEA,IAAAE,EAAA,IAAA/V,KAAAyQ,OAAA9B,KAAA,IAAA3O,KAAAyQ,OAAAuF,oBAAA,aAAAhW,KAAAyQ,OAAAwF,mBAAAhI,MAAA,SAAAiI,UAAA,KACAH,EAAAI,SAAAvL,EAAA,IAAA3J,KAAAE,GACAyO,EAAA7E,IAAAgL,GAKAF,EAAAO,SAAAxM,IAAA,SACAiM,EAAA5H,MAAA2B,EAAA2C,SAAA4B,aACAvE,EAAA2C,SAAAC,OAAA4D,SAAAxM,IAAA,cACA,IAAAyM,EAAA,IAAArW,KAAAyQ,OAAA9B,KAAA,IAAA3O,KAAAyQ,OAAA6F,mBALA,QAKA,aAAAtW,KAAAyQ,OAAAwF,mBAAAhI,MAAA,SAAAsI,SAAA,WACAF,EAAAF,SAAAvL,EAAA3J,KAAAE,GACAkV,EAAAD,SAAAvL,EAAA2L,KACA5G,EAAA7E,IAAAsL,GACA,IAwBAzK,EACA6K,EAzBAC,EAAA,IAAA1W,KAAAyQ,OAAA9B,KAAA0H,EAAApH,SAAA3M,QAAA,IAAAtC,KAAAyQ,OAAAwF,mBAAAhI,MAAA,SAAAsI,SAAA,WACAG,EAAAN,SAAAvL,EATA8L,IAUA/G,EAAA7E,IAAA2L,GAEA9G,EAAA2C,SAAAxE,kBAAA,IAAA/N,KAAAyQ,OAAAzC,mBAAAC,MAAA2B,EAAA2C,SAAAqB,iBACAhE,EAAA2C,SAAA8B,WACA9R,aAAA,IAAAvC,KAAAyQ,OAAAhO,QACAC,WAAA,IAAA1C,KAAAyQ,OAAAhO,QACAO,QAAA,EACAC,QAAA,EACAG,UAAA,IACAQ,cAAA,EACAP,WAAA,EACAV,UAAA,GACAa,sBAAA,IACAC,oBAAA,IACAC,aAAA,IACAC,gBAAA,GACAI,mBAAA,EACAD,aAAA,EACAE,qBAAA,GACApB,UAAA,IACAC,aAAA,IAIA,IAAA+T,KACAC,EAAA7W,KACA4P,EAAA2C,SAAA+B,YAAA,WACAmC,GACA7G,EAAAN,OAAAmH,GAEA7K,EAAA,IAAAkL,EAAAlH,EAAA2C,SAAA8B,WACAoC,EAAA,IAAAI,EAAApG,OAAA9B,KAAA/C,EAAAgE,EAAA2C,SAAAxE,mBACA6I,EAAAvM,OAAA,EACAuM,EAAAnV,KAAAgV,GACA7G,EAAA7E,IAAA0L,IAEA7G,EAAA2C,SAAA+B,cAEAtU,KAAA8P,SAAAiH,UACA/W,KAAA8P,SAAAyF,QAAA,IAAAyB,EAAA,EAAApH,IAAA2C,SAAAC,SACAxS,KAAA6U,cAAAjF,EAAAgH,EAAAhH,EAAA2C,SAAA4B,cAEA,IAAA8C,EAAA,IAAAC,EAAA,EAAAtH,EAAA2C,SAAAC,OAAAxS,KAAA6P,SAAAgC,YAsBA,OArBAoF,EAAAE,OAAAtM,EAAA,IACAoM,EAAAG,eAAA,EACAH,EAAAI,cAAA,IACAzH,EAAA2C,SAAAoC,OAAA,SAAApQ,GAEA8R,EAAAD,SAAAxM,IA5DA,IA4DA3I,KAAAI,IAAA,GAAAkD,GAAA,GAAAiS,KA5DA,IA4DAvV,KAAAC,IAAA,GAAAqD,GAAA,IACAmS,EAAAN,SAAAxM,IA7DA,IA6DA3I,KAAAI,IAAA,GAAAkD,GA3DAoS,IA2DA,GACA/K,EAAA/L,cAAA0C,aAAA6G,KAAAiN,EAAAD,UACAxK,EAAA/L,cAAA0C,aAAAsI,GA7DA8L,IA8DA/K,EAAA/L,cAAA6C,WAAA0G,KAAAsN,EAAAN,UACAxK,EAAA/L,cAAA6C,WAAAmI,GA/DA8L,IAgEA/K,EAAAtH,OAAAC,GACA0S,EAAA3S,SAEAuR,EAAAO,SAAA3L,YAAAmB,EAAA/L,cAAA0C,aAAAqJ,EAAA/L,cAAA6C,WAAA,IACAkN,EAAA2C,SAAAiD,eACAqB,EAAA/G,SAAA6E,SAEAkC,EAAAhH,SAAA8E,OAAA/E,IAAA2C,SAAAC,SAGA5C,GAEAW,sBAxMA,WAwMA,IAAA+G,EAAAtX,KACA4P,EAAA,IAAA5P,KAAAyQ,OAAAgF,MACA7F,EAAA2C,SAAAiB,sBAAA,EACA5D,EAAA2C,SAAAC,OAAA,IAAAxS,KAAAyQ,OAAAmF,kBAAA,GAAA5V,KAAAwR,iBAAAH,OAAAI,YAAA,SACA,IAAA8F,EAAA,IAAAvX,KAAAyQ,OAAAgF,MACA8B,EAAA7B,WAAA,IAAA1V,KAAAyQ,OAAAkF,MAAA,SAEA,IAAA6B,EAAA,IAAAxX,KAAAyQ,OAAAgH,aAAA,SACAF,EAAAxM,IAAAyM,GACA5H,EAAA7E,IAAAyM,GACA,IAAAE,EAAA,IAAA1X,KAAAyQ,OAAAkH,iBAAA,aACAD,EAAAtB,SAAAxM,IAAA,OACA2N,EAAAxM,IAAA2M,GACA9H,EAAA7E,IAAA2M,GACA,IAAAE,EAAA,IAAA5X,KAAAyQ,OAAAkH,iBAAA,cACAC,EAAAxB,SAAAxM,KAAA,SACA2N,EAAAxM,IAAA6M,GACAhI,EAAA7E,IAAA6M,GAEAhI,EAAA2C,SAAAqB,eAAA,IAAA5T,KAAAyQ,OAAAkF,MAAA,UACA/F,EAAA2C,SAAA4B,aAAA,IAAAnU,KAAAyQ,OAAAkF,MAAA,UACA/F,EAAA2C,SAAAxE,kBAAA,IAAA/N,KAAAyQ,OAAAzC,mBAAAC,MAAA2B,EAAA2C,SAAAqB,eAAA3M,KAAAjH,KAAAyQ,OAAAoH,aACA,IAAAhE,EAAA,gCACAiE,GAAAjE,EAAA,WAAAA,EAAA,WACAA,EAAA,WAAAA,EAAA,WACAA,EAAA,WAAAA,EAAA,YACAkE,GAAA,IAAA/X,KAAAyQ,OAAAuH,mBAAAC,KAAAH,GACAC,EAAAG,QAAAlY,KAAAyQ,OAAA0H,sBACAJ,EAAAK,SAAApY,KAAAyQ,OAAAkB,aACA,IAAA0G,EAAA,IAAArY,KAAAyQ,OAAA6H,sBACAC,aAAA,EACAC,aAAA,IACAC,YAAA,EACAxK,MAAA,QACAyK,UAAA,EACA9V,UAAA,EACA+V,OAAAZ,IAIAnI,EAAA2C,SAAAC,OAAA4D,SAAAxM,IAAA,cACA,IAAAgP,EAAA,IAAA5Y,KAAAyQ,OAAA9B,KAAA,IAAA3O,KAAAyQ,OAAAoI,qBAFA,IAEA,OAAAR,GACAO,EAAAxC,SAAAxM,IAAA,EAJA,IAIA,GACA2N,EAAAxM,IAAA6N,GACA,IAAAE,EAAA,IAAA9Y,KAAAyQ,OAAAsI,OAAAH,EAAAxC,SALA,KAMA4C,EAAA,IAAAhZ,KAAAyQ,OAAA9B,KAAA,IAAA3O,KAAAyQ,OAAAoI,qBAAAI,GAAA,OAAArJ,EAAA2C,SAAAxE,mBACAiL,EAAA5C,SAAAhN,KAAAwP,EAAAxC,UACA4C,EAAAE,MAAArO,EAAA,GACA+E,EAAA7E,IAAAiO,GACA,IAAAG,EAAA,IAAAnZ,KAAAyQ,OAAA9B,KACA,IAAA3O,KAAAyQ,OAAA2I,uBAAAH,MAZA,IAYA,QACA,IAAAjZ,KAAAyQ,OAAA4I,qBAAApL,MAAA,UAEAkL,EAAA/C,SAAAvL,EAAAyO,IACA1J,EAAA7E,IAAAoO,GACA,IAAAI,EAAA,IAAAvZ,KAAAyQ,OAAA9B,KAAA,IAAA3O,KAAAyQ,OAAA+I,kBAAAF,YAAAH,EAAAM,UACAF,EAAAnD,SAAAvL,EAAAyO,IACA1J,EAAA7E,IAAAwO,GACA,IAiCA3N,EACA6K,EAlCAiD,EAAA,IAAA1Z,KAAAyQ,OAAAhO,QACAkX,EAAA,EACAC,EAAA,IAAA5Z,KAAAyQ,OAAAhO,QACAoX,EAAA,IAAA7Z,KAAAyQ,OAAAhO,QACAmN,EAAA2C,SAAA8B,WACA9R,aAAAqW,EAAAxC,SACA1T,WAAA,IAAA1C,KAAAyQ,OAAAhO,QAzBA,IAyBA,KAAAsI,IAAA6N,EAAAxC,UACApT,QAAA,EACAC,QAAA,EACAC,cAAA,IACAE,UAAA,IACAQ,cAAA,EACAP,WAAA,EACAV,UAAA,GACAa,sBAAA,IACAC,oBAAA,IACAC,aAAA,GACAI,aAAA,EACAE,qBAAA,GACApB,UAAA,IACAC,aAAA,GACAwB,iBAAA,SAAAsE,EAAAgE,EAAAP,EAAAR,GACAA,EAAAiB,mBAAAlE,EAAAgE,EAAAP,EAAA,UAEAwN,EAAAzP,WAAAiC,EAAA/C,KAAAuC,EAAA/L,cAAA0C,cACAsX,EAAAjQ,IAAA,OACAgC,EAAA1H,gBAAAxC,SAAA,IACAmY,EAAAzQ,KAAAsQ,GAAA7P,eAAA,OAAA8P,GAEAC,EAAA7O,IAAA8O,GAAAC,UAAAH,GACAvN,EAAA/C,KAAA0Q,WAAAH,EAAAhO,EAAA/L,cAAA0C,gBAKA,IAAAqU,KACAC,EAAA7W,KACA4P,EAAA2C,SAAA+B,YAAA,WACAmC,GACA7G,EAAAN,OAAAmH,GAEA7K,EAAA,IAAAkL,EAAAlH,EAAA2C,SAAA8B,WACAoC,EAAA,IAAAI,EAAApG,OAAA9B,KAAA/C,EAAAgE,EAAA2C,SAAAxE,mBACA6I,EAAAvM,OAAA,EACAuM,EAAAnV,KAAAgV,GACAG,EAAAnV,KAAAuX,GACApJ,EAAA7E,IAAA0L,IAEA7G,EAAA2C,SAAA+B,cAEAtU,KAAA8P,SAAAiH,UACA/W,KAAA8P,SAAAyF,QAAA,IAAAyB,EAAA,EAAAO,EAAA3H,EAAA2C,SAAAC,SACA,IAAAwH,EAAA,IAAAhD,EAAA,EAAApH,IAAA2C,SAAAC,QACAwH,EAAAC,OAAA,EACAja,KAAA8P,SAAAyF,QAAAyE,GACA,IAAAhF,EAAAhV,KAAA6U,cAAAjF,EAAAgH,EAAAhH,EAAA2C,SAAA4B,cACAvE,EAAA2C,SAAAoC,OAAA,SAAApQ,GACAmV,EAAAvP,WAAAyB,EAAA/L,cAAA6C,WAAAkJ,EAAA/L,cAAA0C,cACAoX,EAAAD,EAAArP,SACAqP,EAAAvO,YACAS,EAAAtH,OAAAC,GACA0S,EAAA3S,SACA0Q,EAAAkF,QAAAtK,EAAA2C,SAAAiD,eACA8B,EAAAxH,SAAA6E,UAGA,IAAAsC,EAAA,IAAAC,EAAA,EAAAtH,EAAA2C,SAAAC,OAAAxS,KAAA6P,SAAAgC,YACAoF,EAAAE,OAAA/N,KAAAwP,EAAAxC,UACAa,EAAAG,eAAA,EACAH,EAAAI,cAAA,IAEA3H,UAAAuC,MAAAkI,YAAA,OACAzK,UAAAyC,iBAAA,cAEA,SAAAiI,GACA,QAAAA,EAAAC,UAAA,OACAxD,EAAAzG,MAAAxF,EAAAwP,EAAAE,QAAAta,KAAAwR,iBAAA,IACAqF,EAAAzG,MAAAvF,GAAAuP,EAAAG,QAAAlJ,OAAAI,YAAA,IAKAoF,EAAA1G,UAAAqK,cAAA3D,EAAAzG,MAAAR,EAAA2C,SAAAC,QAEA,OADAqE,EAAA1G,UAAAsK,IAAAC,gBAAA5B,EAAA6B,IAEA/O,EAAA/L,cAAA6C,WAAA0G,KAAAuR,KAbA,GACA9D,EAAA7W,KAOA,IAAA2a,EAAA,IAAA3a,KAAAyQ,OAAAhO,QAQA,OAAAmN,GAEAY,iBA5VA,WA6VA,IAAAZ,EAAA,IAAA5P,KAAAyQ,OAAAgF,MACA7F,EAAA8F,WAAA,IAAA1V,KAAAyQ,OAAAkF,MAAA,QACA/F,EAAA2C,SAAAiB,sBAAA,EACA5D,EAAA2C,SAAAC,OAAA,IAAAxS,KAAAyQ,OAAAmF,kBAAA,GAAA5V,KAAAwR,iBAAAH,OAAAI,YAAA,QAEA7B,EAAA7E,IAAA,IAAA/K,KAAAyQ,OAAAgH,aAAA,UACA,IAAAC,EAAA,IAAA1X,KAAAyQ,OAAAkH,iBAAA,aACAD,EAAAtB,SAAAxM,IAAA,OACAgG,EAAA7E,IAAA2M,GACA,IAAA7B,EAAA,IAAA7V,KAAAyQ,OAAAqF,WAAA,OACAD,EAAAO,SAAAxM,IAAA,SACAgG,EAAA7E,IAAA8K,GAGAjG,EAAA2C,SAAAC,OAAA4D,SAAAxM,IAAA,UAAAC,eAAA+Q,KACA,IAAA7E,EAAA,IAAA/V,KAAAyQ,OAAA9B,KAAA,IAAA3O,KAAAyQ,OAAAuF,oBAFA,SAEA,IAAAhW,KAAAyQ,OAAA4I,qBAAApL,MAAA,UACA8H,EAAAI,SAAAvL,EAAA,IAAA3J,KAAAE,GACAyO,EAAA7E,IAAAgL,GAEAnG,EAAA2C,SAAAqB,eAAA,IAAA5T,KAAAyQ,OAAAkF,MAAA,UACA/F,EAAA2C,SAAA4B,aAAA,IAAAnU,KAAAyQ,OAAAkF,MAAA,OACA/F,EAAA2C,SAAAxE,kBAAA,IAAA/N,KAAAyQ,OAAAzC,mBAAAC,MAAA2B,EAAA2C,SAAAqB,iBACA,IAAA8F,EAAA,IAAA1Z,KAAAyQ,OAAAhO,QAAA,QACAkX,EAAA,EACAC,EAAA,IAAA5Z,KAAAyQ,OAAAhO,QACAoX,EAAA,IAAA7Z,KAAAyQ,OAAAhO,QACAmN,EAAA2C,SAAA8B,WACArR,QAAA,EACAC,QAAA,GACAG,UAAA,GACAQ,cAAA,EACAjB,UAAA,IACAa,sBAAA,GACAC,oBAAA,GACAC,aAAA,EACAC,gBAAA,GACAI,mBAAA,EACAD,aAAA,EACAE,qBAAA,GACApB,UAAA,IACAC,aAAA,IACAwB,iBAAA,SAAAsE,EAAAgE,EAAAP,EAAAR,GACAA,EAAAiB,mBAAAlE,EAAAgE,EAAAP,EAAA,UAEAuN,EAAA/N,EAAA/L,cAAA0C,aAAAsI,EACA+O,EAAAzP,WAAAiC,EAAA/C,KAAAuC,EAAA/L,cAAA0C,cACA,IAAAsY,EAAAnB,EAAAoB,IAAAlB,GACAC,EAAAzQ,KAAAsQ,GAAA7P,eAAAgR,GACAjB,EAAApO,IAAAqO,GACA,IAAAX,EAAA2B,EAAAlB,EAAA,GAAAA,EAAAkB,EAAA,EACAhB,EAAAhQ,eAAAqP,GACAU,EAAA7O,IAAA8O,GACAzN,EAAA/C,KAAA0Q,WAAAH,EAAAhO,EAAA/L,cAAA0C,gBAOA,IAHA,IAAAwY,KACAC,EAAA,IAAAhb,KAAAyQ,OAAAhO,QAAA,OACAwY,EAAA,IAAAjb,KAAAyQ,OAAAhO,QACAjB,EAAA,EAAAA,GAAA,GAAAA,IACAyZ,EAAArR,IAAA3I,KAAAI,IAAA,EAAAJ,KAAAE,GAAAK,EAAA,MAAAP,KAAAC,IAAA,EAAAD,KAAAE,GAAAK,EAAA,KACAA,EAAA,MACAyZ,EAAApR,eAAA,IAEAkR,EAAAtZ,KAAA,OACAsZ,EAAAtZ,KAAAuZ,EAAApQ,EAAAoQ,EAAAnQ,EAAAmQ,EAAAlQ,GACAiQ,EAAAtZ,KAAAwZ,EAAArQ,EAAAqQ,EAAApQ,EAAAoQ,EAAAnQ,GACAkQ,EAAA5R,KAAA6R,GAEA,IAAAC,EAAA,IAAAlb,KAAAyQ,OAAA3Q,eACAob,EAAAjT,aAAA,eAAAjI,KAAAyQ,OAAAzI,uBAAA+S,EAAA,IACA,IAAAI,EAAA,IAAAnb,KAAAyQ,OAAA9B,KAAAuM,EAAA,IAAAlb,KAAAyQ,OAAAzC,mBAAAC,MAAA,UACAkN,EAAAjC,MAAArP,eAAA,GAEA,IAAAuR,EAAA,IAAAC,GACAhO,KA9DA,IA+DAC,UAAA,GACAC,UAAA,IACAC,SAAA,GACAC,cAAA,EACAK,oBAAA8B,EAAA2C,SAAA8B,UACAtG,kBAAA6B,EAAA2C,SAAAxE,kBACAK,gBAAA,SAAAK,GAEA,IAAA6M,EAAAH,EAAA7Y,QACAgZ,EAAAlF,SAAAhN,KAAAqF,EAAA5O,cAAA6C,YACA4Y,EAAAlF,SAAAvL,EAAA,IACAyQ,EAAAnF,SAAAtL,EAAA,EAAA5J,KAAAE,GAAAF,KAAAS,SACAkO,EAAA7E,IAAAuQ,MAGA1L,EAAA7E,IAAAqQ,GAEApb,KAAA8P,SAAAiH,UACA/W,KAAA8P,SAAAyF,QAAA,IAAAyB,EAAA,EAAApH,IAAA2C,SAAAC,SACAxS,KAAA6U,cAAAjF,EAAAwL,EAAA7M,iBAAAqB,EAAA2C,SAAA4B,cAEA,IAAA8C,EAAA,IAAAC,EAAA,EAAAtH,EAAA2C,SAAAC,OAAAxS,KAAA6P,SAAAgC,YACAoF,EAAAE,OAAAtM,EAAA+P,GACA3D,EAAAG,eAAA,EACAH,EAAAI,cAAA,IACA,IAAAR,EAAA7W,KAUA,OATA4P,EAAA2C,SAAAoC,OAAA,SAAApQ,GACA6W,EAAA9W,OAAAC,GACA0S,EAAA3S,SACAsL,EAAA2C,SAAAiD,eACAqB,EAAA/G,SAAA6E,SAEAkC,EAAAhH,SAAA8E,OAAA/E,IAAA2C,SAAAC,SAGA5C,KCxfe2L,GADE5G,OAFjB,WAA0B3U,KAAawb,eAAbxb,KAAuCyb,MAAAC,GAAwB,OAA/D1b,KAA+D2b,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAb7b,KAAawb,eAA0BE,EAAvC1b,KAAuCyb,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAiBI,YAAA,mCAA6CJ,EAAA,OAAYK,OAAOC,GAAA,eAAhJhc,KAAkKic,GAAA,KAAAP,EAAA,OAAwBK,OAAOC,GAAA,UAAaN,EAAA,KAAUK,OAAOG,KAAA,sBAAA/E,OAAA,SAAAgF,IAAA,cAA/Nnc,KAAgSic,GAAA,cAAhSjc,KAAgSic,GAAA,oCCEpU,IAcAG,EAdyBC,EAAQ,OAcjCC,CACE9M,EACA+L,GATF,EAVA,SAAAgB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB,2CC1BhCC,EAAAI,EAAAD,EAAA,sBAAAvH,IAAA,IAAAyH,EAAAL,EAAA,QAAAM,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAoBIpH,EAAc,SAAW4H,EAAYjN,EAAO4C,EAAQsK,GAEvD9c,KAAK+c,YAAcnN,EACnB5P,KAAKgd,aAAexK,EACpBxS,KAAK8c,qBAAsCta,IAApBsa,EAAgCA,KACvD9c,KAAKqV,iBAAmB,IAAIM,QAAO,EAAG,EAAG,GACzC3V,KAAKsV,gBAAkB,IAAIK,QAAO,GAAK,IAAM,KAC7C3V,KAAKmV,SAAW,EAChBnV,KAAKid,mBAAoB,EACzBjd,KAAKoV,cAAgB,EACrBpV,KAAKkV,aAAe,EACpBlV,KAAKkd,gBAAkB,EACvBld,KAAKmd,YAAc,EAEnBnd,KAAKod,iBAAmB,IAAIC,IAE5BC,IAAKvd,KAAMC,MAEXA,KAAK6c,gBAA8Bra,IAAfqa,EAA6B,IAAIjM,UAASiM,EAAWjS,EAAGiS,EAAWhS,GAAM,IAAI+F,UAAS,IAAK,KAE/G,IAAI2M,GAASC,UAAWC,eAAcC,UAAWD,eAAcE,OAAQC,cAEnEC,EAAO5c,KAAK6c,MAAO9d,KAAK6c,WAAWjS,EAAI5K,KAAKkd,iBAC5Ca,EAAO9c,KAAK6c,MAAO9d,KAAK6c,WAAWhS,EAAI7K,KAAKkd,iBAEhDld,KAAKge,mBAAqB,IAAIhQ,qBAAqBC,MAAO,WAC1DjO,KAAKge,mBAAmB/W,KAAO4Q,aAC/B7X,KAAKie,uBAAyB,IAAIC,oBAAmBle,KAAK6c,WAAWjS,EAAG5K,KAAK6c,WAAWhS,EAAG0S,GAC3Fvd,KAAKie,uBAAuBE,QAAQ9K,KAAO,mBAC3CrT,KAAKie,uBAAuBE,QAAQC,iBAAkB,EAEtDpe,KAAKqe,cAAgB,IAAIC,oBACzBte,KAAKqe,cAAcpX,KAAO4Q,aAC1B7X,KAAKqe,cAAcE,aAAeC,mBAClCxe,KAAKqe,cAAcI,SAAWC,aAE9B1e,KAAK2e,oBAAsB3e,KAAK4e,yBAChC5e,KAAK2e,oBAAoB1X,KAAO4Q,aAChC7X,KAAK2e,oBAAoBE,eAqEzB,SAA8BC,EAAQtM,GAErC,IAAIvS,EAAOuS,EAAOuM,oBAAsB,cAAgB,eAExD,OAAOD,EAAOE,QAAS,mBAAoB/e,EAAO,gBAzETgf,CAAqBjf,KAAK2e,oBAAoBE,eAAgB7e,KAAKgd,cAE7Ghd,KAAKkf,wBAA0B,IAAIhB,oBAAmBle,KAAK6c,WAAWjS,EAAG5K,KAAK6c,WAAWhS,EAAG0S,GAC5Fvd,KAAKkf,wBAAwBf,QAAQ9K,KAAO,oBAC5CrT,KAAKkf,wBAAwBf,QAAQC,iBAAkB,EAEvDpe,KAAKmf,iCAAmC,IAAIjB,oBAAmBL,EAAME,EAAMR,GAC3Evd,KAAKmf,iCAAiChB,QAAQ9K,KAAO,8BACrDrT,KAAKmf,iCAAiChB,QAAQC,iBAAkB,EAEhEpe,KAAKof,wBAA0B,IAAIlB,oBAAmBL,EAAME,EAAMR,GAClEvd,KAAKof,wBAAwBjB,QAAQ9K,KAAO,oBAC5CrT,KAAKof,wBAAwBjB,QAAQC,iBAAkB,EACvDpe,KAAKqf,wBAA0B,IAAInB,oBAAmBjd,KAAK6c,MAAOD,EAAO,GAAK5c,KAAK6c,MAAOC,EAAO,GAAKR,GACtGvd,KAAKqf,wBAAwBlB,QAAQ9K,KAAO,oBAC5CrT,KAAKqf,wBAAwBlB,QAAQC,iBAAkB,EAEvDpe,KAAKsf,sBAAwBtf,KAAKuf,2BAClCvf,KAAKwf,wBAA0B,IAAItB,oBAAmBL,EAAME,EAAMR,GAClEvd,KAAKwf,wBAAwBrB,QAAQ9K,KAAO,oBAC5CrT,KAAKwf,wBAAwBrB,QAAQC,iBAAkB,EACvDpe,KAAKyf,wBAA0B,IAAIvB,oBAAmBjd,KAAK6c,MAAOD,EAAO,GAAK5c,KAAK6c,MAAOC,EAAO,GAAKR,GACtGvd,KAAKyf,wBAAwBtB,QAAQ9K,KAAO,oBAC5CrT,KAAKyf,wBAAwBtB,QAAQC,iBAAkB,EAKvDpe,KAAK0f,uBAAyB1f,KAAK2f,yBAHV,GAIzB3f,KAAK0f,uBAAuBE,SAA5B,QAAkD/d,MAAM+H,IAAKiU,EAAME,GACnE/d,KAAK0f,uBAAuBE,SAA5B,aAAuD/d,MAAQ,EAC/D7B,KAAK6f,uBAAyB7f,KAAK2f,yBALf,GAMpB3f,KAAK6f,uBAAuBD,SAA5B,QAAkD/d,MAAM+H,IAAK3I,KAAK6c,MAAOD,EAAO,GAAK5c,KAAK6c,MAAOC,EAAO,IACxG/d,KAAK6f,uBAAuBD,SAA5B,aAAuD/d,MAPnC,EAUpB7B,KAAK8f,gBAAkB9f,KAAK+f,0BAGRvd,IAAfwd,KACJC,QAAQC,MAAO,oCAEhB,IAAIC,EAAaH,IAEjBhgB,KAAKogB,aAAeC,gBAAc/d,MAAO6d,EAAWP,UACpD5f,KAAKogB,aAAL,QAA+Bve,MAAQ,EAEvC7B,KAAKsgB,aAAe,IAAIC,kBACvBX,SAAU5f,KAAKogB,aACfI,aAAcL,EAAWK,aACzB3B,eAAgBsB,EAAWtB,eAC3BJ,SAAUC,aACV+B,WAAW,EACXhI,YAAY,EACZF,aAAa,IAGdvY,KAAKka,SAAU,EACfla,KAAK0gB,WAAY,EAEjB1gB,KAAK2gB,cAAgB,IAAIhL,QACzB3V,KAAK4gB,cAAgB,EAErB5gB,KAAK6gB,OAAS,IAAIvD,IAAKwD,eAAgB,MAEvC9gB,KAAK+gB,gBAAkB,IAAIpL,QAC3B3V,KAAKghB,gBAAkB,IAAIrL,QAC3B3V,KAAKihB,cAAgB,IAAIC,WAY1BjM,EAAY5U,UAAYC,OAAO6gB,OAAQ7gB,OAAOC,OAAQ+c,IAAKjd,YAE1DG,YAAayU,EAEbmM,QAAS,WAERphB,KAAKie,uBAAuBmD,UAC5BphB,KAAKkf,wBAAwBkC,UAC7BphB,KAAKmf,iCAAiCiC,UACtCphB,KAAKof,wBAAwBgC,UAC7BphB,KAAKqf,wBAAwB+B,UAC7BphB,KAAKwf,wBAAwB4B,UAC7BphB,KAAKyf,wBAAwB2B,WAI9B7P,QAAS,SAAWuB,EAAO3E,GAE1BnO,KAAKie,uBAAuB1M,QAASuB,EAAO3E,GAE5C,IAAI0P,EAAO5c,KAAK6c,MAAOhL,EAAQ9S,KAAKkd,iBAChCa,EAAO9c,KAAK6c,MAAO3P,EAASnO,KAAKkd,iBACrCld,KAAKmf,iCAAiC5N,QAASsM,EAAME,GACrD/d,KAAKof,wBAAwB7N,QAASsM,EAAME,GAC5C/d,KAAKwf,wBAAwBjO,QAASsM,EAAME,GAC5C/d,KAAK0f,uBAAuBE,SAA5B,QAAkD/d,MAAM+H,IAAKiU,EAAME,GAEnEF,EAAO5c,KAAK6c,MAAOD,EAAO,GAC1BE,EAAO9c,KAAK6c,MAAOC,EAAO,GAE1B/d,KAAKqf,wBAAwB9N,QAASsM,EAAME,GAC5C/d,KAAKyf,wBAAwBlO,QAASsM,EAAME,GAE5C/d,KAAK6f,uBAAuBD,SAA5B,QAAkD/d,MAAM+H,IAAKiU,EAAME,IAIpEsD,kCAAmC,SAAWC,GAE7C,IAAIC,EAAQvhB,KAAKod,iBAEjB,SAASoE,EAA8BC,GAEjCA,EAAOC,UAEO,IAAbJ,EAEJG,EAAO5c,QAAU0c,EAAMI,IAAKF,IAI5BF,EAAM3X,IAAK6X,EAAQA,EAAO5c,SAC1B4c,EAAO5c,QAAUyc,IAQpB,IAAM,IAAI9f,EAAI,EAAGA,EAAIxB,KAAK8c,gBAAgBzS,OAAQ7I,IAAO,CAEnCxB,KAAK8c,gBAAiBtb,GAC5BogB,SAAUJ,KAM3BK,qCAAsC,SAAWP,GAEhD,IAAIC,EAAQvhB,KAAKod,iBACb0E,KAEJ,SAASN,EAA8BC,GAEjCA,EAAOC,QAASI,EAAergB,KAAMggB,GAI3C,IAAM,IAAIjgB,EAAI,EAAGA,EAAIxB,KAAK8c,gBAAgBzS,OAAQ7I,IAAO,CAEnCxB,KAAK8c,gBAAiBtb,GAC5BogB,SAAUJ,GA2D1BxhB,KAAK+c,YAAY6E,SAvDjB,SAAmCH,GAElC,GAAKA,EAAOC,QAAUD,EAAOM,SAAW,CAMvC,IAFA,IAAIC,GAAS,EAEHxgB,EAAI,EAAGA,EAAIsgB,EAAezX,OAAQ7I,IAI3C,GAFuBsgB,EAAgBtgB,GAAIwa,KAEjByF,EAAOzF,GAAK,CAErCgG,GAAS,EACT,MAMF,IAAgB,IAAXA,EAAmB,CAEvB,IAAIC,EAAaR,EAAO5c,SAEN,IAAbyc,IAA8C,IAAxBC,EAAMI,IAAKF,KAErCA,EAAO5c,QAAUyc,GAIlBC,EAAM3X,IAAK6X,EAAQQ,SAITR,EAAOS,UAAYT,EAAOU,WAKnB,IAAbb,EAEJG,EAAO5c,QAAU0c,EAAMI,IAAKF,IAI5BF,EAAM3X,IAAK6X,EAAQA,EAAO5c,SAC1B4c,EAAO5c,QAAUyc,OAYrBc,oBAAqB,WAEpBpiB,KAAKihB,cAAcrX,IAAK,GAAK,EAAK,EAAK,GACtC,EAAK,GAAK,EAAK,GACf,EAAK,EAAK,GAAK,GACf,EAAK,EAAK,EAAK,GAChB5J,KAAKihB,cAAcoB,SAAUriB,KAAKgd,aAAasF,kBAC/CtiB,KAAKihB,cAAcoB,SAAUriB,KAAKgd,aAAauF,qBAIhD5N,OAAQ,SAAW9E,EAAU2S,EAAaC,EAAYC,EAAWC,GAEhE,GAAK3iB,KAAK8c,gBAAgBzS,OAAS,EAAI,CAEtCrK,KAAK2gB,cAAcvX,KAAMyG,EAAS+S,iBAClC5iB,KAAK4gB,cAAgB/Q,EAASgT,gBAC9B,IAAIC,EAAejT,EAASkT,UAE5BlT,EAASkT,WAAY,EAEhBJ,GAAa9S,EAASlL,MAAMqe,QAAQC,QAAQC,SAAS,GAE1DrT,EAASsT,cAAe,SAAU,GAGlCnjB,KAAKqhB,mCAAmC,GAExC,IAAI+B,EAAoBpjB,KAAK+c,YAAYrH,WAyCzC,GAxCA1V,KAAK+c,YAAYrH,WAAa,KAG9B1V,KAAK+c,YAAYsG,iBAAmBrjB,KAAKqe,cACzCxO,EAASyT,gBAAiBtjB,KAAKkf,yBAC/BrP,EAASoK,QACTpK,EAAS8E,OAAQ3U,KAAK+c,YAAa/c,KAAKgd,cAGxChd,KAAKqhB,mCAAmC,GACxCrhB,KAAKod,iBAAiBnD,QAGtBja,KAAKoiB,sBAGLpiB,KAAK6hB,sCAAsC,GAC3C7hB,KAAK+c,YAAYsG,iBAAmBrjB,KAAK2e,oBACzC3e,KAAK2e,oBAAoBiB,SAAzB,cAAqD/d,MAAM+H,IAAK5J,KAAKgd,aAAauG,KAAMvjB,KAAKgd,aAAawG,KAC1GxjB,KAAK2e,oBAAoBiB,SAAzB,aAAoD/d,MAAQ7B,KAAKkf,wBAAwBf,QACzFne,KAAK2e,oBAAoBiB,SAAzB,cAAqD/d,MAAQ7B,KAAKihB,cAClEpR,EAASyT,gBAAiBtjB,KAAKie,wBAC/BpO,EAASoK,QACTpK,EAAS8E,OAAQ3U,KAAK+c,YAAa/c,KAAKgd,cACxChd,KAAK+c,YAAYsG,iBAAmB,KACpCrjB,KAAK6hB,sCAAsC,GAC3C7hB,KAAKod,iBAAiBnD,QAEtBja,KAAK+c,YAAYrH,WAAa0N,EAG9BpjB,KAAK6gB,OAAOpH,SAAWzZ,KAAKsgB,aAC5BtgB,KAAKogB,aAAL,SAAgCve,MAAQ7B,KAAKie,uBAAuBE,QACpEtO,EAASyT,gBAAiBtjB,KAAKmf,kCAC/BtP,EAASoK,QACTja,KAAK6gB,OAAOlM,OAAQ9E,GAEpB7P,KAAK+gB,gBAAgB3X,KAAMpJ,KAAKqV,kBAChCrV,KAAKghB,gBAAgB5X,KAAMpJ,KAAKsV,iBAE3BtV,KAAKmd,YAAc,EAAI,CAE3B,IAAIsG,EAAS,KAAmB,IAAAxiB,KAAKC,IAAyB,IAApBwiB,YAAYC,MAAe3jB,KAAKmd,aAAiC,EAC3Gnd,KAAK+gB,gBAAgBlX,eAAgB4Z,GACrCzjB,KAAKghB,gBAAgBnX,eAAgB4Z,GAKtCzjB,KAAK6gB,OAAOpH,SAAWzZ,KAAKsf,sBAC5Btf,KAAKsf,sBAAsBM,SAA3B,YAAqD/d,MAAQ7B,KAAKmf,iCAAiChB,QACnGne,KAAKsf,sBAAsBM,SAA3B,QAAiD/d,MAAM+H,IAAK5J,KAAKmf,iCAAiCrM,MAAO9S,KAAKmf,iCAAiChR,QAC/InO,KAAKsf,sBAAsBM,SAA3B,iBAA0D/d,MAAQ7B,KAAK+gB,gBACvE/gB,KAAKsf,sBAAsBM,SAA3B,gBAAyD/d,MAAQ7B,KAAKghB,gBACtEnR,EAASyT,gBAAiBtjB,KAAKwf,yBAC/B3P,EAASoK,QACTja,KAAK6gB,OAAOlM,OAAQ9E,GAGpB7P,KAAK6gB,OAAOpH,SAAWzZ,KAAK0f,uBAC5B1f,KAAK0f,uBAAuBE,SAA5B,aAAuD/d,MAAQ7B,KAAKwf,wBAAwBrB,QAC5Fne,KAAK0f,uBAAuBE,SAA5B,UAAoD/d,MAAQoT,EAAY2O,eACxE5jB,KAAK0f,uBAAuBE,SAA5B,aAAuD/d,MAAQ7B,KAAKoV,cACpEvF,EAASyT,gBAAiBtjB,KAAKof,yBAC/BvP,EAASoK,QACTja,KAAK6gB,OAAOlM,OAAQ9E,GACpB7P,KAAK0f,uBAAuBE,SAA5B,aAAuD/d,MAAQ7B,KAAKof,wBAAwBjB,QAC5Fne,KAAK0f,uBAAuBE,SAA5B,UAAoD/d,MAAQoT,EAAY4O,eACxEhU,EAASyT,gBAAiBtjB,KAAKwf,yBAC/B3P,EAASoK,QACTja,KAAK6gB,OAAOlM,OAAQ9E,GAGpB7P,KAAK6gB,OAAOpH,SAAWzZ,KAAK6f,uBAC5B7f,KAAK6f,uBAAuBD,SAA5B,aAAuD/d,MAAQ7B,KAAKwf,wBAAwBrB,QAC5Fne,KAAK6f,uBAAuBD,SAA5B,UAAoD/d,MAAQoT,EAAY2O,eACxE/T,EAASyT,gBAAiBtjB,KAAKqf,yBAC/BxP,EAASoK,QACTja,KAAK6gB,OAAOlM,OAAQ9E,GACpB7P,KAAK6f,uBAAuBD,SAA5B,aAAuD/d,MAAQ7B,KAAKqf,wBAAwBlB,QAC5Fne,KAAK6f,uBAAuBD,SAA5B,UAAoD/d,MAAQoT,EAAY4O,eACxEhU,EAASyT,gBAAiBtjB,KAAKyf,yBAC/B5P,EAASoK,QACTja,KAAK6gB,OAAOlM,OAAQ9E,GAGpB7P,KAAK6gB,OAAOpH,SAAWzZ,KAAK8f,gBAC5B9f,KAAK8f,gBAAgBF,SAArB,YAA+C/d,MAAQ7B,KAAKie,uBAAuBE,QACnFne,KAAK8f,gBAAgBF,SAArB,aAAgD/d,MAAQ7B,KAAKwf,wBAAwBrB,QACrFne,KAAK8f,gBAAgBF,SAArB,aAAgD/d,MAAQ7B,KAAKyf,wBAAwBtB,QACrFne,KAAK8f,gBAAgBF,SAArB,eAAkD/d,MAAQ7B,KAAK8jB,eAC/D9jB,KAAK8f,gBAAgBF,SAArB,aAAgD/d,MAAQ7B,KAAKkV,aAC7DlV,KAAK8f,gBAAgBF,SAArB,SAA4C/d,MAAQ7B,KAAKmV,SACzDnV,KAAK8f,gBAAgBF,SAArB,kBAAqD/d,MAAQ7B,KAAKid,kBAG7D0F,GAAa9S,EAASlL,MAAMqe,QAAQC,QAAQC,SAAS,GAE1DrT,EAASyT,gBAAiBb,GAC1BziB,KAAK6gB,OAAOlM,OAAQ9E,GAEpBA,EAASsT,cAAenjB,KAAK2gB,cAAe3gB,KAAK4gB,eACjD/Q,EAASkT,UAAYD,EAIjB9iB,KAAK+jB,iBAET/jB,KAAK6gB,OAAOpH,SAAWzZ,KAAKsgB,aAC5BtgB,KAAKogB,aAAL,SAAgCve,MAAQ4gB,EAAWtE,QACnDtO,EAASyT,gBAAiB,MAC1BtjB,KAAK6gB,OAAOlM,OAAQ9E,KAMtB+O,uBAAwB,WAEvB,OAAO,IAAI2B,kBAEVX,UACCoE,cAAkBniB,MAAO,MACzBoiB,eAAmBpiB,MAAO,IAAI+O,UAAS,GAAK,KAC5CqQ,eAAmBpf,MAAO,OAG3B2e,cACC,qCACA,kCAEA,6BACA,0BACA,8BAEA,gBAEA,+BACA,4BACA,kCACA,+BACA,8BAEA,4BACA,8DACA,kDAEA,KACC0D,KAAM,MAERrF,gBACC,qBACA,0BACA,6BACA,kCACA,8BAEA,gBAEA,kFACA,gFACA,0DACA,mDAEA,KACCqF,KAAM,SAMV3E,yBAA0B,WAEzB,OAAO,IAAIgB,kBAEVX,UACCuE,aAAiBtiB,MAAO,MACxBuiB,SAAaviB,MAAO,IAAI+O,UAAS,GAAK,KACtCyE,kBAAsBxT,MAAO,IAAIY,UAAS,EAAK,EAAK,IACpD6S,iBAAqBzT,MAAO,IAAIY,UAAS,EAAK,EAAK,KAGpD+d,aACC,8gDAsFHT,uoCCrkBDsE,cAAAxiB,MAAA","file":"static/js/30.3475b2c1ee078bc4a522.js","sourcesContent":["import {\r\n\tBufferGeometry,\r\n\tDynamicDrawUsage,\r\n\tFloat32BufferAttribute,\r\n\tMathUtils,\r\n\tUint32BufferAttribute,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\r\n\r\n/**\r\n * @fileoverview LightningStrike object for creating lightning strikes and voltaic arcs.\r\n *\r\n *\r\n * Usage\r\n *\r\n * var myRay = new LightningStrike( paramsObject );\r\n * var myRayMesh = new THREE.Mesh( myRay, myMaterial );\r\n * scene.add( myRayMesh );\r\n * ...\r\n * myRay.update( currentTime );\r\n *\r\n * The \"currentTime\" can vary its rate, go forwards, backwards or even jump, but it cannot be negative.\r\n *\r\n * You should normally leave the ray position to (0, 0, 0). You should control it by changing the sourceOffset and destOffset parameters.\r\n *\r\n *\r\n * LightningStrike parameters\r\n *\r\n * The paramsObject can contain any of the following parameters.\r\n *\r\n * Legend:\r\n * 'LightningStrike' (also called 'ray'): An independent voltaic arc with its ramifications and defined with a set of parameters.\r\n * 'Subray': A ramification of the ray. It is not a LightningStrike object.\r\n * 'Segment': A linear segment piece of a subray.\r\n * 'Leaf segment': A ray segment which cannot be smaller.\r\n *\r\n *\r\n * The following parameters can be changed any time and if they vary smoothly, the ray form will also change smoothly:\r\n *\r\n * @param {Vector3} sourceOffset The point where the ray starts.\r\n *\r\n * @param {Vector3} destOffset The point where the ray ends.\r\n *\r\n * @param {double} timeScale The rate at wich the ray form changes in time. Default: 1\r\n *\r\n * @param {double} roughness From 0 to 1. The higher the value, the more wrinkled is the ray. Default: 0.9\r\n *\r\n * @param {double} straightness From 0 to 1. The higher the value, the more straight will be a subray path. Default: 0.7\r\n *\r\n * @param {Vector3} up0 Ray 'up' direction at the ray starting point. Must be normalized. It should be perpendicular to the ray forward direction but it doesn't matter much.\r\n *\r\n * @param {Vector3} up1 Like the up0 parameter but at the end of the ray. Must be normalized.\r\n *\r\n * @param {double} radius0 Radius of the main ray trunk at the start point. Default: 1\r\n *\r\n * @param {double} radius1 Radius of the main ray trunk at the end point. Default: 1\r\n *\r\n * @param {double} radius0Factor The radius0 of a subray is this factor times the radius0 of its parent subray. Default: 0.5\r\n *\r\n * @param {double} radius1Factor The radius1 of a subray is this factor times the radius1 of its parent subray. Default: 0.2\r\n *\r\n * @param {minRadius} Minimum value a subray radius0 or radius1 can get. Default: 0.1\r\n *\r\n *\r\n * The following parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\r\n *\r\n * @param {boolean} isEternal If true the ray never extinguishes. Otherwise its life is controlled by the 'birthTime' and 'deathTime' parameters. Default: true if any of those two parameters is undefined.\r\n *\r\n * @param {double} birthTime The time at which the ray starts its life and begins propagating. Only if isEternal is false. Default: None.\r\n *\r\n * @param {double} deathTime The time at which the ray ends vanishing and its life. Only if isEternal is false. Default: None.\r\n *\r\n * @param {double} propagationTimeFactor From 0 to 1. Lifetime factor at which the ray ends propagating and enters the steady phase. For example, 0.1 means it is propagating 1/10 of its lifetime. Default: 0.1\r\n *\r\n * @param {double} vanishingTimeFactor From 0 to 1. Lifetime factor at which the ray ends the steady phase and begins vanishing. For example, 0.9 means it is vanishing 1/10 of its lifetime. Default: 0.9\r\n *\r\n * @param {double} subrayPeriod Subrays cycle periodically. This is their time period. Default: 4\r\n *\r\n * @param {double} subrayDutyCycle From 0 to 1. This is the fraction of time a subray is active. Default: 0.6\r\n *\r\n *\r\n * These parameters cannot change after lightning creation:\r\n *\r\n * @param {integer} maxIterations: Greater than 0. The number of ray's leaf segments is 2**maxIterations. Default: 9\r\n *\r\n * @param {boolean} isStatic Set to true only for rays which won't change over time and are not attached to moving objects (Rare case). It is used to set the vertex buffers non-dynamic. You can omit calling update() for these rays.\r\n *\r\n * @param {integer} ramification Greater than 0. Maximum number of child subrays a subray can have. Default: 5\r\n *\r\n * @param {integer} maxSubrayRecursion Greater than 0. Maximum level of recursion (subray descendant generations). Default: 3\r\n *\r\n * @param {double} recursionProbability From 0 to 1. The lower the value, the less chance each new generation of subrays has to generate new subrays. Default: 0.6\r\n *\r\n * @param {boolean} generateUVs If true, the ray geometry will have uv coordinates generated. u runs along the ray, and v across its perimeter. Default: false.\r\n *\r\n * @param {Object} randomGenerator Set here your random number generator which will seed the SimplexNoise and other decisions during ray tree creation.\r\n * It can be used to generate repeatable rays. For that, set also the noiseSeed parameter, and each ray created with that generator and seed pair will be identical in time.\r\n * The randomGenerator parameter should be an object with a random() function similar to Math.random, but seedable.\r\n * It must have also a getSeed() method, which returns the current seed, and a setSeed( seed ) method, which accepts as seed a fractional number from 0 to 1, as well as any other number.\r\n * The default value is an internal generator for some uses and Math.random for others (It is non-repeatable even if noiseSeed is supplied)\r\n *\r\n * @param {double} noiseSeed Seed used to make repeatable rays (see the randomGenerator)\r\n *\r\n * @param {function} onDecideSubrayCreation Set this to change the callback which decides subray creation. You can look at the default callback in the code (createDefaultSubrayCreationCallbacks)for more info.\r\n *\r\n * @param {function} onSubrayCreation This is another callback, more simple than the previous one. It can be used to adapt the form of subrays or other parameters once a subray has been created and initialized. It is used in the examples to adapt subrays to a sphere or to a plane.\r\n *\r\n *\r\n*/\r\n\r\nvar LightningStrike = function ( rayParameters ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tthis.type = 'LightningStrike';\r\n\r\n\t// Set parameters, and set undefined parameters to default values\r\n\trayParameters = rayParameters || {};\r\n\tthis.init( LightningStrike.copyParameters( rayParameters, rayParameters ) );\r\n\r\n\t// Creates and populates the mesh\r\n\tthis.createMesh();\r\n\r\n};\r\n\r\nLightningStrike.prototype = Object.create( BufferGeometry.prototype );\r\n\r\nLightningStrike.prototype.constructor = LightningStrike;\r\n\r\nLightningStrike.prototype.isLightningStrike = true;\r\n\r\n// Ray states\r\nLightningStrike.RAY_INITIALIZED = 0;\r\nLightningStrike.RAY_UNBORN = 1;\r\nLightningStrike.RAY_PROPAGATING = 2;\r\nLightningStrike.RAY_STEADY = 3;\r\nLightningStrike.RAY_VANISHING = 4;\r\nLightningStrike.RAY_EXTINGUISHED = 5;\r\n\r\nLightningStrike.COS30DEG = Math.cos( 30 * Math.PI / 180 );\r\nLightningStrike.SIN30DEG = Math.sin( 30 * Math.PI / 180 );\r\n\r\nLightningStrike.createRandomGenerator = function () {\r\n\r\n\tvar numSeeds = 2053;\r\n\tvar seeds = [];\r\n\r\n\tfor ( var i = 0; i < numSeeds; i ++ ) {\r\n\r\n\t\tseeds.push( Math.random() );\r\n\r\n\t}\r\n\r\n\tvar generator = {\r\n\r\n\t\tcurrentSeed: 0,\r\n\r\n\t\trandom: function () {\r\n\r\n\t\t\tvar value = seeds[ generator.currentSeed ];\r\n\r\n\t\t\tgenerator.currentSeed = ( generator.currentSeed + 1 ) % numSeeds;\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetSeed: function () {\r\n\r\n\t\t\treturn generator.currentSeed / numSeeds;\r\n\r\n\t\t},\r\n\r\n\t\tsetSeed: function ( seed ) {\r\n\r\n\t\t\tgenerator.currentSeed = Math.floor( seed * numSeeds ) % numSeeds;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn generator;\r\n\r\n};\r\n\r\nLightningStrike.copyParameters = function ( dest, source ) {\r\n\r\n\tsource = source || {};\r\n\tdest = dest || {};\r\n\r\n\tvar vecCopy = function ( v ) {\r\n\r\n\t\tif ( source === dest ) {\r\n\r\n\t\t\treturn v;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn v.clone();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tdest.sourceOffset = source.sourceOffset !== undefined ? vecCopy( source.sourceOffset ) : new Vector3( 0, 100, 0 ),\r\n\tdest.destOffset = source.destOffset !== undefined ? vecCopy( source.destOffset ) : new Vector3( 0, 0, 0 ),\r\n\r\n\tdest.timeScale = source.timeScale !== undefined ? source.timeScale : 1,\r\n\tdest.roughness = source.roughness !== undefined ? source.roughness : 0.9,\r\n\tdest.straightness = source.straightness !== undefined ? source.straightness : 0.7,\r\n\r\n\tdest.up0 = source.up0 !== undefined ? vecCopy( source.up0 ) : new Vector3( 0, 0, 1 );\r\n\tdest.up1 = source.up1 !== undefined ? vecCopy( source.up1 ) : new Vector3( 0, 0, 1 ),\r\n\tdest.radius0 = source.radius0 !== undefined ? source.radius0 : 1,\r\n\tdest.radius1 = source.radius1 !== undefined ? source.radius1 : 1,\r\n\tdest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5,\r\n\tdest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2,\r\n\tdest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2,\r\n\r\n\t// These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\r\n\r\n\tdest.isEternal = source.isEternal !== undefined ? source.isEternal : ( source.birthTime === undefined || source.deathTime === undefined ),\r\n\tdest.birthTime = source.birthTime,\r\n\tdest.deathTime = source.deathTime,\r\n\tdest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1,\r\n\tdest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9,\r\n\tdest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4,\r\n\tdest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6;\r\n\r\n\t// These parameters cannot change after lightning creation:\r\n\r\n\tdest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\r\n\tdest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\r\n\tdest.ramification = source.ramification !== undefined ? source.ramification : 5;\r\n\tdest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\r\n\tdest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\r\n\tdest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\r\n\tdest.randomGenerator = source.randomGenerator,\r\n\tdest.noiseSeed = source.noiseSeed,\r\n\tdest.onDecideSubrayCreation = source.onDecideSubrayCreation,\r\n\tdest.onSubrayCreation = source.onSubrayCreation;\r\n\r\n\treturn dest;\r\n\r\n};\r\n\r\nLightningStrike.prototype.update = function ( time ) {\r\n\r\n\tif ( this.isStatic ) return;\r\n\r\n\tif ( this.rayParameters.isEternal || ( this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime ) ) {\r\n\r\n\t\tthis.updateMesh( time );\r\n\r\n\t\tif ( time < this.subrays[ 0 ].endPropagationTime ) {\r\n\r\n\t\t\tthis.state = LightningStrike.RAY_PROPAGATING;\r\n\r\n\t\t} else if ( time > this.subrays[ 0 ].beginVanishingTime ) {\r\n\r\n\t\t\tthis.state = LightningStrike.RAY_VANISHING;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.state = LightningStrike.RAY_STEADY;\r\n\r\n\t\t}\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t} else {\r\n\r\n\t\tthis.visible = false;\r\n\r\n\t\tif ( time < this.rayParameters.birthTime ) {\r\n\r\n\t\t\tthis.state = LightningStrike.RAY_UNBORN;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.state = LightningStrike.RAY_EXTINGUISHED;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nLightningStrike.prototype.init = function ( rayParameters ) {\r\n\r\n\t// Init all the state from the parameters\r\n\r\n\tthis.rayParameters = rayParameters;\r\n\r\n\t// These parameters cannot change after lightning creation:\r\n\r\n\tthis.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor( rayParameters.maxIterations ) : 9;\r\n\trayParameters.maxIterations = this.maxIterations;\r\n\tthis.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\r\n\trayParameters.isStatic = this.isStatic;\r\n\tthis.ramification = rayParameters.ramification !== undefined ? Math.floor( rayParameters.ramification ) : 5;\r\n\trayParameters.ramification = this.ramification;\r\n\tthis.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor( rayParameters.maxSubrayRecursion ) : 3;\r\n\trayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\r\n\tthis.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\r\n\trayParameters.recursionProbability = this.recursionProbability;\r\n\tthis.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\r\n\trayParameters.generateUVs = this.generateUVs;\r\n\r\n\t// Random generator\r\n\tif ( rayParameters.randomGenerator !== undefined ) {\r\n\r\n\t\tthis.randomGenerator = rayParameters.randomGenerator;\r\n\t\tthis.seedGenerator = rayParameters.randomGenerator;\r\n\r\n\t\tif ( rayParameters.noiseSeed !== undefined ) {\r\n\r\n\t\t\tthis.seedGenerator.setSeed( rayParameters.noiseSeed );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tthis.randomGenerator = LightningStrike.createRandomGenerator();\r\n\t\tthis.seedGenerator = Math;\r\n\r\n\t}\r\n\r\n\t// Ray creation callbacks\r\n\tif ( rayParameters.onDecideSubrayCreation !== undefined ) {\r\n\r\n\t\tthis.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\r\n\r\n\t} else {\r\n\r\n\t\tthis.createDefaultSubrayCreationCallbacks();\r\n\r\n\t\tif ( rayParameters.onSubrayCreation !== undefined ) {\r\n\r\n\t\t\tthis.onSubrayCreation = rayParameters.onSubrayCreation;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Internal state\r\n\r\n\tthis.state = LightningStrike.RAY_INITIALIZED;\r\n\r\n\tthis.maxSubrays = Math.ceil( 1 + Math.pow( this.ramification, Math.max( 0, this.maxSubrayRecursion - 1 ) ) );\r\n\trayParameters.maxSubrays = this.maxSubrays;\r\n\r\n\tthis.maxRaySegments = 2 * ( 1 << this.maxIterations );\r\n\r\n\tthis.subrays = [];\r\n\r\n\tfor ( var i = 0; i < this.maxSubrays; i ++ ) {\r\n\r\n\t\tthis.subrays.push( this.createSubray() );\r\n\r\n\t}\r\n\r\n\tthis.raySegments = [];\r\n\r\n\tfor ( var i = 0; i < this.maxRaySegments; i ++ ) {\r\n\r\n\t\tthis.raySegments.push( this.createSegment() );\r\n\r\n\t}\r\n\r\n\tthis.time = 0;\r\n\tthis.timeFraction = 0;\r\n\tthis.currentSegmentCallback = null;\r\n\tthis.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\r\n\tthis.numSubrays = 0;\r\n\tthis.currentSubray = null;\r\n\tthis.currentSegmentIndex = 0;\r\n\tthis.isInitialSegment = false;\r\n\tthis.subrayProbability = 0;\r\n\r\n\tthis.currentVertex = 0;\r\n\tthis.currentIndex = 0;\r\n\tthis.currentCoordinate = 0;\r\n\tthis.currentUVCoordinate = 0;\r\n\tthis.vertices = null;\r\n\tthis.uvs = null;\r\n\tthis.indices = null;\r\n\tthis.positionAttribute = null;\r\n\tthis.uvsAttribute = null;\r\n\r\n\tthis.simplexX = new SimplexNoise( this.seedGenerator );\r\n\tthis.simplexY = new SimplexNoise( this.seedGenerator );\r\n\tthis.simplexZ = new SimplexNoise( this.seedGenerator );\r\n\r\n\t// Temp vectors\r\n\tthis.forwards = new Vector3();\r\n\tthis.forwardsFill = new Vector3();\r\n\tthis.side = new Vector3();\r\n\tthis.down = new Vector3();\r\n\tthis.middlePos = new Vector3();\r\n\tthis.middleLinPos = new Vector3();\r\n\tthis.newPos = new Vector3();\r\n\tthis.vPos = new Vector3();\r\n\tthis.cross1 = new Vector3();\r\n\r\n};\r\n\r\nLightningStrike.prototype.createMesh = function () {\r\n\r\n\tvar maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\r\n\r\n\tvar maxVerts = 3 * ( maxDrawableSegmentsPerSubRay + 1 ) * this.maxSubrays;\r\n\tvar maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\r\n\r\n\tthis.vertices = new Float32Array( maxVerts * 3 );\r\n\tthis.indices = new Uint32Array( maxIndices );\r\n\tif ( this.generateUVs ) {\r\n\r\n\t\tthis.uvs = new Float32Array( maxVerts * 2 );\r\n\r\n\t}\r\n\r\n\t// Populate the mesh\r\n\tthis.fillMesh( 0 );\r\n\r\n\tthis.setIndex( new Uint32BufferAttribute( this.indices, 1 ) );\r\n\r\n\tthis.positionAttribute = new Float32BufferAttribute( this.vertices, 3 );\r\n\tthis.setAttribute( 'position', this.positionAttribute );\r\n\r\n\tif ( this.generateUVs ) {\r\n\r\n\t\tthis.uvsAttribute = new Float32BufferAttribute( new Float32Array( this.uvs ), 2 );\r\n\t\tthis.setAttribute( 'uv', this.uvsAttribute );\r\n\r\n\t}\r\n\r\n\tif ( ! this.isStatic ) {\r\n\r\n\t\tthis.index.usage = DynamicDrawUsage;\r\n\t\tthis.positionAttribute.usage = DynamicDrawUsage;\r\n\t\tif ( this.generateUVs ) {\r\n\r\n\t\t\tthis.uvsAttribute.usage = DynamicDrawUsage;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Store buffers for later modification\r\n\tthis.vertices = this.positionAttribute.array;\r\n\tthis.indices = this.index.array;\r\n\tif ( this.generateUVs ) {\r\n\r\n\t\tthis.uvs = this.uvsAttribute.array;\r\n\r\n\t}\r\n\r\n};\r\n\r\nLightningStrike.prototype.updateMesh = function ( time ) {\r\n\r\n\tthis.fillMesh( time );\r\n\r\n\tthis.drawRange.count = this.currentIndex;\r\n\r\n\tthis.index.needsUpdate = true;\r\n\r\n\tthis.positionAttribute.needsUpdate = true;\r\n\r\n\tif ( this.generateUVs ) {\r\n\r\n\t\tthis.uvsAttribute.needsUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nLightningStrike.prototype.fillMesh = function ( time ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.currentVertex = 0;\r\n\tthis.currentIndex = 0;\r\n\tthis.currentCoordinate = 0;\r\n\tthis.currentUVCoordinate = 0;\r\n\r\n\tthis.fractalRay( time, function fillVertices( segment ) {\r\n\r\n\t\tvar subray = scope.currentSubray;\r\n\r\n\t\tif ( time < subray.birthTime ) { //&& ( ! this.rayParameters.isEternal || scope.currentSubray.recursion > 0 ) ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t} else if ( this.rayParameters.isEternal && scope.currentSubray.recursion == 0 ) {\r\n\r\n\t\t\t// Eternal rays don't propagate nor vanish, but its subrays do\r\n\r\n\t\t\tscope.createPrism( segment );\r\n\r\n\t\t\tscope.onDecideSubrayCreation( segment, scope );\r\n\r\n\t\t} else if ( time < subray.endPropagationTime ) {\r\n\r\n\t\t\tif ( scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor ) {\r\n\r\n\t\t\t\t// Ray propagation has arrived to this segment\r\n\r\n\t\t\t\tscope.createPrism( segment );\r\n\r\n\t\t\t\tscope.onDecideSubrayCreation( segment, scope );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( time < subray.beginVanishingTime ) {\r\n\r\n\t\t\t// Ray is steady (nor propagating nor vanishing)\r\n\r\n\t\t\tscope.createPrism( segment );\r\n\r\n\t\t\tscope.onDecideSubrayCreation( segment, scope );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * ( 1 - subray.vanishingTimeFactor ) ) {\r\n\r\n\t\t\t\t// Segment has not yet vanished\r\n\r\n\t\t\t\tscope.createPrism( segment );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.onDecideSubrayCreation( segment, scope );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n};\r\n\r\nLightningStrike.prototype.addNewSubray = function ( /*rayParameters*/ ) {\r\n\r\n\treturn this.subrays[ this.numSubrays ++ ];\r\n\r\n};\r\n\r\nLightningStrike.prototype.initSubray = function ( subray, rayParameters ) {\r\n\r\n\tsubray.pos0.copy( rayParameters.sourceOffset );\r\n\tsubray.pos1.copy( rayParameters.destOffset );\r\n\tsubray.up0.copy( rayParameters.up0 );\r\n\tsubray.up1.copy( rayParameters.up1 );\r\n\tsubray.radius0 = rayParameters.radius0;\r\n\tsubray.radius1 = rayParameters.radius1;\r\n\tsubray.birthTime = rayParameters.birthTime;\r\n\tsubray.deathTime = rayParameters.deathTime;\r\n\tsubray.timeScale = rayParameters.timeScale;\r\n\tsubray.roughness = rayParameters.roughness;\r\n\tsubray.straightness = rayParameters.straightness;\r\n\tsubray.propagationTimeFactor = rayParameters.propagationTimeFactor;\r\n\tsubray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\r\n\r\n\tsubray.maxIterations = this.maxIterations;\r\n\tsubray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\r\n\tsubray.recursion = 0;\r\n\r\n};\r\n\r\nLightningStrike.prototype.fractalRay = function ( time, segmentCallback ) {\r\n\r\n\tthis.time = time;\r\n\tthis.currentSegmentCallback = segmentCallback;\r\n\tthis.numSubrays = 0;\r\n\r\n\t// Add the top level subray\r\n\tthis.initSubray( this.addNewSubray(), this.rayParameters );\r\n\r\n\t// Process all subrays that are being generated until consuming all of them\r\n\tfor ( var subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex ++ ) {\r\n\r\n\t\tvar subray = this.subrays[ subrayIndex ];\r\n\t\tthis.currentSubray = subray;\r\n\r\n\t\tthis.randomGenerator.setSeed( subray.seed );\r\n\r\n\t\tsubray.endPropagationTime = MathUtils.lerp( subray.birthTime, subray.deathTime, subray.propagationTimeFactor );\r\n\t\tsubray.beginVanishingTime = MathUtils.lerp( subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor );\r\n\r\n\t\tvar random1 = this.randomGenerator.random;\r\n\t\tsubray.linPos0.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\r\n\t\tsubray.linPos1.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\r\n\r\n\t\tthis.timeFraction = ( time - subray.birthTime ) / ( subray.deathTime - subray.birthTime );\r\n\r\n\t\tthis.currentSegmentIndex = 0;\r\n\t\tthis.isInitialSegment = true;\r\n\r\n\t\tvar segment = this.getNewSegment();\r\n\t\tsegment.iteration = 0;\r\n\t\tsegment.pos0.copy( subray.pos0 );\r\n\t\tsegment.pos1.copy( subray.pos1 );\r\n\t\tsegment.linPos0.copy( subray.linPos0 );\r\n\t\tsegment.linPos1.copy( subray.linPos1 );\r\n\t\tsegment.up0.copy( subray.up0 );\r\n\t\tsegment.up1.copy( subray.up1 );\r\n\t\tsegment.radius0 = subray.radius0;\r\n\t\tsegment.radius1 = subray.radius1;\r\n\t\tsegment.fraction0 = 0;\r\n\t\tsegment.fraction1 = 1;\r\n\t\tsegment.positionVariationFactor = 1 - subray.straightness;\r\n\r\n\t\tthis.subrayProbability = this.ramification * Math.pow( this.recursionProbability, subray.recursion ) / ( 1 << subray.maxIterations );\r\n\r\n\t\tthis.fractalRayRecursive( segment );\r\n\r\n\t}\r\n\r\n\tthis.currentSegmentCallback = null;\r\n\tthis.currentSubray = null;\r\n\r\n};\r\n\r\nLightningStrike.prototype.fractalRayRecursive = function ( segment ) {\r\n\r\n\t// Leave recursion condition\r\n\tif ( segment.iteration >= this.currentSubray.maxIterations ) {\r\n\r\n\t\tthis.currentSegmentCallback( segment );\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// Interpolation\r\n\tthis.forwards.subVectors( segment.pos1, segment.pos0 );\r\n\tvar lForwards = this.forwards.length();\r\n\r\n\tif ( lForwards < 0.000001 ) {\r\n\r\n\t\tthis.forwards.set( 0, 0, 0.01 );\r\n\t\tlForwards = this.forwards.length();\r\n\r\n\t}\r\n\r\n\tvar middleRadius = ( segment.radius0 + segment.radius1 ) * 0.5;\r\n\tvar middleFraction = ( segment.fraction0 + segment.fraction1 ) * 0.5;\r\n\r\n\tvar timeDimension = this.time * this.currentSubray.timeScale * Math.pow( 2, segment.iteration );\r\n\r\n\tthis.middlePos.lerpVectors( segment.pos0, segment.pos1, 0.5 );\r\n\tthis.middleLinPos.lerpVectors( segment.linPos0, segment.linPos1, 0.5 );\r\n\tvar p = this.middleLinPos;\r\n\r\n\t// Noise\r\n\tthis.newPos.set( this.simplexX.noise4d( p.x, p.y, p.z, timeDimension ),\r\n\t\tthis.simplexY.noise4d( p.x, p.y, p.z, timeDimension ),\r\n\t\tthis.simplexZ.noise4d( p.x, p.y, p.z, timeDimension ) );\r\n\r\n\tthis.newPos.multiplyScalar( segment.positionVariationFactor * lForwards );\r\n\tthis.newPos.add( this.middlePos );\r\n\r\n\t// Recursion\r\n\r\n\tvar newSegment1 = this.getNewSegment();\r\n\tnewSegment1.pos0.copy( segment.pos0 );\r\n\tnewSegment1.pos1.copy( this.newPos );\r\n\tnewSegment1.linPos0.copy( segment.linPos0 );\r\n\tnewSegment1.linPos1.copy( this.middleLinPos );\r\n\tnewSegment1.up0.copy( segment.up0 );\r\n\tnewSegment1.up1.copy( segment.up1 );\r\n\tnewSegment1.radius0 = segment.radius0;\r\n\tnewSegment1.radius1 = middleRadius;\r\n\tnewSegment1.fraction0 = segment.fraction0;\r\n\tnewSegment1.fraction1 = middleFraction;\r\n\tnewSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\r\n\tnewSegment1.iteration = segment.iteration + 1;\r\n\r\n\tvar newSegment2 = this.getNewSegment();\r\n\tnewSegment2.pos0.copy( this.newPos );\r\n\tnewSegment2.pos1.copy( segment.pos1 );\r\n\tnewSegment2.linPos0.copy( this.middleLinPos );\r\n\tnewSegment2.linPos1.copy( segment.linPos1 );\r\n\tthis.cross1.crossVectors( segment.up0, this.forwards.normalize() );\r\n\tnewSegment2.up0.crossVectors( this.forwards, this.cross1 ).normalize();\r\n\tnewSegment2.up1.copy( segment.up1 );\r\n\tnewSegment2.radius0 = middleRadius;\r\n\tnewSegment2.radius1 = segment.radius1;\r\n\tnewSegment2.fraction0 = middleFraction;\r\n\tnewSegment2.fraction1 = segment.fraction1;\r\n\tnewSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\r\n\tnewSegment2.iteration = segment.iteration + 1;\r\n\r\n\tthis.fractalRayRecursive( newSegment1 );\r\n\r\n\tthis.fractalRayRecursive( newSegment2 );\r\n\r\n};\r\n\r\nLightningStrike.prototype.createPrism = function ( segment ) {\r\n\r\n\t// Creates one triangular prism and its vertices at the segment\r\n\r\n\tthis.forwardsFill.subVectors( segment.pos1, segment.pos0 ).normalize();\r\n\r\n\tif ( this.isInitialSegment ) {\r\n\r\n\t\tthis.currentCreateTriangleVertices( segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0 );\r\n\r\n\t\tthis.isInitialSegment = false;\r\n\r\n\t}\r\n\r\n\tthis.currentCreateTriangleVertices( segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1 );\r\n\r\n\tthis.createPrismFaces();\r\n\r\n};\r\n\r\nLightningStrike.prototype.createTriangleVerticesWithoutUVs = function ( pos, up, forwards, radius ) {\r\n\r\n\t// Create an equilateral triangle (only vertices)\r\n\r\n\tthis.side.crossVectors( up, forwards ).multiplyScalar( radius * LightningStrike.COS30DEG );\r\n\tthis.down.copy( up ).multiplyScalar( - radius * LightningStrike.SIN30DEG );\r\n\r\n\tvar p = this.vPos;\r\n\tvar v = this.vertices;\r\n\r\n\tp.copy( pos ).sub( this.side ).add( this.down );\r\n\r\n\tv[ this.currentCoordinate ++ ] = p.x;\r\n\tv[ this.currentCoordinate ++ ] = p.y;\r\n\tv[ this.currentCoordinate ++ ] = p.z;\r\n\r\n\tp.copy( pos ).add( this.side ).add( this.down );\r\n\r\n\tv[ this.currentCoordinate ++ ] = p.x;\r\n\tv[ this.currentCoordinate ++ ] = p.y;\r\n\tv[ this.currentCoordinate ++ ] = p.z;\r\n\r\n\tp.copy( up ).multiplyScalar( radius ).add( pos );\r\n\r\n\tv[ this.currentCoordinate ++ ] = p.x;\r\n\tv[ this.currentCoordinate ++ ] = p.y;\r\n\tv[ this.currentCoordinate ++ ] = p.z;\r\n\r\n\tthis.currentVertex += 3;\r\n\r\n};\r\n\r\nLightningStrike.prototype.createTriangleVerticesWithUVs = function ( pos, up, forwards, radius, u ) {\r\n\r\n\t// Create an equilateral triangle (only vertices)\r\n\r\n\tthis.side.crossVectors( up, forwards ).multiplyScalar( radius * LightningStrike.COS30DEG );\r\n\tthis.down.copy( up ).multiplyScalar( - radius * LightningStrike.SIN30DEG );\r\n\r\n\tvar p = this.vPos;\r\n\tvar v = this.vertices;\r\n\tvar uv = this.uvs;\r\n\r\n\tp.copy( pos ).sub( this.side ).add( this.down );\r\n\r\n\tv[ this.currentCoordinate ++ ] = p.x;\r\n\tv[ this.currentCoordinate ++ ] = p.y;\r\n\tv[ this.currentCoordinate ++ ] = p.z;\r\n\r\n\tuv[ this.currentUVCoordinate ++ ] = u;\r\n\tuv[ this.currentUVCoordinate ++ ] = 0;\r\n\r\n\tp.copy( pos ).add( this.side ).add( this.down );\r\n\r\n\tv[ this.currentCoordinate ++ ] = p.x;\r\n\tv[ this.currentCoordinate ++ ] = p.y;\r\n\tv[ this.currentCoordinate ++ ] = p.z;\r\n\r\n\tuv[ this.currentUVCoordinate ++ ] = u;\r\n\tuv[ this.currentUVCoordinate ++ ] = 0.5;\r\n\r\n\tp.copy( up ).multiplyScalar( radius ).add( pos );\r\n\r\n\tv[ this.currentCoordinate ++ ] = p.x;\r\n\tv[ this.currentCoordinate ++ ] = p.y;\r\n\tv[ this.currentCoordinate ++ ] = p.z;\r\n\r\n\tuv[ this.currentUVCoordinate ++ ] = u;\r\n\tuv[ this.currentUVCoordinate ++ ] = 1;\r\n\r\n\tthis.currentVertex += 3;\r\n\r\n};\r\n\r\nLightningStrike.prototype.createPrismFaces = function ( vertex/*, index*/ ) {\r\n\r\n\tvar indices = this.indices;\r\n\tvar vertex = this.currentVertex - 6;\r\n\r\n\tindices[ this.currentIndex ++ ] = vertex + 1;\r\n\tindices[ this.currentIndex ++ ] = vertex + 2;\r\n\tindices[ this.currentIndex ++ ] = vertex + 5;\r\n\tindices[ this.currentIndex ++ ] = vertex + 1;\r\n\tindices[ this.currentIndex ++ ] = vertex + 5;\r\n\tindices[ this.currentIndex ++ ] = vertex + 4;\r\n\tindices[ this.currentIndex ++ ] = vertex + 0;\r\n\tindices[ this.currentIndex ++ ] = vertex + 1;\r\n\tindices[ this.currentIndex ++ ] = vertex + 4;\r\n\tindices[ this.currentIndex ++ ] = vertex + 0;\r\n\tindices[ this.currentIndex ++ ] = vertex + 4;\r\n\tindices[ this.currentIndex ++ ] = vertex + 3;\r\n\tindices[ this.currentIndex ++ ] = vertex + 2;\r\n\tindices[ this.currentIndex ++ ] = vertex + 0;\r\n\tindices[ this.currentIndex ++ ] = vertex + 3;\r\n\tindices[ this.currentIndex ++ ] = vertex + 2;\r\n\tindices[ this.currentIndex ++ ] = vertex + 3;\r\n\tindices[ this.currentIndex ++ ] = vertex + 5;\r\n\r\n};\r\n\r\nLightningStrike.prototype.createDefaultSubrayCreationCallbacks = function () {\r\n\r\n\tvar random1 = this.randomGenerator.random;\r\n\r\n\tthis.onDecideSubrayCreation = function ( segment, lightningStrike ) {\r\n\r\n\t\t// Decide subrays creation at parent (sub)ray segment\r\n\r\n\t\tvar subray = lightningStrike.currentSubray;\r\n\r\n\t\tvar period = lightningStrike.rayParameters.subrayPeriod;\r\n\t\tvar dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\r\n\r\n\t\tvar phase0 = ( lightningStrike.rayParameters.isEternal && subray.recursion == 0 ) ? - random1() * period : MathUtils.lerp( subray.birthTime, subray.endPropagationTime, segment.fraction0 ) - random1() * period;\r\n\r\n\t\tvar phase = lightningStrike.time - phase0;\r\n\t\tvar currentCycle = Math.floor( phase / period );\r\n\r\n\t\tvar childSubraySeed = random1() * ( currentCycle + 1 );\r\n\r\n\t\tvar isActive = phase % period <= dutyCycle * period;\r\n\r\n\t\tvar probability = 0;\r\n\r\n\t\tif ( isActive ) {\r\n\r\n\t\t\tprobability = lightningStrike.subrayProbability;\r\n\t\t\t// Distribution test: probability *= segment.fraction0 > 0.5 && segment.fraction0 < 0.9 ? 1 / 0.4 : 0;\r\n\r\n\t\t}\r\n\r\n\t\tif ( subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability ) {\r\n\r\n\t\t\tvar childSubray = lightningStrike.addNewSubray();\r\n\r\n\t\t\tvar parentSeed = lightningStrike.randomGenerator.getSeed();\r\n\t\t\tchildSubray.seed = childSubraySeed;\r\n\t\t\tlightningStrike.randomGenerator.setSeed( childSubraySeed );\r\n\r\n\t\t\tchildSubray.recursion = subray.recursion + 1;\r\n\t\t\tchildSubray.maxIterations = Math.max( 1, subray.maxIterations - 1 );\r\n\r\n\t\t\tchildSubray.linPos0.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\r\n\t\t\tchildSubray.linPos1.set( random1(), random1(), random1() ).multiplyScalar( 1000 );\r\n\t\t\tchildSubray.up0.copy( subray.up0 );\r\n\t\t\tchildSubray.up1.copy( subray.up1 );\r\n\t\t\tchildSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\r\n\t\t\tchildSubray.radius1 = Math.min( lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor );\r\n\r\n\t\t\tchildSubray.birthTime = phase0 + ( currentCycle ) * period;\r\n\t\t\tchildSubray.deathTime = childSubray.birthTime + period * dutyCycle;\r\n\r\n\t\t\tif ( ! lightningStrike.rayParameters.isEternal && subray.recursion == 0 ) {\r\n\r\n\t\t\t\tchildSubray.birthTime = Math.max( childSubray.birthTime, subray.birthTime );\r\n\t\t\t\tchildSubray.deathTime = Math.min( childSubray.deathTime, subray.deathTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tchildSubray.timeScale = subray.timeScale * 2;\r\n\t\t\tchildSubray.roughness = subray.roughness;\r\n\t\t\tchildSubray.straightness = subray.straightness;\r\n\t\t\tchildSubray.propagationTimeFactor = subray.propagationTimeFactor;\r\n\t\t\tchildSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\r\n\r\n\t\t\tlightningStrike.onSubrayCreation( segment, subray, childSubray, lightningStrike );\r\n\r\n\t\t\tlightningStrike.randomGenerator.setSeed( parentSeed );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar vec1Pos = new Vector3();\r\n\tvar vec2Forward = new Vector3();\r\n\tvar vec3Side = new Vector3();\r\n\tvar vec4Up = new Vector3();\r\n\r\n\tthis.onSubrayCreation = function ( segment, parentSubray, childSubray, lightningStrike ) {\r\n\r\n\t\t// Decide childSubray origin and destination positions (pos0 and pos1) and possibly other properties of childSubray\r\n\r\n\t\t// Just use the default cone position generator\r\n\t\tlightningStrike.subrayCylinderPosition( segment, parentSubray, childSubray, 0.5, 0.6, 0.2 );\r\n\r\n\t};\r\n\r\n\tthis.subrayConePosition = function ( segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor ) {\r\n\r\n\t\t// Sets childSubray pos0 and pos1 in a cone\r\n\r\n\t\tchildSubray.pos0.copy( segment.pos0 );\r\n\r\n\t\tvec1Pos.subVectors( parentSubray.pos1, parentSubray.pos0 );\r\n\t\tvec2Forward.copy( vec1Pos ).normalize();\r\n\t\tvec1Pos.multiplyScalar( segment.fraction0 + ( 1 - segment.fraction0 ) * ( random1() * heightFactor ) );\r\n\t\tvar length = vec1Pos.length();\r\n\t\tvec3Side.crossVectors( parentSubray.up0, vec2Forward );\r\n\t\tvar angle = 2 * Math.PI * random1();\r\n\t\tvec3Side.multiplyScalar( Math.cos( angle ) );\r\n\t\tvec4Up.copy( parentSubray.up0 ).multiplyScalar( Math.sin( angle ) );\r\n\r\n\t\tchildSubray.pos1.copy( vec3Side ).add( vec4Up ).multiplyScalar( length * sideWidthFactor * ( minSideWidthFactor + random1() * ( 1 - minSideWidthFactor ) ) ).add( vec1Pos ).add( parentSubray.pos0 );\r\n\r\n\t};\r\n\r\n\tthis.subrayCylinderPosition = function ( segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor ) {\r\n\r\n\t\t// Sets childSubray pos0 and pos1 in a cylinder\r\n\r\n\t\tchildSubray.pos0.copy( segment.pos0 );\r\n\r\n\t\tvec1Pos.subVectors( parentSubray.pos1, parentSubray.pos0 );\r\n\t\tvec2Forward.copy( vec1Pos ).normalize();\r\n\t\tvec1Pos.multiplyScalar( segment.fraction0 + ( 1 - segment.fraction0 ) * ( ( 2 * random1() - 1 ) * heightFactor ) );\r\n\t\tvar length = vec1Pos.length();\r\n\t\tvec3Side.crossVectors( parentSubray.up0, vec2Forward );\r\n\t\tvar angle = 2 * Math.PI * random1();\r\n\t\tvec3Side.multiplyScalar( Math.cos( angle ) );\r\n\t\tvec4Up.copy( parentSubray.up0 ).multiplyScalar( Math.sin( angle ) );\r\n\r\n\t\tchildSubray.pos1.copy( vec3Side ).add( vec4Up ).multiplyScalar( length * sideWidthFactor * ( minSideWidthFactor + random1() * ( 1 - minSideWidthFactor ) ) ).add( vec1Pos ).add( parentSubray.pos0 );\r\n\r\n\t};\r\n\r\n};\r\n\r\nLightningStrike.prototype.createSubray = function () {\r\n\r\n\treturn {\r\n\r\n\t\tseed: 0,\r\n\t\tmaxIterations: 0,\r\n\t\trecursion: 0,\r\n\t\tpos0: new Vector3(),\r\n\t\tpos1: new Vector3(),\r\n\t\tlinPos0: new Vector3(),\r\n\t\tlinPos1: new Vector3(),\r\n\t\tup0: new Vector3(),\r\n\t\tup1: new Vector3(),\r\n\t\tradius0: 0,\r\n\t\tradius1: 0,\r\n\t\tbirthTime: 0,\r\n\t\tdeathTime: 0,\r\n\t\ttimeScale: 0,\r\n\t\troughness: 0,\r\n\t\tstraightness: 0,\r\n\t\tpropagationTimeFactor: 0,\r\n\t\tvanishingTimeFactor: 0,\r\n\t\tendPropagationTime: 0,\r\n\t\tbeginVanishingTime: 0\r\n\r\n\t};\r\n\r\n};\r\n\r\nLightningStrike.prototype.createSegment = function () {\r\n\r\n\treturn {\r\n\t\titeration: 0,\r\n\t\tpos0: new Vector3(),\r\n\t\tpos1: new Vector3(),\r\n\t\tlinPos0: new Vector3(),\r\n\t\tlinPos1: new Vector3(),\r\n\t\tup0: new Vector3(),\r\n\t\tup1: new Vector3(),\r\n\t\tradius0: 0,\r\n\t\tradius1: 0,\r\n\t\tfraction0: 0,\r\n\t\tfraction1: 0,\r\n\t\tpositionVariationFactor: 0\r\n\t};\r\n\r\n};\r\n\r\nLightningStrike.prototype.getNewSegment = function () {\r\n\r\n\treturn this.raySegments[ this.currentSegmentIndex ++ ];\r\n\r\n};\r\n\r\nLightningStrike.prototype.copy = function ( source ) {\r\n\r\n\tBufferGeometry.prototype.copy.call( this, source );\r\n\r\n\tthis.init( LightningStrike.copyParameters( {}, source.rayParameters ) );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nLightningStrike.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( LightningStrike.copyParameters( {}, this.rayParameters ) );\r\n\r\n};\r\n\r\nexport { LightningStrike };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/geometries/LightningStrike.js","import {\r\n\tMathUtils,\r\n\tMesh,\r\n\tMeshBasicMaterial,\r\n\tObject3D\r\n} from \"@/components/build/three.module.js\";\r\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\r\n\r\n/**\r\n * @fileoverview Lightning strike object generator\r\n *\r\n *\r\n * Usage\r\n *\r\n * var myStorm = new LightningStorm( paramsObject );\r\n * myStorm.position.set( ... );\r\n * scene.add( myStorm );\r\n * ...\r\n * myStorm.update( currentTime );\r\n *\r\n * The \"currentTime\" can only go forwards or be stopped.\r\n *\r\n *\r\n * LightningStorm parameters:\r\n *\r\n * @param {double} size Size of the storm. If no 'onRayPosition' parameter is defined, it means the side of the rectangle the storm covers.\r\n *\r\n * @param {double} minHeight Minimum height a ray can start at. If no 'onRayPosition' parameter is defined, it means the height above plane y = 0.\r\n *\r\n * @param {double} maxHeight Maximum height a ray can start at. If no 'onRayPosition' parameter is defined, it means the height above plane y = 0.\r\n *\r\n * @param {double} maxSlope The maximum inclination slope of a ray. If no 'onRayPosition' parameter is defined, it means the slope relative to plane y = 0.\r\n *\r\n * @param {integer} maxLightnings Greater than 0. The maximum number of simultaneous rays.\r\n *\r\n * @param {double} lightningMinPeriod minimum time between two consecutive rays.\r\n *\r\n * @param {double} lightningMaxPeriod maximum time between two consecutive rays.\r\n *\r\n * @param {double} lightningMinDuration The minimum time a ray can last.\r\n *\r\n * @param {double} lightningMaxDuration The maximum time a ray can last.\r\n *\r\n * @param {Object} lightningParameters The parameters for created rays. See LightningStrike (geometry)\r\n *\r\n * @param {Material} lightningMaterial The THREE.Material used for the created rays.\r\n *\r\n * @param {function} onRayPosition Optional callback with two Vector3 parameters (source, dest). You can set here the start and end points for each created ray, using the standard size, minHeight, etc parameters and other values in your algorithm.\r\n *\r\n * @param {function} onLightningDown This optional callback is called with one parameter (lightningStrike) when a ray ends propagating, so it has hit the ground.\r\n *\r\n *\r\n*/\r\n\r\nvar LightningStorm = function ( stormParams ) {\r\n\r\n\tObject3D.call( this );\r\n\r\n\t// Parameters\r\n\r\n\tstormParams = stormParams || {};\r\n\tthis.stormParams = stormParams;\r\n\r\n\tstormParams.size = stormParams.size !== undefined ? stormParams.size : 1000.0;\r\n\tstormParams.minHeight = stormParams.minHeight !== undefined ? stormParams.minHeight : 80.0;\r\n\tstormParams.maxHeight = stormParams.maxHeight !== undefined ? stormParams.maxHeight : 100.0;\r\n\tstormParams.maxSlope = stormParams.maxSlope !== undefined ? stormParams.maxSlope : 1.1;\r\n\r\n\tstormParams.maxLightnings = stormParams.maxLightnings !== undefined ? stormParams.maxLightnings : 3;\r\n\r\n\tstormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== undefined ? stormParams.lightningMinPeriod : 3.0;\r\n\tstormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== undefined ? stormParams.lightningMaxPeriod : 7.0;\r\n\r\n\tstormParams.lightningMinDuration = stormParams.lightningMinDuration !== undefined ? stormParams.lightningMinDuration : 1.0;\r\n\tstormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== undefined ? stormParams.lightningMaxDuration : 2.5;\r\n\r\n\tthis.lightningParameters = LightningStrike.copyParameters( stormParams.lightningParameters, stormParams.lightningParameters );\r\n\r\n\tthis.lightningParameters.isEternal = false;\r\n\r\n\tthis.lightningMaterial = stormParams.lightningMaterial !== undefined ? stormParams.lightningMaterial : new MeshBasicMaterial( { color: 0xB0FFFF } );\r\n\r\n\tif ( stormParams.onRayPosition !== undefined ) {\r\n\r\n\t\tthis.onRayPosition = stormParams.onRayPosition;\r\n\r\n\t} else {\r\n\r\n\t\tthis.onRayPosition = function ( source, dest ) {\r\n\r\n\t\t\tdest.set( ( Math.random() - 0.5 ) * stormParams.size, 0, ( Math.random() - 0.5 ) * stormParams.size );\r\n\r\n\t\t\tvar height = MathUtils.lerp( stormParams.minHeight, stormParams.maxHeight, Math.random() );\r\n\r\n\t\t\tsource.set( stormParams.maxSlope * ( 2 * Math.random() - 1 ), 1, stormParams.maxSlope * ( 2 * Math.random() - 1 ) ).multiplyScalar( height ).add( dest );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tthis.onLightningDown = stormParams.onLightningDown;\r\n\r\n\t// Internal state\r\n\r\n\tthis.inited = false;\r\n\tthis.nextLightningTime = 0;\r\n\tthis.lightningsMeshes = [];\r\n\tthis.deadLightningsMeshes = [];\r\n\r\n\tfor ( var i = 0; i < this.stormParams.maxLightnings; i ++ ) {\r\n\r\n\t\tvar lightning = new LightningStrike( LightningStrike.copyParameters( {}, this.lightningParameters ) );\r\n\t\tvar mesh = new Mesh( lightning, this.lightningMaterial );\r\n\t\tthis.deadLightningsMeshes.push( mesh );\r\n\r\n\t}\r\n\r\n};\r\n\r\nLightningStorm.prototype = Object.create( Object3D.prototype );\r\n\r\nLightningStorm.prototype.constructor = LightningStorm;\r\n\r\nLightningStorm.prototype.isLightningStorm = true;\r\n\r\nLightningStorm.prototype.update = function ( time ) {\r\n\r\n\tif ( ! this.inited ) {\r\n\r\n\t\tthis.nextLightningTime = this.getNextLightningTime( time ) * Math.random();\r\n\t\tthis.inited = true;\r\n\r\n\t}\r\n\r\n\tif ( time >= this.nextLightningTime ) {\r\n\r\n\t\t// Lightning creation\r\n\r\n\t\tvar lightningMesh = this.deadLightningsMeshes.pop();\r\n\r\n\t\tif ( lightningMesh ) {\r\n\r\n\t\t\tvar lightningParams1 = LightningStrike.copyParameters( lightningMesh.geometry.rayParameters, this.lightningParameters );\r\n\r\n\t\t\tlightningParams1.birthTime = time;\r\n\t\t\tlightningParams1.deathTime = time + MathUtils.lerp( this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random() );\r\n\r\n\t\t\tthis.onRayPosition( lightningParams1.sourceOffset, lightningParams1.destOffset );\r\n\r\n\t\t\tlightningParams1.noiseSeed = Math.random();\r\n\r\n\t\t\tthis.add( lightningMesh );\r\n\r\n\t\t\tthis.lightningsMeshes.push( lightningMesh );\r\n\r\n\t\t}\r\n\r\n\t\t// Schedule next lightning\r\n\t\tthis.nextLightningTime = this.getNextLightningTime( time );\r\n\r\n\t}\r\n\r\n\tvar i = 0, il = this.lightningsMeshes.length;\r\n\r\n\twhile ( i < il ) {\r\n\r\n\t\tvar mesh = this.lightningsMeshes[ i ];\r\n\r\n\t\tvar lightning = mesh.geometry;\r\n\r\n\t\tvar prevState = lightning.state;\r\n\r\n\t\tlightning.update( time );\r\n\r\n\t\tif ( prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState ) {\r\n\r\n\t\t\tif ( this.onLightningDown ) {\r\n\r\n\t\t\t\tthis.onLightningDown( lightning );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( lightning.state === LightningStrike.RAY_EXTINGUISHED ) {\r\n\r\n\t\t\t// Lightning is to be destroyed\r\n\r\n\t\t\tthis.lightningsMeshes.splice( this.lightningsMeshes.indexOf( mesh ), 1 );\r\n\r\n\t\t\tthis.deadLightningsMeshes.push( mesh );\r\n\r\n\t\t\tthis.remove( mesh );\r\n\r\n\t\t\til --;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nLightningStorm.prototype.getNextLightningTime = function ( currentTime ) {\r\n\r\n\treturn currentTime + MathUtils.lerp( this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random() ) / ( this.stormParams.maxLightnings + 1 );\r\n\r\n};\r\n\r\nLightningStorm.prototype.copy = function ( source ) {\r\n\r\n\tObject3D.prototype.copy.call( this, source );\r\n\r\n\tthis.stormParams.size = source.stormParams.size;\r\n\tthis.stormParams.minHeight = source.stormParams.minHeight;\r\n\tthis.stormParams.maxHeight = source.stormParams.maxHeight;\r\n\tthis.stormParams.maxSlope = source.stormParams.maxSlope;\r\n\r\n\tthis.stormParams.maxLightnings = source.stormParams.maxLightnings;\r\n\r\n\tthis.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\r\n\tthis.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\r\n\r\n\tthis.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\r\n\tthis.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\r\n\r\n\tthis.lightningParameters = LightningStrike.copyParameters( {}, source.lightningParameters );\r\n\r\n\tthis.lightningMaterial = source.stormParams.lightningMaterial;\r\n\r\n\tthis.onLightningDown = source.onLightningDown;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nLightningStrike.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.stormParams ).copy( this );\r\n\r\n};\r\n\r\nexport { LightningStorm };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/LightningStorm.js","<template>\r\n    <div class=\"webglLightningstrike-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\"><a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl - lightning strike</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { LightningStrike } from '@/components/jsm/geometries/LightningStrike.js'\r\nimport { LightningStorm } from '@/components/jsm/objects/LightningStorm.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { OutlinePass } from '@/components/jsm/postprocessing/OutlinePass.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            scene: null,\r\n            renderer: null,\r\n            composer: null,\r\n            gui: null,\r\n\t\t\tcurrentSceneIndex: 0,\r\n\t\t\tcurrentTime: 0,\r\n\t\t\tsceneCreators: null,\r\n\t\t\tclock: null,\r\n\t\t\traycaster: null,\r\n\t\t\tmouse: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.sceneCreators = [\r\n            this.createConesScene,\r\n            this.createPlasmaBallScene,\r\n            this.createStormScene\r\n        ]\r\n        this.clock = new this.$THREE.Clock()\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById('container')\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.composer = new EffectComposer(this.renderer)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.createScene()\r\n        },\r\n        createScene() {\r\n            this.scene = this.sceneCreators[this.currentSceneIndex]()\r\n            this.createGUI()\r\n        },\r\n        onWindowResize() {\r\n            this.scene.userData.camera.aspect = (window.innerWidth - 281) / window.innerHeight\r\n            this.scene.userData.camera.updateProjectionMatrix()\r\n            this.renderer.setSize((window.innerWidth - 281), window.innerHeight)\r\n            this.composer.setSize((window.innerWidth - 281), window.innerHeight)\r\n        },\r\n        createGUI() {\r\n            if (this.gui) {\r\n                this.gui.destroy()\r\n            }\r\n            this.gui = new GUI({ width: 350 })\r\n            var sceneFolder = this.gui.addFolder(\"Scene\")\r\n            this.scene.userData.sceneIndex = this.currentSceneIndex\r\n            sceneFolder.add(this.scene.userData, 'sceneIndex', { \"Electric Cones\": 0, \"Plasma Ball\": 1, \"Storm\": 2 }).name('Scene').onChange((value) => {\r\n                this.currentSceneIndex = value\r\n                this.createScene()\r\n            })\r\n            this.scene.userData.timeRate = 1\r\n            sceneFolder.add(this.scene.userData, 'timeRate', this.scene.userData.canGoBackwardsInTime ? - 1 : 0, 1).name('Time rate')\r\n            sceneFolder.open()\r\n            var graphicsFolder = this.gui.addFolder(\"Graphics\")\r\n            graphicsFolder.add(this.scene.userData, \"outlineEnabled\").name(\"Glow enabled\")\r\n            this.scene.userData.lightningColorRGB = [\r\n                this.scene.userData.lightningColor.r * 255,\r\n                this.scene.userData.lightningColor.g * 255,\r\n                this.scene.userData.lightningColor.b * 255\r\n            ]\r\n            graphicsFolder.addColor(this.scene.userData, 'lightningColorRGB').name('Color').onChange((value) => {\r\n                this.scene.userData.lightningMaterial.color.setRGB(value[0], value[1], value[2]).multiplyScalar(1 / 255)\r\n            })\r\n            this.scene.userData.outlineColorRGB = [\r\n                this.scene.userData.outlineColor.r * 255,\r\n                this.scene.userData.outlineColor.g * 255,\r\n                this.scene.userData.outlineColor.b * 255\r\n            ]\r\n            graphicsFolder.addColor(this.scene.userData, 'outlineColorRGB').name('Glow color').onChange((value) => {\r\n                this.scene.userData.outlineColor.setRGB(value[0], value[1], value[2]).multiplyScalar(1 / 255)\r\n            })\r\n            graphicsFolder.open()\r\n            var rayFolder = this.gui.addFolder(\"Ray parameters\")\r\n            rayFolder.add(this.scene.userData.rayParams, 'straightness', 0, 1).name('Straightness')\r\n            rayFolder.add(this.scene.userData.rayParams, 'roughness', 0, 1).name('Roughness')\r\n            rayFolder.add(this.scene.userData.rayParams, 'radius0', 0.1, 10).name('Initial radius')\r\n            rayFolder.add(this.scene.userData.rayParams, 'radius1', 0.1, 10).name('Final radius')\r\n            rayFolder.add(this.scene.userData.rayParams, 'radius0Factor', 0, 1).name('Subray initial radius')\r\n            rayFolder.add(this.scene.userData.rayParams, 'radius1Factor', 0, 1).name('Subray final radius')\r\n            rayFolder.add(this.scene.userData.rayParams, 'timeScale', 0, 5).name('Ray time scale')\r\n            rayFolder.add(this.scene.userData.rayParams, 'subrayPeriod', 0.1, 10).name('Subray period (s)')\r\n            rayFolder.add(this.scene.userData.rayParams, 'subrayDutyCycle', 0, 1).name('Subray duty cycle')\r\n            if (this.scene.userData.recreateRay) {\r\n                // Parameters which need to recreate the ray after modification\r\n                var raySlowFolder = this.gui.addFolder(\"Ray parameters (slow)\")\r\n                raySlowFolder.add(this.scene.userData.rayParams, 'ramification', 0, 15).step(1).name('Ramification').onFinishChange(() => {\r\n                    this.scene.userData.recreateRay()\r\n                })\r\n                raySlowFolder.add(this.scene.userData.rayParams, 'maxSubrayRecursion', 0, 5).step(1).name('Recursion').onFinishChange(() => {\r\n                    this.scene.userData.recreateRay()\r\n                })\r\n                raySlowFolder.add(this.scene.userData.rayParams, 'recursionProbability', 0, 1).name('Rec. probability').onFinishChange(() => {\r\n                    this.scene.userData.recreateRay()\r\n                })\r\n                raySlowFolder.open()\r\n            }\r\n            rayFolder.open()\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            this.currentTime += this.scene.userData.timeRate * this.clock.getDelta()\r\n            if (this.currentTime < 0) {\r\n                this.currentTime = 0\r\n            }\r\n            this.scene.userData.render(this.currentTime)\r\n        },\r\n        createOutline(scene, objectsArray, visibleColor) {\r\n            var outlinePass = new OutlinePass(new this.$THREE.Vector2(this.$webglInnerWidth, window.innerHeight), scene, scene.userData.camera, objectsArray)\r\n            outlinePass.edgeStrength = 2.5\r\n            outlinePass.edgeGlow = 0.7\r\n            outlinePass.edgeThickness = 2.8\r\n            outlinePass.visibleEdgeColor = visibleColor\r\n            outlinePass.hiddenEdgeColor.set(0)\r\n            this.composer.addPass(outlinePass)\r\n            scene.userData.outlineEnabled = true\r\n            return outlinePass\r\n        },\r\n        createConesScene() {\r\n            var scene = new this.$THREE.Scene()\r\n            scene.background = new this.$THREE.Color(0x050505)\r\n            scene.userData.canGoBackwardsInTime = true\r\n            scene.userData.camera = new this.$THREE.PerspectiveCamera(27, this.$webglInnerWidth / window.innerHeight, 200, 100000)\r\n            // Lights\r\n            scene.userData.lightningColor = new this.$THREE.Color(0xB0FFFF)\r\n            scene.userData.outlineColor = new this.$THREE.Color(0x00FFFF)\r\n            var posLight = new this.$THREE.PointLight(0x00ffff, 1, 5000, 2)\r\n            scene.add(posLight)\r\n            // Ground\r\n            var ground = new this.$THREE.Mesh(new this.$THREE.PlaneBufferGeometry(200000, 200000), new this.$THREE.MeshPhongMaterial({ color: 0xC0C0C0, shininess: 0 }))\r\n            ground.rotation.x = - Math.PI * 0.5\r\n            scene.add(ground)\r\n            // Cones\r\n            var conesDistance = 1000\r\n            var coneHeight = 200\r\n            var coneHeightHalf = coneHeight * 0.5\r\n            posLight.position.set(0, (conesDistance + coneHeight) * 0.5, 0)\r\n            posLight.color = scene.userData.outlineColor\r\n            scene.userData.camera.position.set(5 * coneHeight, 4 * coneHeight, 18 * coneHeight)\r\n            var coneMesh1 = new this.$THREE.Mesh(new this.$THREE.ConeBufferGeometry(coneHeight, coneHeight, 30, 1, false), new this.$THREE.MeshPhongMaterial({ color: 0xFFFF00, emissive: 0x1F1F00 }))\r\n            coneMesh1.rotation.x = Math.PI\r\n            coneMesh1.position.y = conesDistance + coneHeight\r\n            scene.add(coneMesh1)\r\n            var coneMesh2 = new this.$THREE.Mesh(coneMesh1.geometry.clone(), new this.$THREE.MeshPhongMaterial({ color: 0xFF2020, emissive: 0x1F0202 }))\r\n            coneMesh2.position.y = coneHeightHalf\r\n            scene.add(coneMesh2)\r\n            // Lightning strike\r\n            scene.userData.lightningMaterial = new this.$THREE.MeshBasicMaterial({ color: scene.userData.lightningColor })\r\n            scene.userData.rayParams = {\r\n                sourceOffset: new this.$THREE.Vector3(),\r\n                destOffset: new this.$THREE.Vector3(),\r\n                radius0: 4,\r\n                radius1: 4,\r\n                minRadius: 2.5,\r\n                maxIterations: 7,\r\n                isEternal: true,\r\n                timeScale: 0.7,\r\n                propagationTimeFactor: 0.05,\r\n                vanishingTimeFactor: 0.95,\r\n                subrayPeriod: 3.5,\r\n                subrayDutyCycle: 0.6,\r\n                maxSubrayRecursion: 3,\r\n                ramification: 7,\r\n                recursionProbability: 0.6,\r\n                roughness: 0.85,\r\n                straightness: 0.6\r\n            }\r\n            var lightningStrike\r\n            var lightningStrikeMesh\r\n            var outlineMeshArray = []\r\n            var that = this\r\n            scene.userData.recreateRay = function () {\r\n                if (lightningStrikeMesh) {\r\n                    scene.remove(lightningStrikeMesh)\r\n                }\r\n                lightningStrike = new LightningStrike(scene.userData.rayParams)\r\n                lightningStrikeMesh = new that.$THREE.Mesh(lightningStrike, scene.userData.lightningMaterial)\r\n                outlineMeshArray.length = 0\r\n                outlineMeshArray.push(lightningStrikeMesh)\r\n                scene.add(lightningStrikeMesh)\r\n            }\r\n            scene.userData.recreateRay()\r\n            // Compose rendering\r\n            this.composer.passes = []\r\n            this.composer.addPass(new RenderPass(scene, scene.userData.camera))\r\n            this.createOutline(scene, outlineMeshArray, scene.userData.outlineColor)\r\n            // Controls\r\n            var controls = new OrbitControls(scene.userData.camera, this.renderer.domElement)\r\n            controls.target.y = (conesDistance + coneHeight) * 0.5\r\n            controls.enableDamping = true\r\n            controls.dampingFactor = 0.05\r\n            scene.userData.render = function (time) {\r\n                // Move cones and Update ray position\r\n                coneMesh1.position.set(Math.sin(0.5 * time) * conesDistance * 0.6, conesDistance + coneHeight, Math.cos(0.5 * time) * conesDistance * 0.6)\r\n                coneMesh2.position.set(Math.sin(0.9 * time) * conesDistance, coneHeightHalf, 0)\r\n                lightningStrike.rayParameters.sourceOffset.copy(coneMesh1.position)\r\n                lightningStrike.rayParameters.sourceOffset.y -= coneHeightHalf\r\n                lightningStrike.rayParameters.destOffset.copy(coneMesh2.position)\r\n                lightningStrike.rayParameters.destOffset.y += coneHeightHalf\r\n                lightningStrike.update(time)\r\n                controls.update()\r\n                // Update point light position to the middle of the ray\r\n                posLight.position.lerpVectors(lightningStrike.rayParameters.sourceOffset, lightningStrike.rayParameters.destOffset, 0.5)\r\n                if (scene.userData.outlineEnabled) {\r\n                    that.composer.render()\r\n                }\telse {\r\n                    that.renderer.render(scene, scene.userData.camera)\r\n                }\r\n            }\r\n            return scene\r\n        },\r\n        createPlasmaBallScene() {\r\n            var scene = new this.$THREE.Scene()\r\n            scene.userData.canGoBackwardsInTime = true\r\n            scene.userData.camera = new this.$THREE.PerspectiveCamera(27, this.$webglInnerWidth / window.innerHeight, 100, 50000)\r\n            var ballScene = new this.$THREE.Scene()\r\n            ballScene.background = new this.$THREE.Color(0x454545)\r\n            // Lights\r\n            var ambientLight = new this.$THREE.AmbientLight(0x444444)\r\n            ballScene.add(ambientLight)\r\n            scene.add(ambientLight)\r\n            var light1 = new this.$THREE.DirectionalLight(0xffffff, 0.5)\r\n            light1.position.set(1, 1, 1)\r\n            ballScene.add(light1)\r\n            scene.add(light1)\r\n            var light2 = new this.$THREE.DirectionalLight(0xffffff, 1.5)\r\n            light2.position.set(- 0.5, 1, 0.2)\r\n            ballScene.add(light2)\r\n            scene.add(light2)\r\n            // Plasma ball\r\n            scene.userData.lightningColor = new this.$THREE.Color(0xFFB0FF)\r\n            scene.userData.outlineColor = new this.$THREE.Color(0xFF00FF)\r\n            scene.userData.lightningMaterial = new this.$THREE.MeshBasicMaterial({ color: scene.userData.lightningColor, side: this.$THREE.DoubleSide })\r\n            var r = \"static/textures/cube/Bridge2/\"\r\n            var urls = [r + \"posx.jpg\", r + \"negx.jpg\",\r\n                            r + \"posy.jpg\", r + \"negy.jpg\",\r\n                            r + \"posz.jpg\", r + \"negz.jpg\"]\r\n            var textureCube = new this.$THREE.CubeTextureLoader().load(urls)\r\n            textureCube.mapping = this.$THREE.CubeReflectionMapping\r\n            textureCube.encoding = this.$THREE.sRGBEncoding\r\n            var sphereMaterial = new this.$THREE.MeshPhysicalMaterial({\r\n                transparent: true,\r\n                transmission: .96,\r\n                depthWrite: false,\r\n                color: 'white',\r\n                metalness: 0,\r\n                roughness: 0,\r\n                envMap: textureCube\r\n            })\r\n            var sphereHeight = 300\r\n            var sphereRadius = 200\r\n            scene.userData.camera.position.set(5 * sphereRadius, 2 * sphereHeight, 6 * sphereRadius)\r\n            var sphereMesh = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(sphereRadius, 80, 40), sphereMaterial)\r\n            sphereMesh.position.set(0, sphereHeight, 0)\r\n            ballScene.add(sphereMesh)\r\n            var sphere = new this.$THREE.Sphere(sphereMesh.position, sphereRadius)\r\n            var spherePlasma = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(sphereRadius * 0.05, 24, 12), scene.userData.lightningMaterial)\r\n            spherePlasma.position.copy(sphereMesh.position)\r\n            spherePlasma.scale.y = 0.6\r\n            scene.add(spherePlasma)\r\n            var post = new this.$THREE.Mesh(\r\n                new this.$THREE.CylinderBufferGeometry(sphereRadius * 0.06, sphereRadius * 0.06, sphereHeight, 6, 1, true),\r\n                new this.$THREE.MeshLambertMaterial({ color: 0x020202 })\r\n            )\r\n            post.position.y = sphereHeight * 0.5 - sphereRadius * 0.05 * 1.2\r\n            scene.add(post)\r\n            var box = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(sphereHeight * 0.5, sphereHeight * 0.1, sphereHeight * 0.5), post.material)\r\n            box.position.y = sphereHeight * 0.05 * 0.5\r\n            scene.add(box)\r\n            var rayDirection = new this.$THREE.Vector3()\r\n            var rayLength = 0\r\n            var vec1 = new this.$THREE.Vector3()\r\n            var vec2 = new this.$THREE.Vector3()\r\n            scene.userData.rayParams = {\r\n                sourceOffset: sphereMesh.position,\r\n                destOffset: new this.$THREE.Vector3(sphereRadius, 0, 0).add(sphereMesh.position),\r\n                radius0: 4,\r\n                radius1: 4,\r\n                radius0Factor: 0.82,\r\n                minRadius: 2.5,\r\n                maxIterations: 6,\r\n                isEternal: true,\r\n                timeScale: 0.6,\r\n                propagationTimeFactor: 0.15,\r\n                vanishingTimeFactor: 0.87,\r\n                subrayPeriod: 0.8,\r\n                ramification: 5,\r\n                recursionProbability: 0.8,\r\n                roughness: 0.85,\r\n                straightness: 0.7,\r\n                onSubrayCreation: function (segment, parentSubray, childSubray, lightningStrike) {\r\n                    lightningStrike.subrayConePosition(segment, parentSubray, childSubray, 0.6, 0.9, 0.7)\r\n                    // this.$THREE.Sphere projection\r\n                    vec1.subVectors(childSubray.pos1, lightningStrike.rayParameters.sourceOffset)\r\n                    vec2.set(0, 0, 0)\r\n                    if (lightningStrike.randomGenerator.random() < 0.7) {\r\n                        vec2.copy(rayDirection).multiplyScalar(rayLength * 1.0865)\r\n                    }\r\n                    vec1.add(vec2).setLength(rayLength)\r\n                    childSubray.pos1.addVectors(vec1, lightningStrike.rayParameters.sourceOffset)\r\n                }\r\n            }\r\n            var lightningStrike\r\n            var lightningStrikeMesh\r\n            var outlineMeshArray = []\r\n            var that = this\r\n            scene.userData.recreateRay = function () {\r\n                if (lightningStrikeMesh) {\r\n                    scene.remove(lightningStrikeMesh)\r\n                }\r\n                lightningStrike = new LightningStrike(scene.userData.rayParams)\r\n                lightningStrikeMesh = new that.$THREE.Mesh(lightningStrike, scene.userData.lightningMaterial)\r\n                outlineMeshArray.length = 0\r\n                outlineMeshArray.push(lightningStrikeMesh)\r\n                outlineMeshArray.push(spherePlasma)\r\n                scene.add(lightningStrikeMesh)\r\n            }\r\n            scene.userData.recreateRay()\r\n            // Compose rendering\r\n            this.composer.passes = []\r\n            this.composer.addPass(new RenderPass(ballScene, scene.userData.camera))\r\n            var rayPass = new RenderPass(scene, scene.userData.camera)\r\n            rayPass.clear = false\r\n            this.composer.addPass(rayPass)\r\n            var outlinePass = this.createOutline(scene, outlineMeshArray, scene.userData.outlineColor)\r\n            scene.userData.render = (time) => {\r\n                rayDirection.subVectors(lightningStrike.rayParameters.destOffset, lightningStrike.rayParameters.sourceOffset)\r\n                rayLength = rayDirection.length()\r\n                rayDirection.normalize()\r\n                lightningStrike.update(time)\r\n                controls.update()\r\n                outlinePass.enabled = scene.userData.outlineEnabled\r\n                this.composer.render()\r\n            }\r\n            // Controls\r\n            var controls = new OrbitControls(scene.userData.camera, this.renderer.domElement)\r\n            controls.target.copy(sphereMesh.position)\r\n            controls.enableDamping = true\r\n            controls.dampingFactor = 0.05\r\n            // this.$THREE.Sphere this.mouse raycasting\r\n            container.style.touchAction = 'none'\r\n            container.addEventListener('pointermove', onPointerMove, false)\r\n            var that = this\r\n            function onPointerMove(event) {\r\n                if (event.isPrimary === false) return\r\n                that.mouse.x = (event.clientX / this.$webglInnerWidth) * 2 - 1\r\n                that.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1\r\n                checkIntersection()\r\n            }\r\n            var intersection = new this.$THREE.Vector3()\r\n            function checkIntersection() {\r\n                that.raycaster.setFromCamera(that.mouse, scene.userData.camera)\r\n                var result = that.raycaster.ray.intersectSphere(sphere, intersection)\r\n                if (result !== null) {\r\n                    lightningStrike.rayParameters.destOffset.copy(intersection)\r\n                }\r\n            }\r\n            return scene\r\n        },\r\n        createStormScene() {\r\n            var scene = new this.$THREE.Scene()\r\n            scene.background = new this.$THREE.Color(0x050505)\r\n            scene.userData.canGoBackwardsInTime = false\r\n            scene.userData.camera = new this.$THREE.PerspectiveCamera(27, this.$webglInnerWidth / window.innerHeight, 20, 10000)\r\n            // Lights\r\n            scene.add(new this.$THREE.AmbientLight(0x444444))\r\n            var light1 = new this.$THREE.DirectionalLight(0xffffff, 0.5)\r\n            light1.position.set(1, 1, 1)\r\n            scene.add(light1)\r\n            var posLight = new this.$THREE.PointLight(0x00ffff)\r\n            posLight.position.set(0, 100, 0)\r\n            scene.add(posLight)\r\n            // Ground\r\n            var GROUND_SIZE = 1000\r\n            scene.userData.camera.position.set(0, 0.2, 1.6).multiplyScalar(GROUND_SIZE * 0.5)\r\n            var ground = new this.$THREE.Mesh(new this.$THREE.PlaneBufferGeometry(GROUND_SIZE, GROUND_SIZE), new this.$THREE.MeshLambertMaterial({ color: 0x072302 }))\r\n            ground.rotation.x = - Math.PI * 0.5\r\n            scene.add(ground)\r\n            // Storm\r\n            scene.userData.lightningColor = new this.$THREE.Color(0xB0FFFF)\r\n            scene.userData.outlineColor = new this.$THREE.Color(0x00FFFF)\r\n            scene.userData.lightningMaterial = new this.$THREE.MeshBasicMaterial({ color: scene.userData.lightningColor })\r\n            var rayDirection = new this.$THREE.Vector3(0, - 1, 0)\r\n            var rayLength = 0\r\n            var vec1 = new this.$THREE.Vector3()\r\n            var vec2 = new this.$THREE.Vector3()\r\n            scene.userData.rayParams = {\r\n                radius0: 1,\r\n                radius1: 0.5,\r\n                minRadius: 0.3,\r\n                maxIterations: 7,\r\n                timeScale: 0.15,\r\n                propagationTimeFactor: 0.2,\r\n                vanishingTimeFactor: 0.9,\r\n                subrayPeriod: 4,\r\n                subrayDutyCycle: 0.6,\r\n                maxSubrayRecursion: 3,\r\n                ramification: 3,\r\n                recursionProbability: 0.4,\r\n                roughness: 0.85,\r\n                straightness: 0.65,\r\n                onSubrayCreation: (segment, parentSubray, childSubray, lightningStrike) => {\r\n                    lightningStrike.subrayConePosition(segment, parentSubray, childSubray, 0.6, 0.6, 0.5)\r\n                    // Plane projection\r\n                    rayLength = lightningStrike.rayParameters.sourceOffset.y\r\n                    vec1.subVectors(childSubray.pos1, lightningStrike.rayParameters.sourceOffset)\r\n                    var proj = rayDirection.dot(vec1)\r\n                    vec2.copy(rayDirection).multiplyScalar(proj)\r\n                    vec1.sub(vec2)\r\n                    var scale = proj / rayLength > 0.5 ? rayLength / proj : 1\r\n                    vec2.multiplyScalar(scale)\r\n                    vec1.add(vec2)\r\n                    childSubray.pos1.addVectors(vec1, lightningStrike.rayParameters.sourceOffset)\r\n                }\r\n            }\r\n            // Black star mark\r\n            var starVertices = []\r\n            var prevPoint = new this.$THREE.Vector3(0, 0, 1)\r\n            var currPoint = new this.$THREE.Vector3()\r\n            for (var i = 1; i <= 16; i ++) {\r\n                currPoint.set(Math.sin(2 * Math.PI * i / 16), 0, Math.cos(2 * Math.PI * i / 16))\r\n                if (i % 2 === 1) {\r\n                    currPoint.multiplyScalar(0.3)\r\n                }\r\n                starVertices.push(0, 0, 0)\r\n                starVertices.push(prevPoint.x, prevPoint.y, prevPoint.z)\r\n                starVertices.push(currPoint.x, currPoint.y, currPoint.z)\r\n                prevPoint.copy(currPoint)\r\n            }\r\n            var starGeometry = new this.$THREE.BufferGeometry()\r\n            starGeometry.setAttribute('position', new this.$THREE.Float32BufferAttribute(starVertices, 3))\r\n            var starMesh = new this.$THREE.Mesh(starGeometry, new this.$THREE.MeshBasicMaterial({ color: 0x020900 }))\r\n            starMesh.scale.multiplyScalar(6)\r\n            //\r\n            var storm = new LightningStorm({\r\n                size: GROUND_SIZE,\r\n                minHeight: 90,\r\n                maxHeight: 200,\r\n                maxSlope: 0.6,\r\n                maxLightnings: 8,\r\n                lightningParameters: scene.userData.rayParams,\r\n                lightningMaterial: scene.userData.lightningMaterial,\r\n                onLightningDown: function (lightning) {\r\n                    // Add black star mark at ray strike\r\n                    var star1 = starMesh.clone()\r\n                    star1.position.copy(lightning.rayParameters.destOffset)\r\n                    star1.position.y = 0.05\r\n                    star1.rotation.y = 2 * Math.PI * Math.random()\r\n                    scene.add(star1)\r\n                }\r\n            })\r\n            scene.add(storm)\r\n            // Compose rendering\r\n            this.composer.passes = []\r\n            this.composer.addPass(new RenderPass(scene, scene.userData.camera))\r\n            this.createOutline(scene, storm.lightningsMeshes, scene.userData.outlineColor)\r\n            // Controls\r\n            var controls = new OrbitControls(scene.userData.camera, this.renderer.domElement)\r\n            controls.target.y = GROUND_SIZE * 0.05\r\n            controls.enableDamping = true\r\n            controls.dampingFactor = 0.05\r\n            var that = this\r\n            scene.userData.render = function (time) {\r\n                storm.update(time)\r\n                controls.update()\r\n                if (scene.userData.outlineEnabled) {\r\n                    that.composer.render()\r\n                }\telse {\r\n                    that.renderer.render(scene, scene.userData.camera)\r\n                }\r\n            }\r\n            return scene\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLightningstrike-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/lightningstrike/webglLightningstrike.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLightningstrike-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl - lightning strike\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ffed1d5c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/lightningstrike/webglLightningstrike.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ffed1d5c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLightningstrike.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLightningstrike.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLightningstrike.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ffed1d5c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLightningstrike.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-ffed1d5c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/lightningstrike/webglLightningstrike.vue\n// module id = null\n// module chunks = ","import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tDoubleSide,\r\n\tLinearFilter,\r\n\tMatrix4,\r\n\tMeshBasicMaterial,\r\n\tMeshDepthMaterial,\r\n\tNoBlending,\r\n\tRGBADepthPacking,\r\n\tRGBAFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { CopyShader } from \"../shaders/CopyShader.js\";\r\n\r\nvar OutlinePass = function ( resolution, scene, camera, selectedObjects ) {\r\n\r\n\tthis.renderScene = scene;\r\n\tthis.renderCamera = camera;\r\n\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\r\n\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\r\n\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\r\n\tthis.edgeGlow = 0.0;\r\n\tthis.usePatternTexture = false;\r\n\tthis.edgeThickness = 1.0;\r\n\tthis.edgeStrength = 3.0;\r\n\tthis.downSampleRatio = 2;\r\n\tthis.pulsePeriod = 0;\r\n\r\n\tthis._visibilityCache = new Map();\r\n\r\n\tPass.call( this );\r\n\r\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\r\n\r\n\tvar resx = Math.round( this.resolution.x / this.downSampleRatio );\r\n\tvar resy = Math.round( this.resolution.y / this.downSampleRatio );\r\n\r\n\tthis.maskBufferMaterial = new MeshBasicMaterial( { color: 0xffffff } );\r\n\tthis.maskBufferMaterial.side = DoubleSide;\r\n\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\r\n\tthis.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\r\n\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\r\n\r\n\tthis.depthMaterial = new MeshDepthMaterial();\r\n\tthis.depthMaterial.side = DoubleSide;\r\n\tthis.depthMaterial.depthPacking = RGBADepthPacking;\r\n\tthis.depthMaterial.blending = NoBlending;\r\n\r\n\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\r\n\tthis.prepareMaskMaterial.side = DoubleSide;\r\n\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\r\n\r\n\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\r\n\tthis.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\r\n\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\r\n\r\n\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\r\n\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\r\n\r\n\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\r\n\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\r\n\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\r\n\tthis.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\r\n\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\r\n\r\n\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\r\n\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy, pars );\r\n\tthis.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\r\n\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\r\n\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\r\n\tthis.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\r\n\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\r\n\r\n\tvar MAX_EDGE_THICKNESS = 4;\r\n\tvar MAX_EDGE_GLOW = 4;\r\n\r\n\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\r\n\tthis.separableBlurMaterial1.uniforms[ \"texSize\" ].value.set( resx, resy );\r\n\tthis.separableBlurMaterial1.uniforms[ \"kernelRadius\" ].value = 1;\r\n\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\r\n\tthis.separableBlurMaterial2.uniforms[ \"texSize\" ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\r\n\tthis.separableBlurMaterial2.uniforms[ \"kernelRadius\" ].value = MAX_EDGE_GLOW;\r\n\r\n\t// Overlay material\r\n\tthis.overlayMaterial = this.getOverlayMaterial();\r\n\r\n\t// copy material\r\n\tif ( CopyShader === undefined )\r\n\t\tconsole.error( \"OutlinePass relies on CopyShader\" );\r\n\r\n\tvar copyShader = CopyShader;\r\n\r\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\r\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\r\n\r\n\tthis.materialCopy = new ShaderMaterial( {\r\n\t\tuniforms: this.copyUniforms,\r\n\t\tvertexShader: copyShader.vertexShader,\r\n\t\tfragmentShader: copyShader.fragmentShader,\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false,\r\n\t\ttransparent: true\r\n\t} );\r\n\r\n\tthis.enabled = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.oldClearColor = new Color();\r\n\tthis.oldClearAlpha = 1;\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\r\n\r\n\tthis.tempPulseColor1 = new Color();\r\n\tthis.tempPulseColor2 = new Color();\r\n\tthis.textureMatrix = new Matrix4();\r\n\r\n\tfunction replaceDepthToViewZ( string, camera ) {\r\n\r\n\t\tvar type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\r\n\r\n\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nOutlinePass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\r\n\tconstructor: OutlinePass,\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.renderTargetMaskBuffer.dispose();\r\n\t\tthis.renderTargetDepthBuffer.dispose();\r\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\r\n\t\tthis.renderTargetBlurBuffer1.dispose();\r\n\t\tthis.renderTargetBlurBuffer2.dispose();\r\n\t\tthis.renderTargetEdgeBuffer1.dispose();\r\n\t\tthis.renderTargetEdgeBuffer2.dispose();\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\r\n\r\n\t\tvar resx = Math.round( width / this.downSampleRatio );\r\n\t\tvar resy = Math.round( height / this.downSampleRatio );\r\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\r\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\r\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\r\n\t\tthis.separableBlurMaterial1.uniforms[ \"texSize\" ].value.set( resx, resy );\r\n\r\n\t\tresx = Math.round( resx / 2 );\r\n\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\r\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\r\n\r\n\t\tthis.separableBlurMaterial2.uniforms[ \"texSize\" ].value.set( resx, resy );\r\n\r\n\t},\r\n\r\n\tchangeVisibilityOfSelectedObjects: function ( bVisible ) {\r\n\r\n\t\tvar cache = this._visibilityCache;\r\n\r\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( bVisible === true ) {\r\n\r\n\t\t\t\t\tobject.visible = cache.get( object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcache.set( object, object.visible );\r\n\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\r\n\r\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\r\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tchangeVisibilityOfNonSelectedObjects: function ( bVisible ) {\r\n\r\n\t\tvar cache = this._visibilityCache;\r\n\t\tvar selectedMeshes = [];\r\n\r\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\r\n\r\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\r\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\r\n\r\n\t\t}\r\n\r\n\t\tfunction VisibilityChangeCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh || object.isSprite ) {\r\n\r\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\r\n\r\n\t\t\t\tvar bFound = false;\r\n\r\n\t\t\t\tfor ( var i = 0; i < selectedMeshes.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar selectedObjectId = selectedMeshes[ i ].id;\r\n\r\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\r\n\r\n\t\t\t\t\t\tbFound = true;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( bFound === false ) {\r\n\r\n\t\t\t\t\tvar visibility = object.visible;\r\n\r\n\t\t\t\t\tif ( bVisible === false || cache.get( object ) === true ) {\r\n\r\n\t\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcache.set( object, visibility );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\t// the visibilty of points and lines is always set to false in order to\r\n\t\t\t\t// not affect the outline computation\r\n\r\n\t\t\t\tif ( bVisible === true ) {\r\n\r\n\t\t\t\t\tobject.visible = cache.get( object ); // restore\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcache.set( object, object.visible );\r\n\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\r\n\r\n\t},\r\n\r\n\tupdateTextureMatrix: function () {\r\n\r\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0 );\r\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\r\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\r\n\r\n\t},\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\tif ( this.selectedObjects.length > 0 ) {\r\n\r\n\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\r\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\t\tvar oldAutoClear = renderer.autoClear;\r\n\r\n\t\t\trenderer.autoClear = false;\r\n\r\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\r\n\r\n\t\t\t// Make selected objects invisible\r\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\r\n\r\n\t\t\tvar currentBackground = this.renderScene.background;\r\n\t\t\tthis.renderScene.background = null;\r\n\r\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\r\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\r\n\r\n\t\t\t// Make selected objects visible\r\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\r\n\t\t\tthis._visibilityCache.clear();\r\n\r\n\t\t\t// Update Texture Matrix for Depth compare\r\n\t\t\tthis.updateTextureMatrix();\r\n\r\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\r\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\r\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"cameraNearFar\" ].value.set( this.renderCamera.near, this.renderCamera.far );\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"depthTexture\" ].value = this.renderTargetDepthBuffer.texture;\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"textureMatrix\" ].value = this.textureMatrix;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\r\n\t\t\tthis.renderScene.overrideMaterial = null;\r\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\r\n\t\t\tthis._visibilityCache.clear();\r\n\r\n\t\t\tthis.renderScene.background = currentBackground;\r\n\r\n\t\t\t// 2. Downsample to Half resolution\r\n\t\t\tthis.fsQuad.material = this.materialCopy;\r\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetMaskBuffer.texture;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\r\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\r\n\r\n\t\t\tif ( this.pulsePeriod > 0 ) {\r\n\r\n\t\t\t\tvar scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\r\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\r\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// 3. Apply Edge Detection Pass\r\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"maskTexture\" ].value = this.renderTargetMaskDownSampleBuffer.texture;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"texSize\" ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"visibleEdgeColor\" ].value = this.tempPulseColor1;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"hiddenEdgeColor\" ].value = this.tempPulseColor2;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\t// 4. Apply Blur on Half res\r\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"colorTexture\" ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionX;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"kernelRadius\" ].value = this.edgeThickness;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"colorTexture\" ].value = this.renderTargetBlurBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\t// Apply Blur on quarter res\r\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"colorTexture\" ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"colorTexture\" ].value = this.renderTargetBlurBuffer2.texture;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"direction\" ].value = OutlinePass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\t// Blend it additively over the input texture\r\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"maskTexture\" ].value = this.renderTargetMaskBuffer.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeTexture1\" ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeTexture2\" ].value = this.renderTargetEdgeBuffer2.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"patternTexture\" ].value = this.patternTexture;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeStrength\" ].value = this.edgeStrength;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeGlow\" ].value = this.edgeGlow;\r\n\t\t\tthis.overlayMaterial.uniforms[ \"usePatternTexture\" ].value = this.usePatternTexture;\r\n\r\n\r\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\t\trenderer.setRenderTarget( readBuffer );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\r\n\t\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis.fsQuad.material = this.materialCopy;\r\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetPrepareMaskMaterial: function () {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"depthTexture\": { value: null },\r\n\t\t\t\t\"cameraNearFar\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"textureMatrix\": { value: null }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\t\t\t\t'#include <morphtarget_pars_vertex>',\r\n\t\t\t\t'#include <skinning_pars_vertex>',\r\n\r\n\t\t\t\t'varying vec4 projTexCoord;',\r\n\t\t\t\t'varying vec4 vPosition;',\r\n\t\t\t\t'uniform mat4 textureMatrix;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\t#include <skinbase_vertex>',\r\n\t\t\t\t'\t#include <begin_vertex>',\r\n\t\t\t\t'\t#include <morphtarget_vertex>',\r\n\t\t\t\t'\t#include <skinning_vertex>',\r\n\t\t\t\t'\t#include <project_vertex>',\r\n\r\n\t\t\t\t'\tvPosition = mvPosition;',\r\n\t\t\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n\t\t\t\t'\tprojTexCoord = textureMatrix * worldPosition;',\r\n\r\n\t\t\t\t'}'\r\n\t\t\t].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\t\t\t\t'#include <packing>',\r\n\t\t\t\t'varying vec4 vPosition;',\r\n\t\t\t\t'varying vec4 projTexCoord;',\r\n\t\t\t\t'uniform sampler2D depthTexture;',\r\n\t\t\t\t'uniform vec2 cameraNearFar;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));',\r\n\t\t\t\t'\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );',\r\n\t\t\t\t'\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;',\r\n\t\t\t\t'\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);',\r\n\r\n\t\t\t\t'}'\r\n\t\t\t].join( '\\n' )\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetEdgeDetectionMaterial: function () {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"maskTexture\": { value: null },\r\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"visibleEdgeColor\": { value: new Vector3( 1.0, 1.0, 1.0 ) },\r\n\t\t\t\t\"hiddenEdgeColor\": { value: new Vector3( 1.0, 1.0, 1.0 ) },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D maskTexture;\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\r\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\r\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\r\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\r\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\r\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\r\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\r\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\r\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\r\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\r\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\r\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\r\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\r\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\r\n\t\t\t\t}\"\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetSeperableBlurMaterial: function ( maxRadius ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t\"MAX_RADIUS\": maxRadius,\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"colorTexture\": { value: null },\r\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t\"kernelRadius\": { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"#include <common>\\\r\n\t\t\t\tvarying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D colorTexture;\\\r\n\t\t\t\tuniform vec2 texSize;\\\r\n\t\t\t\tuniform vec2 direction;\\\r\n\t\t\t\tuniform float kernelRadius;\\\r\n\t\t\t\t\\\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\r\n\t\t\t\t}\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\r\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\r\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\r\n\t\t\t\t\tvec2 uvOffset = delta;\\\r\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\r\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\r\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\r\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\r\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\r\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\r\n\t\t\t\t\t\tuvOffset += delta;\\\r\n\t\t\t\t\t}\\\r\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\r\n\t\t\t\t}\"\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tgetOverlayMaterial: function () {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"maskTexture\": { value: null },\r\n\t\t\t\t\"edgeTexture1\": { value: null },\r\n\t\t\t\t\"edgeTexture2\": { value: null },\r\n\t\t\t\t\"patternTexture\": { value: null },\r\n\t\t\t\t\"edgeStrength\": { value: 1.0 },\r\n\t\t\t\t\"edgeGlow\": { value: 1.0 },\r\n\t\t\t\t\"usePatternTexture\": { value: 0.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t\"varying vec2 vUv;\\n\\\r\n\t\t\t\tvoid main() {\\n\\\r\n\t\t\t\t\tvUv = uv;\\n\\\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\r\n\t\t\t\t}\",\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t\"varying vec2 vUv;\\\r\n\t\t\t\tuniform sampler2D maskTexture;\\\r\n\t\t\t\tuniform sampler2D edgeTexture1;\\\r\n\t\t\t\tuniform sampler2D edgeTexture2;\\\r\n\t\t\t\tuniform sampler2D patternTexture;\\\r\n\t\t\t\tuniform float edgeStrength;\\\r\n\t\t\t\tuniform float edgeGlow;\\\r\n\t\t\t\tuniform bool usePatternTexture;\\\r\n\t\t\t\t\\\r\n\t\t\t\tvoid main() {\\\r\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\r\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\r\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\r\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\r\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\r\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\r\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\r\n\t\t\t\t\tif(usePatternTexture)\\\r\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\r\n\t\t\t\t\tgl_FragColor = finalColor;\\\r\n\t\t\t\t}\",\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false,\r\n\t\t\ttransparent: true\r\n\t\t} );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\r\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\r\n\r\nexport { OutlinePass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/OutlinePass.js","// removed by extract-text-webpack-plugin\n\n\n// WEBPACK FOOTER //\n// \"}!./node_modules/vue-style-loader!./node_modules/css-loader?{\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-ffed1d5c\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/views/lightningstrike/webglLightningstrike.vue"],"sourceRoot":""}