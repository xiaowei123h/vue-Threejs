{"version":3,"sources":["webpack:///src/views/physics/physicsAmmoVolume.vue","webpack:///./src/views/physics/physicsAmmoVolume.vue?4f2b","webpack:///./src/views/physics/physicsAmmoVolume.vue"],"names":["physicsAmmoVolume","data","container","stats","camera","controls","scene","renderer","textureLoader","clock","clickRequest","mouseCoords","raycaster","ballMaterial","pos","quat","gravityConstant","physicsWorld","rigidBodies","softBodies","margin","transformAux1","softBodyHelpers","mounted","_this","this","$THREE","Clock","Vector2","Raycaster","MeshPhongMaterial","color","Vector3","Quaternion","Ammo","then","AmmoLib","init","animate","methods","initGraphics","initPhysics","createObjects","initInput","document","getElementById","PerspectiveCamera","$webglInnerWidth","window","innerHeight","Scene","background","Color","position","set","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","appendChild","domElement","OrbitControls","target","update","TextureLoader","ambientLight","AmbientLight","add","light","DirectionalLight","castShadow","shadow","left","right","top","bottom","near","far","mapSize","x","y","$Stats","dom","style","addEventListener","onWindowResize","collisionConfiguration","btSoftBodyRigidBodyCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","softBodySolver","btDefaultSoftBodySolver","btSoftRigidDynamicsWorld","setGravity","btVector3","getWorldInfo","set_m_gravity","btTransform","btSoftBodyHelpers","_this2","ground","createParalellepiped","receiveShadow","load","texture","wrapS","RepeatWrapping","wrapT","repeat","material","map","needsUpdate","sphereGeometry","SphereBufferGeometry","translate","createSoftVolume","boxGeometry","BoxBufferGeometry","setFromAxisAngle","Math","PI","obstacle","processGeometry","bufGeometry","posOnlyBufGeometry","BufferGeometry","setAttribute","getAttribute","setIndex","getIndex","indexedBufferGeom","BufferGeometryUtils","mergeVertices","mapIndices","isEqual","x1","y1","z1","x2","y2","z2","abs","vertices","attributes","array","idxVertices","indices","index","numIdxVertices","length","numVertices","ammoVertices","ammoIndices","ammoIndexAssociation","i","association","push","i3","j","j3","bufferGeom","mass","pressure","volume","Mesh","frustumCulled","volumeSoftBody","CreateFromTriMesh","sbConfig","get_m_cfg","set_viterations","set_piterations","set_collisions","set_kDF","set_kDP","set_kPR","get_m_materials","at","set_m_kLST","set_m_kAST","setTotalMass","castObject","btCollisionObject","getCollisionShape","setMargin","addSoftBody","userData","physicsBody","setActivationState","sx","sy","sz","threeObject","shape","btBoxShape","createRigidBody","physicsShape","copy","quaternion","transform","setIdentity","setOrigin","z","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","_this3","event","clientX","innerWidth","clientY","processClick","setFromCamera","ball","ballShape","btSphereShape","ray","direction","origin","ballBody","setFriction","multiplyScalar","setLinearVelocity","$onWindowResize","requestAnimationFrame","render","deltaTime","getDelta","updatePhysics","stepSimulation","il","geometry","softBody","volumePositions","volumeNormals","normal","numVerts","nodes","get_m_nodes","node","nodePos","get_m_x","nodeNormal","get_m_n","nx","ny","nz","assocVertex","k","kl","indexVertex","objThree","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","physics_physicsAmmoVolume","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/311.ba6faee9a1c541f281ec.js","sourcesContent":["<template>\r\n    <div class=\"physicsAmmoVolume-container\">\r\n        <div id=\"info\">\r\n\t\t\tAmmo.js physics soft body volume demo<br/>\r\n\t\t\tClick to throw a ball\r\n\t\t</div>\r\n\t\t<div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js';\r\nimport { BufferGeometryUtils } from '@/components/jsm/utils/BufferGeometryUtils.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            // Graphics variables\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            controls: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\ttextureLoader: null,\r\n\t\t\tclock: null,\r\n\t\t\tclickRequest: false,\r\n\t\t\tmouseCoords: null,\r\n\t\t\traycaster: null,\r\n\t\t\tballMaterial: null,\r\n\t\t\tpos: null,\r\n\t\t\tquat: null,\r\n\t\t\t// Physics variables\r\n\t\t\tgravityConstant: - 9.8,\r\n\t\t\tphysicsWorld: null,\r\n\t\t\trigidBodies: [],\r\n\t\t\tsoftBodies: [],\r\n\t\t\tmargin: 0.05,\r\n\t\t\ttransformAux1: null,\r\n\t\t\tsoftBodyHelpers: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        this.mouseCoords = new this.$THREE.Vector2()\r\n        this.raycaster = new this.$THREE.Raycaster()\r\n        this.ballMaterial = new this.$THREE.MeshPhongMaterial({ color: 0x202020 })\r\n        this.pos = new this.$THREE.Vector3()\r\n        this.quat = new this.$THREE.Quaternion()\r\n        Ammo().then((AmmoLib) => {\r\n            Ammo = AmmoLib\r\n            this.init()\r\n            this.animate()\r\n        })\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.initGraphics()\r\n            this.initPhysics()\r\n            this.createObjects()\r\n            this.initInput()\r\n        },\r\n        initGraphics() {\r\n            this.container = document.getElementById('container')\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.2, 2000)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xbfd1e5)\r\n            this.camera.position.set(- 7, 5, 8)\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.shadowMap.enabled = true\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.controls.target.set(0, 2, 0)\r\n            this.controls.update()\r\n            this.textureLoader = new this.$THREE.TextureLoader()\r\n            var ambientLight = new this.$THREE.AmbientLight(0x404040)\r\n            this.scene.add(ambientLight)\r\n            var light = new this.$THREE.DirectionalLight(0xffffff, 1)\r\n            light.position.set(- 10, 10, 5)\r\n            light.castShadow = true\r\n            var d = 20\r\n            light.shadow.camera.left = - d\r\n            light.shadow.camera.right = d\r\n            light.shadow.camera.top = d\r\n            light.shadow.camera.bottom = - d\r\n            light.shadow.camera.near = 2\r\n            light.shadow.camera.far = 50\r\n            light.shadow.mapSize.x = 1024\r\n            light.shadow.mapSize.y = 1024\r\n            this.scene.add(light)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.stats.domElement.style.position = 'absolute'\r\n            this.stats.domElement.style.top = '0px'\r\n            this.container.appendChild(this.stats.domElement)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        initPhysics() {\r\n            // Physics configuration\r\n            var collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration()\r\n            var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration)\r\n            var broadphase = new Ammo.btDbvtBroadphase()\r\n            var solver = new Ammo.btSequentialImpulseConstraintSolver()\r\n            var softBodySolver = new Ammo.btDefaultSoftBodySolver()\r\n            this.physicsWorld = new Ammo.btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration, softBodySolver)\r\n            this.physicsWorld.setGravity(new Ammo.btVector3(0, this.gravityConstant, 0))\r\n            this.physicsWorld.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, this.gravityConstant, 0))\r\n            this.transformAux1 = new Ammo.btTransform()\r\n            this.softBodyHelpers = new Ammo.btSoftBodyHelpers()\r\n        },\r\n        createObjects() {\r\n            // Ground\r\n            this.pos.set(0, - 0.5, 0)\r\n            this.quat.set(0, 0, 0, 1)\r\n            var ground = this.createParalellepiped(40, 1, 40, 0, this.pos, this.quat, new this.$THREE.MeshPhongMaterial({ color: 0xFFFFFF }))\r\n            ground.castShadow = true\r\n            ground.receiveShadow = true\r\n            this.textureLoader.load(\"static/textures/grid.png\", (texture) => {\r\n                texture.wrapS = this.$THREE.RepeatWrapping\r\n                texture.wrapT = this.$THREE.RepeatWrapping\r\n                texture.repeat.set(40, 40)\r\n                ground.material.map = texture\r\n                ground.material.needsUpdate = true\r\n            })\r\n            // Create soft volumes\r\n            var volumeMass = 15\r\n            var sphereGeometry = new this.$THREE.SphereBufferGeometry(1.5, 40, 25)\r\n            sphereGeometry.translate(5, 5, 0)\r\n            this.createSoftVolume(sphereGeometry, volumeMass, 250)\r\n            var boxGeometry = new this.$THREE.BoxBufferGeometry(1, 1, 5, 4, 4, 20)\r\n            boxGeometry.translate(- 2, 5, 0)\r\n            this.createSoftVolume(boxGeometry, volumeMass, 120)\r\n            // Ramp\r\n            this.pos.set(3, 1, 0)\r\n            this.quat.setFromAxisAngle(new this.$THREE.Vector3(0, 0, 1), 30 * Math.PI / 180)\r\n            var obstacle = this.createParalellepiped(10, 1, 4, 0, this.pos, this.quat, new this.$THREE.MeshPhongMaterial({ color: 0x606060 }))\r\n            obstacle.castShadow = true\r\n            obstacle.receiveShadow = true\r\n        },\r\n        processGeometry(bufGeometry) {\r\n            // Ony consider the position values when merging the vertices\r\n            var posOnlyBufGeometry = new this.$THREE.BufferGeometry()\r\n            posOnlyBufGeometry.setAttribute('position', bufGeometry.getAttribute('position'))\r\n            posOnlyBufGeometry.setIndex(bufGeometry.getIndex())\r\n            // Merge the vertices so the triangle soup is converted to indexed triangles\r\n            var indexedBufferGeom = BufferGeometryUtils.mergeVertices(posOnlyBufGeometry)\r\n            // Create index arrays mapping the indexed vertices to bufGeometry vertices\r\n            this.mapIndices(bufGeometry, indexedBufferGeom)\r\n        },\r\n        isEqual(x1, y1, z1, x2, y2, z2) {\r\n            var delta = 0.000001\r\n            return Math.abs(x2 - x1) < delta &&\r\n                    Math.abs(y2 - y1) < delta &&\r\n                    Math.abs(z2 - z1) < delta\r\n        },\r\n        mapIndices(bufGeometry, indexedBufferGeom) {\r\n            // Creates ammoVertices, ammoIndices and ammoIndexAssociation in bufGeometry\r\n            var vertices = bufGeometry.attributes.position.array\r\n            var idxVertices = indexedBufferGeom.attributes.position.array\r\n            var indices = indexedBufferGeom.index.array\r\n            var numIdxVertices = idxVertices.length / 3\r\n            var numVertices = vertices.length / 3\r\n            bufGeometry.ammoVertices = idxVertices\r\n            bufGeometry.ammoIndices = indices\r\n            bufGeometry.ammoIndexAssociation = []\r\n            for (var i = 0; i < numIdxVertices; i ++) {\r\n                var association = []\r\n                bufGeometry.ammoIndexAssociation.push(association)\r\n                var i3 = i * 3\r\n                for (var j = 0; j < numVertices; j ++) {\r\n                    var j3 = j * 3\r\n                    if (this.isEqual(idxVertices[ i3 ], idxVertices[ i3 + 1 ], idxVertices[ i3 + 2 ],\r\n                        vertices[ j3 ], vertices[ j3 + 1 ], vertices[ j3 + 2 ])) {\r\n                        association.push(j3)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        createSoftVolume(bufferGeom, mass, pressure) {\r\n            this.processGeometry(bufferGeom)\r\n            var volume = new this.$THREE.Mesh(bufferGeom, new this.$THREE.MeshPhongMaterial({ color: 0xFFFFFF }))\r\n            volume.castShadow = true\r\n            volume.receiveShadow = true\r\n            volume.frustumCulled = false\r\n            this.scene.add(volume)\r\n            this.textureLoader.load(\"static/textures/colors.png\", (texture) => {\r\n                volume.material.map = texture\r\n                volume.material.needsUpdate = true\r\n            })\r\n            // Volume physic object\r\n            var volumeSoftBody = this.softBodyHelpers.CreateFromTriMesh(\r\n                this.physicsWorld.getWorldInfo(),\r\n                bufferGeom.ammoVertices,\r\n                bufferGeom.ammoIndices,\r\n                bufferGeom.ammoIndices.length / 3,\r\n                true)\r\n            var sbConfig = volumeSoftBody.get_m_cfg()\r\n            sbConfig.set_viterations(40)\r\n            sbConfig.set_piterations(40)\r\n            // Soft-soft and soft-rigid collisions\r\n            sbConfig.set_collisions(0x11)\r\n            // Friction\r\n            sbConfig.set_kDF(0.1)\r\n            // Damping\r\n            sbConfig.set_kDP(0.01)\r\n            // Pressure\r\n            sbConfig.set_kPR(pressure)\r\n            // Stiffness\r\n            volumeSoftBody.get_m_materials().at(0).set_m_kLST(0.9)\r\n            volumeSoftBody.get_m_materials().at(0).set_m_kAST(0.9)\r\n            volumeSoftBody.setTotalMass(mass, false)\r\n            Ammo.castObject(volumeSoftBody, Ammo.btCollisionObject).getCollisionShape().setMargin(this.margin)\r\n            this.physicsWorld.addSoftBody(volumeSoftBody, 1, - 1)\r\n            volume.userData.physicsBody = volumeSoftBody\r\n            // Disable deactivation\r\n            volumeSoftBody.setActivationState(4)\r\n            this.softBodies.push(volume)\r\n        },\r\n        createParalellepiped(sx, sy, sz, mass, pos, quat, material) {\r\n            var threeObject = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(sx, sy, sz, 1, 1, 1), material)\r\n            var shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5))\r\n            shape.setMargin(this.margin)\r\n            this.createRigidBody(threeObject, shape, mass, pos, quat)\r\n            return threeObject\r\n        },\r\n        createRigidBody(threeObject, physicsShape, mass, pos, quat) {\r\n            threeObject.position.copy(pos)\r\n            threeObject.quaternion.copy(quat)\r\n            var transform = new Ammo.btTransform()\r\n            transform.setIdentity()\r\n            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z))\r\n            transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w))\r\n            var motionState = new Ammo.btDefaultMotionState(transform)\r\n            var localInertia = new Ammo.btVector3(0, 0, 0)\r\n            physicsShape.calculateLocalInertia(mass, localInertia)\r\n            var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia)\r\n            var body = new Ammo.btRigidBody(rbInfo)\r\n            threeObject.userData.physicsBody = body\r\n            this.scene.add(threeObject)\r\n            if (mass > 0) {\r\n                this.rigidBodies.push(threeObject)\r\n                // Disable deactivation\r\n                body.setActivationState(4)\r\n            }\r\n            this.physicsWorld.addRigidBody(body)\r\n            return body\r\n        },\r\n        initInput() {\r\n            window.addEventListener('pointerdown', (event) => {\r\n                if (! this.clickRequest) {\r\n                    this.mouseCoords.set(\r\n                        (event.clientX / (window.innerWidth + 281)) * 2 - 1,\r\n                        - (event.clientY / window.innerHeight) * 2 + 1\r\n                )\r\n                    this.clickRequest = true\r\n                }\r\n            }, false)\r\n        },\r\n        processClick() {\r\n            if (this.clickRequest) {\r\n                this.raycaster.setFromCamera(this.mouseCoords, this.camera)\r\n                // Creates a ball\r\n                var ballMass = 3\r\n                var ballRadius = 0.4\r\n                var ball = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(ballRadius, 18, 16), this.ballMaterial)\r\n                ball.castShadow = true\r\n                ball.receiveShadow = true\r\n                var ballShape = new Ammo.btSphereShape(ballRadius)\r\n                ballShape.setMargin(this.margin)\r\n                this.pos.copy(this.raycaster.ray.direction)\r\n                this.pos.add(this.raycaster.ray.origin)\r\n                this.quat.set(0, 0, 0, 1)\r\n                var ballBody = this.createRigidBody(ball, ballShape, ballMass, this.pos, this.quat)\r\n                ballBody.setFriction(0.5)\r\n                this.pos.copy(this.raycaster.ray.direction)\r\n                this.pos.multiplyScalar(14)\r\n                ballBody.setLinearVelocity(new Ammo.btVector3(this.pos.x, this.pos.y, this.pos.z))\r\n                this.clickRequest = false\r\n            }\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var deltaTime = this.clock.getDelta()\r\n            this.updatePhysics(deltaTime)\r\n            this.processClick()\r\n            this.renderer.render(this.scene, this.camera)\r\n        },\r\n        updatePhysics(deltaTime) {\r\n            // Step world\r\n            this.physicsWorld.stepSimulation(deltaTime, 10)\r\n            // Update soft volumes\r\n            for (var i = 0, il = this.softBodies.length; i < il; i ++) {\r\n                var volume = this.softBodies[ i ]\r\n                var geometry = volume.geometry\r\n                var softBody = volume.userData.physicsBody\r\n                var volumePositions = geometry.attributes.position.array\r\n                var volumeNormals = geometry.attributes.normal.array\r\n                var association = geometry.ammoIndexAssociation\r\n                var numVerts = association.length\r\n                var nodes = softBody.get_m_nodes()\r\n                for (var j = 0; j < numVerts; j ++) {\r\n                    var node = nodes.at(j)\r\n                    var nodePos = node.get_m_x()\r\n                    var x = nodePos.x()\r\n                    var y = nodePos.y()\r\n                    var z = nodePos.z()\r\n                    var nodeNormal = node.get_m_n()\r\n                    var nx = nodeNormal.x()\r\n                    var ny = nodeNormal.y()\r\n                    var nz = nodeNormal.z()\r\n                    var assocVertex = association[ j ]\r\n                    for (var k = 0, kl = assocVertex.length; k < kl; k ++) {\r\n                        var indexVertex = assocVertex[ k ]\r\n                        volumePositions[ indexVertex ] = x\r\n                        volumeNormals[ indexVertex ] = nx\r\n                        indexVertex ++\r\n                        volumePositions[ indexVertex ] = y\r\n                        volumeNormals[ indexVertex ] = ny\r\n                        indexVertex ++\r\n                        volumePositions[ indexVertex ] = z\r\n                        volumeNormals[ indexVertex ] = nz\r\n                    }\r\n                }\r\n                geometry.attributes.position.needsUpdate = true\r\n                geometry.attributes.normal.needsUpdate = true\r\n            }\r\n            // Update rigid bodies\r\n            for (var i = 0, il = this.rigidBodies.length; i < il; i ++) {\r\n                var objThree = this.rigidBodies[ i ]\r\n                var objPhys = objThree.userData.physicsBody\r\n                var ms = objPhys.getMotionState()\r\n                if (ms) {\r\n                    ms.getWorldTransform(this.transformAux1)\r\n                    var p = this.transformAux1.getOrigin()\r\n                    var q = this.transformAux1.getRotation()\r\n                    objThree.position.set(p.x(), p.y(), p.z())\r\n                    objThree.quaternion.set(q.x(), q.y(), q.z(), q.w())\r\n                }\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.physicsAmmoVolume-container {\r\n    width: 100%;\r\n    color: #333;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/physics/physicsAmmoVolume.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"physicsAmmoVolume-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_vm._v(\"\\n\\t\\t\\tAmmo.js physics soft body volume demo\"),_c('br'),_vm._v(\"\\n\\t\\t\\tClick to throw a ball\\n\\t\\t\")]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"container\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1c594f1b\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/physics/physicsAmmoVolume.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1c594f1b\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./physicsAmmoVolume.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoVolume.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoVolume.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1c594f1b\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./physicsAmmoVolume.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1c594f1b\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/physics/physicsAmmoVolume.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}