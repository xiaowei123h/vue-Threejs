webpackJsonp([328],{Bxw1:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("wIBv"),n=r("GoTt"),a={uniforms:{color:{value:null},time:{value:0},tDiffuse:{value:null},tDudv:{value:null},textureMatrix:{value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec2 vUv;","varying vec4 vUvRefraction;","void main() {","\tvUv = uv;","\tvUvRefraction = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform float time;","uniform sampler2D tDiffuse;","uniform sampler2D tDudv;","varying vec2 vUv;","varying vec4 vUvRefraction;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );","}","void main() {"," float waveStrength = 0.1;"," float waveSpeed = 0.03;","\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;","\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );","\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;"," vec4 uv = vec4( vUvRefraction );"," uv.xy += distortion;","\tvec4 base = texture2DProj( tDiffuse, uv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")},s={data:function(){return{scene:null,camera:null,clock:null,renderer:null,refractor:null}},mounted:function(){this.init()},methods:{init:function(){var e=this;this.scene=new this.$THREE.Scene,this.camera=new this.$THREE.PerspectiveCamera(45,this.$webglInnerWidth/window.innerHeight,.1,200),this.camera.position.set(-10,0,15),this.camera.lookAt(this.scene.position),this.clock=new this.$THREE.Clock;var t=new this.$THREE.TorusKnotBufferGeometry(3,1,256,32),r=new this.$THREE.MeshStandardMaterial({color:6325186}),s=new this.$THREE.Mesh(t,r);this.scene.add(s);var o=new this.$THREE.PlaneBufferGeometry(10,10);this.refractor=new n.a(o,{color:10066329,textureWidth:1024,textureHeight:1024,shader:a}),this.refractor.position.set(0,0,5),this.scene.add(this.refractor);var v=(new this.$THREE.TextureLoader).load("static/textures/waterdudv.jpg",function(){e.animate()});v.wrapS=v.wrapT=this.$THREE.RepeatWrapping,this.refractor.material.uniforms.tDudv.value=v;var d=new this.$THREE.AmbientLight(13421772,.4);this.scene.add(d);var l=new this.$THREE.PointLight(16777215,.8);this.camera.add(l),this.scene.add(this.camera),this.renderer=new this.$THREE.WebGLRenderer({antialias:!0}),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),this.renderer.setClearColor(2106671),this.renderer.setPixelRatio(window.devicePixelRatio),document.getElementsByClassName("webglRefraction-container")[0].appendChild(this.renderer.domElement);var c=new i.b(this.camera,this.renderer.domElement);c.minDistance=10,c.maxDistance=100,window.addEventListener("resize",this.onResize,!1)},onResize:function(){this.$onWindowResize(this.camera,this.renderer)},animate:function(){requestAnimationFrame(this.animate),this.render()},render:function(){this.refractor.material.uniforms.time.value+=this.clock.getDelta(),this.renderer.render(this.scene,this.camera)}}},o={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"webglRefraction-container"},[t("div",{attrs:{id:"container"}}),this._v(" "),t("div",{attrs:{id:"info"}},[t("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener noreferrer"}},[this._v("three.js")]),this._v(" - refraction\n\t\t")])])}]};var v=r("VU/8")(s,o,!1,function(e){r("bYBq")},"data-v-12569806",null);t.default=v.exports},bYBq:function(e,t){}});
//# sourceMappingURL=328.1e3e7c4421efbf189773.js.map