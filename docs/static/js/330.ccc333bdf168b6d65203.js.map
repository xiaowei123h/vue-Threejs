{"version":3,"sources":["webpack:///src/views/physics/physicsAmmoTerrain.vue","webpack:///./src/views/physics/physicsAmmoTerrain.vue?d3b5","webpack:///./src/views/physics/physicsAmmoTerrain.vue"],"names":["physicsAmmoTerrain","data","terrainWidthExtents","terrainDepthExtents","terrainWidth","terrainDepth","terrainHalfWidth","terrainHalfDepth","terrainMaxHeight","terrainMinHeight","container","stats","camera","scene","renderer","terrainMesh","clock","collisionConfiguration","dispatcher","broadphase","solver","physicsWorld","dynamicObjects","transformAux1","heightData","ammoHeightData","time","objectTimePeriod","timeNextSpawn","maxNumObjects","mounted","_this","this","$THREE","Clock","Ammo","then","AmmoLib","init","animate","methods","generateHeight","initGraphics","initPhysics","_this2","document","getElementById","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","shadowMap","enabled","appendChild","domElement","$Stats","dom","style","left","position","top","PerspectiveCamera","Scene","background","Color","y","z","lookAt","OrbitControls","enableZoom","geometry","PlaneBufferGeometry","rotateX","Math","PI","vertices","attributes","array","i","j","l","length","computeVertexNormals","groundMaterial","MeshPhongMaterial","color","Mesh","receiveShadow","castShadow","add","TextureLoader","load","texture","wrapS","RepeatWrapping","wrapT","repeat","set","map","needsUpdate","light","DirectionalLight","shadow","dLight","right","bottom","near","far","mapSize","x","addEventListener","onWindowResize","$onWindowResize","btDefaultCollisionConfiguration","btCollisionDispatcher","btDbvtBroadphase","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","btVector3","groundShape","createTerrainShape","groundTransform","btTransform","setIdentity","setOrigin","groundLocalInertia","groundMotionState","btDefaultMotionState","groundBody","btRigidBody","btRigidBodyConstructionInfo","addRigidBody","width","depth","minHeight","maxHeight","Float32Array","hRange","w2","d2","p","radius","sqrt","pow","height","sin","_malloc","p2","HEAPF32","heightFieldShape","btHeightfieldTerrainShape","scaleX","scaleZ","setLocalScaling","setMargin","generateObject","threeObject","shape","ceil","random","SphereBufferGeometry","createObjectMaterial","btSphereShape","sx","sy","sz","BoxBufferGeometry","btBoxShape","CylinderBufferGeometry","btCylinderShape","ConeBufferGeometry","btConeShape","localInertia","calculateLocalInertia","objectSize","transform","pos","motionState","rbInfo","body","userData","physicsBody","push","c","floor","requestAnimationFrame","render","update","deltaTime","getDelta","updatePhysics","stepSimulation","il","objThree","ms","getMotionState","getWorldTransform","getOrigin","q","getRotation","quaternion","w","physics_physicsAmmoTerrain","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/330.ccc333bdf168b6d65203.js","sourcesContent":["<template>\r\n    <div class=\"physicsAmmoTerrain-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">Ammo.js physics terrain heightfield demo</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            // Heightfield parameters\r\n\t\t\tterrainWidthExtents: 100,\r\n\t\t\tterrainDepthExtents: 100,\r\n\t\t\tterrainWidth: 128,\r\n\t\t\tterrainDepth: 128,\r\n\t\t\tterrainHalfWidth: null,\r\n\t\t\tterrainHalfDepth: null,\r\n\t\t\tterrainMaxHeight: 8,\r\n\t\t\tterrainMinHeight: - 2,\r\n\t\t\t// Graphics variables\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tterrainMesh: null,\r\n\t\t\tclock: null,\r\n\t\t\t// Physics variables\r\n\t\t\tcollisionConfiguration: null,\r\n\t\t\tdispatcher: null,\r\n\t\t\tbroadphase: null,\r\n\t\t\tsolver: null,\r\n\t\t\tphysicsWorld: null,\r\n\t\t\tdynamicObjects: [],\r\n\t\t\ttransformAux1: null,\r\n\t\t\theightData: null,\r\n\t\t\tammoHeightData: null,\r\n\t\t\ttime: 0,\r\n\t\t\tobjectTimePeriod: 3,\r\n\t\t\ttimeNextSpawn: null,\r\n\t\t\tmaxNumObjects: 30,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        this.terrainHalfWidth = this.terrainWidth / 2\r\n\t\tthis.terrainHalfDepth = this.terrainDepth / 2\r\n        this.timeNextSpawn = this.time + this.objectTimePeriod\r\n        Ammo().then((AmmoLib) => {\r\n            Ammo = AmmoLib\r\n            this.init()\r\n            this.animate()\r\n        })\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.heightData = this.generateHeight(this.terrainWidth, this.terrainDepth, this.terrainMinHeight, this.terrainMaxHeight)\r\n            this.initGraphics()\r\n            this.initPhysics()\r\n        },\r\n        initGraphics() {\r\n            this.container = document.getElementById('container')\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.shadowMap.enabled = true\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.stats.domElement.style.position = 'absolute'\r\n            this.stats.domElement.style.top = '0px'\r\n            this.container.appendChild(this.stats.domElement)\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.2, 2000)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xbfd1e5)\r\n            this.camera.position.y = this.heightData[ this.terrainHalfWidth + this.terrainHalfDepth * this.terrainWidth ] * (this.terrainMaxHeight - this.terrainMinHeight) + 5\r\n            this.camera.position.z = this.terrainDepthExtents / 2\r\n            this.camera.lookAt(0, 0, 0)\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.enableZoom = false\r\n            var geometry = new this.$THREE.PlaneBufferGeometry(this.terrainWidthExtents, this.terrainDepthExtents, this.terrainWidth - 1, this.terrainDepth - 1)\r\n            geometry.rotateX(- Math.PI / 2)\r\n            var vertices = geometry.attributes.position.array\r\n            for (var i = 0, j = 0, l = vertices.length; i < l; i ++, j += 3) {\r\n                // j + 1 because it is the y component that we modify\r\n                vertices[ j + 1 ] = this.heightData[ i ]\r\n            }\r\n            geometry.computeVertexNormals()\r\n            var groundMaterial = new this.$THREE.MeshPhongMaterial({ color: 0xC7C7C7 })\r\n            this.terrainMesh = new this.$THREE.Mesh(geometry, groundMaterial)\r\n            this.terrainMesh.receiveShadow = true\r\n            this.terrainMesh.castShadow = true\r\n            this.scene.add(this.terrainMesh)\r\n            var textureLoader = new this.$THREE.TextureLoader()\r\n            textureLoader.load(\"static/textures/grid.png\", (texture) => {\r\n                texture.wrapS = this.$THREE.RepeatWrapping\r\n                texture.wrapT = this.$THREE.RepeatWrapping\r\n                texture.repeat.set(this.terrainWidth - 1, this.terrainDepth - 1)\r\n                groundMaterial.map = texture\r\n                groundMaterial.needsUpdate = true\r\n            })\r\n            var light = new this.$THREE.DirectionalLight(0xffffff, 1)\r\n            light.position.set(100, 100, 50)\r\n            light.castShadow = true\r\n            var dLight = 200\r\n            var sLight = dLight * 0.25\r\n            light.shadow.camera.left = - sLight\r\n            light.shadow.camera.right = sLight\r\n            light.shadow.camera.top = sLight\r\n            light.shadow.camera.bottom = - sLight\r\n            light.shadow.camera.near = dLight / 30\r\n            light.shadow.camera.far = dLight\r\n            light.shadow.mapSize.x = 1024 * 2\r\n            light.shadow.mapSize.y = 1024 * 2\r\n            this.scene.add(light)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        initPhysics() {\r\n            // Physics configuration\r\n            this.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration()\r\n            this.dispatcher = new Ammo.btCollisionDispatcher(this.collisionConfiguration)\r\n            this.broadphase = new Ammo.btDbvtBroadphase()\r\n            this.solver = new Ammo.btSequentialImpulseConstraintSolver()\r\n            this.physicsWorld = new Ammo.btDiscreteDynamicsWorld(this.dispatcher, this.broadphase, this.solver, this.collisionConfiguration)\r\n            this.physicsWorld.setGravity(new Ammo.btVector3(0, - 6, 0))\r\n            // Create the terrain body\r\n            var groundShape = this.createTerrainShape()\r\n            var groundTransform = new Ammo.btTransform()\r\n            groundTransform.setIdentity()\r\n            // Shifts the terrain, since bullet re-centers it on its bounding box.\r\n            groundTransform.setOrigin(new Ammo.btVector3(0, (this.terrainMaxHeight + this.terrainMinHeight) / 2, 0))\r\n            var groundMass = 0\r\n            var groundLocalInertia = new Ammo.btVector3(0, 0, 0)\r\n            var groundMotionState = new Ammo.btDefaultMotionState(groundTransform)\r\n            var groundBody = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(groundMass, groundMotionState, groundShape, groundLocalInertia))\r\n            this.physicsWorld.addRigidBody(groundBody)\r\n            this.transformAux1 = new Ammo.btTransform()\r\n        },\r\n        generateHeight(width, depth, minHeight, maxHeight) {\r\n            // Generates the height data (a sinus wave)\r\n            var size = width * depth\r\n            var data = new Float32Array(size)\r\n            var hRange = maxHeight - minHeight\r\n            var w2 = width / 2\r\n            var d2 = depth / 2\r\n            var phaseMult = 12\r\n            var p = 0\r\n            for (var j = 0; j < depth; j ++) {\r\n                for (var i = 0; i < width; i ++) {\r\n                    var radius = Math.sqrt(\r\n                        Math.pow((i - w2) / w2, 2.0) +\r\n                            Math.pow((j - d2) / d2, 2.0))\r\n                    var height = (Math.sin(radius * phaseMult) + 1) * 0.5 * hRange + minHeight\r\n                    data[ p ] = height\r\n                    p ++\r\n                }\r\n            }\r\n            return data\r\n        },\r\n        createTerrainShape() {\r\n            // This parameter is not really used, since we are using PHY_FLOAT height data type and hence it is ignored\r\n            var heightScale = 1\r\n            // Up axis = 0 for X, 1 for Y, 2 for Z. Normally 1 = Y is used.\r\n            var upAxis = 1\r\n            // hdt, height data type. \"PHY_FLOAT\" is used. Possible values are \"PHY_FLOAT\", \"PHY_UCHAR\", \"PHY_SHORT\"\r\n            var hdt = \"PHY_FLOAT\"\r\n            // Set this to your needs (inverts the triangles)\r\n            var flipQuadEdges = false\r\n            // Creates height data buffer in Ammo heap\r\n            this.ammoHeightData = Ammo._malloc(4 * this.terrainWidth * this.terrainDepth)\r\n            // Copy the javascript height data array to the Ammo one.\r\n            var p = 0\r\n            var p2 = 0\r\n            for (var j = 0; j < this.terrainDepth; j ++) {\r\n                for (var i = 0; i < this.terrainWidth; i ++) {\r\n                    // write 32-bit float data to memory\r\n                    Ammo.HEAPF32[ this.ammoHeightData + p2 >> 2 ] = this.heightData[ p ]\r\n                    p ++\r\n                    // 4 bytes/float\r\n                    p2 += 4\r\n                }\r\n            }\r\n            // Creates the heightfield physics shape\r\n            var heightFieldShape = new Ammo.btHeightfieldTerrainShape(\r\n                this.terrainWidth,\r\n                this.terrainDepth,\r\n                this.ammoHeightData,\r\n                heightScale,\r\n                this.terrainMinHeight,\r\n                this.terrainMaxHeight,\r\n                upAxis,\r\n                hdt,\r\n                flipQuadEdges\r\n            )\r\n            // Set horizontal scale\r\n            var scaleX = this.terrainWidthExtents / (this.terrainWidth - 1)\r\n            var scaleZ = this.terrainDepthExtents / (this.terrainDepth - 1)\r\n            heightFieldShape.setLocalScaling(new Ammo.btVector3(scaleX, 1, scaleZ))\r\n            heightFieldShape.setMargin(0.05)\r\n            return heightFieldShape\r\n        },\r\n        generateObject() {\r\n            var numTypes = 4\r\n            var objectType = Math.ceil(Math.random() * numTypes)\r\n            var threeObject = null\r\n            var shape = null\r\n            var objectSize = 3\r\n            var margin = 0.05\r\n            var radius, height\r\n            switch (objectType) {\r\n                case 1:\r\n                    // Sphere\r\n                    radius = 1 + Math.random() * objectSize\r\n                    threeObject = new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(radius, 20, 20), this.createObjectMaterial())\r\n                    shape = new Ammo.btSphereShape(radius)\r\n                    shape.setMargin(margin)\r\n                    break\r\n                case 2:\r\n                    // Box\r\n                    var sx = 1 + Math.random() * objectSize\r\n                    var sy = 1 + Math.random() * objectSize\r\n                    var sz = 1 + Math.random() * objectSize\r\n                    threeObject = new this.$THREE.Mesh(new this.$THREE.BoxBufferGeometry(sx, sy, sz, 1, 1, 1), this.createObjectMaterial())\r\n                    shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5))\r\n                    shape.setMargin(margin)\r\n                    break\r\n                case 3:\r\n                    // Cylinder\r\n                    radius = 1 + Math.random() * objectSize\r\n                    height = 1 + Math.random() * objectSize\r\n                    threeObject = new this.$THREE.Mesh(new this.$THREE.CylinderBufferGeometry(radius, radius, height, 20, 1), this.createObjectMaterial())\r\n                    shape = new Ammo.btCylinderShape(new Ammo.btVector3(radius, height * 0.5, radius))\r\n                    shape.setMargin(margin)\r\n                    break\r\n                default:\r\n                    // Cone\r\n                    radius = 1 + Math.random() * objectSize\r\n                    height = 2 + Math.random() * objectSize\r\n                    threeObject = new this.$THREE.Mesh(new this.$THREE.ConeBufferGeometry(radius, height, 20, 2), this.createObjectMaterial())\r\n                    shape = new Ammo.btConeShape(radius, height)\r\n                    break\r\n            }\r\n            threeObject.position.set((Math.random() - 0.5) * this.terrainWidth * 0.6, this.terrainMaxHeight + objectSize + 2, (Math.random() - 0.5) * this.terrainDepth * 0.6)\r\n            var mass = objectSize * 5\r\n            var localInertia = new Ammo.btVector3(0, 0, 0)\r\n            shape.calculateLocalInertia(mass, localInertia)\r\n            var transform = new Ammo.btTransform()\r\n            transform.setIdentity()\r\n            var pos = threeObject.position\r\n            transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z))\r\n            var motionState = new Ammo.btDefaultMotionState(transform)\r\n            var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia)\r\n            var body = new Ammo.btRigidBody(rbInfo)\r\n            threeObject.userData.physicsBody = body\r\n            threeObject.receiveShadow = true\r\n            threeObject.castShadow = true\r\n            this.scene.add(threeObject)\r\n            this.dynamicObjects.push(threeObject)\r\n            this.physicsWorld.addRigidBody(body)\r\n        },\r\n        createObjectMaterial() {\r\n            var c = Math.floor(Math.random() * (1 << 24))\r\n            return new this.$THREE.MeshPhongMaterial({ color: c })\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var deltaTime = this.clock.getDelta()\r\n            if (this.dynamicObjects.length < this.maxNumObjects && this.time > this.timeNextSpawn) {\r\n                this.generateObject()\r\n                this.timeNextSpawn = this.time + this.objectTimePeriod\r\n            }\r\n            this.updatePhysics(deltaTime)\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.time += deltaTime\r\n        },\r\n        updatePhysics(deltaTime) {\r\n            this.physicsWorld.stepSimulation(deltaTime, 10)\r\n            // Update objects\r\n            for (var i = 0, il = this.dynamicObjects.length; i < il; i ++) {\r\n                var objThree = this.dynamicObjects[ i ]\r\n                var objPhys = objThree.userData.physicsBody\r\n                var ms = objPhys.getMotionState()\r\n                if (ms) {\r\n                    ms.getWorldTransform(this.transformAux1)\r\n                    var p = this.transformAux1.getOrigin()\r\n                    var q = this.transformAux1.getRotation()\r\n                    objThree.position.set(p.x(), p.y(), p.z())\r\n                    objThree.quaternion.set(q.x(), q.y(), q.z(), q.w())\r\n                }\r\n            }\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.physicsAmmoTerrain-container {\r\n    width: 100%;\r\n    color: #333;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/physics/physicsAmmoTerrain.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"physicsAmmoTerrain-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_vm._v(\"Ammo.js physics terrain heightfield demo\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-109edab3\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/physics/physicsAmmoTerrain.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-109edab3\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./physicsAmmoTerrain.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoTerrain.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./physicsAmmoTerrain.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-109edab3\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./physicsAmmoTerrain.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-109edab3\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/physics/physicsAmmoTerrain.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}