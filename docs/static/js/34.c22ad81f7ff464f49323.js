webpackJsonp([34],{"4zb3":function(e,t){},"7jJ3":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("QEtz"),o=r("wIBv"),a=r("DHiR"),n={data:function(){return{scene:null,camera:null,renderer:null,water:null,gui:null}},mounted:function(){this.init(),this.animate()},beforeDestroy:function(){this.gui.destroy()},methods:{init:function(){var e=this;this.scene=new this.$THREE.Scene,this.camera=new this.$THREE.PerspectiveCamera(45,this.$webglInnerWidth/window.innerHeight,.1,200),this.camera.position.set(0,25,0),this.camera.lookAt(this.scene.position);var t=new this.$THREE.PlaneBufferGeometry(20,20,10,10),r=new this.$THREE.MeshBasicMaterial({color:13421772}),n=new this.$THREE.Mesh(t,r);n.rotation.x=-.5*Math.PI,this.scene.add(n);var l=new this.$THREE.TextureLoader;l.load("static/textures/floors/FloorsCheckerboard_S_Diffuse.jpg",function(t){t.wrapS=e.$THREE.RepeatWrapping,t.wrapT=e.$THREE.RepeatWrapping,t.anisotropy=16,t.repeat.set(4,4),r.map=t,r.needsUpdate=!0});var s=new this.$THREE.PlaneBufferGeometry(20,20),c=l.load("static/textures/water/Water_1_M_Flow.jpg");this.water=new a.a(s,{scale:2,textureWidth:1024,textureHeight:1024,flowMap:c}),this.water.position.y=1,this.water.rotation.x=-.5*Math.PI,this.scene.add(this.water);var f=new this.$THREE.PlaneBufferGeometry(20,20),u=new this.$THREE.MeshBasicMaterial({map:c}),m=new this.$THREE.Mesh(f,u);m.position.y=1.01,m.rotation.x=-.5*Math.PI,m.visible=!1,this.scene.add(m),this.renderer=new this.$THREE.WebGLRenderer({antialias:!0}),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),this.renderer.setPixelRatio(window.devicePixelRatio),document.getElementsByClassName("webglWaterFlowmap-container")[0].appendChild(this.renderer.domElement),this.gui=new i.a,this.gui.add(m,"visible").name("Show Flow Map"),this.gui.open();var v=new o.b(this.camera,this.renderer.domElement);v.minDistance=5,v.maxDistance=50,window.addEventListener("resize",this.onResize,!1)},onResize:function(){this.$onWindowResize(this.camera,this.renderer)},animate:function(){requestAnimationFrame(this.animate),this.render()},render:function(){this.renderer.render(this.scene,this.camera)}}},l={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"webglWaterFlowmap-container"},[t("div",{attrs:{id:"container"}}),this._v(" "),t("div",{attrs:{id:"info"}},[t("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener noreferrer"}},[this._v("three.js")]),this._v(" - water flow map\n\t\t")])])}]};var s=r("VU/8")(n,l,!1,function(e){r("4zb3")},"data-v-22eccc86",null);t.default=s.exports},DHiR:function(e,t,r){"use strict";r.d(t,"a",function(){return n});var i=r("6+nK"),o=r("B6oc"),a=r("GoTt"),n=function e(t,r){i.Mesh.call(this,t),this.type="Water";var n=this,l=void 0!==(r=r||{}).color?new i.Color(r.color):new i.Color(16777215),s=r.textureWidth||512,c=r.textureHeight||512,f=r.clipBias||0,u=r.flowDirection||new i.Vector2(1,0),m=r.flowSpeed||.03,v=r.reflectivity||.02,d=r.scale||1,p=r.shader||e.WaterShader,h=void 0!==r.encoding?r.encoding:i.LinearEncoding,w=new i.TextureLoader,g=r.flowMap||void 0,x=r.normalMap0||w.load("textures/water/Water_1_M_Normal.jpg"),y=r.normalMap1||w.load("textures/water/Water_2_M_Normal.jpg"),M=.15,E=.5*M,R=new i.Matrix4,_=new i.Clock;if(void 0!==o.a)if(void 0!==a.a){var W=new o.a(t,{textureWidth:s,textureHeight:c,clipBias:f,encoding:h}),C=new a.a(t,{textureWidth:s,textureHeight:c,clipBias:f,encoding:h});W.matrixAutoUpdate=!1,C.matrixAutoUpdate=!1,this.material=new i.ShaderMaterial({uniforms:i.UniformsUtils.merge([i.UniformsLib.fog,p.uniforms]),vertexShader:p.vertexShader,fragmentShader:p.fragmentShader,transparent:!0,fog:!0}),void 0!==g?(this.material.defines.USE_FLOWMAP="",this.material.uniforms.tFlowMap={type:"t",value:g}):this.material.uniforms.flowDirection={type:"v2",value:u},x.wrapS=x.wrapT=i.RepeatWrapping,y.wrapS=y.wrapT=i.RepeatWrapping,this.material.uniforms.tReflectionMap.value=W.getRenderTarget().texture,this.material.uniforms.tRefractionMap.value=C.getRenderTarget().texture,this.material.uniforms.tNormalMap0.value=x,this.material.uniforms.tNormalMap1.value=y,this.material.uniforms.color.value=l,this.material.uniforms.reflectivity.value=v,this.material.uniforms.textureMatrix.value=R,this.material.uniforms.config.value.x=0,this.material.uniforms.config.value.y=E,this.material.uniforms.config.value.z=E,this.material.uniforms.config.value.w=d,this.onBeforeRender=function(e,t,r){var i,o;!function(e){R.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),R.multiply(e.projectionMatrix),R.multiply(e.matrixWorldInverse),R.multiply(n.matrixWorld)}(r),i=_.getDelta(),(o=n.material.uniforms.config).value.x+=m*i,o.value.y=o.value.x+E,o.value.x>=M?(o.value.x=0,o.value.y=E):o.value.y>=M&&(o.value.y=o.value.y-M),n.visible=!1,W.matrixWorld.copy(n.matrixWorld),C.matrixWorld.copy(n.matrixWorld),W.onBeforeRender(e,t,r),C.onBeforeRender(e,t,r),n.visible=!0}}else console.error("THREE.Water: Required component Refractor not found.");else console.error("THREE.Water: Required component Reflector not found.")};n.prototype=Object.create(i.Mesh.prototype),n.prototype.constructor=n,n.WaterShader={uniforms:{color:{type:"c",value:null},reflectivity:{type:"f",value:0},tReflectionMap:{type:"t",value:null},tRefractionMap:{type:"t",value:null},tNormalMap0:{type:"t",value:null},tNormalMap1:{type:"t",value:null},textureMatrix:{type:"m4",value:null},config:{type:"v4",value:new i.Vector4}},vertexShader:["#include <common>","#include <fog_pars_vertex>","#include <logdepthbuf_pars_vertex>","uniform mat4 textureMatrix;","varying vec4 vCoord;","varying vec2 vUv;","varying vec3 vToEye;","void main() {","\tvUv = uv;","\tvCoord = textureMatrix * vec4( position, 1.0 );","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvToEye = cameraPosition - worldPosition.xyz;","\tvec4 mvPosition =  viewMatrix * worldPosition;","\tgl_Position = projectionMatrix * mvPosition;","\t#include <logdepthbuf_vertex>","\t#include <fog_vertex>","}"].join("\n"),fragmentShader:["#include <common>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","uniform sampler2D tReflectionMap;","uniform sampler2D tRefractionMap;","uniform sampler2D tNormalMap0;","uniform sampler2D tNormalMap1;","#ifdef USE_FLOWMAP","\tuniform sampler2D tFlowMap;","#else","\tuniform vec2 flowDirection;","#endif","uniform vec3 color;","uniform float reflectivity;","uniform vec4 config;","varying vec4 vCoord;","varying vec2 vUv;","varying vec3 vToEye;","void main() {","\t#include <logdepthbuf_fragment>","\tfloat flowMapOffset0 = config.x;","\tfloat flowMapOffset1 = config.y;","\tfloat halfCycle = config.z;","\tfloat scale = config.w;","\tvec3 toEye = normalize( vToEye );","\tvec2 flow;","\t#ifdef USE_FLOWMAP","\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;","\t#else","\t\tflow = flowDirection;","\t#endif","\tflow.x *= - 1.0;","\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );","\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );","\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;","\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );","\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );","\tfloat theta = max( dot( toEye, normal ), 0.0 );","\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 coord = vCoord.xyz / vCoord.w;","\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;","\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );","\tvec4 refractColor = texture2D( tRefractionMap, uv );","\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );","\t#include <tonemapping_fragment>","\t#include <encodings_fragment>","\t#include <fog_fragment>","}"].join("\n")}}});
//# sourceMappingURL=34.c22ad81f7ff464f49323.js.map