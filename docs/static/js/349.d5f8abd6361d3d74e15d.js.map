{"version":3,"sources":["webpack:///src/views/interactive/webglInteractiveRaycastingPoints.vue","webpack:///./src/views/interactive/webglInteractiveRaycastingPoints.vue?2c10","webpack:///./src/views/interactive/webglInteractiveRaycastingPoints.vue"],"names":["webglInteractiveRaycastingPoints","data","renderer","scene","camera","stats","pointclouds","raycaster","intersection","spheresIndex","clock","toggle","mouse","spheres","threshold","pointSize","width","length","rotateY","mounted","this","$THREE","Vector2","Matrix4","makeRotationY","init","animate","methods","generatePointCloudGeometry","color","geometry","BufferGeometry","numPoints","positions","Float32Array","colors","k","i","j","u","v","x","y","Math","cos","PI","sin","z","intensity","r","g","b","setAttribute","BufferAttribute","computeBoundingBox","generatePointcloud","material","PointsMaterial","size","vertexColors","Points","generateIndexedPointcloud","indices","Uint16Array","setIndex","generateIndexedWithOffsetPointcloud","addGroup","container","document","getElementById","Scene","Clock","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","lookAt","updateMatrix","pcBuffer","Color","scale","add","pcIndexed","pcIndexedOffset","sphereGeometry","SphereBufferGeometry","sphereMaterial","MeshBasicMaterial","sphere","Mesh","push","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","Raycaster","params","$Stats","dom","style","left","addEventListener","onWindowResize","onDocumentMouseMove","event","preventDefault","clientX","innerWidth","clientY","$onWindowResize","requestAnimationFrame","render","update","applyMatrix4","updateMatrixWorld","setFromCamera","intersections","intersectObjects","copy","point","multiplyScalar","clampScalar","getDelta","interactive_webglInteractiveRaycastingPoints","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/349.d5f8abd6361d3d74e15d.js","sourcesContent":["<template>\r\n    <div class=\"webglInteractiveRaycastingPoints-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\"><a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl - interactive - raycasting - points </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            renderer: null,\r\n            scene: null,\r\n            camera: null,\r\n            stats: null,\r\n\t\t\tpointclouds: null,\r\n\t\t\traycaster: null,\r\n\t\t\tintersection: null,\r\n\t\t\tspheresIndex: 0,\r\n\t\t\tclock: null,\r\n\t\t\ttoggle: 0,\r\n\t\t\tmouse: null,\r\n\t\t\tspheres: [],\r\n\t\t\tthreshold: 0.1,\r\n\t\t\tpointSize: 0.05,\r\n\t\t\twidth: 80,\r\n\t\t\tlength: 160,\r\n\t\t\trotateY: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.rotateY = new this.$THREE.Matrix4().makeRotationY(0.005)\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    methods: {\r\n        generatePointCloudGeometry(color, width, length) {\r\n            var geometry = new this.$THREE.BufferGeometry()\r\n            var numPoints = width * length\r\n            var positions = new Float32Array(numPoints * 3)\r\n            var colors = new Float32Array(numPoints * 3)\r\n            var k = 0\r\n            for (var i = 0; i < width; i ++) {\r\n                for (var j = 0; j < length; j ++) {\r\n                    var u = i / width\r\n                    var v = j / length\r\n                    var x = u - 0.5\r\n                    var y = (Math.cos(u * Math.PI * 4) + Math.sin(v * Math.PI * 8)) / 20\r\n                    var z = v - 0.5\r\n                    positions[3 * k] = x\r\n                    positions[3 * k + 1] = y\r\n                    positions[3 * k + 2] = z\r\n                    var intensity = (y + 0.1) * 5\r\n                    colors[3 * k] = color.r * intensity\r\n                    colors[3 * k + 1] = color.g * intensity\r\n                    colors[3 * k + 2] = color.b * intensity\r\n                    k ++\r\n                }\r\n            }\r\n            geometry.setAttribute('position', new this.$THREE.BufferAttribute(positions, 3))\r\n            geometry.setAttribute('color', new this.$THREE.BufferAttribute(colors, 3))\r\n            geometry.computeBoundingBox()\r\n            return geometry\r\n        },\r\n        generatePointcloud(color, width, length) {\r\n            var geometry = this.generatePointCloudGeometry(color, width, length)\r\n            var material = new this.$THREE.PointsMaterial({ size: this.pointSize, vertexColors: true })\r\n            return new this.$THREE.Points(geometry, material)\r\n        },\r\n        generateIndexedPointcloud(color, width, length) {\r\n            var geometry = this.generatePointCloudGeometry(color, width, length)\r\n            var numPoints = width * length\r\n            var indices = new Uint16Array(numPoints)\r\n            var k = 0\r\n            for (var i = 0; i < width; i ++) {\r\n                for (var j = 0; j < length; j ++) {\r\n                    indices[k] = k\r\n                    k ++\r\n                }\r\n            }\r\n            geometry.setIndex(new this.$THREE.BufferAttribute(indices, 1))\r\n            var material = new this.$THREE.PointsMaterial({ size: this.pointSize, vertexColors: true })\r\n            return new this.$THREE.Points(geometry, material)\r\n        },\r\n        generateIndexedWithOffsetPointcloud(color, width, length) {\r\n            var geometry = this.generatePointCloudGeometry(color, width, length)\r\n            var numPoints = width * length\r\n            var indices = new Uint16Array(numPoints)\r\n            var k = 0\r\n            for (var i = 0; i < width; i ++) {\r\n                for (var j = 0; j < length; j ++) {\r\n                    indices[k] = k\r\n                    k ++\r\n                }\r\n            }\r\n            geometry.setIndex(new this.$THREE.BufferAttribute(indices, 1))\r\n            geometry.addGroup(0, indices.length)\r\n            var material = new this.$THREE.PointsMaterial({ size: this.pointSize, vertexColors: true })\r\n            return new this.$THREE.Points(geometry, material)\r\n        },\r\n        init() {\r\n            var container = document.getElementById('container')\r\n            this.scene = new this.$THREE.Scene()\r\n            this.clock = new this.$THREE.Clock()\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, this.$webglInnerWidth / window.innerHeight, 1, 10000)\r\n            this.camera.position.set(10, 10, 10)\r\n            this.camera.lookAt(this.scene.position)\r\n            this.camera.updateMatrix()\r\n            //\r\n            var pcBuffer = this.generatePointcloud(new this.$THREE.Color(1, 0, 0), this.width, this.length)\r\n            pcBuffer.scale.set(5, 10, 10)\r\n            pcBuffer.position.set(- 5, 0, 0)\r\n            this.scene.add(pcBuffer)\r\n            var pcIndexed = this.generateIndexedPointcloud(new this.$THREE.Color(0, 1, 0), this.width, this.length)\r\n            pcIndexed.scale.set(5, 10, 10)\r\n            pcIndexed.position.set(0, 0, 0)\r\n            this.scene.add(pcIndexed)\r\n            var pcIndexedOffset = this.generateIndexedWithOffsetPointcloud(new this.$THREE.Color(0, 1, 1), this.width, this.length)\r\n            pcIndexedOffset.scale.set(5, 10, 10)\r\n            pcIndexedOffset.position.set(5, 0, 0)\r\n            this.scene.add(pcIndexedOffset)\r\n            this.pointclouds = [pcBuffer, pcIndexed, pcIndexedOffset]\r\n            //\r\n            var sphereGeometry = new this.$THREE.SphereBufferGeometry(0.1, 32, 32)\r\n            var sphereMaterial = new this.$THREE.MeshBasicMaterial({ color: 0xff0000 })\r\n            for (var i = 0; i < 40; i ++) {\r\n                var sphere = new this.$THREE.Mesh(sphereGeometry, sphereMaterial)\r\n                this.scene.add(sphere)\r\n                this.spheres.push(sphere)\r\n            }\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            container.appendChild(this.renderer.domElement)\r\n            //\r\n            this.raycaster = new this.$THREE.Raycaster()\r\n            this.raycaster.params.Points.threshold = this.threshold\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            document.addEventListener('mousemove', this.onDocumentMouseMove, false)\r\n        },\r\n        onDocumentMouseMove(event) {\r\n            event.preventDefault()\r\n            this.mouse.x = ((event.clientX - 281) / (window.innerWidth - 281)) * 2 - 1\r\n            this.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            this.camera.applyMatrix4(this.rotateY)\r\n            this.camera.updateMatrixWorld()\r\n            this.raycaster.setFromCamera(this.mouse, this.camera)\r\n            var intersections = this.raycaster.intersectObjects(this.pointclouds)\r\n            this.intersection = (intersections.length) > 0 ? intersections[0] : null\r\n            if (this.toggle > 0.02 && this.intersection !== null) {\r\n                this.spheres[this.spheresIndex].position.copy(this.intersection.point)\r\n                this.spheres[this.spheresIndex].scale.set(1, 1, 1)\r\n                this.spheresIndex = (this.spheresIndex + 1) % this.spheres.length\r\n                this.toggle = 0\r\n            }\r\n            for (var i = 0; i < this.spheres.length; i ++) {\r\n                var sphere = this.spheres[i]\r\n                sphere.scale.multiplyScalar(0.98)\r\n                sphere.scale.clampScalar(0.01, 1)\r\n            }\r\n            this.toggle += this.clock.getDelta()\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglInteractiveRaycastingPoints-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/interactive/webglInteractiveRaycastingPoints.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglInteractiveRaycastingPoints-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl - interactive - raycasting - points \")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-07526051\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/interactive/webglInteractiveRaycastingPoints.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-07526051\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglInteractiveRaycastingPoints.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglInteractiveRaycastingPoints.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglInteractiveRaycastingPoints.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-07526051\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglInteractiveRaycastingPoints.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-07526051\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/interactive/webglInteractiveRaycastingPoints.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}