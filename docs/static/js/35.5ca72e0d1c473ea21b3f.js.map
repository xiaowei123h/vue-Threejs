{"version":3,"sources":["webpack:///./src/components/jsm/objects/Sky.js","webpack:///./src/components/jsm/objects/Water.js","webpack:///src/views/shaders/webglShadersOcean.vue","webpack:///./src/views/shaders/webglShadersOcean.vue?006d","webpack:///./src/views/shaders/webglShadersOcean.vue"],"names":["__webpack_require__","d","__webpack_exports__","Sky","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","shader","SkyShader","material","ShaderMaterial","name","fragmentShader","vertexShader","uniforms","UniformsUtils","clone","side","BackSide","depthWrite","Mesh","call","this","BoxBufferGeometry","prototype","Object","create","turbidity","value","rayleigh","mieCoefficient","mieDirectionalG","sunPosition","Vector3","up","join","Water","geometry","options","scope","textureWidth","undefined","textureHeight","clipBias","alpha","time","normalSampler","waterNormals","sunDirection","sunColor","Color","waterColor","eye","distortionScale","FrontSide","fog","mirrorPlane","Plane","normal","mirrorWorldPosition","cameraWorldPosition","rotationMatrix","Matrix4","lookAtPosition","clipPlane","Vector4","view","target","q","textureMatrix","mirrorCamera","PerspectiveCamera","parameters","minFilter","LinearFilter","magFilter","format","RGBFormat","renderTarget","WebGLRenderTarget","MathUtils","isPowerOfTwo","texture","generateMipmaps","mirrorShader","merge","UniformsLib","mirrorSampler","size","lights","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","outputEncoding","LinearEncoding","console","warn","toneMapping","NoToneMapping","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","visible","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","constructor","webglShadersOcean","data","container","stats","controls","water","sun","mesh","gui","mounted","init","animate","beforeDestroy","destroy","methods","_this","document","getElementById","$THREE","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","appendChild","domElement","Scene","waterGeometry","PlaneBufferGeometry","Water_Water","TextureLoader","load","wrapS","wrapT","RepeatWrapping","rotation","PI","sky","scale","setScalar","skyUniforms","theta","phi","inclination","azimuth","pmremGenerator","PMREMGenerator","that","cos","sin","normalize","environment","fromScene","MeshStandardMaterial","roughness","OrbitControls","maxPolarAngle","minDistance","maxDistance","update","$Stats","dom","style","left","dat_gui_module","folderSky","addFolder","onChange","updateSun","open","waterUniforms","folderWater","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","performance","now","shaders_webglShadersOcean","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","rel","Component","normalizeComponent","ssrContext"],"mappings":"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","file":"static/js/35.5ca72e0d1c473ea21b3f.js","sourcesContent":["import {\r\n\tBackSide,\r\n\tBoxBufferGeometry,\r\n\tMesh,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Based on \"A Practical Analytic Model for Daylight\"\r\n * aka The Preetham Model, the de facto standard analytic skydome model\r\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\r\n *\r\n * First implemented by Simon Wallner\r\n * http://www.simonwallner.at/projects/atmospheric-scattering\r\n *\r\n * Improved by Martin Upitis\r\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\r\n *\r\n * Three.js integration by zz85 http://twitter.com/blurspline\r\n*/\r\n\r\nvar Sky = function () {\r\n\r\n\tvar shader = Sky.SkyShader;\r\n\r\n\tvar material = new ShaderMaterial( {\r\n\t\tname: 'SkyShader',\r\n\t\tfragmentShader: shader.fragmentShader,\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\r\n\t\tside: BackSide,\r\n\t\tdepthWrite: false\r\n\t} );\r\n\r\n\tMesh.call( this, new BoxBufferGeometry( 1, 1, 1 ), material );\r\n\r\n};\r\n\r\nSky.prototype = Object.create( Mesh.prototype );\r\n\r\nSky.SkyShader = {\r\n\r\n\tuniforms: {\r\n\t\t\"turbidity\": { value: 2 },\r\n\t\t\"rayleigh\": { value: 1 },\r\n\t\t\"mieCoefficient\": { value: 0.005 },\r\n\t\t\"mieDirectionalG\": { value: 0.8 },\r\n\t\t\"sunPosition\": { value: new Vector3() },\r\n\t\t\"up\": { value: new Vector3( 0, 1, 0 ) }\r\n\t},\r\n\r\n\tvertexShader: [\r\n\t\t'uniform vec3 sunPosition;',\r\n\t\t'uniform float rayleigh;',\r\n\t\t'uniform float turbidity;',\r\n\t\t'uniform float mieCoefficient;',\r\n\t\t'uniform vec3 up;',\r\n\r\n\t\t'varying vec3 vWorldPosition;',\r\n\t\t'varying vec3 vSunDirection;',\r\n\t\t'varying float vSunfade;',\r\n\t\t'varying vec3 vBetaR;',\r\n\t\t'varying vec3 vBetaM;',\r\n\t\t'varying float vSunE;',\r\n\r\n\t\t// constants for atmospheric scattering\r\n\t\t'const float e = 2.71828182845904523536028747135266249775724709369995957;',\r\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\r\n\r\n\t\t// wavelength of used primaries, according to preetham\r\n\t\t'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\r\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\r\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\r\n\t\t'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\r\n\r\n\t\t// mie stuff\r\n\t\t// K coefficient for the primaries\r\n\t\t'const float v = 4.0;',\r\n\t\t'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\r\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\r\n\t\t'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\r\n\r\n\t\t// earth shadow hack\r\n\t\t// cutoffAngle = pi / 1.95;\r\n\t\t'const float cutoffAngle = 1.6110731556870734;',\r\n\t\t'const float steepness = 1.5;',\r\n\t\t'const float EE = 1000.0;',\r\n\r\n\t\t'float sunIntensity( float zenithAngleCos ) {',\r\n\t\t'\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );',\r\n\t\t'\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );',\r\n\t\t'}',\r\n\r\n\t\t'vec3 totalMie( float T ) {',\r\n\t\t'\tfloat c = ( 0.2 * T ) * 10E-18;',\r\n\t\t'\treturn 0.434 * c * MieConst;',\r\n\t\t'}',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n\t\t'\tvWorldPosition = worldPosition.xyz;',\r\n\r\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\t\t'\tgl_Position.z = gl_Position.w;', // set z to camera.far\r\n\r\n\t\t'\tvSunDirection = normalize( sunPosition );',\r\n\r\n\t\t'\tvSunE = sunIntensity( dot( vSunDirection, up ) );',\r\n\r\n\t\t'\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );',\r\n\r\n\t\t'\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\r\n\r\n\t\t// extinction (absorbtion + out scattering)\r\n\t\t// rayleigh coefficients\r\n\t\t'\tvBetaR = totalRayleigh * rayleighCoefficient;',\r\n\r\n\t\t// mie coefficients\r\n\t\t'\tvBetaM = totalMie( turbidity ) * mieCoefficient;',\r\n\r\n\t\t'}'\r\n\t].join( '\\n' ),\r\n\r\n\tfragmentShader: [\r\n\t\t'varying vec3 vWorldPosition;',\r\n\t\t'varying vec3 vSunDirection;',\r\n\t\t'varying float vSunfade;',\r\n\t\t'varying vec3 vBetaR;',\r\n\t\t'varying vec3 vBetaM;',\r\n\t\t'varying float vSunE;',\r\n\r\n\t\t'uniform float mieDirectionalG;',\r\n\t\t'uniform vec3 up;',\r\n\r\n\t\t'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\r\n\r\n\t\t// constants for atmospheric scattering\r\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\r\n\r\n\t\t'const float n = 1.0003;', // refractive index of air\r\n\t\t'const float N = 2.545E25;', // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\r\n\r\n\t\t// optical length at zenith for molecules\r\n\t\t'const float rayleighZenithLength = 8.4E3;',\r\n\t\t'const float mieZenithLength = 1.25E3;',\r\n\t\t// 66 arc seconds -> degrees, and the cosine of that\r\n\t\t'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\r\n\r\n\t\t// 3.0 / ( 16.0 * pi )\r\n\t\t'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\r\n\t\t// 1.0 / ( 4.0 * pi )\r\n\t\t'const float ONE_OVER_FOURPI = 0.07957747154594767;',\r\n\r\n\t\t'float rayleighPhase( float cosTheta ) {',\r\n\t\t'\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );',\r\n\t\t'}',\r\n\r\n\t\t'float hgPhase( float cosTheta, float g ) {',\r\n\t\t'\tfloat g2 = pow( g, 2.0 );',\r\n\t\t'\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );',\r\n\t\t'\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );',\r\n\t\t'}',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvec3 direction = normalize( vWorldPosition - cameraPos );',\r\n\r\n\t\t// optical length\r\n\t\t// cutoff angle at 90 to avoid singularity in next formula.\r\n\t\t'\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );',\r\n\t\t'\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );',\r\n\t\t'\tfloat sR = rayleighZenithLength * inverse;',\r\n\t\t'\tfloat sM = mieZenithLength * inverse;',\r\n\r\n\t\t// combined extinction factor\r\n\t\t'\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\r\n\r\n\t\t// in scattering\r\n\t\t'\tfloat cosTheta = dot( direction, vSunDirection );',\r\n\r\n\t\t'\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );',\r\n\t\t'\tvec3 betaRTheta = vBetaR * rPhase;',\r\n\r\n\t\t'\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );',\r\n\t\t'\tvec3 betaMTheta = vBetaM * mPhase;',\r\n\r\n\t\t'\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );',\r\n\t\t'\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\r\n\r\n\t\t// nightsky\r\n\t\t'\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]',\r\n\t\t'\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]',\r\n\t\t'\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );',\r\n\t\t'\tvec3 L0 = vec3( 0.1 ) * Fex;',\r\n\r\n\t\t// composition + solar disc\r\n\t\t'\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\r\n\t\t'\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\r\n\r\n\t\t'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\r\n\r\n\t\t'\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );',\r\n\r\n\t\t'\tgl_FragColor = vec4( retColor, 1.0 );',\r\n\r\n\t\t'#include <tonemapping_fragment>',\r\n\t\t'#include <encodings_fragment>',\r\n\r\n\t\t'}'\r\n\t].join( '\\n' )\r\n\r\n};\r\n\r\nexport { Sky };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/Sky.js","import {\r\n\tColor,\r\n\tFrontSide,\r\n\tLinearEncoding,\r\n\tLinearFilter,\r\n\tMathUtils,\r\n\tMatrix4,\r\n\tMesh,\r\n\tNoToneMapping,\r\n\tPerspectiveCamera,\r\n\tPlane,\r\n\tRGBFormat,\r\n\tShaderMaterial,\r\n\tUniformsLib,\r\n\tUniformsUtils,\r\n\tVector3,\r\n\tVector4,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Work based on :\r\n * http://slayvin.net : Flat mirror for three.js\r\n * http://www.adelphi.edu/~stemkoski : An implementation of water shader based on the flat mirror\r\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\r\n */\r\n\r\nvar Water = function ( geometry, options ) {\r\n\r\n\tMesh.call( this, geometry );\r\n\r\n\tvar scope = this;\r\n\r\n\toptions = options || {};\r\n\r\n\tvar textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\r\n\tvar textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\r\n\r\n\tvar clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\r\n\tvar alpha = options.alpha !== undefined ? options.alpha : 1.0;\r\n\tvar time = options.time !== undefined ? options.time : 0.0;\r\n\tvar normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\r\n\tvar sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3( 0.70707, 0.70707, 0.0 );\r\n\tvar sunColor = new Color( options.sunColor !== undefined ? options.sunColor : 0xffffff );\r\n\tvar waterColor = new Color( options.waterColor !== undefined ? options.waterColor : 0x7F7F7F );\r\n\tvar eye = options.eye !== undefined ? options.eye : new Vector3( 0, 0, 0 );\r\n\tvar distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\r\n\tvar side = options.side !== undefined ? options.side : FrontSide;\r\n\tvar fog = options.fog !== undefined ? options.fog : false;\r\n\r\n\t//\r\n\r\n\tvar mirrorPlane = new Plane();\r\n\tvar normal = new Vector3();\r\n\tvar mirrorWorldPosition = new Vector3();\r\n\tvar cameraWorldPosition = new Vector3();\r\n\tvar rotationMatrix = new Matrix4();\r\n\tvar lookAtPosition = new Vector3( 0, 0, - 1 );\r\n\tvar clipPlane = new Vector4();\r\n\r\n\tvar view = new Vector3();\r\n\tvar target = new Vector3();\r\n\tvar q = new Vector4();\r\n\r\n\tvar textureMatrix = new Matrix4();\r\n\r\n\tvar mirrorCamera = new PerspectiveCamera();\r\n\r\n\tvar parameters = {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\tformat: RGBFormat\r\n\t};\r\n\r\n\tvar renderTarget = new WebGLRenderTarget( textureWidth, textureHeight, parameters );\r\n\r\n\tif ( ! MathUtils.isPowerOfTwo( textureWidth ) || ! MathUtils.isPowerOfTwo( textureHeight ) ) {\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tvar mirrorShader = {\r\n\r\n\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\tUniformsLib[ 'fog' ],\r\n\t\t\tUniformsLib[ 'lights' ],\r\n\t\t\t{\r\n\t\t\t\t\"normalSampler\": { value: null },\r\n\t\t\t\t\"mirrorSampler\": { value: null },\r\n\t\t\t\t\"alpha\": { value: 1.0 },\r\n\t\t\t\t\"time\": { value: 0.0 },\r\n\t\t\t\t\"size\": { value: 1.0 },\r\n\t\t\t\t\"distortionScale\": { value: 20.0 },\r\n\t\t\t\t\"textureMatrix\": { value: new Matrix4() },\r\n\t\t\t\t\"sunColor\": { value: new Color( 0x7F7F7F ) },\r\n\t\t\t\t\"sunDirection\": { value: new Vector3( 0.70707, 0.70707, 0 ) },\r\n\t\t\t\t\"eye\": { value: new Vector3() },\r\n\t\t\t\t\"waterColor\": { value: new Color( 0x555555 ) }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\t\t\t'uniform mat4 textureMatrix;',\r\n\t\t\t'uniform float time;',\r\n\r\n\t\t\t'varying vec4 mirrorCoord;',\r\n\t\t\t'varying vec4 worldPosition;',\r\n\r\n\t\t \t'#include <common>',\r\n\t\t \t'#include <fog_pars_vertex>',\r\n\t\t\t'#include <shadowmap_pars_vertex>',\r\n\t\t\t'#include <logdepthbuf_pars_vertex>',\r\n\r\n\t\t\t'void main() {',\r\n\t\t\t'\tmirrorCoord = modelMatrix * vec4( position, 1.0 );',\r\n\t\t\t'\tworldPosition = mirrorCoord.xyzw;',\r\n\t\t\t'\tmirrorCoord = textureMatrix * mirrorCoord;',\r\n\t\t\t'\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );',\r\n\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\r\n\r\n\t\t\t'#include <beginnormal_vertex>',\r\n\t\t\t'#include <defaultnormal_vertex>',\r\n\t\t\t'#include <logdepthbuf_vertex>',\r\n\t\t\t'#include <fog_vertex>',\r\n\t\t\t'#include <shadowmap_vertex>',\r\n\t\t\t'}'\r\n\t\t].join( '\\n' ),\r\n\r\n\t\tfragmentShader: [\r\n\t\t\t'uniform sampler2D mirrorSampler;',\r\n\t\t\t'uniform float alpha;',\r\n\t\t\t'uniform float time;',\r\n\t\t\t'uniform float size;',\r\n\t\t\t'uniform float distortionScale;',\r\n\t\t\t'uniform sampler2D normalSampler;',\r\n\t\t\t'uniform vec3 sunColor;',\r\n\t\t\t'uniform vec3 sunDirection;',\r\n\t\t\t'uniform vec3 eye;',\r\n\t\t\t'uniform vec3 waterColor;',\r\n\r\n\t\t\t'varying vec4 mirrorCoord;',\r\n\t\t\t'varying vec4 worldPosition;',\r\n\r\n\t\t\t'vec4 getNoise( vec2 uv ) {',\r\n\t\t\t'\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);',\r\n\t\t\t'\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );',\r\n\t\t\t'\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );',\r\n\t\t\t'\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );',\r\n\t\t\t'\tvec4 noise = texture2D( normalSampler, uv0 ) +',\r\n\t\t\t'\t\ttexture2D( normalSampler, uv1 ) +',\r\n\t\t\t'\t\ttexture2D( normalSampler, uv2 ) +',\r\n\t\t\t'\t\ttexture2D( normalSampler, uv3 );',\r\n\t\t\t'\treturn noise * 0.5 - 1.0;',\r\n\t\t\t'}',\r\n\r\n\t\t\t'void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {',\r\n\t\t\t'\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );',\r\n\t\t\t'\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );',\r\n\t\t\t'\tspecularColor += pow( direction, shiny ) * sunColor * spec;',\r\n\t\t\t'\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;',\r\n\t\t\t'}',\r\n\r\n\t\t\t'#include <common>',\r\n\t\t\t'#include <packing>',\r\n\t\t\t'#include <bsdfs>',\r\n\t\t\t'#include <fog_pars_fragment>',\r\n\t\t\t'#include <logdepthbuf_pars_fragment>',\r\n\t\t\t'#include <lights_pars_begin>',\r\n\t\t\t'#include <shadowmap_pars_fragment>',\r\n\t\t\t'#include <shadowmask_pars_fragment>',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t'#include <logdepthbuf_fragment>',\r\n\t\t\t'\tvec4 noise = getNoise( worldPosition.xz * size );',\r\n\t\t\t'\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );',\r\n\r\n\t\t\t'\tvec3 diffuseLight = vec3(0.0);',\r\n\t\t\t'\tvec3 specularLight = vec3(0.0);',\r\n\r\n\t\t\t'\tvec3 worldToEye = eye-worldPosition.xyz;',\r\n\t\t\t'\tvec3 eyeDirection = normalize( worldToEye );',\r\n\t\t\t'\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );',\r\n\r\n\t\t\t'\tfloat distance = length(worldToEye);',\r\n\r\n\t\t\t'\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;',\r\n\t\t\t'\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );',\r\n\r\n\t\t\t'\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );',\r\n\t\t\t'\tfloat rf0 = 0.3;',\r\n\t\t\t'\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );',\r\n\t\t\t'\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;',\r\n\t\t\t'\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);',\r\n\t\t\t'\tvec3 outgoingLight = albedo;',\r\n\t\t\t'\tgl_FragColor = vec4( outgoingLight, alpha );',\r\n\r\n\t\t\t'#include <tonemapping_fragment>',\r\n\t\t\t'#include <fog_fragment>',\r\n\t\t\t'}'\r\n\t\t].join( '\\n' )\r\n\r\n\t};\r\n\r\n\tvar material = new ShaderMaterial( {\r\n\t\tfragmentShader: mirrorShader.fragmentShader,\r\n\t\tvertexShader: mirrorShader.vertexShader,\r\n\t\tuniforms: UniformsUtils.clone( mirrorShader.uniforms ),\r\n\t\tlights: true,\r\n\t\tside: side,\r\n\t\tfog: fog\r\n\t} );\r\n\r\n\tmaterial.uniforms[ \"mirrorSampler\" ].value = renderTarget.texture;\r\n\tmaterial.uniforms[ \"textureMatrix\" ].value = textureMatrix;\r\n\tmaterial.uniforms[ \"alpha\" ].value = alpha;\r\n\tmaterial.uniforms[ \"time\" ].value = time;\r\n\tmaterial.uniforms[ \"normalSampler\" ].value = normalSampler;\r\n\tmaterial.uniforms[ \"sunColor\" ].value = sunColor;\r\n\tmaterial.uniforms[ \"waterColor\" ].value = waterColor;\r\n\tmaterial.uniforms[ \"sunDirection\" ].value = sunDirection;\r\n\tmaterial.uniforms[ \"distortionScale\" ].value = distortionScale;\r\n\r\n\tmaterial.uniforms[ \"eye\" ].value = eye;\r\n\r\n\tscope.material = material;\r\n\r\n\tscope.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\tmirrorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\r\n\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\trotationMatrix.extractRotation( scope.matrixWorld );\r\n\r\n\t\tnormal.set( 0, 0, 1 );\r\n\t\tnormal.applyMatrix4( rotationMatrix );\r\n\r\n\t\tview.subVectors( mirrorWorldPosition, cameraWorldPosition );\r\n\r\n\t\t// Avoid rendering when mirror is facing away\r\n\r\n\t\tif ( view.dot( normal ) > 0 ) return;\r\n\r\n\t\tview.reflect( normal ).negate();\r\n\t\tview.add( mirrorWorldPosition );\r\n\r\n\t\trotationMatrix.extractRotation( camera.matrixWorld );\r\n\r\n\t\tlookAtPosition.set( 0, 0, - 1 );\r\n\t\tlookAtPosition.applyMatrix4( rotationMatrix );\r\n\t\tlookAtPosition.add( cameraWorldPosition );\r\n\r\n\t\ttarget.subVectors( mirrorWorldPosition, lookAtPosition );\r\n\t\ttarget.reflect( normal ).negate();\r\n\t\ttarget.add( mirrorWorldPosition );\r\n\r\n\t\tmirrorCamera.position.copy( view );\r\n\t\tmirrorCamera.up.set( 0, 1, 0 );\r\n\t\tmirrorCamera.up.applyMatrix4( rotationMatrix );\r\n\t\tmirrorCamera.up.reflect( normal );\r\n\t\tmirrorCamera.lookAt( target );\r\n\r\n\t\tmirrorCamera.far = camera.far; // Used in WebGLBackground\r\n\r\n\t\tmirrorCamera.updateMatrixWorld();\r\n\t\tmirrorCamera.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t// Update the texture matrix\r\n\t\ttextureMatrix.set(\r\n\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t);\r\n\t\ttextureMatrix.multiply( mirrorCamera.projectionMatrix );\r\n\t\ttextureMatrix.multiply( mirrorCamera.matrixWorldInverse );\r\n\r\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n\t\tmirrorPlane.setFromNormalAndCoplanarPoint( normal, mirrorWorldPosition );\r\n\t\tmirrorPlane.applyMatrix4( mirrorCamera.matrixWorldInverse );\r\n\r\n\t\tclipPlane.set( mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant );\r\n\r\n\t\tvar projectionMatrix = mirrorCamera.projectionMatrix;\r\n\r\n\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n\t\tq.z = - 1.0;\r\n\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n\t\t// Calculate the scaled plane vector\r\n\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\r\n\r\n\t\t// Replacing the third row of the projection matrix\r\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\r\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\r\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\r\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\r\n\r\n\t\teye.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\t// Render\r\n\r\n\t\tif ( renderer.outputEncoding !== LinearEncoding ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Water: WebGLRenderer must use LinearEncoding as outputEncoding.' );\r\n\t\t\tscope.onBeforeRender = function () {};\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderer.toneMapping !== NoToneMapping ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Water: WebGLRenderer must use NoToneMapping as toneMapping.' );\r\n\t\t\tscope.onBeforeRender = function () {};\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tvar currentXrEnabled = renderer.xr.enabled;\r\n\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\r\n\r\n\t\tscope.visible = false;\r\n\r\n\t\trenderer.xr.enabled = false; // Avoid camera modification and recursion\r\n\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\r\n\r\n\t\tif ( renderer.autoClear === false ) renderer.clear();\r\n\t\trenderer.render( scene, mirrorCamera );\r\n\r\n\t\tscope.visible = true;\r\n\r\n\t\trenderer.xr.enabled = currentXrEnabled;\r\n\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t// Restore viewport\r\n\r\n\t\tvar viewport = camera.viewport;\r\n\r\n\t\tif ( viewport !== undefined ) {\r\n\r\n\t\t\trenderer.state.viewport( viewport );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nWater.prototype = Object.create( Mesh.prototype );\r\nWater.prototype.constructor = Water;\r\n\r\nexport { Water };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/Water.js","<template>\r\n    <div class=\"webglShadersOcean-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl ocean\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { Water } from '@/components/jsm/objects/Water.js'\r\nimport { Sky } from '@/components/jsm/objects/Sky.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            controls: null,\r\n            water: null,\r\n            sun: null,\r\n            mesh: null,\r\n            gui: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById('container')\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            //\r\n            this.scene = new this.$THREE.Scene()\r\n            this.camera = new this.$THREE.PerspectiveCamera(55, this.$webglInnerWidth / window.innerHeight, 1, 20000)\r\n            this.camera.position.set(30, 30, 100)\r\n            //\r\n            this.sun = new this.$THREE.Vector3()\r\n            // Water\r\n            var waterGeometry = new this.$THREE.PlaneBufferGeometry(10000, 10000)\r\n            this.water = new Water(\r\n                waterGeometry,\r\n                {\r\n                    textureWidth: 512,\r\n                    textureHeight: 512,\r\n                    waterNormals: new this.$THREE.TextureLoader().load('static/textures/waternormals.jpg', (texture) => {\r\n                        texture.wrapS = texture.wrapT = this.$THREE.RepeatWrapping\r\n                    }),\r\n                    alpha: 1.0,\r\n                    sunDirection: new this.$THREE.Vector3(),\r\n                    sunColor: 0xffffff,\r\n                    waterColor: 0x001e0f,\r\n                    distortionScale: 3.7,\r\n                    fog: this.scene.fog !== undefined\r\n                }\r\n            )\r\n            this.water.rotation.x = - Math.PI / 2\r\n            this.scene.add(this.water)\r\n            // Skybox\r\n            var sky = new Sky()\r\n            sky.scale.setScalar(10000)\r\n            this.scene.add(sky)\r\n            var skyUniforms = sky.material.uniforms\r\n            skyUniforms[ 'turbidity' ].value = 10\r\n            skyUniforms[ 'rayleigh' ].value = 2\r\n            skyUniforms[ 'mieCoefficient' ].value = 0.005\r\n            skyUniforms[ 'mieDirectionalG' ].value = 0.8\r\n            var parameters = {\r\n                inclination: 0.49,\r\n                azimuth: 0.205\r\n            }\r\n            var pmremGenerator = new this.$THREE.PMREMGenerator(this.renderer)\r\n            var that = this\r\n            function updateSun() {\r\n                var theta = Math.PI * (parameters.inclination - 0.5)\r\n                var phi = 2 * Math.PI * (parameters.azimuth - 0.5)\r\n                that.sun.x = Math.cos(phi)\r\n                that.sun.y = Math.sin(phi) * Math.sin(theta)\r\n                that.sun.z = Math.sin(phi) * Math.cos(theta)\r\n                sky.material.uniforms[ 'sunPosition' ].value.copy(that.sun)\r\n                that.water.material.uniforms[ 'sunDirection' ].value.copy(that.sun).normalize()\r\n                that.scene.environment = pmremGenerator.fromScene(sky).texture\r\n            }\r\n            updateSun()\r\n            //\r\n            var geometry = new this.$THREE.BoxBufferGeometry(30, 30, 30)\r\n            var material = new this.$THREE.MeshStandardMaterial({ roughness: 0 })\r\n            this.mesh = new this.$THREE.Mesh(geometry, material)\r\n            this.scene.add(this.mesh)\r\n            //\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.controls.maxPolarAngle = Math.PI * 0.495\r\n            this.controls.target.set(0, 10, 0)\r\n            this.controls.minDistance = 40.0\r\n            this.controls.maxDistance = 200.0\r\n            this.controls.update()\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            // GUI\r\n            this.gui = new GUI()\r\n            var folderSky = this.gui.addFolder('Sky')\r\n            folderSky.add(parameters, 'inclination', 0, 0.5, 0.0001).onChange(this.updateSun)\r\n            folderSky.add(parameters, 'azimuth', 0, 1, 0.0001).onChange(this.updateSun)\r\n            folderSky.open()\r\n            var waterUniforms = this.water.material.uniforms\r\n            var folderWater = this.gui.addFolder('Water')\r\n            folderWater.add(waterUniforms.distortionScale, 'value', 0, 8, 0.1).name('distortionScale')\r\n            folderWater.add(waterUniforms.size, 'value', 0.1, 10, 0.1).name('size')\r\n            folderWater.add(waterUniforms.alpha, 'value', 0.9, 1, .001).name('alpha')\r\n            folderWater.open()\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            var time = performance.now() * 0.001\r\n            this.mesh.position.y = Math.sin(time) * 20 + 5\r\n            this.mesh.rotation.x = time * 0.5\r\n            this.mesh.rotation.z = time * 0.51\r\n            this.water.material.uniforms[ 'time' ].value += 1.0 / 60.0\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglShadersOcean-container {\r\n    width: 100%;\r\n}\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/shaders/webglShadersOcean.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglShadersOcean-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl ocean\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-f5b73734\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/shaders/webglShadersOcean.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f5b73734\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglShadersOcean.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadersOcean.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglShadersOcean.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-f5b73734\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglShadersOcean.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-f5b73734\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/shaders/webglShadersOcean.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}