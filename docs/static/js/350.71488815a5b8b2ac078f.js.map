{"version":3,"sources":["webpack:///src/views/volume/webgl2VolumeCloud.vue","webpack:///./src/views/volume/webgl2VolumeCloud.vue?bf2a","webpack:///./src/views/volume/webgl2VolumeCloud.vue"],"names":["webgl2VolumeCloud","data","renderer","scene","camera","mesh","gui","mounted","WebGL","isWebGL2Available","document","getElementsByClassName","appendChild","getWebGL2ErrorMessage","this","init","animate","beforeDestroy","destroy","methods","$THREE","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","domElement","Scene","PerspectiveCamera","position","set","OrbitControls","canvas","createElement","width","height","context","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","sky","Mesh","SphereBufferGeometry","MeshBasicMaterial","map","CanvasTexture","side","BackSide","add","Uint8Array","size","i","perlin","ImprovedNoise","vector","Vector3","z","y","x","d","subScalar","divideScalar","length","noise","texture","DataTexture3D","format","RedFormat","minFilter","LinearFilter","magFilter","unpackAlignment","geometry","BoxBufferGeometry","material","RawShaderMaterial","glslVersion","GLSL3","uniforms","base","value","Color","cameraPos","threshold","opacity","range","steps","frame","vertexShader","fragmentShader","transparent","parameters","update","dat_gui_module","onChange","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","copy","rotation","performance","now","render","volume_webgl2VolumeCloud","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/350.71488815a5b8b2ac078f.js","sourcesContent":["<template>\r\n    <div class=\"webgl2VolumeCloud-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl2 - volume - cloud\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { ImprovedNoise } from '@/components/jsm/math/ImprovedNoise.js'\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { WEBGL } from '@/components/jsm/WebGL.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            renderer: null,\r\n            scene: null,\r\n            camera: null,\r\n            mesh: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        if (WEBGL.isWebGL2Available() === false) {\r\n            document.getElementsByClassName('webgl2VolumeCloud-container')[0].appendChild(WEBGL.getWebGL2ErrorMessage());\r\n        }\r\n        this.init();\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer();\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight);\r\n            document.getElementsByClassName('webgl2VolumeCloud-container')[0].appendChild(this.renderer.domElement);\r\n            this.scene = new this.$THREE.Scene();\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.1, 100);\r\n            this.camera.position.set(0, 0, 1.5);\r\n            new OrbitControls(this.camera, this.renderer.domElement);\r\n            // Sky\r\n            var canvas = document.createElement('canvas');\r\n            canvas.width = 1;\r\n            canvas.height = 32;\r\n            var context = canvas.getContext('2d');\r\n            var gradient = context.createLinearGradient(0, 0, 0, 32);\r\n            gradient.addColorStop(0.0, '#014a84');\r\n            gradient.addColorStop(0.5, '#0561a0');\r\n            gradient.addColorStop(1.0, '#437ab6');\r\n            context.fillStyle = gradient;\r\n            context.fillRect(0, 0, 1, 32);\r\n            var sky = new this.$THREE.Mesh(\r\n                new this.$THREE.SphereBufferGeometry(10),\r\n                new this.$THREE.MeshBasicMaterial({ map: new this.$THREE.CanvasTexture(canvas), side: this.$THREE.BackSide })\r\n            );\r\n            this.scene.add(sky);\r\n            // Texture\r\n            var size = 128;\r\n            var data = new Uint8Array(size * size * size);\r\n            var i = 0;\r\n            var scale = 0.05;\r\n            var perlin = new ImprovedNoise();\r\n            var vector = new this.$THREE.Vector3();\r\n            for (var z = 0; z < size; z ++) {\r\n                for (var y = 0; y < size; y ++) {\r\n                    for (var x = 0; x < size; x ++) {\r\n                        var d = 1.0 - vector.set(x, y, z).subScalar(size / 2).divideScalar(size).length();\r\n                        data[ i ] = (128 + 128 * perlin.noise(x * scale / 1.5, y * scale, z * scale / 1.5)) * d * d;\r\n                        i ++;\r\n                    }\r\n                }\r\n            }\r\n            var texture = new this.$THREE.DataTexture3D(data, size, size, size);\r\n            texture.format = this.$THREE.RedFormat;\r\n            texture.minFilter = this.$THREE.LinearFilter;\r\n            texture.magFilter = this.$THREE.LinearFilter;\r\n            texture.unpackAlignment = 1;\r\n            // Material\r\n            var vertexShader = /* glsl */`\r\n                in vec3 position;\r\n                uniform mat4 modelMatrix;\r\n                uniform mat4 modelViewMatrix;\r\n                uniform mat4 projectionMatrix;\r\n                uniform vec3 cameraPos;\r\n                out vec3 vOrigin;\r\n                out vec3 vDirection;\r\n                void main() {\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    vOrigin = vec3(inverse(modelMatrix) * vec4(cameraPos, 1.0)).xyz;\r\n                    vDirection = position - vOrigin;\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `;\r\n            var fragmentShader = /* glsl */`\r\n                precision highp float;\r\n                precision highp sampler3D;\r\n                uniform mat4 modelViewMatrix;\r\n                uniform mat4 projectionMatrix;\r\n                in vec3 vOrigin;\r\n                in vec3 vDirection;\r\n                out vec4 color;\r\n                uniform vec3 base;\r\n                uniform sampler3D map;\r\n                uniform float threshold;\r\n                uniform float range;\r\n                uniform float opacity;\r\n                uniform float steps;\r\n                uniform float frame;\r\n                uint wang_hash(uint seed)\r\n                {\r\n                        seed = (seed ^ 61u) ^ (seed >> 16u);\r\n                        seed *= 9u;\r\n                        seed = seed ^ (seed >> 4u);\r\n                        seed *= 0x27d4eb2du;\r\n                        seed = seed ^ (seed >> 15u);\r\n                        return seed;\r\n                }\r\n                float randomFloat(inout uint seed)\r\n                {\r\n                        return float(wang_hash(seed)) / 4294967296.;\r\n                }\r\n                vec2 hitBox(vec3 orig, vec3 dir) {\r\n                    const vec3 box_min = vec3(- 0.5);\r\n                    const vec3 box_max = vec3(0.5);\r\n                    vec3 inv_dir = 1.0 / dir;\r\n                    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n                    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n                    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n                    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n                    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n                    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n                    return vec2(t0, t1);\r\n                }\r\n                float sample1(vec3 p) {\r\n                    return texture(map, p).r;\r\n                }\r\n                float shading(vec3 coord) {\r\n                    float step = 0.01;\r\n                    return sample1(coord + vec3(- step)) - sample1(coord + vec3(step));\r\n                }\r\n                void main(){\r\n                    vec3 rayDir = normalize(vDirection);\r\n                    vec2 bounds = hitBox(vOrigin, rayDir);\r\n                    if (bounds.x > bounds.y) discard;\r\n                    bounds.x = max(bounds.x, 0.0);\r\n                    vec3 p = vOrigin + bounds.x * rayDir;\r\n                    vec3 inc = 1.0 / abs(rayDir);\r\n                    float delta = min(inc.x, min(inc.y, inc.z));\r\n                    delta /= steps;\r\n                    // Jitter\r\n                    // Nice little seed from\r\n                    // https://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive/\r\n                    uint seed = uint(gl_FragCoord.x) * uint(1973) + uint(gl_FragCoord.y) * uint(9277) + uint(frame) * uint(26699);\r\n                    vec3 size = vec3(textureSize(map, 0));\r\n                    float randNum = randomFloat(seed) * 2.0 - 1.0;\r\n                    p += rayDir * randNum * (1.0 / size);\r\n                    //\r\n                    vec4 ac = vec4(base, 0.0);\r\n                    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n                        float d = sample1(p + 0.5);\r\n                        d = smoothstep(threshold - range, threshold + range, d) * opacity;\r\n                        float col = shading(p + 0.5) * 3.0 + ((p.x + p.y) * 0.25) + 0.2;\r\n                        ac.rgb += (1.0 - ac.a) * d * col;\r\n                        ac.a += (1.0 - ac.a) * d;\r\n                        if (ac.a >= 0.95) break;\r\n                        p += rayDir * delta;\r\n                    }\r\n                    color = ac;\r\n                    if (color.a == 0.0) discard;\r\n                }\r\n            `;\r\n            var geometry = new this.$THREE.BoxBufferGeometry(1, 1, 1);\r\n            var material = new this.$THREE.RawShaderMaterial({\r\n                glslVersion: this.$THREE.GLSL3,\r\n                uniforms: {\r\n                    base: { value: new this.$THREE.Color(0x798aa0) },\r\n                    map: { value: texture },\r\n                    cameraPos: { value: new this.$THREE.Vector3() },\r\n                    threshold: { value: 0.25 },\r\n                    opacity: { value: 0.25 },\r\n                    range: { value: 0.1 },\r\n                    steps: { value: 100 },\r\n                    frame: { value: 0 }\r\n                },\r\n                vertexShader,\r\n                fragmentShader,\r\n                side: this.$THREE.BackSide,\r\n                transparent: true\r\n            });\r\n            this.mesh = new this.$THREE.Mesh(geometry, material);\r\n            this.scene.add(this.mesh);\r\n            //\r\n            var parameters = {\r\n                threshold: 0.25,\r\n                opacity: 0.25,\r\n                range: 0.1,\r\n                steps: 100\r\n            };\r\n            function update() {\r\n                material.uniforms.threshold.value = parameters.threshold;\r\n                material.uniforms.opacity.value = parameters.opacity;\r\n                material.uniforms.range.value = parameters.range;\r\n                material.uniforms.steps.value = parameters.steps;\r\n            }\r\n            this.gui = new GUI();\r\n            this.gui.add(parameters, 'threshold', 0, 1, 0.01).onChange(update);\r\n            this.gui.add(parameters, 'opacity', 0, 1, 0.01).onChange(update);\r\n            this.gui.add(parameters, 'range', 0, 1, 0.01).onChange(update);\r\n            this.gui.add(parameters, 'steps', 0, 200, 1).onChange(update);\r\n            window.addEventListener('resize', this.onWindowResize, false);\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate);\r\n            this.mesh.material.uniforms.cameraPos.value.copy(this.camera.position);\r\n            this.mesh.rotation.y = - performance.now() / 7500;\r\n            this.mesh.material.uniforms.frame.value ++;\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webgl2VolumeCloud-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/volume/webgl2VolumeCloud.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webgl2VolumeCloud-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl2 - volume - cloud\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0664ecfe\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/volume/webgl2VolumeCloud.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0664ecfe\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webgl2VolumeCloud.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webgl2VolumeCloud.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webgl2VolumeCloud.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0664ecfe\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webgl2VolumeCloud.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0664ecfe\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/volume/webgl2VolumeCloud.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}