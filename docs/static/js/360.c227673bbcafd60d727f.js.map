{"version":3,"sources":["webpack:///./src/components/jsm/misc/RollerCoaster.js","webpack:///src/views/vr/webxrVrRollercoaster.vue","webpack:///./src/views/vr/webxrVrRollercoaster.vue?f0af","webpack:///./src/views/vr/webxrVrRollercoaster.vue"],"names":["RollerCoasterGeometry","curve","divisions","BufferGeometry","call","this","vertices","normals","colors","color1","color2","up","Vector3","forward","right","quaternion","Quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","setAttribute","BufferAttribute","Float32Array","prototype","Object","create","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","Raycaster","ray","direction","origin","intersections","intersectObject","height","webxrVrRollercoaster","data","mesh","material","geometry","renderer","scene","light","train","camera","positions","vertex","lookAt","velocity","progress","prevTime","funfairs","position","mounted","init","methods","_this","$THREE","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","xr","enabled","setReferenceSpaceType","document","getElementsByClassName","appendChild","domElement","VRButton","createButton","Scene","background","Color","HemisphereLight","Object3D","PerspectiveCamera","PlaneBufferGeometry","rotateX","attributes","array","fromArray","distance","distanceTo","max","toArray","computeVertexNormals","MeshLambertMaterial","Mesh","RollerCoaster_TreesGeometry","MeshBasicMaterial","side","DoubleSide","vertexColors","RollerCoaster_SkyGeometry","t","multiplyScalar","t1","t2","min","sub","RollerCoaster_RollerCoasterGeometry","MeshPhongMaterial","RollerCoaster_RollerCoasterLiftersGeometry","RollerCoaster_RollerCoasterShadowGeometry","depthWrite","transparent","CylinderBufferGeometry","rotation","addEventListener","onWindowResize","performance","now","setAnimationLoop","render","$onWindowResize","time","delta","vr_webxrVrRollercoaster","_h","$createElement","_self","_c","staticClass","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/360.c227673bbcafd60d727f.js","sourcesContent":["import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tQuaternion,\r\n\tRaycaster,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar RollerCoasterGeometry = function ( curve, divisions ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tvar vertices = [];\r\n\tvar normals = [];\r\n\tvar colors = [];\r\n\r\n\tvar color1 = [ 1, 1, 1 ];\r\n\tvar color2 = [ 1, 1, 0 ];\r\n\r\n\tvar up = new Vector3( 0, 1, 0 );\r\n\tvar forward = new Vector3();\r\n\tvar right = new Vector3();\r\n\r\n\tvar quaternion = new Quaternion();\r\n\tvar prevQuaternion = new Quaternion();\r\n\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\r\n\r\n\tvar point = new Vector3();\r\n\tvar prevPoint = new Vector3();\r\n\tprevPoint.copy( curve.getPointAt( 0 ) );\r\n\r\n\t// shapes\r\n\r\n\tvar step = [\r\n\t\tnew Vector3( - 0.225, 0, 0 ),\r\n\t\tnew Vector3( 0, - 0.050, 0 ),\r\n\t\tnew Vector3( 0, - 0.175, 0 ),\r\n\r\n\t\tnew Vector3( 0, - 0.050, 0 ),\r\n\t\tnew Vector3( 0.225, 0, 0 ),\r\n\t\tnew Vector3( 0, - 0.175, 0 )\r\n\t];\r\n\r\n\tvar PI2 = Math.PI * 2;\r\n\r\n\tvar sides = 5;\r\n\tvar tube1 = [];\r\n\r\n\tfor ( var i = 0; i < sides; i ++ ) {\r\n\r\n\t\tvar angle = ( i / sides ) * PI2;\r\n\t\ttube1.push( new Vector3( Math.sin( angle ) * 0.06, Math.cos( angle ) * 0.06, 0 ) );\r\n\r\n\t}\r\n\r\n\tvar sides = 6;\r\n\tvar tube2 = [];\r\n\r\n\tfor ( var i = 0; i < sides; i ++ ) {\r\n\r\n\t\tvar angle = ( i / sides ) * PI2;\r\n\t\ttube2.push( new Vector3( Math.sin( angle ) * 0.025, Math.cos( angle ) * 0.025, 0 ) );\r\n\r\n\t}\r\n\r\n\tvar vector = new Vector3();\r\n\tvar normal = new Vector3();\r\n\r\n\tfunction drawShape( shape, color ) {\r\n\r\n\t\tnormal.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t\tfor ( var j = 0; j < shape.length; j ++ ) {\r\n\r\n\t\t\tvector.copy( shape[ j ] );\r\n\t\t\tvector.applyQuaternion( quaternion );\r\n\t\t\tvector.add( point );\r\n\r\n\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\r\n\t\t}\r\n\r\n\t\tnormal.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\r\n\t\tfor ( var j = shape.length - 1; j >= 0; j -- ) {\r\n\r\n\t\t\tvector.copy( shape[ j ] );\r\n\t\t\tvector.applyQuaternion( quaternion );\r\n\t\t\tvector.add( point );\r\n\r\n\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar vector1 = new Vector3();\r\n\tvar vector2 = new Vector3();\r\n\tvar vector3 = new Vector3();\r\n\tvar vector4 = new Vector3();\r\n\r\n\tvar normal1 = new Vector3();\r\n\tvar normal2 = new Vector3();\r\n\tvar normal3 = new Vector3();\r\n\tvar normal4 = new Vector3();\r\n\r\n\tfunction extrudeShape( shape, offset, color ) {\r\n\r\n\t\tfor ( var j = 0, jl = shape.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar point1 = shape[ j ];\r\n\t\t\tvar point2 = shape[ ( j + 1 ) % jl ];\r\n\r\n\t\t\tvector1.copy( point1 ).add( offset );\r\n\t\t\tvector1.applyQuaternion( quaternion );\r\n\t\t\tvector1.add( point );\r\n\r\n\t\t\tvector2.copy( point2 ).add( offset );\r\n\t\t\tvector2.applyQuaternion( quaternion );\r\n\t\t\tvector2.add( point );\r\n\r\n\t\t\tvector3.copy( point2 ).add( offset );\r\n\t\t\tvector3.applyQuaternion( prevQuaternion );\r\n\t\t\tvector3.add( prevPoint );\r\n\r\n\t\t\tvector4.copy( point1 ).add( offset );\r\n\t\t\tvector4.applyQuaternion( prevQuaternion );\r\n\t\t\tvector4.add( prevPoint );\r\n\r\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\r\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\r\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\r\n\r\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\r\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\r\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tnormal1.copy( point1 );\r\n\t\t\tnormal1.applyQuaternion( quaternion );\r\n\t\t\tnormal1.normalize();\r\n\r\n\t\t\tnormal2.copy( point2 );\r\n\t\t\tnormal2.applyQuaternion( quaternion );\r\n\t\t\tnormal2.normalize();\r\n\r\n\t\t\tnormal3.copy( point2 );\r\n\t\t\tnormal3.applyQuaternion( prevQuaternion );\r\n\t\t\tnormal3.normalize();\r\n\r\n\t\t\tnormal4.copy( point1 );\r\n\t\t\tnormal4.applyQuaternion( prevQuaternion );\r\n\t\t\tnormal4.normalize();\r\n\r\n\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\r\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\r\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\r\n\r\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\r\n\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\r\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\r\n\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar offset = new Vector3();\r\n\r\n\tfor ( var i = 1; i <= divisions; i ++ ) {\r\n\r\n\t\tpoint.copy( curve.getPointAt( i / divisions ) );\r\n\r\n\t\tup.set( 0, 1, 0 );\r\n\r\n\t\tforward.subVectors( point, prevPoint ).normalize();\r\n\t\tright.crossVectors( up, forward ).normalize();\r\n\t\tup.crossVectors( forward, right );\r\n\r\n\t\tvar angle = Math.atan2( forward.x, forward.z );\r\n\r\n\t\tquaternion.setFromAxisAngle( up, angle );\r\n\r\n\t\tif ( i % 2 === 0 ) {\r\n\r\n\t\t\tdrawShape( step, color2 );\r\n\r\n\t\t}\r\n\r\n\t\textrudeShape( tube1, offset.set( 0, - 0.125, 0 ), color2 );\r\n\t\textrudeShape( tube2, offset.set( 0.2, 0, 0 ), color1 );\r\n\t\textrudeShape( tube2, offset.set( - 0.2, 0, 0 ), color1 );\r\n\r\n\t\tprevPoint.copy( point );\r\n\t\tprevQuaternion.copy( quaternion );\r\n\r\n\t}\r\n\r\n\t// console.log( vertices.length );\r\n\r\n\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\r\n\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( normals ), 3 ) );\r\n\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 3 ) );\r\n\r\n};\r\n\r\nRollerCoasterGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\r\nvar RollerCoasterLiftersGeometry = function ( curve, divisions ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tvar vertices = [];\r\n\tvar normals = [];\r\n\r\n\tvar quaternion = new Quaternion();\r\n\r\n\tvar up = new Vector3( 0, 1, 0 );\r\n\r\n\tvar point = new Vector3();\r\n\tvar tangent = new Vector3();\r\n\r\n\t// shapes\r\n\r\n\tvar tube1 = [\r\n\t\tnew Vector3( 0, 0.05, - 0.05 ),\r\n\t\tnew Vector3( 0, 0.05, 0.05 ),\r\n\t\tnew Vector3( 0, - 0.05, 0 )\r\n\t];\r\n\r\n\tvar tube2 = [\r\n\t\tnew Vector3( - 0.05, 0, 0.05 ),\r\n\t\tnew Vector3( - 0.05, 0, - 0.05 ),\r\n\t\tnew Vector3( 0.05, 0, 0 )\r\n\t];\r\n\r\n\tvar tube3 = [\r\n\t\tnew Vector3( 0.05, 0, - 0.05 ),\r\n\t\tnew Vector3( 0.05, 0, 0.05 ),\r\n\t\tnew Vector3( - 0.05, 0, 0 )\r\n\t];\r\n\r\n\tvar vector1 = new Vector3();\r\n\tvar vector2 = new Vector3();\r\n\tvar vector3 = new Vector3();\r\n\tvar vector4 = new Vector3();\r\n\r\n\tvar normal1 = new Vector3();\r\n\tvar normal2 = new Vector3();\r\n\tvar normal3 = new Vector3();\r\n\tvar normal4 = new Vector3();\r\n\r\n\tfunction extrudeShape( shape, fromPoint, toPoint ) {\r\n\r\n\t\tfor ( var j = 0, jl = shape.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar point1 = shape[ j ];\r\n\t\t\tvar point2 = shape[ ( j + 1 ) % jl ];\r\n\r\n\t\t\tvector1.copy( point1 );\r\n\t\t\tvector1.applyQuaternion( quaternion );\r\n\t\t\tvector1.add( fromPoint );\r\n\r\n\t\t\tvector2.copy( point2 );\r\n\t\t\tvector2.applyQuaternion( quaternion );\r\n\t\t\tvector2.add( fromPoint );\r\n\r\n\t\t\tvector3.copy( point2 );\r\n\t\t\tvector3.applyQuaternion( quaternion );\r\n\t\t\tvector3.add( toPoint );\r\n\r\n\t\t\tvector4.copy( point1 );\r\n\t\t\tvector4.applyQuaternion( quaternion );\r\n\t\t\tvector4.add( toPoint );\r\n\r\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\r\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\r\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\r\n\r\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\r\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\r\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tnormal1.copy( point1 );\r\n\t\t\tnormal1.applyQuaternion( quaternion );\r\n\t\t\tnormal1.normalize();\r\n\r\n\t\t\tnormal2.copy( point2 );\r\n\t\t\tnormal2.applyQuaternion( quaternion );\r\n\t\t\tnormal2.normalize();\r\n\r\n\t\t\tnormal3.copy( point2 );\r\n\t\t\tnormal3.applyQuaternion( quaternion );\r\n\t\t\tnormal3.normalize();\r\n\r\n\t\t\tnormal4.copy( point1 );\r\n\t\t\tnormal4.applyQuaternion( quaternion );\r\n\t\t\tnormal4.normalize();\r\n\r\n\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\r\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\r\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\r\n\r\n\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\r\n\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\r\n\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar fromPoint = new Vector3();\r\n\tvar toPoint = new Vector3();\r\n\r\n\tfor ( var i = 1; i <= divisions; i ++ ) {\r\n\r\n\t\tpoint.copy( curve.getPointAt( i / divisions ) );\r\n\t\ttangent.copy( curve.getTangentAt( i / divisions ) );\r\n\r\n\t\tvar angle = Math.atan2( tangent.x, tangent.z );\r\n\r\n\t\tquaternion.setFromAxisAngle( up, angle );\r\n\r\n\t\t//\r\n\r\n\t\tif ( point.y > 10 ) {\r\n\r\n\t\t\tfromPoint.set( - 0.75, - 0.35, 0 );\r\n\t\t\tfromPoint.applyQuaternion( quaternion );\r\n\t\t\tfromPoint.add( point );\r\n\r\n\t\t\ttoPoint.set( 0.75, - 0.35, 0 );\r\n\t\t\ttoPoint.applyQuaternion( quaternion );\r\n\t\t\ttoPoint.add( point );\r\n\r\n\t\t\textrudeShape( tube1, fromPoint, toPoint );\r\n\r\n\t\t\tfromPoint.set( - 0.7, - 0.3, 0 );\r\n\t\t\tfromPoint.applyQuaternion( quaternion );\r\n\t\t\tfromPoint.add( point );\r\n\r\n\t\t\ttoPoint.set( - 0.7, - point.y, 0 );\r\n\t\t\ttoPoint.applyQuaternion( quaternion );\r\n\t\t\ttoPoint.add( point );\r\n\r\n\t\t\textrudeShape( tube2, fromPoint, toPoint );\r\n\r\n\t\t\tfromPoint.set( 0.7, - 0.3, 0 );\r\n\t\t\tfromPoint.applyQuaternion( quaternion );\r\n\t\t\tfromPoint.add( point );\r\n\r\n\t\t\ttoPoint.set( 0.7, - point.y, 0 );\r\n\t\t\ttoPoint.applyQuaternion( quaternion );\r\n\t\t\ttoPoint.add( point );\r\n\r\n\t\t\textrudeShape( tube3, fromPoint, toPoint );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfromPoint.set( 0, - 0.2, 0 );\r\n\t\t\tfromPoint.applyQuaternion( quaternion );\r\n\t\t\tfromPoint.add( point );\r\n\r\n\t\t\ttoPoint.set( 0, - point.y, 0 );\r\n\t\t\ttoPoint.applyQuaternion( quaternion );\r\n\t\t\ttoPoint.add( point );\r\n\r\n\t\t\textrudeShape( tube3, fromPoint, toPoint );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\r\n\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( normals ), 3 ) );\r\n\r\n};\r\n\r\nRollerCoasterLiftersGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\r\nvar RollerCoasterShadowGeometry = function ( curve, divisions ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tvar vertices = [];\r\n\r\n\tvar up = new Vector3( 0, 1, 0 );\r\n\tvar forward = new Vector3();\r\n\r\n\tvar quaternion = new Quaternion();\r\n\tvar prevQuaternion = new Quaternion();\r\n\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\r\n\r\n\tvar point = new Vector3();\r\n\r\n\tvar prevPoint = new Vector3();\r\n\tprevPoint.copy( curve.getPointAt( 0 ) );\r\n\tprevPoint.y = 0;\r\n\r\n\tvar vector1 = new Vector3();\r\n\tvar vector2 = new Vector3();\r\n\tvar vector3 = new Vector3();\r\n\tvar vector4 = new Vector3();\r\n\r\n\tfor ( var i = 1; i <= divisions; i ++ ) {\r\n\r\n\t\tpoint.copy( curve.getPointAt( i / divisions ) );\r\n\t\tpoint.y = 0;\r\n\r\n\t\tforward.subVectors( point, prevPoint );\r\n\r\n\t\tvar angle = Math.atan2( forward.x, forward.z );\r\n\r\n\t\tquaternion.setFromAxisAngle( up, angle );\r\n\r\n\t\tvector1.set( - 0.3, 0, 0 );\r\n\t\tvector1.applyQuaternion( quaternion );\r\n\t\tvector1.add( point );\r\n\r\n\t\tvector2.set( 0.3, 0, 0 );\r\n\t\tvector2.applyQuaternion( quaternion );\r\n\t\tvector2.add( point );\r\n\r\n\t\tvector3.set( 0.3, 0, 0 );\r\n\t\tvector3.applyQuaternion( prevQuaternion );\r\n\t\tvector3.add( prevPoint );\r\n\r\n\t\tvector4.set( - 0.3, 0, 0 );\r\n\t\tvector4.applyQuaternion( prevQuaternion );\r\n\t\tvector4.add( prevPoint );\r\n\r\n\t\tvertices.push( vector1.x, vector1.y, vector1.z );\r\n\t\tvertices.push( vector2.x, vector2.y, vector2.z );\r\n\t\tvertices.push( vector4.x, vector4.y, vector4.z );\r\n\r\n\t\tvertices.push( vector2.x, vector2.y, vector2.z );\r\n\t\tvertices.push( vector3.x, vector3.y, vector3.z );\r\n\t\tvertices.push( vector4.x, vector4.y, vector4.z );\r\n\r\n\t\tprevPoint.copy( point );\r\n\t\tprevQuaternion.copy( quaternion );\r\n\r\n\t}\r\n\r\n\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\r\n\r\n};\r\n\r\nRollerCoasterShadowGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\r\nvar SkyGeometry = function () {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tvar vertices = [];\r\n\r\n\tfor ( var i = 0; i < 100; i ++ ) {\r\n\r\n\t\tvar x = Math.random() * 800 - 400;\r\n\t\tvar y = Math.random() * 50 + 50;\r\n\t\tvar z = Math.random() * 800 - 400;\r\n\r\n\t\tvar size = Math.random() * 40 + 20;\r\n\r\n\t\tvertices.push( x - size, y, z - size );\r\n\t\tvertices.push( x + size, y, z - size );\r\n\t\tvertices.push( x - size, y, z + size );\r\n\r\n\t\tvertices.push( x + size, y, z - size );\r\n\t\tvertices.push( x + size, y, z + size );\r\n\t\tvertices.push( x - size, y, z + size );\r\n\r\n\t}\r\n\r\n\r\n\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\r\n\r\n};\r\n\r\nSkyGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\r\nvar TreesGeometry = function ( landscape ) {\r\n\r\n\tBufferGeometry.call( this );\r\n\r\n\tvar vertices = [];\r\n\tvar colors = [];\r\n\r\n\tvar raycaster = new Raycaster();\r\n\traycaster.ray.direction.set( 0, - 1, 0 );\r\n\r\n\tfor ( var i = 0; i < 2000; i ++ ) {\r\n\r\n\t\tvar x = Math.random() * 500 - 250;\r\n\t\tvar z = Math.random() * 500 - 250;\r\n\r\n\t\traycaster.ray.origin.set( x, 50, z );\r\n\r\n\t\tvar intersections = raycaster.intersectObject( landscape );\r\n\r\n\t\tif ( intersections.length === 0 ) continue;\r\n\r\n\t\tvar y = intersections[ 0 ].point.y;\r\n\r\n\t\tvar height = Math.random() * 5 + 0.5;\r\n\r\n\t\tvar angle = Math.random() * Math.PI * 2;\r\n\r\n\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\r\n\t\tvertices.push( x, y + height, z );\r\n\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\r\n\r\n\t\tangle += Math.PI / 2;\r\n\r\n\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\r\n\t\tvertices.push( x, y + height, z );\r\n\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\r\n\r\n\t\tvar random = Math.random() * 0.1;\r\n\r\n\t\tfor ( var j = 0; j < 6; j ++ ) {\r\n\r\n\t\t\tcolors.push( 0.2 + random, 0.4 + random, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\r\n\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 3 ) );\r\n\r\n};\r\n\r\nTreesGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\r\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/misc/RollerCoaster.js","<template>\r\n    <div class=\"webxrVrRollercoaster-container\">\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    RollerCoasterGeometry,\r\n    RollerCoasterShadowGeometry,\r\n    RollerCoasterLiftersGeometry,\r\n    TreesGeometry,\r\n    SkyGeometry\r\n} from '@/components/jsm/misc/RollerCoaster.js'\r\nimport { VRButton } from '@/components/jsm/webxr/VRButton.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            mesh: null,\r\n            material: null,\r\n            geometry: null,\r\n            renderer: null,\r\n            scene: null,\r\n            light: null,\r\n            train: null,\r\n            camera: null,\r\n            positions: null,\r\n            vertex: null,\r\n            tangent: null,\r\n            lookAt: null,\r\n            velocity: 0,\r\n            progress: 0,\r\n            prevTime: null,\r\n            funfairs: [],\r\n            position: null,\r\n            curve: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.xr.enabled = true\r\n            this.renderer.xr.setReferenceSpaceType('local')\r\n            document.getElementsByClassName('webxrVrRollercoaster-container')[0].appendChild(this.renderer.domElement)\r\n            document.getElementsByClassName('webxrVrRollercoaster-container')[0].appendChild(VRButton.createButton(this.renderer))\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xf0f0ff)\r\n            this.light = new this.$THREE.HemisphereLight(0xfff0f0, 0x606066)\r\n            this.light.position.set(1, 1, 1)\r\n            this.scene.add(this.light)\r\n            this.train = new this.$THREE.Object3D()\r\n            this.scene.add(this.train)\r\n            this.camera = new this.$THREE.PerspectiveCamera(50, this.$webglInnerWidth / window.innerHeight, 0.1, 500)\r\n            this.train.add(this.camera)\r\n            // environment\r\n            this.geometry = new this.$THREE.PlaneBufferGeometry(500, 500, 15, 15)\r\n            this.geometry.rotateX(- Math.PI / 2)\r\n            this.positions = this.geometry.attributes.position.array\r\n            this.vertex = new this.$THREE.Vector3()\r\n            for (var i = 0; i < this.positions.length; i += 3) {\r\n                this.vertex.fromArray(this.positions, i)\r\n                this.vertex.x += Math.random() * 10 - 5\r\n                this.vertex.z += Math.random() * 10 - 5\r\n                var distance = (this.vertex.distanceTo(this.scene.position) / 5) - 25\r\n                this.vertex.y = Math.random() * Math.max(0, distance)\r\n                this.vertex.toArray(this.positions, i)\r\n            }\r\n            this.geometry.computeVertexNormals()\r\n            this.material = new this.$THREE.MeshLambertMaterial({\r\n                color: 0x407000\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.scene.add(this.mesh)\r\n            this.geometry = new TreesGeometry(this.mesh)\r\n            this.material = new this.$THREE.MeshBasicMaterial({\r\n                side: this.$THREE.DoubleSide, vertexColors: true\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.scene.add(this.mesh)\r\n            this.geometry = new SkyGeometry()\r\n            this.material = new this.$THREE.MeshBasicMaterial({ color: 0xffffff })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.scene.add(this.mesh)\r\n            var PI2 = Math.PI * 2\r\n            this.curve = (() => {\r\n                var vector = new this.$THREE.Vector3()\r\n                var vector2 = new this.$THREE.Vector3()\r\n                return {\r\n                    getPointAt: function (t) {\r\n                        t = t * PI2\r\n                        var x = Math.sin(t * 3) * Math.cos(t * 4) * 50\r\n                        var y = Math.sin(t * 10) * 2 + Math.cos(t * 17) * 2 + 5\r\n                        var z = Math.sin(t) * Math.sin(t * 4) * 50\r\n                        return vector.set(x, y, z).multiplyScalar(2)\r\n                    },\r\n                    getTangentAt: function (t) {\r\n                        var delta = 0.0001\r\n                        var t1 = Math.max(0, t - delta)\r\n                        var t2 = Math.min(1, t + delta)\r\n                        return vector2.copy(this.getPointAt(t2))\r\n                            .sub(this.getPointAt(t1)).normalize()\r\n                    }\r\n                }\r\n            })()\r\n            this.geometry = new RollerCoasterGeometry(this.curve, 1500)\r\n            this.material = new this.$THREE.MeshPhongMaterial({\r\n                vertexColors: true\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.scene.add(this.mesh)\r\n            this.geometry = new RollerCoasterLiftersGeometry(this.curve, 100)\r\n            this.material = new this.$THREE.MeshPhongMaterial()\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.mesh.position.y = 0.1\r\n            this.scene.add(this.mesh)\r\n            this.geometry = new RollerCoasterShadowGeometry(this.curve, 500)\r\n            this.material = new this.$THREE.MeshBasicMaterial({\r\n                color: 0x305000, depthWrite: false, transparent: true\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.mesh.position.y = 0.1\r\n            this.scene.add(this.mesh)\r\n            //\r\n            this.geometry = new this.$THREE.CylinderBufferGeometry(10, 10, 5, 15)\r\n            this.material = new this.$THREE.MeshLambertMaterial({\r\n                color: 0xff8080,\r\n                //flatShading: true // Lambert does not support flat shading\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.mesh.position.set(- 80, 10, - 70)\r\n            this.mesh.rotation.x = Math.PI / 2\r\n            this.scene.add(this.mesh)\r\n            this.funfairs.push(this.mesh)\r\n            this.geometry = new this.$THREE.CylinderBufferGeometry(5, 6, 4, 10)\r\n            this.material = new this.$THREE.MeshLambertMaterial({\r\n                color: 0x8080ff,\r\n                //flatShading: true // Lambert does not support flat shading\r\n            })\r\n            this.mesh = new this.$THREE.Mesh(this.geometry, this.material)\r\n            this.mesh.position.set(50, 2, 30)\r\n            this.scene.add(this.mesh)\r\n            this.funfairs.push(this.mesh)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            //\r\n            this.position = new this.$THREE.Vector3()\r\n            this.tangent = new this.$THREE.Vector3()\r\n            this.lookAt = new this.$THREE.Vector3()\r\n            this.prevTime = performance.now()\r\n            this.renderer.setAnimationLoop(this.render)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        render() {\r\n            var time = performance.now()\r\n            var delta = time - this.prevTime\r\n            for (var i = 0; i < this.funfairs.length; i ++) {\r\n                this.funfairs[ i ].rotation.y = time * 0.0004\r\n            }\r\n            //\r\n            this.progress += this.velocity\r\n            this.progress = this.progress % 1\r\n            this.position.copy(this.curve.getPointAt(this.progress))\r\n            this.position.y += 0.3\r\n            this.train.position.copy(this.position)\r\n            this.tangent.copy(this.curve.getTangentAt(this.progress))\r\n            this.velocity -= this.tangent.y * 0.0000001 * delta\r\n            this.velocity = Math.max(0.00004, Math.min(0.0002, this.velocity))\r\n            this.train.lookAt(this.lookAt.copy(this.position).sub(this.tangent))\r\n            //\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.prevTime = time\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webxrVrRollercoaster-container {\r\n    position: relative;\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/vr/webxrVrRollercoaster.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webxrVrRollercoaster-container\"})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-015a8232\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/vr/webxrVrRollercoaster.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-015a8232\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webxrVrRollercoaster.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webxrVrRollercoaster.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webxrVrRollercoaster.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-015a8232\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webxrVrRollercoaster.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-015a8232\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/vr/webxrVrRollercoaster.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}