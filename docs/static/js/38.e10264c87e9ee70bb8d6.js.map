{"version":3,"sources":["webpack:///src/views/geometries/webglGeometryShapes.vue","webpack:///./src/views/geometries/webglGeometryShapes.vue?852f","webpack:///./src/views/geometries/webglGeometryShapes.vue"],"names":["webglGeometryShapes","data","container","stats","camera","scene","renderer","group","targetRotation","targetRotationOnPointerDown","pointerX","pointerXOnPointerDown","windowHalfX","mounted","this","$webglInnerWidth","init","animate","methods","document","createElement","getElementsByClassName","appendChild","$THREE","Scene","background","Color","PerspectiveCamera","window","innerHeight","position","set","add","light","PointLight","Group","y","texture","TextureLoader","load","wrapS","wrapT","RepeatWrapping","repeat","that","addShape","shape","extrudeSettings","color","x","z","rx","ry","rz","s","geometry","ShapeBufferGeometry","mesh","Mesh","MeshPhongMaterial","side","DoubleSide","map","rotation","scale","ExtrudeBufferGeometry","addLineShape","autoClose","points","getPoints","spacedPoints","getSpacedPoints","geometryPoints","BufferGeometry","setFromPoints","geometrySpacedPoints","line","Line","LineBasicMaterial","particles","Points","PointsMaterial","size","californiaPts","push","Vector2","i","length","multiplyScalar","californiaShape","Shape","triangleShape","moveTo","lineTo","heartShape","bezierCurveTo","squareShape","roundedRectShape","ctx","width","height","radius","quadraticCurveTo","roundedRect","trackShape","absarc","Math","PI","circleShape","fishShape","arcShape","holePath","Path","holes","smileyShape","smileyEye1Path","absellipse","smileyEye2Path","smileyMouthPath","splinepts","splineShape","splineThru","depth","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","$Stats","dom","style","left","touchAction","addEventListener","onPointerDown","onWindowResize","innerWidth","$onWindowResize","event","isPrimary","clientX","onPointerMove","onPointerUp","removeEventListener","requestAnimationFrame","render","update","geometries_webglGeometryShapes","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/38.e10264c87e9ee70bb8d6.js","sourcesContent":["<template>\r\n    <div class=\"webglGeometryShapes-container\">\r\n        <div id=\"info\">Simple procedurally-generated shapes</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tgroup: null,\r\n\t\t\ttargetRotation: 0,\r\n\t\t\ttargetRotationOnPointerDown: 0,\r\n\t\t\tpointerX: 0,\r\n\t\t\tpointerXOnPointerDown: 0,\r\n\t\t\twindowHalfX: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.windowHalfX = this.$webglInnerWidth / 2\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglGeometryShapes-container')[0].appendChild(this.container)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xf0f0f0)\r\n            this.camera = new this.$THREE.PerspectiveCamera(50, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.set(0, 150, 500)\r\n            this.scene.add(this.camera)\r\n            var light = new this.$THREE.PointLight(0xffffff, 0.8)\r\n            this.camera.add(light)\r\n            this.group = new this.$THREE.Group()\r\n            this.group.position.y = 50\r\n            this.scene.add(this.group)\r\n            var loader = new this.$THREE.TextureLoader()\r\n            var texture = loader.load(\"static/textures/uv_grid_opengl.jpg\")\r\n            // it's necessary to apply these settings in order to correctly display the texture on a shape geometry\r\n            texture.wrapS = texture.wrapT = this.$THREE.RepeatWrapping\r\n            texture.repeat.set(0.008, 0.008)\r\n            var that = this\r\n            function addShape(shape, extrudeSettings, color, x, y, z, rx, ry, rz, s) {\r\n                // flat shape with texture\r\n                // note: default UVs generated by this.$THREE.ShapeBufferGeometry are simply the x- and y-coordinates of the vertices\r\n                var geometry = new that.$THREE.ShapeBufferGeometry(shape)\r\n                var mesh = new that.$THREE.Mesh(geometry, new that.$THREE.MeshPhongMaterial({ side: that.$THREE.DoubleSide, map: texture }))\r\n                mesh.position.set(x, y, z - 175)\r\n                mesh.rotation.set(rx, ry, rz)\r\n                mesh.scale.set(s, s, s)\r\n                that.group.add(mesh)\r\n                // flat shape\r\n                geometry = new that.$THREE.ShapeBufferGeometry(shape)\r\n                mesh = new that.$THREE.Mesh(geometry, new that.$THREE.MeshPhongMaterial({ color: color, side: that.$THREE.DoubleSide }))\r\n                mesh.position.set(x, y, z - 125)\r\n                mesh.rotation.set(rx, ry, rz)\r\n                mesh.scale.set(s, s, s)\r\n                that.group.add(mesh)\r\n                // extruded shape\r\n                geometry = new that.$THREE.ExtrudeBufferGeometry(shape, extrudeSettings)\r\n                mesh = new that.$THREE.Mesh(geometry, new that.$THREE.MeshPhongMaterial({ color: color }))\r\n                mesh.position.set(x, y, z - 75)\r\n                mesh.rotation.set(rx, ry, rz)\r\n                mesh.scale.set(s, s, s)\r\n                that.group.add(mesh)\r\n                addLineShape(shape, color, x, y, z, rx, ry, rz, s)\r\n            }\r\n            function addLineShape(shape, color, x, y, z, rx, ry, rz, s) {\r\n                // lines\r\n                shape.autoClose = true\r\n                var points = shape.getPoints()\r\n                var spacedPoints = shape.getSpacedPoints(50)\r\n                var geometryPoints = new that.$THREE.BufferGeometry().setFromPoints(points)\r\n                var geometrySpacedPoints = new that.$THREE.BufferGeometry().setFromPoints(spacedPoints)\r\n                // solid line\r\n                var line = new that.$THREE.Line(geometryPoints, new that.$THREE.LineBasicMaterial({ color: color }))\r\n                line.position.set(x, y, z - 25)\r\n                line.rotation.set(rx, ry, rz)\r\n                line.scale.set(s, s, s)\r\n                that.group.add(line)\r\n                // line from equidistance sampled points\r\n                line = new that.$THREE.Line(geometrySpacedPoints, new that.$THREE.LineBasicMaterial({ color: color }))\r\n                line.position.set(x, y, z + 25)\r\n                line.rotation.set(rx, ry, rz)\r\n                line.scale.set(s, s, s)\r\n                that.group.add(line)\r\n                // vertices from real points\r\n                var particles = new that.$THREE.Points(geometryPoints, new that.$THREE.PointsMaterial({ color: color, size: 4 }))\r\n                particles.position.set(x, y, z + 75)\r\n                particles.rotation.set(rx, ry, rz)\r\n                particles.scale.set(s, s, s)\r\n                that.group.add(particles)\r\n                // equidistance sampled points\r\n                particles = new that.$THREE.Points(geometrySpacedPoints, new that.$THREE.PointsMaterial({ color: color, size: 4 }))\r\n                particles.position.set(x, y, z + 125)\r\n                particles.rotation.set(rx, ry, rz)\r\n                particles.scale.set(s, s, s)\r\n                that.group.add(particles)\r\n            }\r\n            // California\r\n            var californiaPts = []\r\n            californiaPts.push(new this.$THREE.Vector2(610, 320))\r\n            californiaPts.push(new this.$THREE.Vector2(450, 300))\r\n            californiaPts.push(new this.$THREE.Vector2(392, 392))\r\n            californiaPts.push(new this.$THREE.Vector2(266, 438))\r\n            californiaPts.push(new this.$THREE.Vector2(190, 570))\r\n            californiaPts.push(new this.$THREE.Vector2(190, 600))\r\n            californiaPts.push(new this.$THREE.Vector2(160, 620))\r\n            californiaPts.push(new this.$THREE.Vector2(160, 650))\r\n            californiaPts.push(new this.$THREE.Vector2(180, 640))\r\n            californiaPts.push(new this.$THREE.Vector2(165, 680))\r\n            californiaPts.push(new this.$THREE.Vector2(150, 670))\r\n            californiaPts.push(new this.$THREE.Vector2(90, 737))\r\n            californiaPts.push(new this.$THREE.Vector2(80, 795))\r\n            californiaPts.push(new this.$THREE.Vector2(50, 835))\r\n            californiaPts.push(new this.$THREE.Vector2(64, 870))\r\n            californiaPts.push(new this.$THREE.Vector2(60, 945))\r\n            californiaPts.push(new this.$THREE.Vector2(300, 945))\r\n            californiaPts.push(new this.$THREE.Vector2(300, 743))\r\n            californiaPts.push(new this.$THREE.Vector2(600, 473))\r\n            californiaPts.push(new this.$THREE.Vector2(626, 425))\r\n            californiaPts.push(new this.$THREE.Vector2(600, 370))\r\n            californiaPts.push(new this.$THREE.Vector2(610, 320))\r\n            for (var i = 0; i < californiaPts.length; i ++) californiaPts[ i ].multiplyScalar(0.25)\r\n            var californiaShape = new this.$THREE.Shape(californiaPts)\r\n            // Triangle\r\n            var triangleShape = new this.$THREE.Shape()\r\n                .moveTo(80, 20)\r\n                .lineTo(40, 80)\r\n                .lineTo(120, 80)\r\n                .lineTo(80, 20) // close path\r\n            // Heart\r\n            var x = 0, y = 0\r\n            var heartShape = new this.$THREE.Shape() // From http://blog.burlock.org/html5/130-paths\r\n                .moveTo(x + 25, y + 25)\r\n                .bezierCurveTo(x + 25, y + 25, x + 20, y, x, y)\r\n                .bezierCurveTo(x - 30, y, x - 30, y + 35, x - 30, y + 35)\r\n                .bezierCurveTo(x - 30, y + 55, x - 10, y + 77, x + 25, y + 95)\r\n                .bezierCurveTo(x + 60, y + 77, x + 80, y + 55, x + 80, y + 35)\r\n                .bezierCurveTo(x + 80, y + 35, x + 80, y, x + 50, y)\r\n                .bezierCurveTo(x + 35, y, x + 25, y + 25, x + 25, y + 25)\r\n            // Square\r\n            var sqLength = 80\r\n            var squareShape = new this.$THREE.Shape()\r\n                .moveTo(0, 0)\r\n                .lineTo(0, sqLength)\r\n                .lineTo(sqLength, sqLength)\r\n                .lineTo(sqLength, 0)\r\n                .lineTo(0, 0)\r\n            // Rounded rectangle\r\n            var roundedRectShape = new this.$THREE.Shape()\r\n            // (function roundedRect(ctx, x, y, width, height, radius) {\r\n            //     ctx.moveTo(x, y + radius)\r\n            //     ctx.lineTo(x, y + height - radius)\r\n            //     ctx.quadraticCurveTo(x, y + height, x + radius, y + height)\r\n            //     ctx.lineTo(x + width - radius, y + height)\r\n            //     ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius)\r\n            //     ctx.lineTo(x + width, y + radius)\r\n            //     ctx.quadraticCurveTo(x + width, y, x + width - radius, y)\r\n            //     ctx.lineTo(x + radius, y)\r\n            //     ctx.quadraticCurveTo(x, y, x, y + radius)\r\n            // })(roundedRectShape, 0, 0, 50, 50, 20)\r\n            function roundedRect(ctx, x, y, width, height, radius) {\r\n                ctx.moveTo(x, y + radius)\r\n                ctx.lineTo(x, y + height - radius)\r\n                ctx.quadraticCurveTo(x, y + height, x + radius, y + height)\r\n                ctx.lineTo(x + width - radius, y + height)\r\n                ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radius)\r\n                ctx.lineTo(x + width, y + radius)\r\n                ctx.quadraticCurveTo(x + width, y, x + width - radius, y)\r\n                ctx.lineTo(x + radius, y)\r\n                ctx.quadraticCurveTo(x, y, x, y + radius)\r\n            }\r\n            roundedRect(roundedRectShape, 0, 0, 50, 50, 20)\r\n            // Track\r\n            var trackShape = new this.$THREE.Shape()\r\n                .moveTo(40, 40)\r\n                .lineTo(40, 160)\r\n                .absarc(60, 160, 20, Math.PI, 0, true)\r\n                .lineTo(80, 40)\r\n                .absarc(60, 40, 20, 2 * Math.PI, Math.PI, true)\r\n            // Circle\r\n            var circleRadius = 40\r\n            var circleShape = new this.$THREE.Shape()\r\n                .moveTo(0, circleRadius)\r\n                .quadraticCurveTo(circleRadius, circleRadius, circleRadius, 0)\r\n                .quadraticCurveTo(circleRadius, - circleRadius, 0, - circleRadius)\r\n                .quadraticCurveTo(- circleRadius, - circleRadius, - circleRadius, 0)\r\n                .quadraticCurveTo(- circleRadius, circleRadius, 0, circleRadius)\r\n            // Fish\r\n            var fishShape = new this.$THREE.Shape()\r\n                .moveTo(x, y)\r\n                .quadraticCurveTo(x + 50, y - 80, x + 90, y - 10)\r\n                .quadraticCurveTo(x + 100, y - 10, x + 115, y - 40)\r\n                .quadraticCurveTo(x + 115, y, x + 115, y + 40)\r\n                .quadraticCurveTo(x + 100, y + 10, x + 90, y + 10)\r\n                .quadraticCurveTo(x + 50, y + 80, x, y)\r\n            // Arc circle\r\n            var arcShape = new this.$THREE.Shape()\r\n                .moveTo(50, 10)\r\n                .absarc(10, 10, 40, 0, Math.PI * 2, false)\r\n            var holePath = new this.$THREE.Path()\r\n                .moveTo(20, 10)\r\n                .absarc(10, 10, 10, 0, Math.PI * 2, true)\r\n            arcShape.holes.push(holePath)\r\n            // Smiley\r\n            var smileyShape = new this.$THREE.Shape()\r\n                .moveTo(80, 40)\r\n                .absarc(40, 40, 40, 0, Math.PI * 2, false)\r\n            var smileyEye1Path = new this.$THREE.Path()\r\n                .moveTo(35, 20)\r\n                .absellipse(25, 20, 10, 10, 0, Math.PI * 2, true)\r\n            var smileyEye2Path = new this.$THREE.Path()\r\n                .moveTo(65, 20)\r\n                .absarc(55, 20, 10, 0, Math.PI * 2, true)\r\n            var smileyMouthPath = new this.$THREE.Path()\r\n                .moveTo(20, 40)\r\n                .quadraticCurveTo(40, 60, 60, 40)\r\n                .bezierCurveTo(70, 45, 70, 50, 60, 60)\r\n                .quadraticCurveTo(40, 80, 20, 60)\r\n                .quadraticCurveTo(5, 50, 20, 40)\r\n            smileyShape.holes.push(smileyEye1Path)\r\n            smileyShape.holes.push(smileyEye2Path)\r\n            smileyShape.holes.push(smileyMouthPath)\r\n            // Spline shape\r\n            var splinepts = []\r\n            splinepts.push(new this.$THREE.Vector2(70, 20))\r\n            splinepts.push(new this.$THREE.Vector2(80, 90))\r\n            splinepts.push(new this.$THREE.Vector2(- 30, 70))\r\n            splinepts.push(new this.$THREE.Vector2(0, 0))\r\n            var splineShape = new this.$THREE.Shape()\r\n                .moveTo(0, 0)\r\n                .splineThru(splinepts)\r\n            var extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 }\r\n            // addShape(shape, color, x, y, z, rx, ry,rz, s)\r\n            addShape(californiaShape, extrudeSettings, 0xf08000, - 300, - 100, 0, 0, 0, 0, 1)\r\n            addShape(triangleShape, extrudeSettings, 0x8080f0, - 180, 0, 0, 0, 0, 0, 1)\r\n            addShape(roundedRectShape, extrudeSettings, 0x008000, - 150, 150, 0, 0, 0, 0, 1)\r\n            addShape(trackShape, extrudeSettings, 0x008080, 200, - 100, 0, 0, 0, 0, 1)\r\n            addShape(squareShape, extrudeSettings, 0x0040f0, 150, 100, 0, 0, 0, 0, 1)\r\n            addShape(heartShape, extrudeSettings, 0xf00000, 60, 100, 0, 0, 0, Math.PI, 1)\r\n            addShape(circleShape, extrudeSettings, 0x00f000, 120, 250, 0, 0, 0, 0, 1)\r\n            addShape(fishShape, extrudeSettings, 0x404040, - 60, 200, 0, 0, 0, 0, 1)\r\n            addShape(smileyShape, extrudeSettings, 0xf000f0, - 200, 250, 0, 0, 0, Math.PI, 1)\r\n            addShape(arcShape, extrudeSettings, 0x804000, 150, 0, 0, 0, 0, 0, 1)\r\n            addShape(splineShape, extrudeSettings, 0x808080, - 50, - 100, 0, 0, 0, 0, 1)\r\n            addLineShape(arcShape.holes[ 0 ], 0x804000, 150, 0, 0, 0, 0, 0, 1)\r\n            for (var i = 0; i < smileyShape.holes.length; i += 1) {\r\n                addLineShape(smileyShape.holes[ i ], 0xf000f0, - 200, 250, 0, 0, 0, Math.PI, 1)\r\n            }\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.container.style.touchAction = 'none'\r\n            this.container.addEventListener('pointerdown', this.onPointerDown, false)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.windowHalfX = window.innerWidth / 2\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        onPointerDown(event) {\r\n            if (event.isPrimary === false) return\r\n            this.pointerXOnPointerDown = event.clientX - this.windowHalfX\r\n            this.targetRotationOnPointerDown = this.targetRotation\r\n            document.addEventListener('pointermove', this.onPointerMove, false)\r\n            document.addEventListener('pointerup', this.onPointerUp, false)\r\n        },\r\n        onPointerMove(event) {\r\n            if (event.isPrimary === false) return\r\n            this.pointerX = event.clientX - this.windowHalfX\r\n            this.targetRotation = this.targetRotationOnPointerDown + (this.pointerX - this.pointerXOnPointerDown) * 0.02\r\n        },\r\n        onPointerUp() {\r\n            if (event.isPrimary === false) return\r\n            document.removeEventListener('pointermove', this.onPointerMove)\r\n            document.removeEventListener('pointerup', this.onPointerUp)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            this.group.rotation.y += (this.targetRotation - this.group.rotation.y) * 0.05\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglGeometryShapes-container {\r\n    width: 100%;\r\n    background-color: #f0f0f0;\r\n}\r\n#info {\r\n    color: #444;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/geometries/webglGeometryShapes.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglGeometryShapes-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_vm._v(\"Simple procedurally-generated shapes\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-998060aa\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/geometries/webglGeometryShapes.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-998060aa\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglGeometryShapes.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometryShapes.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometryShapes.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-998060aa\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglGeometryShapes.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-998060aa\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/geometries/webglGeometryShapes.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}