{"version":3,"sources":["webpack:///src/views/vr/webxrVrPaint.vue","webpack:///./src/views/vr/webxrVrPaint.vue?e558","webpack:///./src/views/vr/webxrVrPaint.vue","webpack:///./src/components/jsm/misc/TubePainter.js"],"names":["webxrVrPaint","data","camera","scene","renderer","controller1","controller2","cursor","controls","mounted","this","$THREE","Vector3","init","animate","methods","container","document","createElement","getElementsByClassName","appendChild","Scene","background","Color","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","OrbitControls","target","update","tableGeometry","BoxBufferGeometry","tableMaterial","MeshStandardMaterial","color","roughness","metalness","table","Mesh","y","z","add","floorGometry","PlaneBufferGeometry","floorMaterial","floor","rotation","x","Math","PI","grid","GridHelper","HemisphereLight","light","DirectionalLight","painter1","TubePainter","mesh","painter2","onSelectStart","userData","isSelecting","onSelectEnd","onSqueezeStart","isSqueezing","positionAtSqueezeStart","scaleAtSqueezeStart","scale","onSqueezeEnd","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","xr","enabled","domElement","VRButton","createButton","getController","addEventListener","painter","geometry","CylinderBufferGeometry","rotateX","material","flatShading","pivot","IcosahedronBufferGeometry","name","clone","onWindowResize","$onWindowResize","handleController","controller","getObjectByName","delta","max","setScalar","setFromMatrixPosition","matrixWorld","lineTo","moveTo","setAnimationLoop","render","vr_webxrVrPaint","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","positions","BufferAttribute","Float32Array","usage","DynamicDrawUsage","normals","colors","BufferGeometry","setAttribute","drawRange","count","vertexColors","frustumCulled","vector1","vector2","vector3","vector4","size","stroke","position1","position2","matrix1","matrix2","distanceToSquared","points","PI2","array","radius","i","angle","push","sin","cos","getPoints","il","length","vertex1","vertex2","copy","applyMatrix4","toArray","normalize","up","point1","point2","Matrix4","lookAt","value","start","end","updateRange","offset","needsUpdate"],"mappings":"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","file":"static/js/41.da1a2f3e2e5209b0706d.js","sourcesContent":["<template>\r\n    <div class=\"webxrVrPaint-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> vr - paint\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { TubePainter } from '@/components/jsm/misc/TubePainter.js'\r\nimport { VRButton } from '@/components/jsm/webxr/VRButton.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            controller1: null,\r\n            controller2: null,\r\n\t\t\tcursor: null,\r\n\t\t\tcontrols: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.cursor = new this.$THREE.Vector3()\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            var container = document.createElement('div')\r\n            document.getElementsByClassName('webxrVrPaint-container')[0].appendChild(container)\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0x222222)\r\n            this.camera = new this.$THREE.PerspectiveCamera(50, this.$webglInnerWidth / window.innerHeight, 0.01, 50)\r\n            this.camera.position.set(0, 1.6, 3)\r\n            this.controls = new OrbitControls(this.camera, container)\r\n            this.controls.target.set(0, 1.6, 0)\r\n            this.controls.update()\r\n            var tableGeometry = new this.$THREE.BoxBufferGeometry(0.5, 0.8, 0.5)\r\n            var tableMaterial = new this.$THREE.MeshStandardMaterial({\r\n                color: 0x444444,\r\n                roughness: 1.0,\r\n                metalness: 0.0\r\n            })\r\n            var table = new this.$THREE.Mesh(tableGeometry, tableMaterial)\r\n            table.position.y = 0.35\r\n            table.position.z = 0.85\r\n            this.scene.add(table)\r\n            var floorGometry = new this.$THREE.PlaneBufferGeometry(4, 4)\r\n            var floorMaterial = new this.$THREE.MeshStandardMaterial({\r\n                color: 0x222222,\r\n                roughness: 1.0,\r\n                metalness: 0.0\r\n            })\r\n            var floor = new this.$THREE.Mesh(floorGometry, floorMaterial)\r\n            floor.rotation.x = - Math.PI / 2\r\n            this.scene.add(floor)\r\n            var grid = new this.$THREE.GridHelper(10, 20, 0x111111, 0x111111)\r\n            // grid.material.depthTest = false // avoid z-fighting\r\n            this.scene.add(grid)\r\n            this.scene.add(new this.$THREE.HemisphereLight(0x888877, 0x777788))\r\n            var light = new this.$THREE.DirectionalLight(0xffffff, 0.5)\r\n            light.position.set(0, 4, 0)\r\n            this.scene.add(light)\r\n            //\r\n            var painter1 = new TubePainter()\r\n            this.scene.add(painter1.mesh)\r\n            var painter2 = new TubePainter()\r\n            this.scene.add(painter2.mesh)\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            this.renderer.xr.enabled = true\r\n            container.appendChild(this.renderer.domElement)\r\n            document.getElementsByClassName('webxrVrPaint-container')[0].appendChild(VRButton.createButton(this.renderer))\r\n            // controllers\r\n            function onSelectStart() {\r\n                this.userData.isSelecting = true\r\n            }\r\n            function onSelectEnd() {\r\n                this.userData.isSelecting = false\r\n            }\r\n            function onSqueezeStart() {\r\n                this.userData.isSqueezing = true\r\n                this.userData.positionAtSqueezeStart = this.position.y\r\n                this.userData.scaleAtSqueezeStart = this.scale.x\r\n            }\r\n            function onSqueezeEnd() {\r\n                this.userData.isSqueezing = false\r\n            }\r\n            this.controller1 = this.renderer.xr.getController(0)\r\n            this.controller1.addEventListener('selectstart', onSelectStart)\r\n            this.controller1.addEventListener('selectend', onSelectEnd)\r\n            this.controller1.addEventListener('squeezestart', onSqueezeStart)\r\n            this.controller1.addEventListener('squeezeend', onSqueezeEnd)\r\n            this.controller1.userData.painter = painter1\r\n            this.scene.add(this.controller1)\r\n            this.controller2 = this.renderer.xr.getController(1)\r\n            this.controller2.addEventListener('selectstart', onSelectStart)\r\n            this.controller2.addEventListener('selectend', onSelectEnd)\r\n            this.controller2.addEventListener('squeezestart', onSqueezeStart)\r\n            this.controller2.addEventListener('squeezeend', onSqueezeEnd)\r\n            this.controller2.userData.painter = painter2\r\n            this.scene.add(this.controller2)\r\n            //\r\n            var geometry = new this.$THREE.CylinderBufferGeometry(0.01, 0.02, 0.08, 5)\r\n            geometry.rotateX(- Math.PI / 2)\r\n            var material = new this.$THREE.MeshStandardMaterial({ flatShading: true })\r\n            var mesh = new this.$THREE.Mesh(geometry, material)\r\n            var pivot = new this.$THREE.Mesh(new this.$THREE.IcosahedronBufferGeometry(0.01, 3))\r\n            pivot.name = 'pivot'\r\n            pivot.position.z = - 0.05\r\n            mesh.add(pivot)\r\n            this.controller1.add(mesh.clone())\r\n            this.controller2.add(mesh.clone())\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        handleController(controller) {\r\n            var userData = controller.userData\r\n            var painter = userData.painter\r\n            var pivot = controller.getObjectByName('pivot')\r\n            if (userData.isSqueezing === true) {\r\n                var delta = (controller.position.y - userData.positionAtSqueezeStart) * 5\r\n                var scale = Math.max(0.1, userData.scaleAtSqueezeStart + delta)\r\n                pivot.scale.setScalar(scale)\r\n                painter.setSize(scale)\r\n            }\r\n            this.cursor.setFromMatrixPosition(pivot.matrixWorld)\r\n            if (userData.isSelecting === true) {\r\n                painter.lineTo(this.cursor)\r\n                painter.update()\r\n            } else {\r\n                painter.moveTo(this.cursor)\r\n            }\r\n        },\r\n        animate() {\r\n            this.renderer.setAnimationLoop(this.render)\r\n        },\r\n        render() {\r\n            this.handleController(this.controller1)\r\n            this.handleController(this.controller2)\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webxrVrPaint-container {\r\n    position: relative;\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/vr/webxrVrPaint.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webxrVrPaint-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" vr - paint\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-65c523e3\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/vr/webxrVrPaint.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-65c523e3\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webxrVrPaint.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webxrVrPaint.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webxrVrPaint.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-65c523e3\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webxrVrPaint.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-65c523e3\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/vr/webxrVrPaint.vue\n// module id = null\n// module chunks = ","import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tColor,\r\n\tDynamicDrawUsage,\r\n\tMatrix4,\r\n\tMesh,\r\n\tMeshStandardMaterial,\r\n\tVector3\r\n} from '@/components/build/three.module.js';\r\n\r\nfunction TubePainter() {\r\n\r\n\tconst BUFFER_SIZE = 1000000 * 3;\r\n\r\n\tconst positions = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\r\n\tpositions.usage = DynamicDrawUsage;\r\n\r\n\tconst normals = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\r\n\tnormals.usage = DynamicDrawUsage;\r\n\r\n\tconst colors = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\r\n\tcolors.usage = DynamicDrawUsage;\r\n\r\n\tconst geometry = new BufferGeometry();\r\n\tgeometry.setAttribute( 'position', positions );\r\n\tgeometry.setAttribute( 'normal', normals );\r\n\tgeometry.setAttribute( 'color', colors );\r\n\tgeometry.drawRange.count = 0;\r\n\r\n\tconst material = new MeshStandardMaterial( {\r\n\t\tvertexColors: true\r\n\t} );\r\n\r\n\tconst mesh = new Mesh( geometry, material );\r\n\tmesh.frustumCulled = false;\r\n\r\n\t//\r\n\r\n\tfunction getPoints( size ) {\r\n\r\n\t\tconst PI2 = Math.PI * 2;\r\n\r\n\t\tconst sides = 10;\r\n\t\tconst array = [];\r\n\t\tconst radius = 0.01 * size;\r\n\r\n\t\tfor ( let i = 0; i < sides; i ++ ) {\r\n\r\n\t\t\tconst angle = ( i / sides ) * PI2;\r\n\t\t\tarray.push( new Vector3( Math.sin( angle ) * radius, Math.cos( angle ) * radius, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst vector1 = new Vector3();\r\n\tconst vector2 = new Vector3();\r\n\tconst vector3 = new Vector3();\r\n\tconst vector4 = new Vector3();\r\n\r\n\tconst color = new Color( 0xffffff );\r\n\tlet size = 1;\r\n\r\n\tfunction stroke( position1, position2, matrix1, matrix2 ) {\r\n\r\n\t\tif ( position1.distanceToSquared( position2 ) === 0 ) return;\r\n\r\n\t\tlet count = geometry.drawRange.count;\r\n\r\n\t\tconst points = getPoints( size );\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst vertex1 = points[ i ];\r\n\t\t\tconst vertex2 = points[ ( i + 1 ) % il ];\r\n\r\n\t\t\t// positions\r\n\r\n\t\t\tvector1.copy( vertex1 ).applyMatrix4( matrix2 ).add( position2 );\r\n\t\t\tvector2.copy( vertex2 ).applyMatrix4( matrix2 ).add( position2 );\r\n\t\t\tvector3.copy( vertex2 ).applyMatrix4( matrix1 ).add( position1 );\r\n\t\t\tvector4.copy( vertex1 ).applyMatrix4( matrix1 ).add( position1 );\r\n\r\n\t\t\tvector1.toArray( positions.array, ( count + 0 ) * 3 );\r\n\t\t\tvector2.toArray( positions.array, ( count + 1 ) * 3 );\r\n\t\t\tvector4.toArray( positions.array, ( count + 2 ) * 3 );\r\n\r\n\t\t\tvector2.toArray( positions.array, ( count + 3 ) * 3 );\r\n\t\t\tvector3.toArray( positions.array, ( count + 4 ) * 3 );\r\n\t\t\tvector4.toArray( positions.array, ( count + 5 ) * 3 );\r\n\r\n\t\t\t// normals\r\n\r\n\t\t\tvector1.copy( vertex1 ).applyMatrix4( matrix2 ).normalize();\r\n\t\t\tvector2.copy( vertex2 ).applyMatrix4( matrix2 ).normalize();\r\n\t\t\tvector3.copy( vertex2 ).applyMatrix4( matrix1 ).normalize();\r\n\t\t\tvector4.copy( vertex1 ).applyMatrix4( matrix1 ).normalize();\r\n\r\n\t\t\tvector1.toArray( normals.array, ( count + 0 ) * 3 );\r\n\t\t\tvector2.toArray( normals.array, ( count + 1 ) * 3 );\r\n\t\t\tvector4.toArray( normals.array, ( count + 2 ) * 3 );\r\n\r\n\t\t\tvector2.toArray( normals.array, ( count + 3 ) * 3 );\r\n\t\t\tvector3.toArray( normals.array, ( count + 4 ) * 3 );\r\n\t\t\tvector4.toArray( normals.array, ( count + 5 ) * 3 );\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tcolor.toArray( colors.array, ( count + 0 ) * 3 );\r\n\t\t\tcolor.toArray( colors.array, ( count + 1 ) * 3 );\r\n\t\t\tcolor.toArray( colors.array, ( count + 2 ) * 3 );\r\n\r\n\t\t\tcolor.toArray( colors.array, ( count + 3 ) * 3 );\r\n\t\t\tcolor.toArray( colors.array, ( count + 4 ) * 3 );\r\n\t\t\tcolor.toArray( colors.array, ( count + 5 ) * 3 );\r\n\r\n\t\t\tcount += 6;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.drawRange.count = count;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst up = new Vector3( 0, 1, 0 );\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\r\n\tconst matrix1 = new Matrix4();\r\n\tconst matrix2 = new Matrix4();\r\n\r\n\tfunction moveTo( position ) {\r\n\r\n\t\tpoint1.copy( position );\r\n\t\tmatrix1.lookAt( point2, point1, up );\r\n\r\n\t\tpoint2.copy( position );\r\n\t\tmatrix2.copy( matrix1 );\r\n\r\n\t}\r\n\r\n\tfunction lineTo( position ) {\r\n\r\n\t\tpoint1.copy( position );\r\n\t\tmatrix1.lookAt( point2, point1, up );\r\n\r\n\t\tstroke( point1, point2, matrix1, matrix2 );\r\n\r\n\t\tpoint2.copy( point1 );\r\n\t\tmatrix2.copy( matrix1 );\r\n\r\n\t}\r\n\r\n\tfunction setSize( value ) {\r\n\r\n\t\tsize = value;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tlet count = 0;\r\n\r\n\tfunction update() {\r\n\r\n\t\tconst start = count;\r\n\t\tconst end = geometry.drawRange.count;\r\n\r\n\t\tif ( start === end ) return;\r\n\r\n\t\tpositions.updateRange.offset = start * 3;\r\n\t\tpositions.updateRange.count = ( end - start ) * 3;\r\n\t\tpositions.needsUpdate = true;\r\n\r\n\t\tnormals.updateRange.offset = start * 3;\r\n\t\tnormals.updateRange.count = ( end - start ) * 3;\r\n\t\tnormals.needsUpdate = true;\r\n\r\n\t\tcolors.updateRange.offset = start * 3;\r\n\t\tcolors.updateRange.count = ( end - start ) * 3;\r\n\t\tcolors.needsUpdate = true;\r\n\r\n\t\tcount = geometry.drawRange.count;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tmesh: mesh,\r\n\t\tmoveTo: moveTo,\r\n\t\tlineTo: lineTo,\r\n\t\tsetSize: setSize,\r\n\t\tupdate: update\r\n\t};\r\n\r\n}\r\n\r\nexport { TubePainter };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/misc/TubePainter.js"],"sourceRoot":""}