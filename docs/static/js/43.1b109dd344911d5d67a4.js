webpackJsonp([43],{M2Ih:function(t,e,r){"use strict";r.d(e,"a",function(){return a});var i=r("6+nK"),a=function(t,e,r){this.variables=[],this.currentTextureIndex=0;var a=i.FloatType,n=new i.Scene,s=new i.Camera;s.position.z=1;var o={passThruTexture:{value:null}},l=m("uniform sampler2D passThruTexture;\n\nvoid main() {\n\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\n\tgl_FragColor = texture2D( passThruTexture, uv );\n\n}\n",o),h=new i.Mesh(new i.PlaneBufferGeometry(2,2),l);function u(r){r.defines.resolution="vec2( "+t.toFixed(1)+", "+e.toFixed(1)+" )"}function m(t,e){e=e||{};var r=new i.ShaderMaterial({uniforms:e,vertexShader:"void main()\t{\n\n\tgl_Position = vec4( position, 1.0 );\n\n}\n",fragmentShader:t});return u(r),r}n.add(h),this.setDataType=function(t){return a=t,this},this.addVariable=function(t,e,r){var a={name:t,initialValueTexture:r,material:this.createShaderMaterial(e),dependencies:null,renderTargets:[],wrapS:null,wrapT:null,minFilter:i.NearestFilter,magFilter:i.NearestFilter};return this.variables.push(a),a},this.setVariableDependencies=function(t,e){t.dependencies=e},this.init=function(){if(!1===r.capabilities.isWebGL2&&!1===r.extensions.has("OES_texture_float"))return"No OES_texture_float support for float textures.";if(0===r.capabilities.maxVertexTextures)return"No support for vertex shader textures.";for(var i=0;i<this.variables.length;i++){var a=this.variables[i];a.renderTargets[0]=this.createRenderTarget(t,e,a.wrapS,a.wrapT,a.minFilter,a.magFilter),a.renderTargets[1]=this.createRenderTarget(t,e,a.wrapS,a.wrapT,a.minFilter,a.magFilter),this.renderTexture(a.initialValueTexture,a.renderTargets[0]),this.renderTexture(a.initialValueTexture,a.renderTargets[1]);var n=a.material,s=n.uniforms;if(null!==a.dependencies)for(var o=0;o<a.dependencies.length;o++){var l=a.dependencies[o];if(l.name!==a.name){for(var h=!1,u=0;u<this.variables.length;u++)if(l.name===this.variables[u].name){h=!0;break}if(!h)return"Variable dependency not found. Variable="+a.name+", dependency="+l.name}s[l.name]={value:null},n.fragmentShader="\nuniform sampler2D "+l.name+";\n"+n.fragmentShader}}return this.currentTextureIndex=0,null},this.compute=function(){for(var t=this.currentTextureIndex,e=0===this.currentTextureIndex?1:0,r=0,i=this.variables.length;r<i;r++){var a=this.variables[r];if(null!==a.dependencies)for(var n=a.material.uniforms,s=0,o=a.dependencies.length;s<o;s++){var l=a.dependencies[s];n[l.name].value=l.renderTargets[t].texture}this.doRenderTarget(a.material,a.renderTargets[e])}this.currentTextureIndex=e},this.getCurrentRenderTarget=function(t){return t.renderTargets[this.currentTextureIndex]},this.getAlternateRenderTarget=function(t){return t.renderTargets[0===this.currentTextureIndex?1:0]},this.addResolutionDefine=u,this.createShaderMaterial=m,this.createRenderTarget=function(r,n,s,o,l,h){return r=r||t,n=n||e,s=s||i.ClampToEdgeWrapping,o=o||i.ClampToEdgeWrapping,l=l||i.NearestFilter,h=h||i.NearestFilter,new i.WebGLRenderTarget(r,n,{wrapS:s,wrapT:o,minFilter:l,magFilter:h,format:i.RGBAFormat,type:a,depthBuffer:!1})},this.createTexture=function(){var r=new Float32Array(t*e*4);return new i.DataTexture(r,t,e,i.RGBAFormat,i.FloatType)},this.renderTexture=function(t,e){o.passThruTexture.value=t,this.doRenderTarget(l,e),o.passThruTexture.value=null},this.doRenderTarget=function(t,e){var i=r.getRenderTarget();h.material=t,r.setRenderTarget(e),r.render(n,s),h.material=l,r.setRenderTarget(i)}}},aLER:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r("QEtz"),a=r("M2Ih"),n=r("uSAz"),s={data:function(){return{heightmapFragmentShader:null,smoothFragmentShader:null,readWaterLevelFragmentShader:null,waterVertexShader:null,gui:null,WIDTH:128,BOUNDS:512,BOUNDS_HALF:null,container:null,stats:null,camera:null,scene:null,renderer:null,mouseMoved:!1,mouseCoords:null,raycaster:null,waterMesh:null,meshRay:null,gpuCompute:null,heightmapVariable:null,waterUniforms:null,smoothShader:null,readWaterLevelShader:null,readWaterLevelRenderTarget:null,readWaterLevelImage:null,waterNormal:null,NUM_SPHERES:5,spheres:[],spheresEnabled:!0,simplex:null}},mounted:function(){this.heightmapFragmentShader="\n            #include <common>\n\t\t\tuniform vec2 mousePos;\n\t\t\tuniform float mouseSize;\n\t\t\tuniform float viscosityConstant;\n\t\t\tuniform float heightCompensation;\n\t\t\tvoid main()\t{\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\n\t\t\t\tvec2 uv = gl_FragCoord.xy * cellSize;\n\t\t\t\t// heightmapValue.x == height from previous frame\n\t\t\t\t// heightmapValue.y == height from penultimate frame\n\t\t\t\t// heightmapValue.z, heightmapValue.w not used\n\t\t\t\tvec4 heightmapValue = texture2D(heightmap, uv);\n\t\t\t\t// Get neighbours\n\t\t\t\tvec4 north = texture2D(heightmap, uv + vec2(0.0, cellSize.y));\n\t\t\t\tvec4 south = texture2D(heightmap, uv + vec2(0.0, - cellSize.y));\n\t\t\t\tvec4 east = texture2D(heightmap, uv + vec2(cellSize.x, 0.0));\n\t\t\t\tvec4 west = texture2D(heightmap, uv + vec2(- cellSize.x, 0.0));\n\t\t\t\t// https://web.archive.org/web/20080618181901/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\n\t\t\t\tfloat newHeight = ((north.x + south.x + east.x + west.x) * 0.5 - heightmapValue.y) * viscosityConstant;\n\t\t\t\t// Mouse influence\n\t\t\t\tfloat mousePhase = clamp(length((uv - vec2(0.5)) * BOUNDS - vec2(mousePos.x, - mousePos.y)) * PI / mouseSize, 0.0, PI);\n\t\t\t\tnewHeight += (cos(mousePhase) + 1.0) * 0.28;\n\t\t\t\theightmapValue.y = heightmapValue.x;\n\t\t\t\theightmapValue.x = newHeight;\n\t\t\t\tgl_FragColor = heightmapValue;\n            }",this.smoothFragmentShader="\n            uniform sampler2D smoothTexture;\n\t\t\tvoid main()\t{\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\n\t\t\t\tvec2 uv = gl_FragCoord.xy * cellSize;\n\t\t\t\t// Computes the mean of texel and 4 neighbours\n\t\t\t\tvec4 textureValue = texture2D(smoothTexture, uv);\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(0.0, cellSize.y));\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(0.0, - cellSize.y));\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(cellSize.x, 0.0));\n\t\t\t\ttextureValue += texture2D(smoothTexture, uv + vec2(- cellSize.x, 0.0));\n\t\t\t\ttextureValue /= 5.0;\n\t\t\t\tgl_FragColor = textureValue;\n            }",this.readWaterLevelFragmentShader="\n            uniform vec2 point1;\n\t\t\tuniform sampler2D levelTexture;\n\t\t\t// Integer to float conversion from https://stackoverflow.com/questions/17981163/webgl-read-pixels-from-floating-point-render-target\n\t\t\tfloat shift_right(float v, float amt) {\n\t\t\t\tv = floor(v) + 0.5;\n\t\t\t\treturn floor(v / exp2(amt));\n\t\t\t}\n\t\t\tfloat shift_left(float v, float amt) {\n\t\t\t\treturn floor(v * exp2(amt) + 0.5);\n\t\t\t}\n\t\t\tfloat mask_last(float v, float bits) {\n\t\t\t\treturn mod(v, shift_left(1.0, bits));\n\t\t\t}\n\t\t\tfloat extract_bits(float num, float from, float to) {\n\t\t\t\tfrom = floor(from + 0.5); to = floor(to + 0.5);\n\t\t\t\treturn mask_last(shift_right(num, from), to - from);\n\t\t\t}\n\t\t\tvec4 encode_float(float val) {\n\t\t\t\tif (val == 0.0) return vec4(0, 0, 0, 0);\n\t\t\t\tfloat sign = val > 0.0 ? 0.0 : 1.0;\n\t\t\t\tval = abs(val);\n\t\t\t\tfloat exponent = floor(log2(val));\n\t\t\t\tfloat biased_exponent = exponent + 127.0;\n\t\t\t\tfloat fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;\n\t\t\t\tfloat t = biased_exponent / 2.0;\n\t\t\t\tfloat last_bit_of_biased_exponent = fract(t) * 2.0;\n\t\t\t\tfloat remaining_bits_of_biased_exponent = floor(t);\n\t\t\t\tfloat byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;\n\t\t\t\tfloat byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;\n\t\t\t\tfloat byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;\n\t\t\t\tfloat byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;\n\t\t\t\treturn vec4(byte4, byte3, byte2, byte1);\n\t\t\t}\n\t\t\tvoid main()\t{\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\n\t\t\t\tfloat waterLevel = texture2D(levelTexture, point1).x;\n\t\t\t\tvec2 normal = vec2(\n\t\t\t\t\t(texture2D(levelTexture, point1 + vec2(- cellSize.x, 0)).x - texture2D(levelTexture, point1 + vec2(cellSize.x, 0)).x) * WIDTH / BOUNDS,\n\t\t\t\t\t(texture2D(levelTexture, point1 + vec2(0, - cellSize.y)).x - texture2D(levelTexture, point1 + vec2(0, cellSize.y)).x) * WIDTH / BOUNDS);\n\t\t\t\tif (gl_FragCoord.x < 1.5) {\n\t\t\t\t\tgl_FragColor = encode_float(waterLevel);\n\t\t\t\t} else if (gl_FragCoord.x < 2.5) {\n\t\t\t\t\tgl_FragColor = encode_float(normal.x);\n\t\t\t\t} else if (gl_FragCoord.x < 3.5) {\n\t\t\t\t\tgl_FragColor = encode_float(normal.y);\n\t\t\t\t} else {\n\t\t\t\t\tgl_FragColor = encode_float(0.0);\n\t\t\t\t}\n            }",this.waterVertexShader="\n            uniform sampler2D heightmap;\n\t\t\t#define PHONG\n\t\t\tvarying vec3 vViewPosition;\n\t\t\t#ifndef FLAT_SHADED\n\t\t\t\tvarying vec3 vNormal;\n\t\t\t#endif\n\t\t\t#include <common>\n\t\t\t#include <uv_pars_vertex>\n\t\t\t#include <uv2_pars_vertex>\n\t\t\t#include <displacementmap_pars_vertex>\n\t\t\t#include <envmap_pars_vertex>\n\t\t\t#include <color_pars_vertex>\n\t\t\t#include <morphtarget_pars_vertex>\n\t\t\t#include <skinning_pars_vertex>\n\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t#include <clipping_planes_pars_vertex>\n\t\t\tvoid main() {\n\t\t\t\tvec2 cellSize = vec2(1.0 / WIDTH, 1.0 / WIDTH);\n\t\t\t\t#include <uv_vertex>\n\t\t\t\t#include <uv2_vertex>\n\t\t\t\t#include <color_vertex>\n\t\t\t\t// # include <beginnormal_vertex>\n\t\t\t\t// Compute normal from heightmap\n\t\t\t\tvec3 objectNormal = vec3(\n\t\t\t\t\t(texture2D(heightmap, uv + vec2(- cellSize.x, 0)).x - texture2D(heightmap, uv + vec2(cellSize.x, 0)).x) * WIDTH / BOUNDS,\n\t\t\t\t\t(texture2D(heightmap, uv + vec2(0, - cellSize.y)).x - texture2D(heightmap, uv + vec2(0, cellSize.y)).x) * WIDTH / BOUNDS,\n\t\t\t\t\t1.0);\n\t\t\t\t//<beginnormal_vertex>\n\t\t\t\t#include <morphnormal_vertex>\n\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t#include <skinnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\t\t\t\tvNormal = normalize(transformedNormal);\n\t\t\t#endif\n\t\t\t\t//# include <begin_vertex>\n\t\t\t\tfloat heightValue = texture2D(heightmap, uv).x;\n\t\t\t\tvec3 transformed = vec3(position.x, position.y, heightValue);\n\t\t\t\t//<begin_vertex>\n\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t#include <skinning_vertex>\n\t\t\t\t#include <displacementmap_vertex>\n\t\t\t\t#include <project_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\tvViewPosition = - mvPosition.xyz;\n\t\t\t\t#include <worldpos_vertex>\n\t\t\t\t#include <envmap_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n            }",this.BOUNDS_HALF=.5*this.BOUNDS,this.mouseCoords=new this.$THREE.Vector2,this.raycaster=new this.$THREE.Raycaster,this.waterNormal=new this.$THREE.Vector3,this.simplex=new n.a,this.init(),this.animate()},beforeDestroy:function(){this.gui.destroy()},methods:{init:function(){var t=this;this.container=document.createElement("div"),document.getElementsByClassName("webglGpgpuWater-container")[0].appendChild(this.container),this.camera=new this.$THREE.PerspectiveCamera(75,this.$webglInnerWidth/window.innerHeight,1,3e3),this.camera.position.set(0,200,350),this.camera.lookAt(0,0,0),this.scene=new this.$THREE.Scene;var e=new this.$THREE.DirectionalLight(16777215,1);e.position.set(300,400,175),this.scene.add(e);var r=new this.$THREE.DirectionalLight(4235328,.6);r.position.set(-100,350,-200),this.scene.add(r),this.renderer=new this.$THREE.WebGLRenderer,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),this.container.appendChild(this.renderer.domElement),this.stats=new this.$Stats,this.stats.dom.style.left="280px",this.container.appendChild(this.stats.dom),this.container.style.touchAction="none",this.container.addEventListener("pointermove",this.onPointerMove,!1),document.addEventListener("keydown",function(e){87===e.keyCode&&(t.waterMesh.material.wireframe=!t.waterMesh.material.wireframe,t.waterMesh.material.needsUpdate=!0)},!1),window.addEventListener("resize",this.onWindowResize,!1),this.gui=new i.a;var a={mouseSize:20,viscosity:.98,spheresEnabled:this.spheresEnabled},n=function(){t.heightmapVariable.material.uniforms.mouseSize.value=a.mouseSize,t.heightmapVariable.material.uniforms.viscosityConstant.value=a.viscosity,t.spheresEnabled=a.spheresEnabled;for(var e=0;e<t.NUM_SPHERES;e++)t.spheres[e]&&(t.spheres[e].visible=t.spheresEnabled)};this.gui.add(a,"mouseSize",1,100,1).onChange(n),this.gui.add(a,"viscosity",.9,.999,.001).onChange(n),this.gui.add(a,"spheresEnabled",0,1,1).onChange(n);var s={smoothWater:function(){t.smoothWater()}};this.gui.add(s,"smoothWater"),this.initWater(),this.createSpheres(),n()},initWater:function(){var t=new this.$THREE.PlaneBufferGeometry(this.BOUNDS,this.BOUNDS,this.WIDTH-1,this.WIDTH-1),e=new this.$THREE.ShaderMaterial({uniforms:this.$THREE.UniformsUtils.merge([this.$THREE.ShaderLib.phong.uniforms,{heightmap:{value:null}}]),vertexShader:this.waterVertexShader,fragmentShader:this.$THREE.ShaderChunk.meshphong_frag});e.lights=!0,e.color=new this.$THREE.Color(16576),e.specular=new this.$THREE.Color(1118481),e.shininess=50,e.uniforms.diffuse.value=e.color,e.uniforms.specular.value=e.specular,e.uniforms.shininess.value=Math.max(e.shininess,1e-4),e.uniforms.opacity.value=e.opacity,e.defines.WIDTH=this.WIDTH.toFixed(1),e.defines.BOUNDS=this.BOUNDS.toFixed(1),this.waterUniforms=e.uniforms,this.waterMesh=new this.$THREE.Mesh(t,e),this.waterMesh.rotation.x=-Math.PI/2,this.waterMesh.matrixAutoUpdate=!1,this.waterMesh.updateMatrix(),this.scene.add(this.waterMesh);var r=new this.$THREE.PlaneBufferGeometry(this.BOUNDS,this.BOUNDS,1,1);this.meshRay=new this.$THREE.Mesh(r,new this.$THREE.MeshBasicMaterial({color:16777215,visible:!1})),this.meshRay.rotation.x=-Math.PI/2,this.meshRay.matrixAutoUpdate=!1,this.meshRay.updateMatrix(),this.scene.add(this.meshRay),this.gpuCompute=new a.a(this.WIDTH,this.WIDTH,this.renderer),this.isSafari()&&this.gpuCompute.setDataType(this.$THREE.HalfFloatType);var i=this.gpuCompute.createTexture();this.fillTexture(i),this.heightmapVariable=this.gpuCompute.addVariable("heightmap",this.heightmapFragmentShader,i),this.gpuCompute.setVariableDependencies(this.heightmapVariable,[this.heightmapVariable]),this.heightmapVariable.material.uniforms.mousePos={value:new this.$THREE.Vector2(1e4,1e4)},this.heightmapVariable.material.uniforms.mouseSize={value:20},this.heightmapVariable.material.uniforms.viscosityConstant={value:.98},this.heightmapVariable.material.uniforms.heightCompensation={value:0},this.heightmapVariable.material.defines.BOUNDS=this.BOUNDS.toFixed(1);var n=this.gpuCompute.init();null!==n&&console.error(n),this.smoothShader=this.gpuCompute.createShaderMaterial(this.smoothFragmentShader,{smoothTexture:{value:null}}),this.readWaterLevelShader=this.gpuCompute.createShaderMaterial(this.readWaterLevelFragmentShader,{point1:{value:new this.$THREE.Vector2},levelTexture:{value:null}}),this.readWaterLevelShader.defines.WIDTH=this.WIDTH.toFixed(1),this.readWaterLevelShader.defines.BOUNDS=this.BOUNDS.toFixed(1),this.readWaterLevelImage=new Uint8Array(16),this.readWaterLevelRenderTarget=new this.$THREE.WebGLRenderTarget(4,1,{wrapS:this.$THREE.ClampToEdgeWrapping,wrapT:this.$THREE.ClampToEdgeWrapping,minFilter:this.$THREE.NearestFilter,magFilter:this.$THREE.NearestFilter,format:this.$THREE.RGBAFormat,type:this.$THREE.UnsignedByteType,depthBuffer:!1})},isSafari:function(){return!!navigator.userAgent.match(/Safari/i)&&!navigator.userAgent.match(/Chrome/i)},fillTexture:function(t){var e=10,r=this;function i(t,i){for(var a=e,n=.025,s=0,o=0;o<15;o++)s+=a*r.simplex.noise(t*n,i*n),a*=.53+.025*o,n*=1.25;return s}for(var a=t.image.data,n=0,s=0;s<this.WIDTH;s++)for(var o=0;o<this.WIDTH;o++){var l=128*o/this.WIDTH,h=128*s/this.WIDTH;a[n+0]=i(l,h),a[n+1]=a[n+0],a[n+2]=0,a[n+3]=1,n+=4}},smoothWater:function(){for(var t=this.gpuCompute.getCurrentRenderTarget(this.heightmapVariable),e=this.gpuCompute.getAlternateRenderTarget(this.heightmapVariable),r=0;r<10;r++)this.smoothShader.uniforms.smoothTexture.value=t.texture,this.gpuCompute.doRenderTarget(this.smoothShader,e),this.smoothShader.uniforms.smoothTexture.value=e.texture,this.gpuCompute.doRenderTarget(this.smoothShader,t)},createSpheres:function(){for(var t=new this.$THREE.Mesh(new this.$THREE.SphereBufferGeometry(4,24,12),new this.$THREE.MeshPhongMaterial({color:16776960})),e=0;e<this.NUM_SPHERES;e++){var r=t;e<this.NUM_SPHERES-1&&(r=t.clone()),r.position.x=(Math.random()-.5)*this.BOUNDS*.7,r.position.z=(Math.random()-.5)*this.BOUNDS*.7,r.userData.velocity=new this.$THREE.Vector3,this.scene.add(r),this.spheres[e]=r}},sphereDynamics:function(){var t=this.gpuCompute.getCurrentRenderTarget(this.heightmapVariable);this.readWaterLevelShader.uniforms.levelTexture.value=t.texture;for(var e=0;e<this.NUM_SPHERES;e++){var r=this.spheres[e];if(r){var i=.5*r.position.x/this.BOUNDS_HALF+.5,a=1-(.5*r.position.z/this.BOUNDS_HALF+.5);this.readWaterLevelShader.uniforms.point1.value.set(i,a),this.gpuCompute.doRenderTarget(this.readWaterLevelShader,this.readWaterLevelRenderTarget),this.renderer.readRenderTargetPixels(this.readWaterLevelRenderTarget,0,0,4,1,this.readWaterLevelImage);var n=new Float32Array(this.readWaterLevelImage.buffer);this.waterNormal.set(n[1],0,-n[2]);var s=r.position;s.y=n[0],this.waterNormal.multiplyScalar(.1),r.userData.velocity.add(this.waterNormal),r.userData.velocity.multiplyScalar(.998),s.add(r.userData.velocity),s.x<-this.BOUNDS_HALF?(s.x=.001-this.BOUNDS_HALF,r.userData.velocity.x*=-.3):s.x>this.BOUNDS_HALF&&(s.x=this.BOUNDS_HALF-.001,r.userData.velocity.x*=-.3),s.z<-this.BOUNDS_HALF?(s.z=.001-this.BOUNDS_HALF,r.userData.velocity.z*=-.3):s.z>this.BOUNDS_HALF&&(s.z=this.BOUNDS_HALF-.001,r.userData.velocity.z*=-.3)}}},onWindowResize:function(){this.$onWindowResize(this.camera,this.renderer)},setMouseCoords:function(t,e){this.mouseCoords.set(t/this.renderer.domElement.clientWidth*2-1,-e/this.renderer.domElement.clientHeight*2+1),this.mouseMoved=!0},onPointerMove:function(t){!1!==t.isPrimary&&this.setMouseCoords(t.clientX,t.clientY)},animate:function(){requestAnimationFrame(this.animate),this.render(),this.stats.update()},render:function(){var t=this.heightmapVariable.material.uniforms;if(this.mouseMoved){this.raycaster.setFromCamera(this.mouseCoords,this.camera);var e=this.raycaster.intersectObject(this.meshRay);if(e.length>0){var r=e[0].point;t.mousePos.value.set(r.x,r.z)}else t.mousePos.value.set(1e4,1e4);this.mouseMoved=!1}else t.mousePos.value.set(1e4,1e4);this.gpuCompute.compute(),this.spheresEnabled&&this.sphereDynamics(),this.waterUniforms.heightmap.value=this.gpuCompute.getCurrentRenderTarget(this.heightmapVariable).texture,this.renderer.render(this.scene,this.camera)}}},o={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"webglGpgpuWater-container"},[e("div",{attrs:{id:"info"}},[e("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener"}},[this._v("three.js")]),this._v(" - "),e("span",{attrs:{id:"waterSize"}}),this._v(" webgl gpgpu water"),e("br"),this._v("\n\t\t\tMove mouse to disturb water."),e("br"),this._v("\n\t\t\tPress mouse button to orbit around. 'W' key toggles wireframe.\n\t\t")])])}]};var l=r("VU/8")(s,o,!1,function(t){r("fq46")},"data-v-29176310",null);e.default=l.exports},fq46:function(t,e){}});
//# sourceMappingURL=43.1b109dd344911d5d67a4.js.map