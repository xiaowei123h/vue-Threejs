{"version":3,"sources":["webpack:///./src/components/jsm/loaders/VTKLoader.js","webpack:///src/views/loader/webglLoaderVtk.vue","webpack:///./src/views/loader/webglLoaderVtk.vue?28e2","webpack:///./src/views/loader/webglLoaderVtk.vue"],"names":["__webpack_require__","d","__webpack_exports__","VTKLoader","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","__WEBPACK_IMPORTED_MODULE_1__libs_inflate_module_min_js__","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","Int32Concat","first","second","firstLength","length","result","Int32Array","set","meta","LoaderUtils","decodeText","Uint8Array","split","indexOf","stringFile","Base64toByteArray","b64","i","j","l","tmp","placeHolders","arr","Arr","Array","lookup","revLookup","code","len","charCodeAt","Error","L","parseDataArray","ele","compressed","numBytes","json","attributes","header_type","format","byteData","blocks","cSizeStart","headerSize","dataOffsets","currentOffset","type","txt","Float32Array","push","currentBlockSize","content","Inflate","slice","resize","verify","decompress","buffer","filter","el","idx","dom","window","DOMParser","parseFromString","ActiveXObject","async","loadXML","parseError","reason","srcText","xmlToJson","xml","obj","nodeType","attribute","item","nodeName","nodeValue","trim","hasChildNodes","childNodes","old","documentElement","points","normals","indices","PolyData","piece","Piece","hasOwnProperty","sections","sectionIndex","numberOfSections","section","DataArray","toString","dataArrayIndex","numberOfDataArrays","numberOfPoints","parseInt","NumberOfPoints","normalsName","Normals","Name","components","NumberOfComponents","numberOfStrips","NumberOfStrips","connectivity","offset","size","Uint32Array","indicesIndex","strip","s","len1","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","geometry","BufferGeometry","setIndex","BufferAttribute","setAttribute","parseXML","includes","positions","colors","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","lines","line","dataset","exec","x","parseFloat","y","z","numVertices","inds","i0","k","i1","i2","r","g","b","nx","ny","nz","Float32BufferAttribute","numTriangles","toNonIndexed","position","count","newColors","parseASCII","pointIndex","state","dataView","DataView","vtk","index","findString","start","c","String","fromCharCode","end","next","parsedString","join","getFloat32","indexCount","getInt32","byteLength","parseBinary","webglLoaderVtk","container","stats","camera","controls","scene","renderer","mounted","init","animate","methods","_this","$THREE","PerspectiveCamera","$webglInnerWidth","innerHeight","Scene","add","hemiLight","HemisphereLight","dirLight","DirectionalLight","center","computeVertexNormals","material","MeshLambertMaterial","color","mesh","Mesh","scale","multiplyScalar","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","document","createElement","getElementsByClassName","appendChild","domElement","TrackballControls","minDistance","maxDistance","rotateSpeed","$Stats","style","left","addEventListener","onWindowResize","$onWindowResize","handleResize","requestAnimationFrame","update","render","loader_webglLoaderVtk","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","normalizeComponent","ssrContext"],"mappings":"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","file":"static/js/45.7d7445ea55ea0ed4783e.js","sourcesContent":["import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tLoader,\r\n\tLoaderUtils\r\n} from \"@/components/build/three.module.js\";\r\nimport { Inflate } from \"../libs/inflate.module.min.js\";\r\n\r\nvar VTKLoader = function ( manager ) {\r\n\r\n\tLoader.call( this, manager );\r\n\r\n};\r\n\r\nVTKLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\tconstructor: VTKLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( data ) {\r\n\r\n\t\tfunction parseASCII( data ) {\r\n\r\n\t\t\t// connectivity of the triangles\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\t// triangles vertices\r\n\t\t\tvar positions = [];\r\n\r\n\t\t\t// red, green, blue colors in the range 0 to 1\r\n\t\t\tvar colors = [];\r\n\r\n\t\t\t// normal vector, one per vertex\r\n\t\t\tvar normals = [];\r\n\r\n\t\t\tvar result;\r\n\r\n\t\t\t// pattern for detecting the end of a number sequence\r\n\t\t\tvar patWord = /^[^\\d.\\s-]+/;\r\n\r\n\t\t\t// pattern for reading vertices, 3 floats or integers\r\n\t\t\tvar pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\r\n\r\n\t\t\t// pattern for connectivity, an integer followed by any number of ints\r\n\t\t\t// the first integer is the number of polygon nodes\r\n\t\t\tvar patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\r\n\r\n\t\t\t// indicates start of vertex data section\r\n\t\t\tvar patPOINTS = /^POINTS /;\r\n\r\n\t\t\t// indicates start of polygon connectivity section\r\n\t\t\tvar patPOLYGONS = /^POLYGONS /;\r\n\r\n\t\t\t// indicates start of triangle strips section\r\n\t\t\tvar patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\r\n\r\n\t\t\t// POINT_DATA number_of_values\r\n\t\t\tvar patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\r\n\r\n\t\t\t// CELL_DATA number_of_polys\r\n\t\t\tvar patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\r\n\r\n\t\t\t// Start of color section\r\n\t\t\tvar patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\r\n\r\n\t\t\t// NORMALS Normals float\r\n\t\t\tvar patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\r\n\r\n\t\t\tvar inPointsSection = false;\r\n\t\t\tvar inPolygonsSection = false;\r\n\t\t\tvar inTriangleStripSection = false;\r\n\t\t\tvar inPointDataSection = false;\r\n\t\t\tvar inCellDataSection = false;\r\n\t\t\tvar inColorSection = false;\r\n\t\t\tvar inNormalsSection = false;\r\n\r\n\t\t\tvar lines = data.split( '\\n' );\r\n\r\n\t\t\tfor ( var i in lines ) {\r\n\r\n\t\t\t\tvar line = lines[ i ].trim();\r\n\r\n\t\t\t\tif ( line.indexOf( 'DATASET' ) === 0 ) {\r\n\r\n\t\t\t\t\tvar dataset = line.split( ' ' )[ 1 ];\r\n\r\n\t\t\t\t\tif ( dataset !== 'POLYDATA' ) throw new Error( 'Unsupported DATASET type: ' + dataset );\r\n\r\n\t\t\t\t} else if ( inPointsSection ) {\r\n\r\n\t\t\t\t\t// get the vertices\r\n\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\r\n\r\n\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\r\n\r\n\t\t\t\t\t\tvar x = parseFloat( result[ 1 ] );\r\n\t\t\t\t\t\tvar y = parseFloat( result[ 2 ] );\r\n\t\t\t\t\t\tvar z = parseFloat( result[ 3 ] );\r\n\t\t\t\t\t\tpositions.push( x, y, z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( inPolygonsSection ) {\r\n\r\n\t\t\t\t\tif ( ( result = patConnectivity.exec( line ) ) !== null ) {\r\n\r\n\t\t\t\t\t\t// numVertices i0 i1 i2 ...\r\n\t\t\t\t\t\tvar numVertices = parseInt( result[ 1 ] );\r\n\t\t\t\t\t\tvar inds = result[ 2 ].split( /\\s+/ );\r\n\r\n\t\t\t\t\t\tif ( numVertices >= 3 ) {\r\n\r\n\t\t\t\t\t\t\tvar i0 = parseInt( inds[ 0 ] );\r\n\t\t\t\t\t\t\tvar i1, i2;\r\n\t\t\t\t\t\t\tvar k = 1;\r\n\t\t\t\t\t\t\t// split the polygon in numVertices - 2 triangles\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < numVertices - 2; ++ j ) {\r\n\r\n\t\t\t\t\t\t\t\ti1 = parseInt( inds[ k ] );\r\n\t\t\t\t\t\t\t\ti2 = parseInt( inds[ k + 1 ] );\r\n\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\r\n\t\t\t\t\t\t\t\tk ++;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( inTriangleStripSection ) {\r\n\r\n\t\t\t\t\tif ( ( result = patConnectivity.exec( line ) ) !== null ) {\r\n\r\n\t\t\t\t\t\t// numVertices i0 i1 i2 ...\r\n\t\t\t\t\t\tvar numVertices = parseInt( result[ 1 ] );\r\n\t\t\t\t\t\tvar inds = result[ 2 ].split( /\\s+/ );\r\n\r\n\t\t\t\t\t\tif ( numVertices >= 3 ) {\r\n\r\n\t\t\t\t\t\t\tvar i0, i1, i2;\r\n\t\t\t\t\t\t\t// split the polygon in numVertices - 2 triangles\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < numVertices - 2; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( j % 2 === 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\ti0 = parseInt( inds[ j ] );\r\n\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ j + 2 ] );\r\n\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ j + 1 ] );\r\n\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\ti0 = parseInt( inds[ j ] );\r\n\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ j + 1 ] );\r\n\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ j + 2 ] );\r\n\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( inPointDataSection || inCellDataSection ) {\r\n\r\n\t\t\t\t\tif ( inColorSection ) {\r\n\r\n\t\t\t\t\t\t// Get the colors\r\n\r\n\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\r\n\r\n\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\r\n\r\n\t\t\t\t\t\t\tvar r = parseFloat( result[ 1 ] );\r\n\t\t\t\t\t\t\tvar g = parseFloat( result[ 2 ] );\r\n\t\t\t\t\t\t\tvar b = parseFloat( result[ 3 ] );\r\n\t\t\t\t\t\t\tcolors.push( r, g, b );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( inNormalsSection ) {\r\n\r\n\t\t\t\t\t\t// Get the normal vectors\r\n\r\n\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\r\n\r\n\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\r\n\r\n\t\t\t\t\t\t\tvar nx = parseFloat( result[ 1 ] );\r\n\t\t\t\t\t\t\tvar ny = parseFloat( result[ 2 ] );\r\n\t\t\t\t\t\t\tvar nz = parseFloat( result[ 3 ] );\r\n\t\t\t\t\t\t\tnormals.push( nx, ny, nz );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( patPOLYGONS.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinPolygonsSection = true;\r\n\t\t\t\t\tinPointsSection = false;\r\n\t\t\t\t\tinTriangleStripSection = false;\r\n\r\n\t\t\t\t} else if ( patPOINTS.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinPolygonsSection = false;\r\n\t\t\t\t\tinPointsSection = true;\r\n\t\t\t\t\tinTriangleStripSection = false;\r\n\r\n\t\t\t\t} else if ( patTRIANGLE_STRIPS.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinPolygonsSection = false;\r\n\t\t\t\t\tinPointsSection = false;\r\n\t\t\t\t\tinTriangleStripSection = true;\r\n\r\n\t\t\t\t} else if ( patPOINT_DATA.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinPointDataSection = true;\r\n\t\t\t\t\tinPointsSection = false;\r\n\t\t\t\t\tinPolygonsSection = false;\r\n\t\t\t\t\tinTriangleStripSection = false;\r\n\r\n\t\t\t\t} else if ( patCELL_DATA.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinCellDataSection = true;\r\n\t\t\t\t\tinPointsSection = false;\r\n\t\t\t\t\tinPolygonsSection = false;\r\n\t\t\t\t\tinTriangleStripSection = false;\r\n\r\n\t\t\t\t} else if ( patCOLOR_SCALARS.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinColorSection = true;\r\n\t\t\t\t\tinNormalsSection = false;\r\n\t\t\t\t\tinPointsSection = false;\r\n\t\t\t\t\tinPolygonsSection = false;\r\n\t\t\t\t\tinTriangleStripSection = false;\r\n\r\n\t\t\t\t} else if ( patNORMALS.exec( line ) !== null ) {\r\n\r\n\t\t\t\t\tinNormalsSection = true;\r\n\t\t\t\t\tinColorSection = false;\r\n\t\t\t\t\tinPointsSection = false;\r\n\t\t\t\t\tinPolygonsSection = false;\r\n\t\t\t\t\tinTriangleStripSection = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = new BufferGeometry();\r\n\t\t\tgeometry.setIndex( indices );\r\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\t\tif ( normals.length === positions.length ) {\r\n\r\n\t\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( colors.length !== indices.length ) {\r\n\r\n\t\t\t\t// stagger\r\n\r\n\t\t\t\tif ( colors.length === positions.length ) {\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// cell\r\n\r\n\t\t\t\tgeometry = geometry.toNonIndexed();\r\n\t\t\t\tvar numTriangles = geometry.attributes.position.count / 3;\r\n\r\n\t\t\t\tif ( colors.length === ( numTriangles * 3 ) ) {\r\n\r\n\t\t\t\t\tvar newColors = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < numTriangles; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar r = colors[ 3 * i + 0 ];\r\n\t\t\t\t\t\tvar g = colors[ 3 * i + 1 ];\r\n\t\t\t\t\t\tvar b = colors[ 3 * i + 2 ];\r\n\r\n\t\t\t\t\t\tnewColors.push( r, g, b );\r\n\t\t\t\t\t\tnewColors.push( r, g, b );\r\n\t\t\t\t\t\tnewColors.push( r, g, b );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( newColors, 3 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBinary( data ) {\r\n\r\n\t\t\tvar count, pointIndex, i, numberOfPoints, s;\r\n\t\t\tvar buffer = new Uint8Array( data );\r\n\t\t\tvar dataView = new DataView( data );\r\n\r\n\t\t\t// Points and normals, by default, are empty\r\n\t\t\tvar points = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\t// Going to make a big array of strings\r\n\t\t\tvar vtk = [];\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tfunction findString( buffer, start ) {\r\n\r\n\t\t\t\tvar index = start;\r\n\t\t\t\tvar c = buffer[ index ];\r\n\t\t\t\tvar s = [];\r\n\t\t\t\twhile ( c !== 10 ) {\r\n\r\n\t\t\t\t\ts.push( String.fromCharCode( c ) );\r\n\t\t\t\t\tindex ++;\r\n\t\t\t\t\tc = buffer[ index ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn { start: start,\r\n\t\t\t\t\tend: index,\r\n\t\t\t\t\tnext: index + 1,\r\n\t\t\t\t\tparsedString: s.join( '' ) };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar state, line;\r\n\r\n\t\t\twhile ( true ) {\r\n\r\n\t\t\t\t// Get a string\r\n\t\t\t\tstate = findString( buffer, index );\r\n\t\t\t\tline = state.parsedString;\r\n\r\n\t\t\t\tif ( line.indexOf( 'DATASET' ) === 0 ) {\r\n\r\n\t\t\t\t\tvar dataset = line.split( ' ' )[ 1 ];\r\n\r\n\t\t\t\t\tif ( dataset !== 'POLYDATA' ) throw new Error( 'Unsupported DATASET type: ' + dataset );\r\n\r\n\t\t\t\t} else if ( line.indexOf( 'POINTS' ) === 0 ) {\r\n\r\n\t\t\t\t\tvtk.push( line );\r\n\t\t\t\t\t// Add the points\r\n\t\t\t\t\tnumberOfPoints = parseInt( line.split( ' ' )[ 1 ], 10 );\r\n\r\n\t\t\t\t\t// Each point is 3 4-byte floats\r\n\t\t\t\t\tcount = numberOfPoints * 4 * 3;\r\n\r\n\t\t\t\t\tpoints = new Float32Array( numberOfPoints * 3 );\r\n\r\n\t\t\t\t\tpointIndex = state.next;\r\n\t\t\t\t\tfor ( i = 0; i < numberOfPoints; i ++ ) {\r\n\r\n\t\t\t\t\t\tpoints[ 3 * i ] = dataView.getFloat32( pointIndex, false );\r\n\t\t\t\t\t\tpoints[ 3 * i + 1 ] = dataView.getFloat32( pointIndex + 4, false );\r\n\t\t\t\t\t\tpoints[ 3 * i + 2 ] = dataView.getFloat32( pointIndex + 8, false );\r\n\t\t\t\t\t\tpointIndex = pointIndex + 12;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// increment our next pointer\r\n\t\t\t\t\tstate.next = state.next + count + 1;\r\n\r\n\t\t\t\t} else if ( line.indexOf( 'TRIANGLE_STRIPS' ) === 0 ) {\r\n\r\n\t\t\t\t\tvar numberOfStrips = parseInt( line.split( ' ' )[ 1 ], 10 );\r\n\t\t\t\t\tvar size = parseInt( line.split( ' ' )[ 2 ], 10 );\r\n\t\t\t\t\t// 4 byte integers\r\n\t\t\t\t\tcount = size * 4;\r\n\r\n\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\r\n\t\t\t\t\tvar indicesIndex = 0;\r\n\r\n\t\t\t\t\tpointIndex = state.next;\r\n\t\t\t\t\tfor ( i = 0; i < numberOfStrips; i ++ ) {\r\n\r\n\t\t\t\t\t\t// For each strip, read the first value, then record that many more points\r\n\t\t\t\t\t\tvar indexCount = dataView.getInt32( pointIndex, false );\r\n\t\t\t\t\t\tvar strip = [];\r\n\t\t\t\t\t\tpointIndex += 4;\r\n\t\t\t\t\t\tfor ( s = 0; s < indexCount; s ++ ) {\r\n\r\n\t\t\t\t\t\t\tstrip.push( dataView.getInt32( pointIndex, false ) );\r\n\t\t\t\t\t\t\tpointIndex += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// retrieves the n-2 triangles from the triangle strip\r\n\t\t\t\t\t\tfor ( var j = 0; j < indexCount - 2; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( j % 2 ) {\r\n\r\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\r\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\r\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\r\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\r\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\r\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// increment our next pointer\r\n\t\t\t\t\tstate.next = state.next + count + 1;\r\n\r\n\t\t\t\t} else if ( line.indexOf( 'POLYGONS' ) === 0 ) {\r\n\r\n\t\t\t\t\tvar numberOfStrips = parseInt( line.split( ' ' )[ 1 ], 10 );\r\n\t\t\t\t\tvar size = parseInt( line.split( ' ' )[ 2 ], 10 );\r\n\t\t\t\t\t// 4 byte integers\r\n\t\t\t\t\tcount = size * 4;\r\n\r\n\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\r\n\t\t\t\t\tvar indicesIndex = 0;\r\n\r\n\t\t\t\t\tpointIndex = state.next;\r\n\t\t\t\t\tfor ( i = 0; i < numberOfStrips; i ++ ) {\r\n\r\n\t\t\t\t\t\t// For each strip, read the first value, then record that many more points\r\n\t\t\t\t\t\tvar indexCount = dataView.getInt32( pointIndex, false );\r\n\t\t\t\t\t\tvar strip = [];\r\n\t\t\t\t\t\tpointIndex += 4;\r\n\t\t\t\t\t\tfor ( s = 0; s < indexCount; s ++ ) {\r\n\r\n\t\t\t\t\t\t\tstrip.push( dataView.getInt32( pointIndex, false ) );\r\n\t\t\t\t\t\t\tpointIndex += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// divide the polygon in n-2 triangle\r\n\t\t\t\t\t\tfor ( var j = 1; j < indexCount - 1; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ 0 ];\r\n\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\r\n\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// increment our next pointer\r\n\t\t\t\t\tstate.next = state.next + count + 1;\r\n\r\n\t\t\t\t} else if ( line.indexOf( 'POINT_DATA' ) === 0 ) {\r\n\r\n\t\t\t\t\tnumberOfPoints = parseInt( line.split( ' ' )[ 1 ], 10 );\r\n\r\n\t\t\t\t\t// Grab the next line\r\n\t\t\t\t\tstate = findString( buffer, state.next );\r\n\r\n\t\t\t\t\t// Now grab the binary data\r\n\t\t\t\t\tcount = numberOfPoints * 4 * 3;\r\n\r\n\t\t\t\t\tnormals = new Float32Array( numberOfPoints * 3 );\r\n\t\t\t\t\tpointIndex = state.next;\r\n\t\t\t\t\tfor ( i = 0; i < numberOfPoints; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormals[ 3 * i ] = dataView.getFloat32( pointIndex, false );\r\n\t\t\t\t\t\tnormals[ 3 * i + 1 ] = dataView.getFloat32( pointIndex + 4, false );\r\n\t\t\t\t\t\tnormals[ 3 * i + 2 ] = dataView.getFloat32( pointIndex + 8, false );\r\n\t\t\t\t\t\tpointIndex += 12;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Increment past our data\r\n\t\t\t\t\tstate.next = state.next + count;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Increment index\r\n\t\t\t\tindex = state.next;\r\n\r\n\t\t\t\tif ( index >= buffer.byteLength ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = new BufferGeometry();\r\n\t\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( points, 3 ) );\r\n\r\n\t\t\tif ( normals.length === points.length ) {\r\n\r\n\t\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Float32Concat( first, second ) {\r\n\r\n\t\t    var firstLength = first.length, result = new Float32Array( firstLength + second.length );\r\n\r\n\t\t    result.set( first );\r\n\t\t    result.set( second, firstLength );\r\n\r\n\t\t    return result;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Int32Concat( first, second ) {\r\n\r\n\t\t    var firstLength = first.length, result = new Int32Array( firstLength + second.length );\r\n\r\n\t\t    result.set( first );\r\n\t\t    result.set( second, firstLength );\r\n\r\n\t\t    return result;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseXML( stringFile ) {\r\n\r\n\t\t\t// Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\r\n\r\n\t\t\tfunction xmlToJson( xml ) {\r\n\r\n\t\t\t\t// Create the return object\r\n\t\t\t\tvar obj = {};\r\n\r\n\t\t\t\tif ( xml.nodeType === 1 ) { // element\r\n\r\n\t\t\t\t\t// do attributes\r\n\r\n\t\t\t\t\tif ( xml.attributes ) {\r\n\r\n\t\t\t\t\t\tif ( xml.attributes.length > 0 ) {\r\n\r\n\t\t\t\t\t\t\tobj[ 'attributes' ] = {};\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < xml.attributes.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar attribute = xml.attributes.item( j );\r\n\t\t\t\t\t\t\t\tobj[ 'attributes' ][ attribute.nodeName ] = attribute.nodeValue.trim();\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( xml.nodeType === 3 ) { // text\r\n\r\n\t\t\t\t\tobj = xml.nodeValue.trim();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do children\r\n\t\t\t\tif ( xml.hasChildNodes() ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar item = xml.childNodes.item( i );\r\n\t\t\t\t\t\tvar nodeName = item.nodeName;\r\n\r\n\t\t\t\t\t\tif ( typeof obj[ nodeName ] === 'undefined' ) {\r\n\r\n\t\t\t\t\t\t\tvar tmp = xmlToJson( item );\r\n\r\n\t\t\t\t\t\t\tif ( tmp !== '' ) obj[ nodeName ] = tmp;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( typeof obj[ nodeName ].push === 'undefined' ) {\r\n\r\n\t\t\t\t\t\t\t\tvar old = obj[ nodeName ];\r\n\t\t\t\t\t\t\t\tobj[ nodeName ] = [ old ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar tmp = xmlToJson( item );\r\n\r\n\t\t\t\t\t\t\tif ( tmp !== '' ) obj[ nodeName ].push( tmp );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn obj;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Taken from Base64-js\r\n\t\t\tfunction Base64toByteArray( b64 ) {\r\n\r\n\t\t\t\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\t\t\t\tvar i;\r\n\t\t\t\tvar lookup = [];\r\n\t\t\t\tvar revLookup = [];\r\n\t\t\t\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\t\t\t\tvar len = code.length;\r\n\r\n\t\t\t\tfor ( i = 0; i < len; i ++ ) {\r\n\r\n\t\t\t\t\tlookup[ i ] = code[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0; i < len; ++ i ) {\r\n\r\n\t\t\t\t\trevLookup[ code.charCodeAt( i ) ] = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trevLookup[ '-'.charCodeAt( 0 ) ] = 62;\r\n\t\t\t\trevLookup[ '_'.charCodeAt( 0 ) ] = 63;\r\n\r\n\t\t\t\tvar j, l, tmp, placeHolders, arr;\r\n\t\t\t\tvar len = b64.length;\r\n\r\n\t\t\t\tif ( len % 4 > 0 ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Invalid string. Length must be a multiple of 4' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaceHolders = b64[ len - 2 ] === '=' ? 2 : b64[ len - 1 ] === '=' ? 1 : 0;\r\n\t\t\t\tarr = new Arr( len * 3 / 4 - placeHolders );\r\n\t\t\t\tl = placeHolders > 0 ? len - 4 : len;\r\n\r\n\t\t\t\tvar L = 0;\r\n\r\n\t\t\t\tfor ( i = 0, j = 0; i < l; i += 4, j += 3 ) {\r\n\r\n\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 18 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] << 12 ) | ( revLookup[ b64.charCodeAt( i + 2 ) ] << 6 ) | revLookup[ b64.charCodeAt( i + 3 ) ];\r\n\t\t\t\t\tarr[ L ++ ] = ( tmp & 0xFF0000 ) >> 16;\r\n\t\t\t\t\tarr[ L ++ ] = ( tmp & 0xFF00 ) >> 8;\r\n\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( placeHolders === 2 ) {\r\n\r\n\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 2 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] >> 4 );\r\n\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\r\n\r\n\t\t\t\t} else if ( placeHolders === 1 ) {\r\n\r\n\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 10 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] << 4 ) | ( revLookup[ b64.charCodeAt( i + 2 ) ] >> 2 );\r\n\t\t\t\t\tarr[ L ++ ] = ( tmp >> 8 ) & 0xFF;\r\n\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn arr;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction parseDataArray( ele, compressed ) {\r\n\r\n\t\t\t\tvar numBytes = 0;\r\n\r\n\t\t\t\tif ( json.attributes.header_type === 'UInt64' ) {\r\n\r\n\t\t\t\t\tnumBytes = 8;\r\n\r\n\t\t\t\t}\telse if ( json.attributes.header_type === 'UInt32' ) {\r\n\r\n\t\t\t\t\tnumBytes = 4;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Check the format\r\n\t\t\t\tif ( ele.attributes.format === 'binary' && compressed ) {\r\n\r\n\t\t\t\t\tvar rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\r\n\r\n\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\r\n\r\n\t\t\t\t\t\tvar txt = new Float32Array( );\r\n\r\n\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\r\n\r\n\t\t\t\t\t\tvar txt = new Int32Array( );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// VTP data with the header has the following structure:\r\n\t\t\t\t\t// [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\r\n\t\t\t\t\t// [#blocks] = Number of blocks\r\n\t\t\t\t\t// [#u-size] = Block size before compression\r\n\t\t\t\t\t// [#p-size] = Size of last partial block (zero if it not needed)\r\n\t\t\t\t\t// [#c-size-i] = Size in bytes of block i after compression\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\r\n\t\t\t\t\t// computed by summing the compressed block sizes from preceding blocks according to the header.\r\n\r\n\t\t\t\t\trawData = ele[ '#text' ];\r\n\r\n\t\t\t\t\tbyteData = Base64toByteArray( rawData );\r\n\r\n\t\t\t\t\tblocks = byteData[ 0 ];\r\n\t\t\t\t\tfor ( var i = 1; i < numBytes - 1; i ++ ) {\r\n\r\n\t\t\t\t\t\tblocks = blocks | ( byteData[ i ] << ( i * numBytes ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\theaderSize = ( blocks + 3 ) * numBytes;\r\n\t\t\t\t\tpadding = ( ( headerSize % 3 ) > 0 ) ? 3 - ( headerSize % 3 ) : 0;\r\n\t\t\t\t\theaderSize = headerSize + padding;\r\n\r\n\t\t\t\t\tdataOffsets = [];\r\n\t\t\t\t\tcurrentOffset = headerSize;\r\n\t\t\t\t\tdataOffsets.push( currentOffset );\r\n\r\n\t\t\t\t\t// Get the blocks sizes after the compression.\r\n\t\t\t\t\t// There are three blocks before c-size-i, so we skip 3*numBytes\r\n\t\t\t\t\tcSizeStart = 3 * numBytes;\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < blocks; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar currentBlockSize = byteData[ i * numBytes + cSizeStart ];\r\n\r\n\t\t\t\t\t\tfor ( var j = 1; j < numBytes - 1; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t// Each data point consists of 8 bytes regardless of the header type\r\n\t\t\t\t\t\t\tcurrentBlockSize = currentBlockSize | ( byteData[ i * numBytes + cSizeStart + j ] << ( j * 8 ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOffset = currentOffset + currentBlockSize;\r\n\t\t\t\t\t\tdataOffsets.push( currentOffset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < dataOffsets.length - 1; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar inflate = new Inflate( byteData.slice( dataOffsets[ i ], dataOffsets[ i + 1 ] ), { resize: true, verify: true } ); // eslint-disable-line no-undef\r\n\t\t\t\t\t\tcontent = inflate.decompress();\r\n\t\t\t\t\t\tcontent = content.buffer;\r\n\r\n\t\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\r\n\r\n\t\t\t\t\t\t\tcontent = new Float32Array( content );\r\n\t\t\t\t\t\t\ttxt = Float32Concat( txt, content );\r\n\r\n\t\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\r\n\r\n\t\t\t\t\t\t\tcontent = new Int32Array( content );\r\n\t\t\t\t\t\t\ttxt = Int32Concat( txt, content );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdelete ele[ '#text' ];\r\n\r\n\t\t\t\t\tif ( ele.attributes.type === 'Int64' ) {\r\n\r\n\t\t\t\t\t\tif ( ele.attributes.format === 'binary' ) {\r\n\r\n\t\t\t\t\t\t\ttxt = txt.filter( function ( el, idx ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( idx % 2 !== 1 ) return true;\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( ele.attributes.format === 'binary' && ! compressed ) {\r\n\r\n\t\t\t\t\t\tvar content = Base64toByteArray( ele[ '#text' ] );\r\n\r\n\t\t\t\t\t\t//  VTP data for the uncompressed case has the following structure:\r\n\t\t\t\t\t\t// [#bytes][DATA]\r\n\t\t\t\t\t\t// where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\r\n\t\t\t\t\t\tcontent = content.slice( numBytes ).buffer;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( ele[ '#text' ] ) {\r\n\r\n\t\t\t\t\t\t\tvar content = ele[ '#text' ].split( /\\s+/ ).filter( function ( el ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( el !== '' ) return el;\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar content = new Int32Array( 0 ).buffer;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdelete ele[ '#text' ];\r\n\r\n\t\t\t\t\t// Get the content and optimize it\r\n\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\r\n\r\n\t\t\t\t\t\tvar txt = new Float32Array( content );\r\n\r\n\t\t\t\t\t} else if ( ele.attributes.type === 'Int32' ) {\r\n\r\n\t\t\t\t\t\tvar txt = new Int32Array( content );\r\n\r\n\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\r\n\r\n\t\t\t\t\t\tvar txt = new Int32Array( content );\r\n\r\n\t\t\t\t\t\tif ( ele.attributes.format === 'binary' ) {\r\n\r\n\t\t\t\t\t\t\ttxt = txt.filter( function ( el, idx ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( idx % 2 !== 1 ) return true;\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // endif ( ele.attributes.format === 'binary' && compressed )\r\n\r\n\t\t\t\treturn txt;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Main part\r\n\t\t\t// Get Dom\r\n\t\t\tvar dom = null;\r\n\r\n\t\t\tif ( window.DOMParser ) {\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tdom = ( new DOMParser() ).parseFromString( stringFile, 'text/xml' );\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tdom = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( window.ActiveXObject ) {\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tdom = new ActiveXObject( 'Microsoft.XMLDOM' ); // eslint-disable-line no-undef\r\n\t\t\t\t\tdom.async = false;\r\n\r\n\t\t\t\t\tif ( ! dom.loadXML( /* xml */ ) ) {\r\n\r\n\t\t\t\t\t\tthrow new Error( dom.parseError.reason + dom.parseError.srcText );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tdom = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'Cannot parse xml string!' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Get the doc\r\n\t\t\tvar doc = dom.documentElement;\r\n\t\t\t// Convert to json\r\n\t\t\tvar json = xmlToJson( doc );\r\n\t\t\tvar points = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\tif ( json.PolyData ) {\r\n\r\n\t\t\t\tvar piece = json.PolyData.Piece;\r\n\t\t\t\tvar compressed = json.attributes.hasOwnProperty( 'compressor' );\r\n\r\n\t\t\t\t// Can be optimized\r\n\t\t\t\t// Loop through the sections\r\n\t\t\t\tvar sections = [ 'PointData', 'Points', 'Strips', 'Polys' ];// +['CellData', 'Verts', 'Lines'];\r\n\t\t\t\tvar sectionIndex = 0, numberOfSections = sections.length;\r\n\r\n\t\t\t\twhile ( sectionIndex < numberOfSections ) {\r\n\r\n\t\t\t\t\tvar section = piece[ sections[ sectionIndex ] ];\r\n\r\n\t\t\t\t\t// If it has a DataArray in it\r\n\r\n\t\t\t\t\tif ( section && section.DataArray ) {\r\n\r\n\t\t\t\t\t\t// Depending on the number of DataArrays\r\n\r\n\t\t\t\t\t\tif ( Object.prototype.toString.call( section.DataArray ) === '[object Array]' ) {\r\n\r\n\t\t\t\t\t\t\tvar arr = section.DataArray;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar arr = [ section.DataArray ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar dataArrayIndex = 0, numberOfDataArrays = arr.length;\r\n\r\n\t\t\t\t\t\twhile ( dataArrayIndex < numberOfDataArrays ) {\r\n\r\n\t\t\t\t\t\t\t// Parse the DataArray\r\n\t\t\t\t\t\t\tif ( ( '#text' in arr[ dataArrayIndex ] ) && ( arr[ dataArrayIndex ][ '#text' ].length > 0 ) ) {\r\n\r\n\t\t\t\t\t\t\t\tarr[ dataArrayIndex ].text = parseDataArray( arr[ dataArrayIndex ], compressed );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tdataArrayIndex ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tswitch ( sections[ sectionIndex ] ) {\r\n\r\n\t\t\t\t\t\t\t// if iti is point data\r\n\t\t\t\t\t\t\tcase 'PointData':\r\n\r\n\t\t\t\t\t\t\t\tvar numberOfPoints = parseInt( piece.attributes.NumberOfPoints );\r\n\t\t\t\t\t\t\t\tvar normalsName = section.attributes.Normals;\r\n\r\n\t\t\t\t\t\t\t\tif ( numberOfPoints > 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tfor ( var i = 0, len = arr.length; i < len; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ( normalsName === arr[ i ].attributes.Name ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvar components = arr[ i ].attributes.NumberOfComponents;\r\n\t\t\t\t\t\t\t\t\t\t\tnormals = new Float32Array( numberOfPoints * components );\r\n\t\t\t\t\t\t\t\t\t\t\tnormals.set( arr[ i ].text, 0 );\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t// if it is points\r\n\t\t\t\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\t\t\t\tvar numberOfPoints = parseInt( piece.attributes.NumberOfPoints );\r\n\r\n\t\t\t\t\t\t\t\tif ( numberOfPoints > 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar components = section.DataArray.attributes.NumberOfComponents;\r\n\t\t\t\t\t\t\t\t\tpoints = new Float32Array( numberOfPoints * components );\r\n\t\t\t\t\t\t\t\t\tpoints.set( section.DataArray.text, 0 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t// if it is strips\r\n\t\t\t\t\t\t\tcase 'Strips':\r\n\r\n\t\t\t\t\t\t\t\tvar numberOfStrips = parseInt( piece.attributes.NumberOfStrips );\r\n\r\n\t\t\t\t\t\t\t\tif ( numberOfStrips > 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar connectivity = new Int32Array( section.DataArray[ 0 ].text.length );\r\n\t\t\t\t\t\t\t\t\tvar offset = new Int32Array( section.DataArray[ 1 ].text.length );\r\n\t\t\t\t\t\t\t\t\tconnectivity.set( section.DataArray[ 0 ].text, 0 );\r\n\t\t\t\t\t\t\t\t\toffset.set( section.DataArray[ 1 ].text, 0 );\r\n\r\n\t\t\t\t\t\t\t\t\tvar size = numberOfStrips + connectivity.length;\r\n\t\t\t\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\r\n\r\n\t\t\t\t\t\t\t\t\tvar indicesIndex = 0;\r\n\r\n\t\t\t\t\t\t\t\t\tfor ( var i = 0, len = numberOfStrips; i < len; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tvar strip = [];\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor ( var s = 0, len1 = offset[ i ], len0 = 0; s < len1 - len0; s ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tstrip.push( connectivity[ s ] );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( i > 0 ) len0 = offset[ i - 1 ];\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor ( var j = 0, len1 = offset[ i ], len0 = 0; j < len1 - len0 - 2; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( j % 2 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\r\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\r\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\r\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\r\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( i > 0 ) len0 = offset[ i - 1 ];\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t// if it is polys\r\n\t\t\t\t\t\t\tcase 'Polys':\r\n\r\n\t\t\t\t\t\t\t\tvar numberOfPolys = parseInt( piece.attributes.NumberOfPolys );\r\n\r\n\t\t\t\t\t\t\t\tif ( numberOfPolys > 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar connectivity = new Int32Array( section.DataArray[ 0 ].text.length );\r\n\t\t\t\t\t\t\t\t\tvar offset = new Int32Array( section.DataArray[ 1 ].text.length );\r\n\t\t\t\t\t\t\t\t\tconnectivity.set( section.DataArray[ 0 ].text, 0 );\r\n\t\t\t\t\t\t\t\t\toffset.set( section.DataArray[ 1 ].text, 0 );\r\n\r\n\t\t\t\t\t\t\t\t\tvar size = numberOfPolys + connectivity.length;\r\n\t\t\t\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfPolys );\r\n\t\t\t\t\t\t\t\t\tvar indicesIndex = 0, connectivityIndex = 0;\r\n\t\t\t\t\t\t\t\t\tvar i = 0, len = numberOfPolys, len0 = 0;\r\n\r\n\t\t\t\t\t\t\t\t\twhile ( i < len ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tvar poly = [];\r\n\t\t\t\t\t\t\t\t\t\tvar s = 0, len1 = offset[ i ];\r\n\r\n\t\t\t\t\t\t\t\t\t\twhile ( s < len1 - len0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tpoly.push( connectivity[ connectivityIndex ++ ] );\r\n\t\t\t\t\t\t\t\t\t\t\ts ++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tvar j = 1;\r\n\r\n\t\t\t\t\t\t\t\t\t\twhile ( j < len1 - len0 - 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ 0 ];\r\n\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ j ];\r\n\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ j + 1 ];\r\n\t\t\t\t\t\t\t\t\t\t\tj ++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\ti ++;\r\n\t\t\t\t\t\t\t\t\t\tlen0 = offset[ i - 1 ];\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsectionIndex ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar geometry = new BufferGeometry();\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( points, 3 ) );\r\n\r\n\t\t\t\tif ( normals.length === points.length ) {\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometry;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'Unsupported DATASET type' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// get the 5 first lines of the files to check if there is the key word binary\r\n\t\tvar meta = LoaderUtils.decodeText( new Uint8Array( data, 0, 250 ) ).split( '\\n' );\r\n\r\n\t\tif ( meta[ 0 ].indexOf( 'xml' ) !== - 1 ) {\r\n\r\n\t\t\treturn parseXML( LoaderUtils.decodeText( data ) );\r\n\r\n\t\t} else if ( meta[ 2 ].includes( 'ASCII' ) ) {\r\n\r\n\t\t\treturn parseASCII( LoaderUtils.decodeText( data ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn parseBinary( data );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { VTKLoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/VTKLoader.js","<template>\r\n    <div class=\"webglLoaderVtk-container\">\r\n        <div id=\"info\">\r\n            <a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> -\r\n            vtk formats loader test<br />\r\n            Legacy vtk model from <a href=\"http://www.cc.gatech.edu/projects/large_models/\" target=\"_blank\" rel=\"noopener\">The GeorgiaTech Lagre Geometric Model Archive</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { TrackballControls } from '@/components/jsm/controls/TrackballControls.js';\r\nimport { VTKLoader } from '@/components/jsm/loaders/VTKLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            controls: null,\r\n            scene: null,\r\n            renderer: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.01, 1e10)\r\n            this.camera.position.z = 0.2\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.add(this.camera)\r\n            // light\r\n            var hemiLight = new this.$THREE.HemisphereLight(0xffffff, 0x000000, 1)\r\n            this.scene.add(hemiLight)\r\n            var dirLight = new this.$THREE.DirectionalLight(0xffffff, 0.5)\r\n            dirLight.position.set(2, 2, 2)\r\n            this.scene.add(dirLight)\r\n            var loader = new VTKLoader()\r\n            loader.load(\"static/models/vtk/bunny.vtk\", (geometry) => {\r\n                geometry.center()\r\n                geometry.computeVertexNormals()\r\n                var material = new this.$THREE.MeshLambertMaterial({ color: 0xffffff })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(- 0.075, 0.005, 0)\r\n                mesh.scale.multiplyScalar(0.2)\r\n                this.scene.add(mesh)\r\n            })\r\n            var loader1 = new VTKLoader()\r\n            loader1.load('static/models/vtk/cube_ascii.vtp', (geometry) => {\r\n                geometry.computeVertexNormals()\r\n                geometry.center()\r\n                var material = new this.$THREE.MeshLambertMaterial({ color: 0x00ff00 })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(- 0.025, 0, 0)\r\n                mesh.scale.multiplyScalar(0.01)\r\n                this.scene.add(mesh)\r\n            })\r\n            var loader2 = new VTKLoader()\r\n            loader2.load('static/models/vtk/cube_binary.vtp', (geometry) => {\r\n                geometry.computeVertexNormals()\r\n                geometry.center()\r\n                var material = new this.$THREE.MeshLambertMaterial({ color: 0x0000ff })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(0.025, 0, 0)\r\n                mesh.scale.multiplyScalar(0.01)\r\n                this.scene.add(mesh)\r\n            })\r\n            var loader3 = new VTKLoader()\r\n            loader3.load('static/models/vtk/cube_no_compression.vtp', (geometry) => {\r\n                geometry.computeVertexNormals()\r\n                geometry.center()\r\n                var material = new this.$THREE.MeshLambertMaterial({ color: 0xff0000 })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(0.075, 0, 0)\r\n                mesh.scale.multiplyScalar(0.01)\r\n                this.scene.add(mesh)\r\n            })\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglLoaderVtk-container')[0].appendChild(this.container)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            // controls\r\n            this.controls = new TrackballControls(this.camera, this.renderer.domElement)\r\n            this.controls.minDistance = .1\r\n            this.controls.maxDistance = 0.5\r\n            this.controls.rotateSpeed = 5.0\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.controls.handleResize()\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.controls.update()\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.stats.update()\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderVtk-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderVtk.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderVtk-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" -\\n            vtk formats loader test\"),_c('br'),_vm._v(\"\\n            Legacy vtk model from \"),_c('a',{attrs:{\"href\":\"http://www.cc.gatech.edu/projects/large_models/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"The GeorgiaTech Lagre Geometric Model Archive\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1ebcf7db\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderVtk.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ebcf7db\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderVtk.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderVtk.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderVtk.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1ebcf7db\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderVtk.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ebcf7db\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderVtk.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}