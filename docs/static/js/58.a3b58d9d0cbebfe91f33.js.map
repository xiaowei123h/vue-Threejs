{"version":3,"sources":["webpack:///./src/components/jsm/math/MeshSurfaceSampler.js","webpack:///src/views/instancing/webglInstancingScatter.vue","webpack:///./src/views/instancing/webglInstancingScatter.vue?b7a9","webpack:///./src/views/instancing/webglInstancingScatter.vue"],"names":["MeshSurfaceSampler","_face","Triangle","mesh","geometry","isBufferGeometry","attributes","position","itemSize","Error","index","console","warn","toNonIndexed","this","randomFunction","Math","random","positionAttribute","getAttribute","weightAttribute","distribution","prototype","constructor","setWeightAttribute","name","build","faceWeights","Float32Array","count","i","faceWeight","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","length","setRandomGenerator","sample","targetPosition","targetNormal","faceIndex","binarySearch","sampleFace","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","getNormal","webglInstancingScatter","data","camera","scene","renderer","stats","api","stemMesh","blossomMesh","stemGeometry","blossomGeometry","stemMaterial","blossomMaterial","sampler","ages","scales","dummy","_position","_normal","_scale","surfaceGeometry","surfaceMaterial","surface","loader","gui","mounted","_this","resample","surfaceColor","backgroundColor","$THREE","Object3D","Vector3","TorusKnotBufferGeometry","MeshLambertMaterial","color","wireframe","Mesh","GLTFLoader","load","gltf","_stemMesh","getObjectByName","_blossomMesh","InstancedBufferGeometry","BufferGeometry","copy","call","defaultTransform","Matrix4","makeRotationX","PI","multiply","makeScale","applyMatrix4","material","_color","Color","blossomPavarte","setHex","floor","toArray","setAttribute","InstancedBufferAttribute","vertexColors","InstancedMesh","instanceMatrix","setUsage","DynamicDrawUsage","init","animate","beforeDestroy","hide","methods","easeOutCubic","t","scaleCurve","abs","_this2","PerspectiveCamera","$webglInnerWidth","window","innerHeight","lookAt","Scene","background","pointLight","PointLight","add","HemisphereLight","dat_gui_module","onChange","options","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","document","getElementsByClassName","appendChild","domElement","$Stats","dom","style","left","addEventListener","onWindowResize","vertexCount","info","time","MeshSurfaceSampler_MeshSurfaceSampler","timeEnd","resampleParticle","needsUpdate","scale","updateMatrix","setMatrixAt","matrix","updateParticle","prevScale","getMatrixAt","$onWindowResize","requestAnimationFrame","render","update","Date","now","rotation","sin","y","instancing_webglInstancingScatter","_h","$createElement","_self","_c","staticClass","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/58.a3b58d9d0cbebfe91f33.js","sourcesContent":["import {\r\n\tTriangle\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * Utility class for sampling weighted random points on the surface of a mesh.\r\n *\r\n * Building the sampler is a one-time O(n) operation. Once built, any number of\r\n * random samples may be selected in O(logn) time. Memory usage is O(n).\r\n *\r\n * References:\r\n * - http://www.joesfer.com/?p=84\r\n * - https://stackoverflow.com/a/4322940/1314762\r\n */\r\nvar MeshSurfaceSampler = ( function () {\r\n\r\n\tvar _face = new Triangle();\r\n\r\n\tfunction MeshSurfaceSampler( mesh ) {\r\n\r\n\t\tvar geometry = mesh.geometry;\r\n\r\n\t\tif ( ! geometry.isBufferGeometry || geometry.attributes.position.itemSize !== 3 ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.index ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.' );\r\n\r\n\t\t\tgeometry = geometry.toNonIndexed();\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.randomFunction = Math.random;\r\n\r\n\t\tthis.positionAttribute = this.geometry.getAttribute( 'position' );\r\n\t\tthis.weightAttribute = null;\r\n\r\n\t\tthis.distribution = null;\r\n\r\n\t}\r\n\r\n\tMeshSurfaceSampler.prototype = {\r\n\r\n\t\tconstructor: MeshSurfaceSampler,\r\n\r\n\t\tsetWeightAttribute: function ( name ) {\r\n\r\n\t\t\tthis.weightAttribute = name ? this.geometry.getAttribute( name ) : null;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbuild: function () {\r\n\r\n\t\t\tvar positionAttribute = this.positionAttribute;\r\n\t\t\tvar weightAttribute = this.weightAttribute;\r\n\r\n\t\t\tvar faceWeights = new Float32Array( positionAttribute.count / 3 );\r\n\r\n\t\t\t// Accumulate weights for each mesh face.\r\n\r\n\t\t\tfor ( var i = 0; i < positionAttribute.count; i += 3 ) {\r\n\r\n\t\t\t\tvar faceWeight = 1;\r\n\r\n\t\t\t\tif ( weightAttribute ) {\r\n\r\n\t\t\t\t\tfaceWeight = weightAttribute.getX( i )\r\n\t\t\t\t\t\t+ weightAttribute.getX( i + 1 )\r\n\t\t\t\t\t\t+ weightAttribute.getX( i + 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_face.a.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t_face.b.fromBufferAttribute( positionAttribute, i + 1 );\r\n\t\t\t\t_face.c.fromBufferAttribute( positionAttribute, i + 2 );\r\n\t\t\t\tfaceWeight *= _face.getArea();\r\n\r\n\t\t\t\tfaceWeights[ i / 3 ] = faceWeight;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Store cumulative total face weights in an array, where weight index\r\n\t\t\t// corresponds to face index.\r\n\r\n\t\t\tthis.distribution = new Float32Array( positionAttribute.count / 3 );\r\n\r\n\t\t\tvar cumulativeTotal = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < faceWeights.length; i ++ ) {\r\n\r\n\t\t\t\tcumulativeTotal += faceWeights[ i ];\r\n\r\n\t\t\t\tthis.distribution[ i ] = cumulativeTotal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRandomGenerator: function ( randomFunction ) {\r\n\r\n\t\t\tthis.randomFunction = randomFunction;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsample: function ( targetPosition, targetNormal ) {\r\n\r\n\t\t\tvar cumulativeTotal = this.distribution[ this.distribution.length - 1 ];\r\n\r\n\t\t\tvar faceIndex = this.binarySearch( this.randomFunction() * cumulativeTotal );\r\n\r\n\t\t\treturn this.sampleFace( faceIndex, targetPosition, targetNormal );\r\n\r\n\t\t},\r\n\r\n\t\tbinarySearch: function ( x ) {\r\n\r\n\t\t\tvar dist = this.distribution;\r\n\t\t\tvar start = 0;\r\n\t\t\tvar end = dist.length - 1;\r\n\r\n\t\t\tvar index = - 1;\r\n\r\n\t\t\twhile ( start <= end ) {\r\n\r\n\t\t\t\tvar mid = Math.ceil( ( start + end ) / 2 );\r\n\r\n\t\t\t\tif ( mid === 0 || dist[ mid - 1 ] <= x && dist[ mid ] > x ) {\r\n\r\n\t\t\t\t\tindex = mid;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t} else if ( x < dist[ mid ] ) {\r\n\r\n\t\t\t\t\tend = mid - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstart = mid + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn index;\r\n\r\n\t\t},\r\n\r\n\t\tsampleFace: function ( faceIndex, targetPosition, targetNormal ) {\r\n\r\n\t\t\tvar u = this.randomFunction();\r\n\t\t\tvar v = this.randomFunction();\r\n\r\n\t\t\tif ( u + v > 1 ) {\r\n\r\n\t\t\t\tu = 1 - u;\r\n\t\t\t\tv = 1 - v;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_face.a.fromBufferAttribute( this.positionAttribute, faceIndex * 3 );\r\n\t\t\t_face.b.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 1 );\r\n\t\t\t_face.c.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 2 );\r\n\r\n\t\t\ttargetPosition\r\n\t\t\t\t.set( 0, 0, 0 )\r\n\t\t\t\t.addScaledVector( _face.a, u )\r\n\t\t\t\t.addScaledVector( _face.b, v )\r\n\t\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\r\n\r\n\t\t\t_face.getNormal( targetNormal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn MeshSurfaceSampler;\r\n\r\n} )();\r\n\r\nexport { MeshSurfaceSampler };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/math/MeshSurfaceSampler.js","<template>\r\n    <div class=\"webglInstancingScatter-container\">\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { MeshSurfaceSampler } from '@/components/jsm/math/MeshSurfaceSampler.js';\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js';\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js';\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            stats: null,\r\n\t\t\tapi: null,\r\n            stemMesh: null,\r\n            blossomMesh: null,\r\n            stemGeometry: null,\r\n            blossomGeometry: null,\r\n            stemMaterial: null,\r\n            blossomMaterial: null,\r\n\t\t\tsampler: null,\r\n\t\t\tcount: null,\r\n\t\t\tages: null,\r\n\t\t\tscales: null,\r\n\t\t\tdummy: null,\r\n\t\t\t_position: null,\r\n\t\t\t_normal: null,\r\n\t\t\t_scale: null,\r\n\t\t\t// surfaceGeometry = new this.$THREE.BoxBufferGeometry(10, 10, 10).toNonIndexed();\r\n\t\t\tsurfaceGeometry: null,\r\n\t\t\tsurfaceMaterial: null,\r\n\t\t\tsurface: null,\r\n\t\t\t// Scaling curve causes particles to grow quickly, ease gradually into full scale, then\r\n\t\t\t// disappear quickly. More of the particle's lifetime is spent around full scale.\r\n            loader: null,\r\n            gui: null,\r\n            loader: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.api = {\r\n            count: 2000,\r\n            distribution: 'random',\r\n            resample: this.resample,\r\n            surfaceColor: 0xFFF784,\r\n            backgroundColor: 0xE39469,\r\n\r\n        }\r\n        this.count = this.api.count\r\n        this.ages = new Float32Array(this.count)\r\n        this.scales = new Float32Array(this.count)\r\n        this.dummy = new this.$THREE.Object3D()\r\n        this._position = new this.$THREE.Vector3()\r\n        this._normal = new this.$THREE.Vector3()\r\n        this._scale = new this.$THREE.Vector3()\r\n        this.surfaceGeometry = new this.$THREE.TorusKnotBufferGeometry(10, 3, 100, 16).toNonIndexed()\r\n        this.surfaceMaterial = new this.$THREE.MeshLambertMaterial({ color: this.api.surfaceColor, wireframe: false })\r\n        this.surface = new this.$THREE.Mesh(this.surfaceGeometry, this.surfaceMaterial)\r\n        this.loader = new GLTFLoader()\r\n        this.loader.load('static/models/gltf/Flower/Flower.glb', (gltf) => {\r\n            var _stemMesh = gltf.scene.getObjectByName('Stem')\r\n            var _blossomMesh = gltf.scene.getObjectByName('Blossom')\r\n            this.stemGeometry = new this.$THREE.InstancedBufferGeometry()\r\n            this.blossomGeometry = new this.$THREE.InstancedBufferGeometry()\r\n            this.$THREE.BufferGeometry.prototype.copy.call(this.stemGeometry, _stemMesh.geometry)\r\n            this.$THREE.BufferGeometry.prototype.copy.call(this.blossomGeometry, _blossomMesh.geometry)\r\n            var defaultTransform = new this.$THREE.Matrix4()\r\n                .makeRotationX(Math.PI)\r\n                .multiply(new this.$THREE.Matrix4().makeScale(7, 7, 7))\r\n            this.stemGeometry.applyMatrix4(defaultTransform)\r\n            this.blossomGeometry.applyMatrix4(defaultTransform)\r\n            this.stemMaterial = _stemMesh.material\r\n            this.blossomMaterial = _blossomMesh.material\r\n            // Assign random colors to the blossoms.\r\n            var _color = new this.$THREE.Color()\r\n            var color = new Float32Array(this.count * 3)\r\n            var blossomPavarte = [ 0xF20587, 0xF2D479, 0xF2C879, 0xF2B077, 0xF24405 ]\r\n            for (var i = 0; i < this.count; i ++) {\r\n                _color.setHex(blossomPavarte[ Math.floor(Math.random() * blossomPavarte.length) ])\r\n                _color.toArray(color, i * 3)\r\n            }\r\n            this.blossomGeometry.setAttribute('color', new this.$THREE.InstancedBufferAttribute(color, 3))\r\n            this.blossomMaterial.vertexColors = true\r\n            this.stemMesh = new this.$THREE.InstancedMesh(this.stemGeometry, this.stemMaterial, this.count)\r\n            this.blossomMesh = new this.$THREE.InstancedMesh(this.blossomGeometry, this.blossomMaterial, this.count)\r\n            // Instance matrices will be updated every frame.\r\n            this.stemMesh.instanceMatrix.setUsage(this.$THREE.DynamicDrawUsage)\r\n            this.blossomMesh.instanceMatrix.setUsage(this.$THREE.DynamicDrawUsage)\r\n            this.resample()\r\n            this.init()\r\n            this.animate()\r\n        })\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.hide()\r\n    },\r\n    methods: {\r\n        easeOutCubic(t) {\r\n            return (-- t) * t * t + 1\r\n        },\r\n        scaleCurve(t) {\r\n            return Math.abs(this.easeOutCubic((t > 0.5 ? 1 - t : t) * 2))\r\n        },\r\n        init() {\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.1, 100)\r\n            this.camera.position.set(25, 25, 25)\r\n            this.camera.lookAt(0, 0, 0)\r\n            //\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(this.api.backgroundColor)\r\n            var pointLight = new this.$THREE.PointLight(0xAA8899, 0.75)\r\n            pointLight.position.set(50, - 25, 75)\r\n            this.scene.add(pointLight)\r\n            this.scene.add(new this.$THREE.HemisphereLight())\r\n            //\r\n            this.scene.add(this.stemMesh)\r\n            this.scene.add(this.blossomMesh)\r\n            this.scene.add(this.surface)\r\n            //\r\n            this.gui = new GUI()\r\n            this.gui.add(this.api, 'count', 0, this.count).onChange(() => {\r\n                this.stemMesh.count = this.api.count\r\n                this.blossomMesh.count = this.api.count\r\n            })\r\n            // this.gui.addColor(api, 'backgroundColor').onChange(function () {\r\n            // \tscene.background.setHex(api.backgroundColor)\r\n            // })\r\n            // this.gui.addColor(api, 'surfaceColor').onChange(function () {\r\n            // \tsurfaceMaterial.color.setHex(api.surfaceColor)\r\n            // })\r\n            this.gui.add(this.api, 'distribution').options([ 'random', 'weighted' ]).onChange(this.resample)\r\n            this.gui.add(this.api, 'resample')\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            document.getElementsByClassName('webglInstancingScatter-container')[0].appendChild(this.renderer.domElement)\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            document.getElementsByClassName('webglInstancingScatter-container')[0].appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        resample() {\r\n            var vertexCount = this.surface.geometry.getAttribute('position').count\r\n            console.info('Sampling ' + this.count + ' points from a surface with ' + vertexCount + ' vertices...')\r\n            //\r\n            console.time('.build()')\r\n            this.sampler = new MeshSurfaceSampler(this.surface)\r\n                .setWeightAttribute(this.api.distribution === 'weighted' ? 'uv' : null)\r\n                .build()\r\n            console.timeEnd('.build()')\r\n            //\r\n            console.time('.sample()')\r\n            for (var i = 0; i < this.count; i ++) {\r\n                this.ages[ i ] = Math.random()\r\n                this.scales[ i ] = this.scaleCurve(this.ages[ i ])\r\n                this.resampleParticle(i)\r\n            }\r\n            console.timeEnd('.sample()')\r\n            this.stemMesh.instanceMatrix.needsUpdate = true\r\n            this.blossomMesh.instanceMatrix.needsUpdate = true\r\n        },\r\n        resampleParticle(i) {\r\n            this.sampler.sample(this._position, this._normal)\r\n            this._normal.add(this._position)\r\n            this.dummy.position.copy(this._position)\r\n            this.dummy.scale.set(this.scales[ i ], this.scales[ i ], this.scales[ i ])\r\n            this.dummy.lookAt(this._normal)\r\n            this.dummy.updateMatrix()\r\n            this.stemMesh.setMatrixAt(i, this.dummy.matrix)\r\n            this.blossomMesh.setMatrixAt(i, this.dummy.matrix)\r\n        },\r\n        updateParticle(i) {\r\n            // Update lifecycle.\r\n            this.ages[ i ] += 0.005\r\n            if (this.ages[ i ] >= 1) {\r\n                this.ages[ i ] = 0.001\r\n                this.scales[ i ] = this.scaleCurve(this.ages[ i ])\r\n                this.resampleParticle(i)\r\n                return\r\n            }\r\n            // Update scale.\r\n            var prevScale = this.scales[ i ]\r\n            this.scales[ i ] = this.scaleCurve(this.ages[ i ])\r\n            this._scale.set(this.scales[ i ] / prevScale, this.scales[ i ] / prevScale, this.scales[ i ] / prevScale)\r\n            // Update transform.\r\n            this.stemMesh.getMatrixAt(i, this.dummy.matrix)\r\n            this.dummy.matrix.scale(this._scale)\r\n            this.stemMesh.setMatrixAt(i, this.dummy.matrix)\r\n            this.blossomMesh.setMatrixAt(i, this.dummy.matrix)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            if (this.stemMesh && this.blossomMesh) {\r\n                var time = Date.now() * 0.001\r\n                this.scene.rotation.x = Math.sin(time / 4)\r\n                this.scene.rotation.y = Math.sin(time / 2)\r\n                for (var i = 0; i < this.api.count; i ++) {\r\n                    this.updateParticle(i)\r\n                }\r\n                this.stemMesh.instanceMatrix.needsUpdate = true\r\n                this.blossomMesh.instanceMatrix.needsUpdate = true\r\n            }\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglInstancingScatter-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/instancing/webglInstancingScatter.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglInstancingScatter-container\"})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-7f68391a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/instancing/webglInstancingScatter.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7f68391a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglInstancingScatter.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglInstancingScatter.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglInstancingScatter.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7f68391a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglInstancingScatter.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-7f68391a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/instancing/webglInstancingScatter.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}