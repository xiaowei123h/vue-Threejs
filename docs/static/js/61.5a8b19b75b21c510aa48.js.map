{"version":3,"sources":["webpack:///./src/components/jsm/loaders/KTXLoader.js","webpack:///src/views/loader/webglLoaderTextureKtx.vue","webpack:///./src/views/loader/webglLoaderTextureKtx.vue?70c3","webpack:///./src/views/loader/webglLoaderTextureKtx.vue"],"names":["KTXLoader","manager","CompressedTextureLoader","call","this","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","arrayBuffer","facesExpected","identifier","Uint8Array","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","littleEndian","getUint32","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","Math","max","loadType","COMPRESSED_2D","console","warn","error","dataOffset","HEADER_LEN","level","imageSize","Int32Array","face","byteArray","push","data","COMPRESSED_3D","TEX_2D","TEX_3D","webglLoaderTextureKtx","camera","scene","renderer","meshes","mounted","init","animate","methods","$THREE","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","document","getElementsByClassName","appendChild","domElement","formats","extensions","has","PerspectiveCamera","position","z","Scene","material1","material2","geometry","BoxBufferGeometry","loader","KTXLoader_KTXLoader","MeshBasicMaterial","map","load","depthTest","transparent","side","DoubleSide","Mesh","x","length","i","mesh","y","add","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","time","Date","now","rotation","render","loader_webglLoaderTextureKtx","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/61.5a8b19b75b21c510aa48.js","sourcesContent":["import {\r\n\tCompressedTextureLoader\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n *\r\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\r\n */\r\n\r\n\r\nvar KTXLoader = function ( manager ) {\r\n\r\n\tCompressedTextureLoader.call( this, manager );\r\n\r\n};\r\n\r\nKTXLoader.prototype = Object.assign( Object.create( CompressedTextureLoader.prototype ), {\r\n\r\n\tconstructor: KTXLoader,\r\n\r\n\tparse: function ( buffer, loadMipmaps ) {\r\n\r\n\t\tvar ktx = new KhronosTextureContainer( buffer, 1 );\r\n\r\n\t\treturn {\r\n\t\t\tmipmaps: ktx.mipmaps( loadMipmaps ),\r\n\t\t\twidth: ktx.pixelWidth,\r\n\t\t\theight: ktx.pixelHeight,\r\n\t\t\tformat: ktx.glInternalFormat,\r\n\t\t\tisCubemap: ktx.numberOfFaces === 6,\r\n\t\t\tmipmapCount: ktx.numberOfMipmapLevels\r\n\t\t};\r\n\r\n\t}\r\n\r\n} );\r\n\r\nvar KhronosTextureContainer = ( function () {\r\n\r\n\t/**\r\n\t * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\r\n\t * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\r\n\t * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\r\n\t * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\r\n\t */\r\n\tfunction KhronosTextureContainer( arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */ ) {\r\n\r\n\t\tthis.arrayBuffer = arrayBuffer;\r\n\r\n\t\t// Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\r\n\t\t// '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\r\n\t\t// 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\r\n\t\tvar identifier = new Uint8Array( this.arrayBuffer, 0, 12 );\r\n\t\tif ( identifier[ 0 ] !== 0xAB ||\r\n\t\t\tidentifier[ 1 ] !== 0x4B ||\r\n\t\t\tidentifier[ 2 ] !== 0x54 ||\r\n\t\t\tidentifier[ 3 ] !== 0x58 ||\r\n\t\t\tidentifier[ 4 ] !== 0x20 ||\r\n\t\t\tidentifier[ 5 ] !== 0x31 ||\r\n\t\t\tidentifier[ 6 ] !== 0x31 ||\r\n\t\t\tidentifier[ 7 ] !== 0xBB ||\r\n\t\t\tidentifier[ 8 ] !== 0x0D ||\r\n\t\t\tidentifier[ 9 ] !== 0x0A ||\r\n\t\t\tidentifier[ 10 ] !== 0x1A ||\r\n\t\t\tidentifier[ 11 ] !== 0x0A ) {\r\n\r\n\t\t\tconsole.error( 'texture missing KTX identifier' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// load the reset of the header in native 32 bit uint\r\n\t\tvar dataSize = Uint32Array.BYTES_PER_ELEMENT;\r\n\t\tvar headerDataView = new DataView( this.arrayBuffer, 12, 13 * dataSize );\r\n\t\tvar endianness = headerDataView.getUint32( 0, true );\r\n\t\tvar littleEndian = endianness === 0x04030201;\r\n\r\n\t\tthis.glType = headerDataView.getUint32( 1 * dataSize, littleEndian ); // must be 0 for compressed textures\r\n\t\tthis.glTypeSize = headerDataView.getUint32( 2 * dataSize, littleEndian ); // must be 1 for compressed textures\r\n\t\tthis.glFormat = headerDataView.getUint32( 3 * dataSize, littleEndian ); // must be 0 for compressed textures\r\n\t\tthis.glInternalFormat = headerDataView.getUint32( 4 * dataSize, littleEndian ); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\r\n\t\tthis.glBaseInternalFormat = headerDataView.getUint32( 5 * dataSize, littleEndian ); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\r\n\t\tthis.pixelWidth = headerDataView.getUint32( 6 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\r\n\t\tthis.pixelHeight = headerDataView.getUint32( 7 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\r\n\t\tthis.pixelDepth = headerDataView.getUint32( 8 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\r\n\t\tthis.numberOfArrayElements = headerDataView.getUint32( 9 * dataSize, littleEndian ); // used for texture arrays\r\n\t\tthis.numberOfFaces = headerDataView.getUint32( 10 * dataSize, littleEndian ); // used for cubemap textures, should either be 1 or 6\r\n\t\tthis.numberOfMipmapLevels = headerDataView.getUint32( 11 * dataSize, littleEndian ); // number of levels; disregard possibility of 0 for compressed textures\r\n\t\tthis.bytesOfKeyValueData = headerDataView.getUint32( 12 * dataSize, littleEndian ); // the amount of space after the header for meta-data\r\n\r\n\t\t// Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\r\n\t\tif ( this.glType !== 0 ) {\r\n\r\n\t\t\tconsole.warn( 'only compressed formats currently supported' );\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\r\n\t\t\tthis.numberOfMipmapLevels = Math.max( 1, this.numberOfMipmapLevels );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.pixelHeight === 0 || this.pixelDepth !== 0 ) {\r\n\r\n\t\t\tconsole.warn( 'only 2D textures currently supported' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.numberOfArrayElements !== 0 ) {\r\n\r\n\t\t\tconsole.warn( 'texture arrays not currently supported' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.numberOfFaces !== facesExpected ) {\r\n\r\n\t\t\tconsole.warn( 'number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// we now have a completely validated file, so could use existence of loadType as success\r\n\t\t// would need to make this more elaborate & adjust checks above to support more than one load type\r\n\t\tthis.loadType = KhronosTextureContainer.COMPRESSED_2D;\r\n\r\n\t}\r\n\r\n\t// return mipmaps for js\r\n\tKhronosTextureContainer.prototype.mipmaps = function ( loadMipmaps ) {\r\n\r\n\t\tvar mipmaps = [];\r\n\r\n\t\t// initialize width & height for level 1\r\n\t\tvar dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\r\n\t\tvar width = this.pixelWidth;\r\n\t\tvar height = this.pixelHeight;\r\n\t\tvar mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\r\n\r\n\t\tfor ( var level = 0; level < mipmapCount; level ++ ) {\r\n\r\n\t\t\tvar imageSize = new Int32Array( this.arrayBuffer, dataOffset, 1 )[ 0 ]; // size per face, since not supporting array cubemaps\r\n\t\t\tdataOffset += 4; // size of the image + 4 for the imageSize field\r\n\r\n\t\t\tfor ( var face = 0; face < this.numberOfFaces; face ++ ) {\r\n\r\n\t\t\t\tvar byteArray = new Uint8Array( this.arrayBuffer, dataOffset, imageSize );\r\n\r\n\t\t\t\tmipmaps.push( { \"data\": byteArray, \"width\": width, \"height\": height } );\r\n\r\n\t\t\t\tdataOffset += imageSize;\r\n\t\t\t\tdataOffset += 3 - ( ( imageSize + 3 ) % 4 ); // add padding for odd sized image\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = Math.max( 1.0, width * 0.5 );\r\n\t\t\theight = Math.max( 1.0, height * 0.5 );\r\n\r\n\t\t}\r\n\r\n\t\treturn mipmaps;\r\n\r\n\t};\r\n\r\n\tKhronosTextureContainer.HEADER_LEN = 12 + ( 13 * 4 ); // identifier + header elements (not including key value meta-data pairs)\r\n\t// load types\r\n\tKhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\r\n\tKhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\r\n\tKhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\r\n\tKhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\r\n\r\n\treturn KhronosTextureContainer;\r\n\r\n}() );\r\n\r\nexport { KTXLoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/KTXLoader.js","<template>\r\n    <div class=\"webglLoaderTextureKtx-container\">\r\n        <div id=\"info\">\r\n            <a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl - compressed KTX textures<br />\r\n            <a href=\"https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\">Khronos Texture</a> is a lightweight file format for OpenGL\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { KTXLoader } from '@/components/jsm/loaders/KTXLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t        meshes: [],\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t    this.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            document.getElementsByClassName('webglLoaderTextureKtx-container')[0].appendChild(this.renderer.domElement)\r\n            var formats = {\r\n                astc: this.renderer.extensions.has('WEBGL_compressed_texture_astc'),\r\n                etc1: this.renderer.extensions.has('WEBGL_compressed_texture_etc1'),\r\n                s3tc: this.renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\r\n                pvrtc: this.renderer.extensions.has('WEBGL_compressed_texture_pvrtc')\r\n            }\r\n            this.camera = new this.$THREE.PerspectiveCamera(50, this.$webglInnerWidth / window.innerHeight, 1, 2000)\r\n            this.camera.position.z = 1000\r\n            this.scene = new this.$THREE.Scene()\r\n            var geometry = new this.$THREE.BoxBufferGeometry(200, 200, 200)\r\n            var material1, material2\r\n            // TODO: add cubemap support\r\n            var loader = new KTXLoader()\r\n            if (formats.pvrtc) {\r\n                material1 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/disturb_PVR2bpp.ktx')\r\n                })\r\n                material2 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/lensflare_PVR4bpp.ktx'),\r\n                    depthTest: false,\r\n                    transparent: true,\r\n                    side: this.$THREE.DoubleSide\r\n                })\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material1))\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material2))\r\n            }\r\n            if (formats.s3tc) {\r\n                material1 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/disturb_BC1.ktx')\r\n                })\r\n                material2 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/lensflare_BC3.ktx'),\r\n                    depthTest: false,\r\n                    transparent: true,\r\n                    side: this.$THREE.DoubleSide\r\n                })\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material1))\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material2))\r\n            }\r\n            if (formats.etc1) {\r\n                material1 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/disturb_ETC1.ktx')\r\n                })\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material1))\r\n            }\r\n            if (formats.astc) {\r\n                material1 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/disturb_ASTC4x4.ktx')\r\n                })\r\n                material2 = new this.$THREE.MeshBasicMaterial({\r\n                    map: loader.load('static/textures/compressed/lensflare_ASTC8x8.ktx'),\r\n                    depthTest: false,\r\n                    transparent: true,\r\n                    side: this.$THREE.DoubleSide\r\n                })\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material1))\r\n                this.meshes.push(new this.$THREE.Mesh(geometry, material2))\r\n            }\r\n            var x = - this.meshes.length / 2 * 150\r\n            for (var i = 0; i < this.meshes.length; ++ i, x += 300) {\r\n                var mesh = this.meshes[ i ]\r\n                mesh.position.x = x\r\n                mesh.position.y = 0\r\n                this.scene.add(mesh)\r\n            }\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            var time = Date.now() * 0.001\r\n            for (var i = 0; i < this.meshes.length; i ++) {\r\n                var mesh = this.meshes[ i ]\r\n                mesh.rotation.x = time\r\n                mesh.rotation.y = time\r\n            }\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderTextureKtx-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderTextureKtx.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderTextureKtx-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl - compressed KTX textures\"),_c('br'),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\"}},[_vm._v(\"Khronos Texture\")]),_vm._v(\" is a lightweight file format for OpenGL\\n    \")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-64db1ece\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderTextureKtx.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-64db1ece\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderTextureKtx.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderTextureKtx.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderTextureKtx.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-64db1ece\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderTextureKtx.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-64db1ece\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderTextureKtx.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}