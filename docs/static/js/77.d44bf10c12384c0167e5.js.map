{"version":3,"sources":["webpack:///src/views/postprocessing/webglPostprocessingNodes.vue","webpack:///./src/views/postprocessing/webglPostprocessingNodes.vue?b514","webpack:///./src/views/postprocessing/webglPostprocessingNodes.vue"],"names":["webglPostprocessingNodes","data","camera","scene","renderer","object","light","nodepost","gui","clock","frame","param","textureLoader","lensflare2","decalNormal","mounted","this","$THREE","Clock","Nodes","example","URL","window","location","href","searchParams","get","TextureLoader","load","wrapS","wrapT","RepeatWrapping","init","animate","beforeDestroy","destroy","methods","clearGui","_this","dat_gui_module","add","basic / color-adjustment","basic / blends","basic / fade","basic / invert","basic / blur","adv / motion-blur","adv / saturation","adv / refraction","adv / mosaic","onFinishChange","updateMaterial","open","addGui","name","value","callback","isColor","min","max","node","_this2","addColor","onChange","_typeof","Object","keys","screen","fade","scale","size","_this3","hue","sataturation","vibrance","brightness","contrast","hueNode","HUE","satNode","SATURATION","vibranceNode","VIBRANCE","brightnessNode","BRIGHTNESS","contrastNode","CONTRAST","output","val","Math","PI","color","percent","MIX","getHex","setHex","alpha","inverted","INVERT","multiply","ADD","addition","subtract","SUB","MUL","division","DIV","op","needsUpdate","sat","satrgb","join","luminance","saturation","inputs","rgb","adjustment","normal","normalXY","normalXYFlip","offsetNormal","scaleTexture","scaleNormal","offsetCoord","a","getDrawingBufferSize","Vector2","previousFrame","width","height","motionBlur","currentFrame","saveTo","uv","blocks","blocksSize","FLOOR","mosaicUV","fadeScreen","c","blurScreen","radius","x","y","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","document","getElementsByClassName","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","Object3D","geometry","SphereBufferGeometry","i","material","MeshPhongMaterial","random","flatShading","mesh","Mesh","set","normalize","multiplyScalar","rotation","AmbientLight","DirectionalLight","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","delta","getDelta","update","render","postprocessing_webglPostprocessingNodes","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/77.d44bf10c12384c0167e5.js","sourcesContent":["<template>\r\n    <div class=\"webglPostprocessingNodes-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - Node-Based Post-Processing\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport * as Nodes from '@/components/jsm/nodes/Nodes.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            object: null,\r\n            light: null,\r\n            nodepost: null,\r\n\t\t\tgui: null,\r\n\t\t\tclock: null,\r\n\t\t\tframe: null,\r\n\t\t\tparam: null,\r\n\t\t\ttextureLoader: null,\r\n\t\t\tlensflare2: null,\r\n\t\t\tdecalNormal: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.clock = new this.$THREE.Clock()\r\n        this.frame = new Nodes.NodeFrame()\r\n        this.param = { example: new URL(window.location.href).searchParams.get('e') || 'color-adjustment' }\r\n        this.textureLoader = new this.$THREE.TextureLoader()\r\n        this.lensflare2 = this.textureLoader.load('static/textures/lensflare/lensflare0.png')\r\n        this.lensflare2.wrapS = this.lensflare2.wrapT = this.$THREE.RepeatWrapping\r\n        this.decalNormal = this.textureLoader.load('static/textures/decal/decal-normal.jpg')\r\n        this.decalNormal.wrapS = this.decalNormal.wrapT = this.$THREE.RepeatWrapping\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        clearGui() {\r\n            if (this.gui) this.gui.destroy()\r\n            this.gui = new GUI()\r\n            this.gui.add(this.param, 'example', {\r\n                'basic / color-adjustment': 'color-adjustment',\r\n                'basic / blends': 'blends',\r\n                'basic / fade': 'fade',\r\n                'basic / invert': 'invert',\r\n                'basic / blur': 'blur',\r\n                'adv / motion-blur': 'motion-blur',\r\n                'adv / saturation': 'saturation',\r\n                'adv / refraction': 'refraction',\r\n                'adv / mosaic': 'mosaic'\r\n            }).onFinishChange(() => {\r\n                this.updateMaterial()\r\n            })\r\n            this.gui.open()\r\n        },\r\n        addGui(name, value, callback, isColor, min, max) {\r\n            var node\r\n            this.param[ name ] = value\r\n            if (isColor) {\r\n                node = this.gui.addColor(this.param, name).onChange(() => {\r\n                    callback(this.param[ name ])\r\n                })\r\n            } else if (typeof value == 'object') {\r\n                this.param[ name ] = value[ Object.keys(value)[ 0 ] ]\r\n                node = this.gui.add(this.param, name, value).onChange(() => {\r\n                    callback(this.param[ name ])\r\n                })\r\n            } else {\r\n                node = this.gui.add(this.param, name, min, max).onChange(() => {\r\n                    callback(this.param[ name ])\r\n                })\r\n            }\r\n            return node\r\n        },\r\n        updateMaterial() {\r\n            var name = this.param.example\r\n            var screen, fade, scale, size\r\n            this.clearGui()\r\n            switch (name) {\r\n                case 'color-adjustment':\r\n                    // POST\r\n                    screen = new Nodes.ScreenNode()\r\n                    var hue = new Nodes.FloatNode()\r\n                    var sataturation = new Nodes.FloatNode(1)\r\n                    var vibrance = new Nodes.FloatNode()\r\n                    var brightness = new Nodes.FloatNode(0)\r\n                    var contrast = new Nodes.FloatNode(1)\r\n                    var hueNode = new Nodes.ColorAdjustmentNode(screen, hue, Nodes.ColorAdjustmentNode.HUE)\r\n                    var satNode = new Nodes.ColorAdjustmentNode(hueNode, sataturation, Nodes.ColorAdjustmentNode.SATURATION)\r\n                    var vibranceNode = new Nodes.ColorAdjustmentNode(satNode, vibrance, Nodes.ColorAdjustmentNode.VIBRANCE)\r\n                    var brightnessNode = new Nodes.ColorAdjustmentNode(vibranceNode, brightness, Nodes.ColorAdjustmentNode.BRIGHTNESS)\r\n                    var contrastNode = new Nodes.ColorAdjustmentNode(brightnessNode, contrast, Nodes.ColorAdjustmentNode.CONTRAST)\r\n                    this.nodepost.output = contrastNode\r\n                    // GUI\r\n                    this.addGui('hue', hue.value, (val) => {\r\n                        hue.value = val\r\n                    }, false, 0, Math.PI * 2)\r\n                    this.addGui('saturation', sataturation.value, (val) => {\r\n                        sataturation.value = val\r\n                    }, false, 0, 2)\r\n                    this.addGui('vibrance', vibrance.value, (val) => {\r\n                        vibrance.value = val\r\n                    }, false, - 1, 1)\r\n                    this.addGui('brightness', brightness.value, (val) => {\r\n                        brightness.value = val\r\n                    }, false, 0, .5)\r\n                    this.addGui('contrast', contrast.value, (val) => {\r\n                        contrast.value = val\r\n                    }, false, 0, 2)\r\n                    break\r\n                case 'fade':\r\n                    // POST\r\n                    var color = new Nodes.ColorNode(0xFFFFFF)\r\n                    var percent = new Nodes.FloatNode(.5)\r\n                    fade = new Nodes.MathNode(\r\n                        new Nodes.ScreenNode(),\r\n                        color,\r\n                        percent,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    this.nodepost.output = fade\r\n                    // GUI\r\n                    this.addGui('color', color.value.getHex(), (val) => {\r\n                        color.value.setHex(val)\r\n                    }, true)\r\n                    this.addGui('fade', percent.value, (val) => {\r\n                        percent.value = val\r\n                    }, false, 0, 1)\r\n                    break\r\n                case 'invert':\r\n                    // POST\r\n                    var alpha = new Nodes.FloatNode(1)\r\n                    screen = new Nodes.ScreenNode()\r\n                    var inverted = new Nodes.MathNode(screen, Nodes.MathNode.INVERT)\r\n                    fade = new Nodes.MathNode(\r\n                        screen,\r\n                        inverted,\r\n                        alpha,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    this.nodepost.output = fade\r\n                    // GUI\r\n                    this.addGui('alpha', alpha.value, (val) => {\r\n                        alpha.value = val\r\n                    }, false, 0, 1)\r\n                    break\r\n                case 'blends':\r\n                    // POST\r\n                    var multiply = new Nodes.OperatorNode(\r\n                        new Nodes.ScreenNode(),\r\n                        new Nodes.TextureNode(this.lensflare2),\r\n                        Nodes.OperatorNode.ADD\r\n                    )\r\n                    this.nodepost.output = multiply\r\n                    // GUI\r\n                    this.addGui('blend', {\r\n                        'addition': Nodes.OperatorNode.ADD,\r\n                        'subtract': Nodes.OperatorNode.SUB,\r\n                        'multiply': Nodes.OperatorNode.MUL,\r\n                        'division': Nodes.OperatorNode.DIV\r\n                    }, (val) => {\r\n                        multiply.op = val\r\n                        this.nodepost.needsUpdate = true\r\n                    })\r\n                    break\r\n                case 'saturation':\r\n                    // PASS\r\n                    screen = new Nodes.ScreenNode()\r\n                    var sat = new Nodes.FloatNode(0)\r\n                    var satrgb = new Nodes.FunctionNode( [\r\n\t\t\t\t\t\t\t\"vec3 satrgb( vec3 rgb, float adjustment ) {\",\r\n\t\t\t\t\t\t\t// include luminance function from LuminanceNode\r\n\t\t\t\t\t\t\t\"\tvec3 intensity = vec3( luminance( rgb ) );\",\r\n\t\t\t\t\t\t\t\"\treturn mix( intensity, rgb, adjustment );\",\r\n\t\t\t\t\t\t\t\"}\"\r\n\t\t\t\t\t\t].join( \"\\n\" ), [ Nodes.LuminanceNode.Nodes.luminance ] )\r\n                    var saturation = new Nodes.FunctionCallNode(satrgb)\r\n                    saturation.inputs.rgb = screen\r\n                    saturation.inputs.adjustment = sat\r\n                    this.nodepost.output = saturation\r\n                    // GUI\r\n                    this.addGui('saturation', sat.value, (val) => {\r\n                        sat.value = val\r\n                    }, false, 0, 2)\r\n                    break\r\n                case 'refraction':\r\n                    // POST\r\n                    var normal = new Nodes.TextureNode(this.decalNormal)\r\n                    var normalXY = new Nodes.SwitchNode(normal, 'xy')\r\n                    scale = new Nodes.FloatNode(.5)\r\n                    var normalXYFlip = new Nodes.MathNode(\r\n                        normalXY,\r\n                        Nodes.MathNode.INVERT\r\n                    )\r\n                    var offsetNormal = new Nodes.OperatorNode(\r\n                        normalXYFlip,\r\n                        new Nodes.FloatNode(.5),\r\n                        Nodes.OperatorNode.ADD\r\n                    )\r\n                    var scaleTexture = new Nodes.OperatorNode(\r\n                        new Nodes.SwitchNode(normal, 'z'),\r\n                        offsetNormal,\r\n                        Nodes.OperatorNode.MUL\r\n                    )\r\n                    var scaleNormal = new Nodes.MathNode(\r\n                        new Nodes.FloatNode(1),\r\n                        scaleTexture,\r\n                        scale,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    var offsetCoord = new Nodes.OperatorNode(\r\n                        new Nodes.UVNode(),\r\n                        scaleNormal,\r\n                        Nodes.OperatorNode.MUL\r\n                    )\r\n                    screen = new Nodes.ScreenNode(offsetCoord)\r\n                    this.nodepost.output = screen\r\n                    // GUI\r\n                    this.addGui('scale', scale.value, (val) => {\r\n                        scale.value = val\r\n                    }, false, 0, 1)\r\n                    this.addGui('invert', false, (val) => {\r\n                        offsetNormal.a = val ? normalXYFlip : normalXY\r\n                        this.nodepost.needsUpdate = true\r\n                    })\r\n                    break\r\n                case 'motion-blur':\r\n                    // POST\r\n                    size = this.renderer.getDrawingBufferSize(new this.$THREE.Vector2())\r\n                    screen = new Nodes.ScreenNode()\r\n                    var previousFrame = new Nodes.RTTNode(size.width, size.height, screen)\r\n                    var motionBlur = new Nodes.MathNode(\r\n                        previousFrame,\r\n                        screen,\r\n                        new Nodes.FloatNode(.5),\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    var currentFrame = new Nodes.RTTNode(size.width, size.height, motionBlur)\r\n                    currentFrame.saveTo = previousFrame\r\n                    this.nodepost.output = currentFrame\r\n                    break\r\n                case 'mosaic':\r\n                    // POST\r\n                    scale = new Nodes.FloatNode(128)\r\n                    fade = new Nodes.FloatNode(1)\r\n                    var uv = new Nodes.UVNode()\r\n                    var blocks = new Nodes.OperatorNode(\r\n                        uv,\r\n                        scale,\r\n                        Nodes.OperatorNode.MUL\r\n                    )\r\n                    var blocksSize = new Nodes.MathNode(\r\n                        blocks,\r\n                        Nodes.MathNode.FLOOR\r\n                    )\r\n                    var mosaicUV = new Nodes.OperatorNode(\r\n                        blocksSize,\r\n                        scale,\r\n                        Nodes.OperatorNode.DIV\r\n                    )\r\n                    var fadeScreen = new Nodes.MathNode(\r\n                        uv,\r\n                        mosaicUV,\r\n                        fade,\r\n                        Nodes.MathNode.MIX\r\n                    )\r\n                    this.nodepost.output = new Nodes.ScreenNode(fadeScreen)\r\n                    // GUI\r\n                    this.addGui('scale', scale.value, (val) => {\r\n                        scale.value = val\r\n                    }, false, 16, 1024)\r\n                    this.addGui('fade', fade.value, (val) => {\r\n                        fade.value = val\r\n                    }, false, 0, 1)\r\n                    this.addGui('mask', false, (val) => {\r\n                        fadeScreen.c = val ? new Nodes.TextureNode(this.lensflare2) : fade\r\n                        this.nodepost.needsUpdate = true\r\n                    })\r\n                    break\r\n                case 'blur':\r\n                    // POST\r\n                    size = this.renderer.getDrawingBufferSize(new this.$THREE.Vector2())\r\n                    var blurScreen = new Nodes.BlurNode(new Nodes.ScreenNode())\r\n                    blurScreen.size = new this.$THREE.Vector2(size.width, size.height)\r\n                    this.nodepost.output = blurScreen\r\n                    // GUI\r\n                    this.addGui('blurX', blurScreen.radius.x, (val) => {\r\n                        blurScreen.radius.x = val\r\n                    }, false, 0, 15)\r\n                    this.addGui('blurY', blurScreen.radius.y, (val) => {\r\n                        blurScreen.radius.y = val\r\n                    }, false, 0, 15)\r\n                    break\r\n            }\r\n            this.nodepost.needsUpdate = true\r\n            // test serialization\r\n            /*\r\n                        var library = {}\r\n                        library[ lensflare2.uuid ] = lensflare2\r\n                        library[ decalNormal.uuid ] = decalNormal\r\n\r\n                        var json = nodepost.toJSON()\r\n\r\n                        nodepost.output = new NodeMaterialLoader(null, library).parse(json).value\r\n                    */\r\n        },\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            document.getElementsByClassName('webglPostprocessingNodes-container')[0].appendChild(this.renderer.domElement)\r\n            this.nodepost = new Nodes.NodePostProcessing(this.renderer)\r\n            //\r\n            this.camera = new this.$THREE.PerspectiveCamera(70, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.z = 400\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.fog = new this.$THREE.Fog(0x0066FF, 1, 1000)\r\n            this.object = new this.$THREE.Object3D()\r\n            this.scene.add(this.object)\r\n            var geometry = new this.$THREE.SphereBufferGeometry(1, 4, 4)\r\n            for (var i = 0; i < 100; i ++) {\r\n                var material = new this.$THREE.MeshPhongMaterial({ color: 0x888888 + (Math.random() * 0x888888), flatShading: true })\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize()\r\n                mesh.position.multiplyScalar(Math.random() * 400)\r\n                mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2)\r\n                mesh.scale.x = mesh.scale.y = mesh.scale.z = 10 + (Math.random() * 40)\r\n                this.object.add(mesh)\r\n            }\r\n            this.scene.add(new this.$THREE.AmbientLight(0x999999))\r\n            this.light = new this.$THREE.DirectionalLight(0xffffff)\r\n            this.light.position.set(1, 1, 1)\r\n            this.scene.add(this.light)\r\n            //\r\n            this.updateMaterial()\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            var delta = this.clock.getDelta()\r\n            this.object.rotation.x += 0.005\r\n            this.object.rotation.y += 0.01\r\n            this.frame.update(delta)\r\n            this.nodepost.render(this.scene, this.camera, this.frame)\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingNodes-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingNodes.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingNodes-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - Node-Based Post-Processing\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-f1e22ae0\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingNodes.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f1e22ae0\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingNodes.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingNodes.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingNodes.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-f1e22ae0\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingNodes.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-f1e22ae0\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingNodes.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}