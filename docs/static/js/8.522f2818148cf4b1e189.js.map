{"version":3,"sources":["webpack:///./src/components/jsm/objects/Reflector.js","webpack:///./src/components/jsm/objects/ReflectorRTT.js","webpack:///src/views/mirror/webglMirrorNodes.vue","webpack:///./src/views/mirror/webglMirrorNodes.vue?9aa4","webpack:///./src/views/mirror/webglMirrorNodes.vue"],"names":["__webpack_require__","d","__webpack_exports__","Reflector","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","geometry","options","Mesh","call","this","type","scope","color","undefined","Color","textureWidth","textureHeight","clipBias","shader","ReflectorShader","reflectorPlane","Plane","normal","Vector3","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","Matrix4","lookAtPosition","clipPlane","Vector4","view","target","q","textureMatrix","virtualCamera","PerspectiveCamera","parameters","minFilter","LinearFilter","magFilter","format","RGBFormat","renderTarget","WebGLRenderTarget","MathUtils","isPowerOfTwo","texture","generateMipmaps","material","ShaderMaterial","uniforms","UniformsUtils","clone","fragmentShader","vertexShader","value","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","prototype","Object","create","constructor","tDiffuse","join","ReflectorRTT","setDrawRange","webglMirrorNodes","data","WIDTH","HEIGHT","VIEW_ANGLE","ASPECT","NEAR","FAR","decalNormal","decalDiffuse","clock","cameraControls","gui","sphereGroup","smallSphere","groundMirrorMaterial","frame","mounted","$webglInnerWidth","window","innerHeight","$THREE","TextureLoader","load","wrapS","wrapT","RepeatWrapping","Clock","dat_gui_module","Nodes","init","fillScene","update","beforeDestroy","hide","methods","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","Scene","OrbitControls","domElement","maxDistance","minDistance","document","getElementById","appendChild","addEventListener","onWindowResize","$onWindowResize","planeGeo","PlaneBufferGeometry","groundMirror","ReflectorRTT_ReflectorRTT","mask","mirror","normalMap","normalXY","normalXYFlip","INVERT","offsetNormal","SUB","offset","MUL","blurMirror","size","Vector2","uv","keywords","ADD","radius","blur","onChange","v","environment","environmentAlpha","mirrorMesh","rotateX","PI","Object3D","CylinderBufferGeometry","cos","MeshPhongMaterial","emissive","sphereCap","sin","SphereBufferGeometry","halfSphere","rotateZ","IcosahedronBufferGeometry","flatShading","planeTop","planeBack","planeFront","rotateY","planeRight","planeLeft","mainLight","PointLight","greenLight","redLight","blueLight","requestAnimationFrame","delta","getDelta","timer","Date","now","rotation","abs","updateNode","mirror_webglMirrorNodes","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","rel","Component","normalizeComponent","ssrContext"],"mappings":"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","file":"static/js/8.522f2818148cf4b1e189.js","sourcesContent":["import {\r\n\tColor,\r\n\tLinearFilter,\r\n\tMathUtils,\r\n\tMatrix4,\r\n\tMesh,\r\n\tPerspectiveCamera,\r\n\tPlane,\r\n\tRGBFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector3,\r\n\tVector4,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar Reflector = function ( geometry, options ) {\r\n\r\n\tMesh.call( this, geometry );\r\n\r\n\tthis.type = 'Reflector';\r\n\r\n\tvar scope = this;\r\n\r\n\toptions = options || {};\r\n\r\n\tvar color = ( options.color !== undefined ) ? new Color( options.color ) : new Color( 0x7F7F7F );\r\n\tvar textureWidth = options.textureWidth || 512;\r\n\tvar textureHeight = options.textureHeight || 512;\r\n\tvar clipBias = options.clipBias || 0;\r\n\tvar shader = options.shader || Reflector.ReflectorShader;\r\n\r\n\t//\r\n\r\n\tvar reflectorPlane = new Plane();\r\n\tvar normal = new Vector3();\r\n\tvar reflectorWorldPosition = new Vector3();\r\n\tvar cameraWorldPosition = new Vector3();\r\n\tvar rotationMatrix = new Matrix4();\r\n\tvar lookAtPosition = new Vector3( 0, 0, - 1 );\r\n\tvar clipPlane = new Vector4();\r\n\r\n\tvar view = new Vector3();\r\n\tvar target = new Vector3();\r\n\tvar q = new Vector4();\r\n\r\n\tvar textureMatrix = new Matrix4();\r\n\tvar virtualCamera = new PerspectiveCamera();\r\n\r\n\tvar parameters = {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\tformat: RGBFormat\r\n\t};\r\n\r\n\tvar renderTarget = new WebGLRenderTarget( textureWidth, textureHeight, parameters );\r\n\r\n\tif ( ! MathUtils.isPowerOfTwo( textureWidth ) || ! MathUtils.isPowerOfTwo( textureHeight ) ) {\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tvar material = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\r\n\t\tfragmentShader: shader.fragmentShader,\r\n\t\tvertexShader: shader.vertexShader\r\n\t} );\r\n\r\n\tmaterial.uniforms[ \"tDiffuse\" ].value = renderTarget.texture;\r\n\tmaterial.uniforms[ \"color\" ].value = color;\r\n\tmaterial.uniforms[ \"textureMatrix\" ].value = textureMatrix;\r\n\r\n\tthis.material = material;\r\n\r\n\tthis.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\treflectorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\r\n\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\trotationMatrix.extractRotation( scope.matrixWorld );\r\n\r\n\t\tnormal.set( 0, 0, 1 );\r\n\t\tnormal.applyMatrix4( rotationMatrix );\r\n\r\n\t\tview.subVectors( reflectorWorldPosition, cameraWorldPosition );\r\n\r\n\t\t// Avoid rendering when reflector is facing away\r\n\r\n\t\tif ( view.dot( normal ) > 0 ) return;\r\n\r\n\t\tview.reflect( normal ).negate();\r\n\t\tview.add( reflectorWorldPosition );\r\n\r\n\t\trotationMatrix.extractRotation( camera.matrixWorld );\r\n\r\n\t\tlookAtPosition.set( 0, 0, - 1 );\r\n\t\tlookAtPosition.applyMatrix4( rotationMatrix );\r\n\t\tlookAtPosition.add( cameraWorldPosition );\r\n\r\n\t\ttarget.subVectors( reflectorWorldPosition, lookAtPosition );\r\n\t\ttarget.reflect( normal ).negate();\r\n\t\ttarget.add( reflectorWorldPosition );\r\n\r\n\t\tvirtualCamera.position.copy( view );\r\n\t\tvirtualCamera.up.set( 0, 1, 0 );\r\n\t\tvirtualCamera.up.applyMatrix4( rotationMatrix );\r\n\t\tvirtualCamera.up.reflect( normal );\r\n\t\tvirtualCamera.lookAt( target );\r\n\r\n\t\tvirtualCamera.far = camera.far; // Used in WebGLBackground\r\n\r\n\t\tvirtualCamera.updateMatrixWorld();\r\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t// Update the texture matrix\r\n\t\ttextureMatrix.set(\r\n\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t);\r\n\t\ttextureMatrix.multiply( virtualCamera.projectionMatrix );\r\n\t\ttextureMatrix.multiply( virtualCamera.matrixWorldInverse );\r\n\t\ttextureMatrix.multiply( scope.matrixWorld );\r\n\r\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n\t\treflectorPlane.setFromNormalAndCoplanarPoint( normal, reflectorWorldPosition );\r\n\t\treflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\r\n\r\n\t\tclipPlane.set( reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant );\r\n\r\n\t\tvar projectionMatrix = virtualCamera.projectionMatrix;\r\n\r\n\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n\t\tq.z = - 1.0;\r\n\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n\t\t// Calculate the scaled plane vector\r\n\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\r\n\r\n\t\t// Replacing the third row of the projection matrix\r\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\r\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\r\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\r\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\r\n\r\n\t\t// Render\r\n\r\n\t\trenderTarget.texture.encoding = renderer.outputEncoding;\r\n\r\n\t\tscope.visible = false;\r\n\r\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tvar currentXrEnabled = renderer.xr.enabled;\r\n\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\r\n\r\n\t\trenderer.xr.enabled = false; // Avoid camera modification\r\n\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\r\n\r\n\t\tif ( renderer.autoClear === false ) renderer.clear();\r\n\t\trenderer.render( scene, virtualCamera );\r\n\r\n\t\trenderer.xr.enabled = currentXrEnabled;\r\n\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t// Restore viewport\r\n\r\n\t\tvar viewport = camera.viewport;\r\n\r\n\t\tif ( viewport !== undefined ) {\r\n\r\n\t\t\trenderer.state.viewport( viewport );\r\n\r\n\t\t}\r\n\r\n\t\tscope.visible = true;\r\n\r\n\t};\r\n\r\n\tthis.getRenderTarget = function () {\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t};\r\n\r\n};\r\n\r\nReflector.prototype = Object.create( Mesh.prototype );\r\nReflector.prototype.constructor = Reflector;\r\n\r\nReflector.ReflectorShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'color': {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tDiffuse': {\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'textureMatrix': {\r\n\t\t\tvalue: null\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\t\t'uniform mat4 textureMatrix;',\r\n\t\t'varying vec4 vUv;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvUv = textureMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t'}'\r\n\t].join( '\\n' ),\r\n\r\n\tfragmentShader: [\r\n\t\t'uniform vec3 color;',\r\n\t\t'uniform sampler2D tDiffuse;',\r\n\t\t'varying vec4 vUv;',\r\n\r\n\t\t'float blendOverlay( float base, float blend ) {',\r\n\r\n\t\t'\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\r\n\r\n\t\t'}',\r\n\r\n\t\t'vec3 blendOverlay( vec3 base, vec3 blend ) {',\r\n\r\n\t\t'\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\r\n\r\n\t\t'}',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t'\tvec4 base = texture2DProj( tDiffuse, vUv );',\r\n\t\t'\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\r\n\r\n\t\t'}'\r\n\t].join( '\\n' )\r\n};\r\n\r\nexport { Reflector };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/Reflector.js","import { Reflector } from \"../objects/Reflector.js\";\r\n\r\nvar ReflectorRTT = function ( geometry, options ) {\r\n\r\n\tReflector.call( this, geometry, options );\r\n\r\n\tthis.geometry.setDrawRange( 0, 0 ); // avoid rendering geometry\r\n\r\n};\r\n\r\nReflectorRTT.prototype = Object.create( Reflector.prototype );\r\n\r\nexport { ReflectorRTT };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/objects/ReflectorRTT.js","<template>\r\n    <div class=\"webglMirrorNodes-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\"><a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - mirror node-based\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { ReflectorRTT } from '@/components/jsm/objects/ReflectorRTT.js'\r\nimport {\r\n        NodeFrame,\r\n        ExpressionNode,\r\n        PhongNodeMaterial,\r\n        MathNode,\r\n        OperatorNode,\r\n        TextureNode,\r\n        BlurNode,\r\n        FloatNode,\r\n        ReflectorNode,\r\n        SwitchNode,\r\n        NormalMapNode,\r\n    } from '@/components/jsm/nodes/Nodes.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            WIDTH: null,\r\n\t\t\tHEIGHT: null,\r\n\t\t\t// camera\r\n\t\t\tVIEW_ANGLE: 45,\r\n\t\t\tASPECT: null,\r\n\t\t\tNEAR: 1,\r\n\t\t\tFAR: 500,\r\n\t\t\tdecalNormal: null,\r\n\t\t\tdecalDiffuse: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tclock: null,\r\n\t\t\tcameraControls: null,\r\n\t\t\tgui: null,\r\n            sphereGroup: null,\r\n            smallSphere: null,\r\n\t\t\tgroundMirrorMaterial: null,\r\n\t\t\tframe: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.WIDTH = this.$webglInnerWidth\r\n        this.HEIGHT = window.innerHeight\r\n        this.ASPECT = this.WIDTH / this.HEIGHT\r\n        this.decalNormal = new this.$THREE.TextureLoader().load('static/textures/decal/decal-normal.jpg')\r\n        this.decalDiffuse = new this.$THREE.TextureLoader().load('static/textures/decal/decal-diffuse.png')\r\n        this.decalDiffuse.wrapS = this.decalDiffuse.wrapT = this.$THREE.RepeatWrapping\r\n        this.clock = new this.$THREE.Clock()\r\n        this.gui = new GUI()\r\n        this.frame = new NodeFrame()\r\n        this.init()\r\n        this.fillScene()\r\n        this.update()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            // renderer\r\n            this.renderer = new this.$THREE.WebGLRenderer()\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.WIDTH, this.HEIGHT)\r\n            // scene\r\n            this.scene = new this.$THREE.Scene()\r\n            // camera\r\n            this.camera = new this.$THREE.PerspectiveCamera(this.VIEW_ANGLE, this.ASPECT, this.NEAR, this.FAR)\r\n            this.camera.position.set(0, 75, 160)\r\n            this.cameraControls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            this.cameraControls.target.set(0, 40, 0)\r\n            this.cameraControls.maxDistance = 400\r\n            this.cameraControls.minDistance = 10\r\n            this.cameraControls.update()\r\n            var container = document.getElementById('container')\r\n            container.appendChild(this.renderer.domElement)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        fillScene() {\r\n            var planeGeo = new this.$THREE.PlaneBufferGeometry(100.1, 100.1)\r\n            var geometry, material\r\n            // reflector/mirror plane\r\n            geometry = new this.$THREE.PlaneBufferGeometry(100, 100)\r\n            var groundMirror = new ReflectorRTT(geometry, { clipBias: 0.003, textureWidth: this.WIDTH, textureHeight: this.HEIGHT })\r\n            var mask = new SwitchNode(new TextureNode(this.decalDiffuse), 'w')\r\n            var mirror = new ReflectorNode(groundMirror)\r\n            var normalMap = new TextureNode(this.decalNormal)\r\n            var normalXY = new SwitchNode(normalMap, 'xy')\r\n            var normalXYFlip = new MathNode(\r\n                normalXY,\r\n                MathNode.INVERT\r\n            )\r\n            var offsetNormal = new OperatorNode(\r\n                normalXYFlip,\r\n                new FloatNode(.5),\r\n                OperatorNode.SUB\r\n            )\r\n            mirror.offset = new OperatorNode(\r\n                offsetNormal, // normal\r\n                new FloatNode(6), // scale\r\n                OperatorNode.MUL\r\n            )\r\n            var blurMirror = new BlurNode(mirror)\r\n            blurMirror.size = new this.$THREE.Vector2(this.WIDTH, this.HEIGHT)\r\n            blurMirror.uv = new ExpressionNode(\"projCoord.xyz / projCoord.q\", \"vec3\")\r\n            blurMirror.uv.keywords[ \"projCoord\" ] = new OperatorNode(mirror.offset, mirror.uv, OperatorNode.ADD)\r\n            blurMirror.radius.x = blurMirror.radius.y = 0\r\n            this.gui.add({ blur: blurMirror.radius.x }, \"blur\", 0, 25).onChange((v) => {\r\n                blurMirror.radius.x = blurMirror.radius.y = v\r\n            })\r\n            this.groundMirrorMaterial = new PhongNodeMaterial()\r\n            this.groundMirrorMaterial.environment = blurMirror // or add \"mirror\" variable to disable blur\r\n            this.groundMirrorMaterial.environmentAlpha = mask\r\n            this.groundMirrorMaterial.normal = new NormalMapNode(normalMap)\r\n            //this.groundMirrorMaterial.normalScale = new FloatNode(1)\r\n            // test serialization\r\n            /*\r\n                    var library = {}\r\n                    library[ groundMirror.uuid ] = groundMirror\r\n                    library[ decalDiffuse.uuid ] = decalDiffuse\r\n                    library[ decalNormal.uuid ] = decalNormal\r\n                    library[ mirror.textureMatrix.uuid ] = mirror.textureMatrix // use textureMatrix to projection\r\n\r\n                    var json = this.groundMirrorMaterial.toJSON()\r\n\r\n                    this.groundMirrorMaterial = new NodeMaterialLoader(null, library).parse(json)\r\n                */\r\n            //--\r\n            var mirrorMesh = new this.$THREE.Mesh(planeGeo, this.groundMirrorMaterial)\r\n            // add all alternative mirror materials inside the ReflectorRTT to prevent:\r\n            // glDrawElements: Source and destination textures of the draw are the same.\r\n            groundMirror.add(mirrorMesh)\r\n            groundMirror.rotateX(- Math.PI / 2)\r\n            this.scene.add(groundMirror)\r\n            this.sphereGroup = new this.$THREE.Object3D()\r\n            this.scene.add(this.sphereGroup)\r\n            geometry = new this.$THREE.CylinderBufferGeometry(0.1, 15 * Math.cos(Math.PI / 180 * 30), 0.1, 24, 1)\r\n            material = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, emissive: 0x444444 })\r\n            var sphereCap = new this.$THREE.Mesh(geometry, material)\r\n            sphereCap.position.y = - 15 * Math.sin(Math.PI / 180 * 30) - 0.05\r\n            sphereCap.rotateX(- Math.PI)\r\n            geometry = new this.$THREE.SphereBufferGeometry(15, 24, 24, Math.PI / 2, Math.PI * 2, 0, Math.PI / 180 * 120)\r\n            var halfSphere = new this.$THREE.Mesh(geometry, material)\r\n            halfSphere.add(sphereCap)\r\n            halfSphere.rotateX(- Math.PI / 180 * 135)\r\n            halfSphere.rotateZ(- Math.PI / 180 * 20)\r\n            halfSphere.position.y = 7.5 + 15 * Math.sin(Math.PI / 180 * 30)\r\n            this.sphereGroup.add(halfSphere)\r\n            geometry = new this.$THREE.IcosahedronBufferGeometry(5, 0)\r\n            material = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, emissive: 0x333333, flatShading: true })\r\n            this.smallSphere = new this.$THREE.Mesh(geometry, material)\r\n            this.scene.add(this.smallSphere)\r\n            // walls\r\n            var planeTop = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0xffffff }))\r\n            planeTop.position.y = 100\r\n            planeTop.rotateX(Math.PI / 2)\r\n            this.scene.add(planeTop)\r\n            var planeBack = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0xffffff }))\r\n            planeBack.position.z = - 50\r\n            planeBack.position.y = 50\r\n            this.scene.add(planeBack)\r\n            var planeFront = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0x7f7fff }))\r\n            planeFront.position.z = 50\r\n            planeFront.position.y = 50\r\n            planeFront.rotateY(Math.PI)\r\n            this.scene.add(planeFront)\r\n            var planeRight = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0x00ff00 }))\r\n            planeRight.position.x = 50\r\n            planeRight.position.y = 50\r\n            planeRight.rotateY(- Math.PI / 2)\r\n            this.scene.add(planeRight)\r\n            var planeLeft = new this.$THREE.Mesh(planeGeo, new this.$THREE.MeshPhongMaterial({ color: 0xff0000 }))\r\n            planeLeft.position.x = - 50\r\n            planeLeft.position.y = 50\r\n            planeLeft.rotateY(Math.PI / 2)\r\n            this.scene.add(planeLeft)\r\n            // lights\r\n            var mainLight = new this.$THREE.PointLight(0xcccccc, 1.5, 250)\r\n            mainLight.position.y = 60\r\n            this.scene.add(mainLight)\r\n            var greenLight = new this.$THREE.PointLight(0x00ff00, 0.25, 1000)\r\n            greenLight.position.set(550, 50, 0)\r\n            this.scene.add(greenLight)\r\n            var redLight = new this.$THREE.PointLight(0xff0000, 0.25, 1000)\r\n            redLight.position.set(- 550, 50, 0)\r\n            this.scene.add(redLight)\r\n            var blueLight = new this.$THREE.PointLight(0x7f7fff, 0.25, 1000)\r\n            blueLight.position.set(0, 50, 550)\r\n            this.scene.add(blueLight)\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        },\r\n        update() {\r\n            requestAnimationFrame(this.update)\r\n            var delta = this.clock.getDelta()\r\n            var timer = Date.now() * 0.01\r\n            this.sphereGroup.rotation.y -= 0.002\r\n            this.smallSphere.position.set(\r\n                Math.cos(timer * 0.1) * 30,\r\n                Math.abs(Math.cos(timer * 0.2)) * 20 + 5,\r\n                Math.sin(timer * 0.1) * 30\r\n            )\r\n            this.smallSphere.rotation.y = (Math.PI / 2) - timer * 0.1\r\n            this.smallSphere.rotation.z = timer * 0.8\r\n            this.frame.update(delta).updateNode(this.groundMirrorMaterial)\r\n            this.render()\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglMirrorNodes-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    color: #444;\r\n}\r\n#info a {\r\n    color: #08f;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/mirror/webglMirrorNodes.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglMirrorNodes-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - mirror node-based\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0d6ad06f\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/mirror/webglMirrorNodes.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0d6ad06f\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglMirrorNodes.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMirrorNodes.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglMirrorNodes.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0d6ad06f\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglMirrorNodes.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0d6ad06f\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/mirror/webglMirrorNodes.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}