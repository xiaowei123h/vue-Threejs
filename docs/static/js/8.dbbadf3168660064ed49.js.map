{"version":3,"sources":["webpack:///src/views/loader/webglLoaderTextureHdr.vue","webpack:///./src/views/loader/webglLoaderTextureHdr.vue?fe61","webpack:///./src/views/loader/webglLoaderTextureHdr.vue","webpack:///./src/components/jsm/loaders/RGBELoader.js"],"names":["webglLoaderTextureHdr","data","params","exposure","renderer","scene","camera","gui","mounted","this","init","beforeDestroy","hide","methods","_this","$THREE","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","document","getElementsByClassName","appendChild","domElement","toneMapping","ReinhardToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","Scene","aspect","OrthographicCamera","RGBELoader","setDataType","UnsignedByteType","load","texture","textureData","material","MeshBasicMaterial","map","quad","PlaneBufferGeometry","width","height","mesh","Mesh","add","render","dat_gui_module","onChange","open","addEventListener","onWindowResize","innerWidth","frustumHeight","top","bottom","left","right","updateProjectionMatrix","loader_webglLoaderTextureHdr","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","manager","DataTextureLoader","call","type","prototype","Object","assign","create","constructor","parse","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBHalf","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","DataUtils","toHalfFloat","byteArray","Uint8Array","rgbe_header_info","line","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","set","RGBE_ReadPixels_RLE","RGBEFormat","FloatType","numElements","floatArray","Float32Array","j","RGBFormat","HalfFloatType","halfArray","value","url","onLoad","onProgress","onError","texData","encoding","RGBEEncoding","minFilter","NearestFilter","magFilter","generateMipmaps","flipY","LinearEncoding","LinearFilter"],"mappings":"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","file":"static/js/8.dbbadf3168660064ed49.js","sourcesContent":["<template>\r\n    <div class=\"webglLoaderTextureHdr-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - webgl HDR (RGBE) texture loader example<br/>\r\n\t\t\tImage courtesy of <a href=\"http://www.pauldebevec.com/Research/HDR/\" target=\"_blank\" rel=\"noopener\">Paul Debevec</a>.\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js';\r\nimport { RGBELoader } from '@/components/jsm/loaders/RGBELoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            params: {\r\n\t\t\t\texposure: 2.0\r\n\t\t\t},\r\n            renderer: null,\r\n            scene: null,\r\n            camera: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.hide()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer();\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight);\r\n            document.getElementsByClassName('webglLoaderTextureHdr-container')[0].appendChild(this.renderer.domElement);\r\n            this.renderer.toneMapping = this.$THREE.ReinhardToneMapping;\r\n            this.renderer.toneMappingExposure = this.params.exposure;\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding;\r\n            this.scene = new this.$THREE.Scene();\r\n            var aspect = this.$webglInnerWidth / window.innerHeight;\r\n            this.camera = new this.$THREE.OrthographicCamera(- aspect, aspect, 1, - 1, 0, 1);\r\n            new RGBELoader()\r\n                .setDataType(this.$THREE.UnsignedByteType) // alt: FloatType, HalfFloatType\r\n                .load('static/textures/memorial.hdr', (texture, textureData) => {\r\n                    //console.log(textureData);\r\n                    //console.log(texture);\r\n                    var material = new this.$THREE.MeshBasicMaterial({ map: texture });\r\n                    var quad = new this.$THREE.PlaneBufferGeometry(1.5 * textureData.width / textureData.height, 1.5);\r\n                    var mesh = new this.$THREE.Mesh(quad, material);\r\n                    this.scene.add(mesh);\r\n                    this.render();\r\n                });\r\n            //\r\n            this.gui = new GUI();\r\n            this.gui.add(this.params, 'exposure', 0, 4, 0.01).onChange(this.render);\r\n            this.gui.open();\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false);\r\n        },\r\n        onWindowResize() {\r\n            var aspect = window.innerWidth - 281 / window.innerHeight;\r\n            var frustumHeight = this.camera.top - this.camera.bottom;\r\n            this.camera.left = - frustumHeight * aspect / 2;\r\n            this.camera.right = frustumHeight * aspect / 2;\r\n            this.camera.updateProjectionMatrix();\r\n            this.renderer.setSize(window.innerWidth - 281, window.innerHeight);\r\n            this.render();\r\n        },\r\n        render() {\r\n            this.renderer.toneMappingExposure = this.params.exposure;\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderTextureHdr-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderTextureHdr.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderTextureHdr-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - webgl HDR (RGBE) texture loader example\"),_c('br'),_vm._v(\"\\n\\t\\t\\tImage courtesy of \"),_c('a',{attrs:{\"href\":\"http://www.pauldebevec.com/Research/HDR/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Paul Debevec\")]),_vm._v(\".\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6d66af58\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderTextureHdr.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6d66af58\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderTextureHdr.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderTextureHdr.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderTextureHdr.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6d66af58\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderTextureHdr.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6d66af58\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderTextureHdr.vue\n// module id = null\n// module chunks = ","import {\r\n\tDataTextureLoader,\r\n\tDataUtils,\r\n\tFloatType,\r\n\tHalfFloatType,\r\n\tLinearEncoding,\r\n\tLinearFilter,\r\n\tNearestFilter,\r\n\tRGBEEncoding,\r\n\tRGBEFormat,\r\n\tRGBFormat,\r\n\tUnsignedByteType\r\n} from \"@/components/build/three.module.js\";\r\n\r\n// https://github.com/mrdoob/three.js/issues/5552\r\n// http://en.wikipedia.org/wiki/RGBE_image_format\r\n\r\nvar RGBELoader = function ( manager ) {\r\n\r\n\tDataTextureLoader.call( this, manager );\r\n\r\n\tthis.type = UnsignedByteType;\r\n\r\n};\r\n\r\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\r\n\r\n\tconstructor: RGBELoader,\r\n\r\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\r\n\r\n\tparse: function ( buffer ) {\r\n\r\n\t\tvar\r\n\t\t\t/* return codes for rgbe routines */\r\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\r\n\t\t\tRGBE_RETURN_FAILURE = - 1,\r\n\r\n\t\t\t/* default error routine.  change this to change error handling */\r\n\t\t\trgbe_read_error = 1,\r\n\t\t\trgbe_write_error = 2,\r\n\t\t\trgbe_format_error = 3,\r\n\t\t\trgbe_memory_error = 4,\r\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\r\n\r\n\t\t\t\tswitch ( rgbe_error_code ) {\r\n\r\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn RGBE_RETURN_FAILURE;\r\n\r\n\t\t\t},\r\n\r\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\r\n\t\t\t//RGBE_DATA_RED = 0,\r\n\t\t\t//RGBE_DATA_GREEN = 1,\r\n\t\t\t//RGBE_DATA_BLUE = 2,\r\n\r\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\r\n\t\t\t//RGBE_DATA_SIZE = 4,\r\n\r\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\r\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\r\n\t\t\tRGBE_VALID_FORMAT = 2,\r\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\r\n\r\n\t\t\tNEWLINE = \"\\n\",\r\n\r\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\r\n\r\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\r\n\t\t\t\tvar p = buffer.pos,\r\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\r\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\r\n\t\t\t\t;\r\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\r\n\r\n\t\t\t\t\ts += chunk; len += chunk.length;\r\n\t\t\t\t\tp += chunkSize;\r\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( - 1 < i ) {\r\n\r\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\r\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\r\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\r\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\r\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\r\n\t\t\t\t\treturn s + chunk.slice( 0, i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\r\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\r\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\r\n\r\n\t\t\t\tvar line, match,\r\n\r\n\t\t\t\t\t// regexes to parse header info fields\r\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\r\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\r\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\r\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\r\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\r\n\r\n\t\t\t\t\t// RGBE format header struct\r\n\t\t\t\t\theader = {\r\n\r\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\r\n\r\n\t\t\t\t\t\tstring: '', /* the actual header string */\r\n\r\n\t\t\t\t\t\tcomments: '', /* comments found in header */\r\n\r\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\r\n\r\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\r\n\r\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\r\n\r\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\r\n\r\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\r\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\r\n\t\t\t\theader.programtype = match[ 1 ];\r\n\t\t\t\theader.string += line + \"\\n\";\r\n\r\n\t\t\t\twhile ( true ) {\r\n\r\n\t\t\t\t\tline = fgets( buffer );\r\n\t\t\t\t\tif ( false === line ) break;\r\n\t\t\t\t\theader.string += line + \"\\n\";\r\n\r\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\r\n\r\n\t\t\t\t\t\theader.comments += line + \"\\n\";\r\n\t\t\t\t\t\tcontinue; // comment line\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\r\n\r\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\r\n\r\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\r\n\r\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\r\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\r\n\r\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\r\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\r\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn header;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\r\n\r\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\r\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\r\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\r\n\t\t\t\t;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t// run length encoding is not allowed so read flat\r\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\r\n\t\t\t\t\t// this file is not run length encoded\r\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\t// return the flat buffer\r\n\t\t\t\t\treturn new Uint8Array( buffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\r\n\r\n\t\t\t\tif ( ! data_rgba.length ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\r\n\t\t\t\trgbeStart = new Uint8Array( 4 );\r\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\r\n\r\n\t\t\t\t// read in each successive scanline\r\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\r\n\r\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\r\n\r\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\r\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\r\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\r\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\r\n\r\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\r\n\r\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\r\n\t\t\t\t\t// first red, then green, then blue, then exponent\r\n\t\t\t\t\tptr = 0;\r\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\r\n\r\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\r\n\t\t\t\t\t\tisEncodedRun = count > 128;\r\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\r\n\r\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\r\n\r\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( isEncodedRun ) {\r\n\r\n\t\t\t\t\t\t\t// a (encoded) run of the same value\r\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\r\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//ptr += count;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// a literal-run\r\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\r\n\t\t\t\t\t\t\tptr += count; pos += count;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// now convert data from buffer into rgba\r\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\r\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\r\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\toff = 0;\r\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toff += scanline_width; //1;\r\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toff += scanline_width; //1;\r\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toff += scanline_width; //1;\r\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnum_scanlines --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data_rgba;\r\n\r\n\t\t\t};\r\n\r\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\r\n\r\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\r\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\r\n\r\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\r\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\r\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\r\n\r\n\t\t};\r\n\r\n\t\tvar RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\r\n\r\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\r\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\r\n\r\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 0 ] * scale );\r\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 1 ] * scale );\r\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 2 ] * scale );\r\n\r\n\t\t};\r\n\r\n\t\tvar byteArray = new Uint8Array( buffer );\r\n\t\tbyteArray.pos = 0;\r\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\r\n\r\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\r\n\r\n\t\t\tvar w = rgbe_header_info.width,\r\n\t\t\t\th = rgbe_header_info.height,\r\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\r\n\r\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\r\n\r\n\t\t\t\tswitch ( this.type ) {\r\n\r\n\t\t\t\t\tcase UnsignedByteType:\r\n\r\n\t\t\t\t\t\tvar data = image_rgba_data;\r\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\r\n\t\t\t\t\t\tvar type = UnsignedByteType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase FloatType:\r\n\r\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\r\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar data = floatArray;\r\n\t\t\t\t\t\tvar format = RGBFormat;\r\n\t\t\t\t\t\tvar type = FloatType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase HalfFloatType:\r\n\r\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\r\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar data = halfArray;\r\n\t\t\t\t\t\tvar format = RGBFormat;\r\n\t\t\t\t\t\tvar type = HalfFloatType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\twidth: w, height: h,\r\n\t\t\t\t\tdata: data,\r\n\t\t\t\t\theader: rgbe_header_info.string,\r\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\r\n\t\t\t\t\texposure: rgbe_header_info.exposure,\r\n\t\t\t\t\tformat: format,\r\n\t\t\t\t\ttype: type\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\tsetDataType: function ( value ) {\r\n\r\n\t\tthis.type = value;\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tfunction onLoadCallback( texture, texData ) {\r\n\r\n\t\t\tswitch ( texture.type ) {\r\n\r\n\t\t\t\tcase UnsignedByteType:\r\n\r\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\r\n\t\t\t\t\ttexture.minFilter = NearestFilter;\r\n\t\t\t\t\ttexture.magFilter = NearestFilter;\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttexture.flipY = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase FloatType:\r\n\r\n\t\t\t\t\ttexture.encoding = LinearEncoding;\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttexture.flipY = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase HalfFloatType:\r\n\r\n\t\t\t\t\ttexture.encoding = LinearEncoding;\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttexture.flipY = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}\r\n\r\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { RGBELoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/RGBELoader.js"],"sourceRoot":""}