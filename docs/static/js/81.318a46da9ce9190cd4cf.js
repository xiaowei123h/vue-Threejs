webpackJsonp([81],{Vv46:function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=i("wIBv"),r=i("xTnh"),o=i("QEtz"),a=i("DqHV"),s={data:function(){return{renderer:null,scene:null,camera:null,mesh:null,gui:null}},mounted:function(){!1===a.a.isWebGL2Available()&&document.getElementsByClassName("webgl2VolumePerlin-container")[0].appendChild(a.a.getWebGL2ErrorMessage()),this.init(),this.animate()},beforeDestroy:function(){this.fui.destroy()},methods:{init:function(){this.renderer=new this.$THREE.WebGLRenderer,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),document.getElementsByClassName("webgl2VolumePerlin-container")[0].appendChild(this.renderer.domElement),this.scene=new this.$THREE.Scene,this.camera=new this.$THREE.PerspectiveCamera(60,this.$webglInnerWidth/window.innerHeight,.1,100),this.camera.position.set(0,0,2),new t.b(this.camera,this.renderer.domElement);for(var e=new Uint8Array(2097152),n=0,i=new r.a,a=new this.$THREE.Vector3,s=0;s<128;s++)for(var c=0;c<128;c++)for(var m=0;m<128;m++){a.set(m,c,s).divideScalar(128);var l=i.noise(6.5*a.x,6.5*a.y,6.5*a.z);e[n++]=128*l+128}var d=new this.$THREE.DataTexture3D(e,128,128,128);d.format=this.$THREE.RedFormat,d.minFilter=this.$THREE.LinearFilter,d.magFilter=this.$THREE.LinearFilter,d.unpackAlignment=1;var v=new this.$THREE.BoxBufferGeometry(1,1,1),h=new this.$THREE.RawShaderMaterial({glslVersion:this.$THREE.GLSL3,uniforms:{map:{value:d},cameraPos:{value:new this.$THREE.Vector3},threshold:{value:.6},steps:{value:200}},vertexShader:"\n                in vec3 position;\n                uniform mat4 modelMatrix;\n                uniform mat4 modelViewMatrix;\n                uniform mat4 projectionMatrix;\n                uniform vec3 cameraPos;\n                out vec3 vOrigin;\n                out vec3 vDirection;\n                void main() {\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n                    vOrigin = vec3(inverse(modelMatrix) * vec4(cameraPos, 1.0)).xyz;\n                    vDirection = position - vOrigin;\n                    gl_Position = projectionMatrix * mvPosition;\n                }\n            ",fragmentShader:"\n                precision highp float;\n                precision highp sampler3D;\n                uniform mat4 modelViewMatrix;\n                uniform mat4 projectionMatrix;\n                in vec3 vOrigin;\n                in vec3 vDirection;\n                out vec4 color;\n                uniform sampler3D map;\n                uniform float threshold;\n                uniform float steps;\n                vec2 hitBox(vec3 orig, vec3 dir) {\n                    const vec3 box_min = vec3(- 0.5);\n                    const vec3 box_max = vec3(0.5);\n                    vec3 inv_dir = 1.0 / dir;\n                    vec3 tmin_tmp = (box_min - orig) * inv_dir;\n                    vec3 tmax_tmp = (box_max - orig) * inv_dir;\n                    vec3 tmin = min(tmin_tmp, tmax_tmp);\n                    vec3 tmax = max(tmin_tmp, tmax_tmp);\n                    float t0 = max(tmin.x, max(tmin.y, tmin.z));\n                    float t1 = min(tmax.x, min(tmax.y, tmax.z));\n                    return vec2(t0, t1);\n                }\n                float sample1(vec3 p) {\n                    return texture(map, p).r;\n                }\n                #define epsilon .0001\n                vec3 normal(vec3 coord) {\n                    if (coord.x < epsilon) return vec3(1.0, 0.0, 0.0);\n                    if (coord.y < epsilon) return vec3(0.0, 1.0, 0.0);\n                    if (coord.z < epsilon) return vec3(0.0, 0.0, 1.0);\n                    if (coord.x > 1.0 - epsilon) return vec3(- 1.0, 0.0, 0.0);\n                    if (coord.y > 1.0 - epsilon) return vec3(0.0, - 1.0, 0.0);\n                    if (coord.z > 1.0 - epsilon) return vec3(0.0, 0.0, - 1.0);\n                    float step = 0.01;\n                    float x = sample1(coord + vec3(- step, 0.0, 0.0)) - sample1(coord + vec3(step, 0.0, 0.0));\n                    float y = sample1(coord + vec3(0.0, - step, 0.0)) - sample1(coord + vec3(0.0, step, 0.0));\n                    float z = sample1(coord + vec3(0.0, 0.0, - step)) - sample1(coord + vec3(0.0, 0.0, step));\n                    return normalize(vec3(x, y, z));\n                }\n                void main(){\n                    vec3 rayDir = normalize(vDirection);\n                    vec2 bounds = hitBox(vOrigin, rayDir);\n                    if (bounds.x > bounds.y) discard;\n                    bounds.x = max(bounds.x, 0.0);\n                    vec3 p = vOrigin + bounds.x * rayDir;\n                    vec3 inc = 1.0 / abs(rayDir);\n                    float delta = min(inc.x, min(inc.y, inc.z));\n                    delta /= steps;\n                    for (float t = bounds.x; t < bounds.y; t += delta) {\n                        float d = sample1(p + 0.5);\n                        if (d > threshold) {\n                            color.rgb = normal(p + 0.5) * 0.5 + (p * 1.5 + 0.25);\n                            color.a = 1.;\n                            break;\n                        }\n                        p += rayDir * delta;\n                    }\n                    if (color.a == 0.0) discard;\n                }\n            ",side:this.$THREE.BackSide});this.mesh=new this.$THREE.Mesh(v,h),this.scene.add(this.mesh);var u={threshold:.6,steps:200};function p(){h.uniforms.threshold.value=u.threshold,h.uniforms.steps.value=u.steps}this.gui=new o.a,this.gui.add(u,"threshold",0,1,.01).onChange(p),this.gui.add(u,"steps",0,300,1).onChange(p),window.addEventListener("resize",this.onWindowResize,!1)},onWindowResize:function(){this.$onWindowResize(this.camera,this.renderer)},animate:function(){requestAnimationFrame(this.animate),this.mesh.material.uniforms.cameraPos.value.copy(this.camera.position),this.renderer.render(this.scene,this.camera)}}},c={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"webgl2VolumePerlin-container"},[n("div",{attrs:{id:"info"}},[n("a",{attrs:{href:"https://threejs.org",target:"_blank",rel:"noopener"}},[this._v("three.js")]),this._v(" webgl2 - volume\n\t\t")])])}]};var m=i("VU/8")(s,c,!1,function(e){i("xb1H")},"data-v-e8b6ff1a",null);n.default=m.exports},xb1H:function(e,n){}});
//# sourceMappingURL=81.318a46da9ce9190cd4cf.js.map