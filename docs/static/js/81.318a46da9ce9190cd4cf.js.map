{"version":3,"sources":["webpack:///src/views/volume/webgl2VolumePerlin.vue","webpack:///./src/views/volume/webgl2VolumePerlin.vue?7384","webpack:///./src/views/volume/webgl2VolumePerlin.vue"],"names":["webgl2VolumePerlin","data","renderer","scene","camera","mesh","gui","mounted","WebGL","isWebGL2Available","document","getElementsByClassName","appendChild","getWebGL2ErrorMessage","this","init","animate","beforeDestroy","fui","destroy","methods","$THREE","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","$webglInnerWidth","innerHeight","domElement","Scene","PerspectiveCamera","position","set","OrbitControls","Uint8Array","size","i","perlin","ImprovedNoise","vector","Vector3","z","y","x","divideScalar","d","noise","texture","DataTexture3D","format","RedFormat","minFilter","LinearFilter","magFilter","unpackAlignment","geometry","BoxBufferGeometry","material","RawShaderMaterial","glslVersion","GLSL3","uniforms","map","value","cameraPos","threshold","steps","vertexShader","fragmentShader","side","BackSide","Mesh","add","parameters","update","dat_gui_module","onChange","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","copy","render","volume_webgl2VolumePerlin","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"0JAaAA,GACAC,KADA,WAEA,OACAC,SAAA,KACAC,MAAA,KACAC,OAAA,KACAC,KAAA,KACAC,IAAA,OAGAC,QAVA,YAWA,IAAAC,EAAA,EAAAC,qBACAC,SAAAC,uBAAA,mCAAAC,YAAAJ,EAAA,EAAAK,yBAEAC,KAAAC,OACAD,KAAAE,WAEAC,cAjBA,WAkBAH,KAAAI,IAAAC,WAEAC,SACAL,KADA,WAEAD,KAAAZ,SAAA,IAAAY,KAAAO,OAAAC,cACAR,KAAAZ,SAAAqB,cAAAC,OAAAC,kBACAX,KAAAZ,SAAAwB,QAAAZ,KAAAa,iBAAAH,OAAAI,aACAlB,SAAAC,uBAAA,mCAAAC,YAAAE,KAAAZ,SAAA2B,YACAf,KAAAX,MAAA,IAAAW,KAAAO,OAAAS,MACAhB,KAAAV,OAAA,IAAAU,KAAAO,OAAAU,kBAAA,GAAAjB,KAAAa,iBAAAH,OAAAI,YAAA,QACAd,KAAAV,OAAA4B,SAAAC,IAAA,OACA,IAAAC,EAAA,EAAApB,KAAAV,OAAAU,KAAAZ,SAAA2B,YAOA,IALA,IACA5B,EAAA,IAAAkC,WAAAC,SACAC,EAAA,EACAC,EAAA,IAAAC,EAAA,EACAC,EAAA,IAAA1B,KAAAO,OAAAoB,QACAC,EAAA,EAAAA,EALA,IAKAA,IACA,QAAAC,EAAA,EAAAA,EANA,IAMAA,IACA,QAAAC,EAAA,EAAAA,EAPA,IAOAA,IAAA,CACAJ,EAAAP,IAAAW,EAAAD,EAAAD,GAAAG,aARA,KASA,IAAAC,EAAAR,EAAAS,MAAA,IAAAP,EAAAI,EAAA,IAAAJ,EAAAG,EAAA,IAAAH,EAAAE,GACAzC,EAAAoC,KAAA,IAAAS,EAAA,IAIA,IAAAE,EAAA,IAAAlC,KAAAO,OAAA4B,cAAAhD,EAdA,aAeA+C,EAAAE,OAAApC,KAAAO,OAAA8B,UACAH,EAAAI,UAAAtC,KAAAO,OAAAgC,aACAL,EAAAM,UAAAxC,KAAAO,OAAAgC,aACAL,EAAAO,gBAAA,EAEA,IA4EAC,EAAA,IAAA1C,KAAAO,OAAAoC,kBAAA,OACAC,EAAA,IAAA5C,KAAAO,OAAAsC,mBACAC,YAAA9C,KAAAO,OAAAwC,MACAC,UACAC,KAAAC,MAAAhB,GACAiB,WAAAD,MAAA,IAAAlD,KAAAO,OAAAoB,SACAyB,WAAAF,MAAA,IACAG,OAAAH,MAAA,MAEAI,aArFA,8nBAsFAC,eAvEA,wjGAwEAC,KAAAxD,KAAAO,OAAAkD,WAEAzD,KAAAT,KAAA,IAAAS,KAAAO,OAAAmD,KAAAhB,EAAAE,GACA5C,KAAAX,MAAAsE,IAAA3D,KAAAT,MAEA,IAAAqE,GAAAR,UAAA,GAAAC,MAAA,KACA,SAAAQ,IACAjB,EAAAI,SAAAI,UAAAF,MAAAU,EAAAR,UACAR,EAAAI,SAAAK,MAAAH,MAAAU,EAAAP,MAEArD,KAAAR,IAAA,IAAAsE,EAAA,EACA9D,KAAAR,IAAAmE,IAAAC,EAAA,qBAAAG,SAAAF,GACA7D,KAAAR,IAAAmE,IAAAC,EAAA,iBAAAG,SAAAF,GACAnD,OAAAsD,iBAAA,SAAAhE,KAAAiE,gBAAA,IAEAA,eArIA,WAsIAjE,KAAAkE,gBAAAlE,KAAAV,OAAAU,KAAAZ,WAEAc,QAxIA,WAyIAiE,sBAAAnE,KAAAE,SACAF,KAAAT,KAAAqD,SAAAI,SAAAG,UAAAD,MAAAkB,KAAApE,KAAAV,OAAA4B,UACAlB,KAAAZ,SAAAiF,OAAArE,KAAAX,MAAAW,KAAAV,WCzKegF,GADED,OAFjB,WAA0BrE,KAAauE,eAAbvE,KAAuCwE,MAAAC,GAAwB,OAA/DzE,KAA+D0E,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAb5E,KAAauE,eAA0BE,EAAvCzE,KAAuCwE,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAiBI,YAAA,iCAA2CJ,EAAA,OAAYK,OAAOC,GAAA,UAAaN,EAAA,KAAUK,OAAOE,KAAA,sBAAAC,OAAA,SAAAC,IAAA,cAA5KlF,KAA6OmF,GAAA,cAA7OnF,KAA6OmF,GAAA,iCCEjR,IAcAC,EAdyBC,EAAQ,OAcjCC,CACEpG,EACAoF,GATF,EAVA,SAAAiB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/81.318a46da9ce9190cd4cf.js","sourcesContent":["<template>\r\n    <div class=\"webgl2VolumePerlin-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl2 - volume\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { ImprovedNoise } from '@/components/jsm/math/ImprovedNoise.js'\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { WEBGL } from '@/components/jsm/WebGL.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            renderer: null,\r\n            scene: null,\r\n            camera: null,\r\n            mesh: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        if (WEBGL.isWebGL2Available() === false) {\r\n            document.getElementsByClassName('webgl2VolumePerlin-container')[0].appendChild(WEBGL.getWebGL2ErrorMessage());\r\n        }\r\n        this.init();\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.fui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.renderer = new this.$THREE.WebGLRenderer();\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight);\r\n            document.getElementsByClassName('webgl2VolumePerlin-container')[0].appendChild(this.renderer.domElement);\r\n            this.scene = new this.$THREE.Scene();\r\n            this.camera = new this.$THREE.PerspectiveCamera(60, this.$webglInnerWidth / window.innerHeight, 0.1, 100);\r\n            this.camera.position.set(0, 0, 2);\r\n            new OrbitControls(this.camera, this.renderer.domElement);\r\n            // Texture\r\n            var size = 128;\r\n            var data = new Uint8Array(size * size * size);\r\n            var i = 0;\r\n            var perlin = new ImprovedNoise();\r\n            var vector = new this.$THREE.Vector3();\r\n            for (var z = 0; z < size; z ++) {\r\n                for (var y = 0; y < size; y ++) {\r\n                    for (var x = 0; x < size; x ++) {\r\n                        vector.set(x, y, z).divideScalar(size);\r\n                        var d = perlin.noise(vector.x * 6.5, vector.y * 6.5, vector.z * 6.5);\r\n                        data[ i ++ ] = d * 128 + 128;\r\n                    }\r\n                }\r\n            }\r\n            var texture = new this.$THREE.DataTexture3D(data, size, size, size);\r\n            texture.format = this.$THREE.RedFormat;\r\n            texture.minFilter = this.$THREE.LinearFilter;\r\n            texture.magFilter = this.$THREE.LinearFilter;\r\n            texture.unpackAlignment = 1;\r\n            // Material\r\n            var vertexShader = /* glsl */`\r\n                in vec3 position;\r\n                uniform mat4 modelMatrix;\r\n                uniform mat4 modelViewMatrix;\r\n                uniform mat4 projectionMatrix;\r\n                uniform vec3 cameraPos;\r\n                out vec3 vOrigin;\r\n                out vec3 vDirection;\r\n                void main() {\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    vOrigin = vec3(inverse(modelMatrix) * vec4(cameraPos, 1.0)).xyz;\r\n                    vDirection = position - vOrigin;\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `;\r\n            var fragmentShader = /* glsl */`\r\n                precision highp float;\r\n                precision highp sampler3D;\r\n                uniform mat4 modelViewMatrix;\r\n                uniform mat4 projectionMatrix;\r\n                in vec3 vOrigin;\r\n                in vec3 vDirection;\r\n                out vec4 color;\r\n                uniform sampler3D map;\r\n                uniform float threshold;\r\n                uniform float steps;\r\n                vec2 hitBox(vec3 orig, vec3 dir) {\r\n                    const vec3 box_min = vec3(- 0.5);\r\n                    const vec3 box_max = vec3(0.5);\r\n                    vec3 inv_dir = 1.0 / dir;\r\n                    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n                    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n                    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n                    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n                    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n                    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n                    return vec2(t0, t1);\r\n                }\r\n                float sample1(vec3 p) {\r\n                    return texture(map, p).r;\r\n                }\r\n                #define epsilon .0001\r\n                vec3 normal(vec3 coord) {\r\n                    if (coord.x < epsilon) return vec3(1.0, 0.0, 0.0);\r\n                    if (coord.y < epsilon) return vec3(0.0, 1.0, 0.0);\r\n                    if (coord.z < epsilon) return vec3(0.0, 0.0, 1.0);\r\n                    if (coord.x > 1.0 - epsilon) return vec3(- 1.0, 0.0, 0.0);\r\n                    if (coord.y > 1.0 - epsilon) return vec3(0.0, - 1.0, 0.0);\r\n                    if (coord.z > 1.0 - epsilon) return vec3(0.0, 0.0, - 1.0);\r\n                    float step = 0.01;\r\n                    float x = sample1(coord + vec3(- step, 0.0, 0.0)) - sample1(coord + vec3(step, 0.0, 0.0));\r\n                    float y = sample1(coord + vec3(0.0, - step, 0.0)) - sample1(coord + vec3(0.0, step, 0.0));\r\n                    float z = sample1(coord + vec3(0.0, 0.0, - step)) - sample1(coord + vec3(0.0, 0.0, step));\r\n                    return normalize(vec3(x, y, z));\r\n                }\r\n                void main(){\r\n                    vec3 rayDir = normalize(vDirection);\r\n                    vec2 bounds = hitBox(vOrigin, rayDir);\r\n                    if (bounds.x > bounds.y) discard;\r\n                    bounds.x = max(bounds.x, 0.0);\r\n                    vec3 p = vOrigin + bounds.x * rayDir;\r\n                    vec3 inc = 1.0 / abs(rayDir);\r\n                    float delta = min(inc.x, min(inc.y, inc.z));\r\n                    delta /= steps;\r\n                    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n                        float d = sample1(p + 0.5);\r\n                        if (d > threshold) {\r\n                            color.rgb = normal(p + 0.5) * 0.5 + (p * 1.5 + 0.25);\r\n                            color.a = 1.;\r\n                            break;\r\n                        }\r\n                        p += rayDir * delta;\r\n                    }\r\n                    if (color.a == 0.0) discard;\r\n                }\r\n            `;\r\n            var geometry = new this.$THREE.BoxBufferGeometry(1, 1, 1);\r\n            var material = new this.$THREE.RawShaderMaterial({\r\n                glslVersion: this.$THREE.GLSL3,\r\n                uniforms: {\r\n                    map: { value: texture },\r\n                    cameraPos: { value: new this.$THREE.Vector3() },\r\n                    threshold: { value: 0.6 },\r\n                    steps: { value: 200 }\r\n                },\r\n                vertexShader,\r\n                fragmentShader,\r\n                side: this.$THREE.BackSide,\r\n            });\r\n            this.mesh = new this.$THREE.Mesh(geometry, material);\r\n            this.scene.add(this.mesh);\r\n            //\r\n            var parameters = { threshold: 0.6, steps: 200 };\r\n            function update() {\r\n                material.uniforms.threshold.value = parameters.threshold;\r\n                material.uniforms.steps.value = parameters.steps;\r\n            }\r\n            this.gui = new GUI();\r\n            this.gui.add(parameters, 'threshold', 0, 1, 0.01).onChange(update);\r\n            this.gui.add(parameters, 'steps', 0, 300, 1).onChange(update);\r\n            window.addEventListener('resize', this.onWindowResize, false);\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate);\r\n            this.mesh.material.uniforms.cameraPos.value.copy(this.camera.position);\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webgl2VolumePerlin-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/volume/webgl2VolumePerlin.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webgl2VolumePerlin-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl2 - volume\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-e8b6ff1a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/volume/webgl2VolumePerlin.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-e8b6ff1a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webgl2VolumePerlin.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webgl2VolumePerlin.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webgl2VolumePerlin.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-e8b6ff1a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webgl2VolumePerlin.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-e8b6ff1a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/volume/webgl2VolumePerlin.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}