{"version":3,"sources":["webpack:///./src/components/jsm/shaders/SAOShader.js","webpack:///./src/components/jsm/shaders/DepthLimitedBlurShader.js","webpack:///./src/components/jsm/shaders/UnpackDepthRGBAShader.js","webpack:///./src/components/jsm/postprocessing/SAOPass.js","webpack:///src/views/postprocessing/webglPostprocessingSao.vue","webpack:///./src/views/postprocessing/webglPostprocessingSao.vue?9ece","webpack:///./src/views/postprocessing/webglPostprocessingSao.vue"],"names":["SAOShader","defines","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tDepth","value","tDiffuse","tNormal","size","Vector2","cameraNear","cameraFar","cameraProjectionMatrix","Matrix4","cameraInverseProjectionMatrix","scale","intensity","bias","minResolution","kernelRadius","randomSeed","vertexShader","join","fragmentShader","DepthLimitedBlurShader","KERNEL_RADIUS","sampleUvOffsets","sampleWeights","depthCutoff","BlurShaderUtils","createSampleWeights","stdDev","gaussian","x","Math","exp","sqrt","PI","weights","i","push","createSampleOffsets","uvIncrement","offsets","clone","multiplyScalar","configure","material","needsUpdate","UnpackDepthRGBAShader","opacity","SAOPass","scene","camera","depthTexture","useNormals","resolution","Pass","call","this","clear","needsSwap","supportsDepthTextureExtension","undefined","supportsNormalTexture","originalClearColor","Color","oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","y","saoRenderTarget","WebGLRenderTarget","minFilter","LinearFilter","magFilter","format","RGBAFormat","blurIntermediateRenderTarget","beautyRenderTarget","normalRenderTarget","NearestFilter","depthRenderTarget","DepthTexture","type","UnsignedShortType","maxFilter","depthBuffer","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","normalMaterial","MeshNormalMaterial","console","error","saoMaterial","ShaderMaterial","Object","assign","UniformsUtils","extensions","derivatives","isPerspectiveCamera","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","CopyShader","materialCopy","transparent","depthTest","depthWrite","CustomBlending","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","FullScreenQuad","OUTPUT","Beauty","Default","SAO","Depth","Normal","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","renderToScreen","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","floor","prevStdDev","prevNumSamples","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","overrideMaterial","setSize","width","height","webglPostprocessingSao","data","container","stats","composer","saoPass","group","gui","mounted","init","animate","beforeDestroy","destroy","methods","_this","document","createElement","getElementsByClassName","appendChild","$webglInnerWidth","window","innerHeight","devicePixelRatio","$THREE","WebGLRenderer","antialias","setPixelRatio","domElement","PerspectiveCamera","position","z","Scene","Object3D","add","light","PointLight","light2","light3","light4","AmbientLight","geometry","SphereBufferGeometry","MeshStandardMaterial","roughness","random","metalness","color","setHSL","mesh","Mesh","rotation","$Stats","dom","style","left","EffectComposer","RenderPass","addPass","SAOPass_SAOPass","dat_gui_module","Beauty+SAO","onChange","parseInt","addEventListener","onWindowResize","innerWidth","$onWindowResize","requestAnimationFrame","begin","end","timer","performance","now","postprocessing_webglPostprocessingSao","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/86.a3f71d3be082b9df7bdb.js","sourcesContent":["import {\r\n\tMatrix4,\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * TODO\r\n */\r\n\r\nvar SAOShader = {\r\n\tdefines: {\r\n\t\t\"NUM_SAMPLES\": 7,\r\n\t\t\"NUM_RINGS\": 4,\r\n\t\t\"NORMAL_TEXTURE\": 0,\r\n\t\t\"DIFFUSE_TEXTURE\": 0,\r\n\t\t\"DEPTH_PACKING\": 1,\r\n\t\t\"PERSPECTIVE_CAMERA\": 1\r\n\t},\r\n\tuniforms: {\r\n\r\n\t\t\"tDepth\": { value: null },\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"tNormal\": { value: null },\r\n\t\t\"size\": { value: new Vector2( 512, 512 ) },\r\n\r\n\t\t\"cameraNear\": { value: 1 },\r\n\t\t\"cameraFar\": { value: 100 },\r\n\t\t\"cameraProjectionMatrix\": { value: new Matrix4() },\r\n\t\t\"cameraInverseProjectionMatrix\": { value: new Matrix4() },\r\n\r\n\t\t\"scale\": { value: 1.0 },\r\n\t\t\"intensity\": { value: 0.1 },\r\n\t\t\"bias\": { value: 0.5 },\r\n\r\n\t\t\"minResolution\": { value: 0.0 },\r\n\t\t\"kernelRadius\": { value: 100.0 },\r\n\t\t\"randomSeed\": { value: 0.0 }\r\n\t},\r\n\tvertexShader: [\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\tfragmentShader: [\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#if DIFFUSE_TEXTURE == 1\",\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"#endif\",\r\n\r\n\t\t\"uniform sampler2D tDepth;\",\r\n\r\n\t\t\"#if NORMAL_TEXTURE == 1\",\r\n\t\t\"uniform sampler2D tNormal;\",\r\n\t\t\"#endif\",\r\n\r\n\t\t\"uniform float cameraNear;\",\r\n\t\t\"uniform float cameraFar;\",\r\n\t\t\"uniform mat4 cameraProjectionMatrix;\",\r\n\t\t\"uniform mat4 cameraInverseProjectionMatrix;\",\r\n\r\n\t\t\"uniform float scale;\",\r\n\t\t\"uniform float intensity;\",\r\n\t\t\"uniform float bias;\",\r\n\t\t\"uniform float kernelRadius;\",\r\n\t\t\"uniform float minResolution;\",\r\n\t\t\"uniform vec2 size;\",\r\n\t\t\"uniform float randomSeed;\",\r\n\r\n\t\t\"// RGBA depth\",\r\n\r\n\t\t\"#include <packing>\",\r\n\r\n\t\t\"vec4 getDefaultColor( const in vec2 screenPosition ) {\",\r\n\t\t\"\t#if DIFFUSE_TEXTURE == 1\",\r\n\t\t\"\treturn texture2D( tDiffuse, vUv );\",\r\n\t\t\"\t#else\",\r\n\t\t\"\treturn vec4( 1.0 );\",\r\n\t\t\"\t#endif\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float getDepth( const in vec2 screenPosition ) {\",\r\n\t\t\"\t#if DEPTH_PACKING == 1\",\r\n\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\r\n\t\t\"\t#else\",\r\n\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\r\n\t\t\"\t#endif\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float getViewZ( const in float depth ) {\",\r\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\r\n\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\r\n\t\t\"\t#else\",\r\n\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\r\n\t\t\"\t#endif\",\r\n\t\t\"}\",\r\n\r\n\t\t\"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\r\n\t\t\"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\r\n\t\t\"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\r\n\t\t\"\tclipPosition *= clipW; // unprojection.\",\r\n\r\n\t\t\"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\r\n\t\t\"}\",\r\n\r\n\t\t\"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\",\r\n\t\t\"\t#if NORMAL_TEXTURE == 1\",\r\n\t\t\"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\r\n\t\t\"\t#else\",\r\n\t\t\"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\",\r\n\t\t\"\t#endif\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float scaleDividedByCameraFar;\",\r\n\t\t\"float minResolutionMultipliedByCameraFar;\",\r\n\r\n\t\t\"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\",\r\n\t\t\"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\",\r\n\t\t\"\tfloat viewDistance = length( viewDelta );\",\r\n\t\t\"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\",\r\n\r\n\t\t\"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\",\r\n\t\t\"}\",\r\n\r\n\t\t\"// moving costly divides into consts\",\r\n\t\t\"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\",\r\n\t\t\"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\",\r\n\r\n\t\t\"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\",\r\n\t\t\"\t// precompute some variables require in getOcclusion.\",\r\n\t\t\"\tscaleDividedByCameraFar = scale / cameraFar;\",\r\n\t\t\"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\",\r\n\t\t\"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\",\r\n\r\n\t\t\"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\",\r\n\t\t\"\tfloat angle = rand( vUv + randomSeed ) * PI2;\",\r\n\t\t\"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\",\r\n\t\t\"\tvec2 radiusStep = radius;\",\r\n\r\n\t\t\"\tfloat occlusionSum = 0.0;\",\r\n\t\t\"\tfloat weightSum = 0.0;\",\r\n\r\n\t\t\"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\",\r\n\t\t\"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\",\r\n\t\t\"\t\tradius += radiusStep;\",\r\n\t\t\"\t\tangle += ANGLE_STEP;\",\r\n\r\n\t\t\"\t\tfloat sampleDepth = getDepth( sampleUv );\",\r\n\t\t\"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\",\r\n\t\t\"\t\t\tcontinue;\",\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\",\r\n\t\t\"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\",\r\n\t\t\"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\",\r\n\t\t\"\t\tweightSum += 1.0;\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tif( weightSum == 0.0 ) discard;\",\r\n\r\n\t\t\"\treturn occlusionSum * ( intensity / weightSum );\",\r\n\t\t\"}\",\r\n\r\n\r\n\t\t\"void main() {\",\r\n\t\t\"\tfloat centerDepth = getDepth( vUv );\",\r\n\t\t\"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\",\r\n\t\t\"\t\tdiscard;\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tfloat centerViewZ = getViewZ( centerDepth );\",\r\n\t\t\"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\",\r\n\r\n\t\t\"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\",\r\n\r\n\t\t\"\tgl_FragColor = getDefaultColor( vUv );\",\r\n\t\t\"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\n\r\nexport { SAOShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/SAOShader.js","import {\r\n\tVector2\r\n} from \"@/components/build/three.module.js\";\r\n\r\n/**\r\n * TODO\r\n */\r\n\r\nvar DepthLimitedBlurShader = {\r\n\tdefines: {\r\n\t\t\"KERNEL_RADIUS\": 4,\r\n\t\t\"DEPTH_PACKING\": 1,\r\n\t\t\"PERSPECTIVE_CAMERA\": 1\r\n\t},\r\n\tuniforms: {\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"size\": { value: new Vector2( 512, 512 ) },\r\n\t\t\"sampleUvOffsets\": { value: [ new Vector2( 0, 0 ) ] },\r\n\t\t\"sampleWeights\": { value: [ 1.0 ] },\r\n\t\t\"tDepth\": { value: null },\r\n\t\t\"cameraNear\": { value: 10 },\r\n\t\t\"cameraFar\": { value: 1000 },\r\n\t\t\"depthCutoff\": { value: 10 },\r\n\t},\r\n\tvertexShader: [\r\n\t\t\"#include <common>\",\r\n\r\n\t\t\"uniform vec2 size;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\t\t\"varying vec2 vInvSize;\",\r\n\r\n\t\t\"void main() {\",\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tvInvSize = 1.0 / size;\",\r\n\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\tfragmentShader: [\r\n\t\t\"#include <common>\",\r\n\t\t\"#include <packing>\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform sampler2D tDepth;\",\r\n\r\n\t\t\"uniform float cameraNear;\",\r\n\t\t\"uniform float cameraFar;\",\r\n\t\t\"uniform float depthCutoff;\",\r\n\r\n\t\t\"uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];\",\r\n\t\t\"uniform float sampleWeights[ KERNEL_RADIUS + 1 ];\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\t\t\"varying vec2 vInvSize;\",\r\n\r\n\t\t\"float getDepth( const in vec2 screenPosition ) {\",\r\n\t\t\"\t#if DEPTH_PACKING == 1\",\r\n\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\r\n\t\t\"\t#else\",\r\n\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\r\n\t\t\"\t#endif\",\r\n\t\t\"}\",\r\n\r\n\t\t\"float getViewZ( const in float depth ) {\",\r\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\r\n\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\r\n\t\t\"\t#else\",\r\n\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\r\n\t\t\"\t#endif\",\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\t\t\"\tfloat depth = getDepth( vUv );\",\r\n\t\t\"\tif( depth >= ( 1.0 - EPSILON ) ) {\",\r\n\t\t\"\t\tdiscard;\",\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tfloat centerViewZ = -getViewZ( depth );\",\r\n\t\t\"\tbool rBreak = false, lBreak = false;\",\r\n\r\n\t\t\"\tfloat weightSum = sampleWeights[0];\",\r\n\t\t\"\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;\",\r\n\r\n\t\t\"\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\",\r\n\r\n\t\t\"\t\tfloat sampleWeight = sampleWeights[i];\",\r\n\t\t\"\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;\",\r\n\r\n\t\t\"\t\tvec2 sampleUv = vUv + sampleUvOffset;\",\r\n\t\t\"\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );\",\r\n\r\n\t\t\"\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;\",\r\n\r\n\t\t\"\t\tif( ! rBreak ) {\",\r\n\t\t\"\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\",\r\n\t\t\"\t\t\tweightSum += sampleWeight;\",\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t\tsampleUv = vUv - sampleUvOffset;\",\r\n\t\t\"\t\tviewZ = -getViewZ( getDepth( sampleUv ) );\",\r\n\r\n\t\t\"\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;\",\r\n\r\n\t\t\"\t\tif( ! lBreak ) {\",\r\n\t\t\"\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\",\r\n\t\t\"\t\t\tweightSum += sampleWeight;\",\r\n\t\t\"\t\t}\",\r\n\r\n\t\t\"\t}\",\r\n\r\n\t\t\"\tgl_FragColor = diffuseSum / weightSum;\",\r\n\t\t\"}\"\r\n\t].join( \"\\n\" )\r\n};\r\n\r\nvar BlurShaderUtils = {\r\n\r\n\tcreateSampleWeights: function ( kernelRadius, stdDev ) {\r\n\r\n\t\tvar gaussian = function ( x, stdDev ) {\r\n\r\n\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * ( stdDev * stdDev ) ) ) / ( Math.sqrt( 2.0 * Math.PI ) * stdDev );\r\n\r\n\t\t};\r\n\r\n\t\tvar weights = [];\r\n\r\n\t\tfor ( var i = 0; i <= kernelRadius; i ++ ) {\r\n\r\n\t\t\tweights.push( gaussian( i, stdDev ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn weights;\r\n\r\n\t},\r\n\r\n\tcreateSampleOffsets: function ( kernelRadius, uvIncrement ) {\r\n\r\n\t\tvar offsets = [];\r\n\r\n\t\tfor ( var i = 0; i <= kernelRadius; i ++ ) {\r\n\r\n\t\t\toffsets.push( uvIncrement.clone().multiplyScalar( i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn offsets;\r\n\r\n\t},\r\n\r\n\tconfigure: function ( material, kernelRadius, stdDev, uvIncrement ) {\r\n\r\n\t\tmaterial.defines[ \"KERNEL_RADIUS\" ] = kernelRadius;\r\n\t\tmaterial.uniforms[ \"sampleUvOffsets\" ].value = BlurShaderUtils.createSampleOffsets( kernelRadius, uvIncrement );\r\n\t\tmaterial.uniforms[ \"sampleWeights\" ].value = BlurShaderUtils.createSampleWeights( kernelRadius, stdDev );\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { DepthLimitedBlurShader, BlurShaderUtils };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/DepthLimitedBlurShader.js","/**\r\n * Unpack RGBA depth shader\r\n * - show RGBA encoded depth as monochrome color\r\n */\r\n\r\nvar UnpackDepthRGBAShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"opacity\": { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tvUv = uv;\",\r\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float opacity;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#include <packing>\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\"\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );\",\r\n\t\t\"\tgl_FragColor = vec4( vec3( depth ), opacity );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport { UnpackDepthRGBAShader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/shaders/UnpackDepthRGBAShader.js","import {\r\n\tAddEquation,\r\n\tColor,\r\n\tCustomBlending,\r\n\tDepthTexture,\r\n\tDstAlphaFactor,\r\n\tDstColorFactor,\r\n\tLinearFilter,\r\n\tMeshDepthMaterial,\r\n\tMeshNormalMaterial,\r\n\tNearestFilter,\r\n\tNoBlending,\r\n\tRGBADepthPacking,\r\n\tRGBAFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tUnsignedShortType,\r\n\tVector2,\r\n\tWebGLRenderTarget,\r\n\tZeroFactor\r\n} from \"@/components/build/three.module.js\";\r\nimport { Pass } from \"../postprocessing/Pass.js\";\r\nimport { SAOShader } from \"../shaders/SAOShader.js\";\r\nimport { DepthLimitedBlurShader } from \"../shaders/DepthLimitedBlurShader.js\";\r\nimport { BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\r\nimport { CopyShader } from \"../shaders/CopyShader.js\";\r\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\r\n\r\n/**\r\n * SAO implementation inspired from bhouston previous SAO work\r\n */\r\n\r\nvar SAOPass = function ( scene, camera, depthTexture, useNormals, resolution ) {\r\n\r\n\tPass.call( this );\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.supportsDepthTextureExtension = ( depthTexture !== undefined ) ? depthTexture : false;\r\n\tthis.supportsNormalTexture = ( useNormals !== undefined ) ? useNormals : false;\r\n\r\n\tthis.originalClearColor = new Color();\r\n\tthis.oldClearColor = new Color();\r\n\tthis.oldClearAlpha = 1;\r\n\r\n\tthis.params = {\r\n\t\toutput: 0,\r\n\t\tsaoBias: 0.5,\r\n\t\tsaoIntensity: 0.18,\r\n\t\tsaoScale: 1,\r\n\t\tsaoKernelRadius: 100,\r\n\t\tsaoMinResolution: 0,\r\n\t\tsaoBlur: true,\r\n\t\tsaoBlurRadius: 8,\r\n\t\tsaoBlurStdDev: 4,\r\n\t\tsaoBlurDepthCutoff: 0.01\r\n\t};\r\n\r\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\tthis.saoRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\r\n\t\tminFilter: LinearFilter,\r\n\t\tmagFilter: LinearFilter,\r\n\t\tformat: RGBAFormat\r\n\t} );\r\n\tthis.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\r\n\tthis.beautyRenderTarget = this.saoRenderTarget.clone();\r\n\r\n\tthis.normalRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\r\n\t\tminFilter: NearestFilter,\r\n\t\tmagFilter: NearestFilter,\r\n\t\tformat: RGBAFormat\r\n\t} );\r\n\tthis.depthRenderTarget = this.normalRenderTarget.clone();\r\n\r\n\tif ( this.supportsDepthTextureExtension ) {\r\n\r\n\t\tvar depthTexture = new DepthTexture();\r\n\t\tdepthTexture.type = UnsignedShortType;\r\n\t\tdepthTexture.minFilter = NearestFilter;\r\n\t\tdepthTexture.maxFilter = NearestFilter;\r\n\r\n\t\tthis.beautyRenderTarget.depthTexture = depthTexture;\r\n\t\tthis.beautyRenderTarget.depthBuffer = true;\r\n\r\n\t}\r\n\r\n\tthis.depthMaterial = new MeshDepthMaterial();\r\n\tthis.depthMaterial.depthPacking = RGBADepthPacking;\r\n\tthis.depthMaterial.blending = NoBlending;\r\n\r\n\tthis.normalMaterial = new MeshNormalMaterial();\r\n\tthis.normalMaterial.blending = NoBlending;\r\n\r\n\tif ( SAOShader === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.SAOPass relies on SAOShader' );\r\n\r\n\t}\r\n\r\n\tthis.saoMaterial = new ShaderMaterial( {\r\n\t\tdefines: Object.assign( {}, SAOShader.defines ),\r\n\t\tfragmentShader: SAOShader.fragmentShader,\r\n\t\tvertexShader: SAOShader.vertexShader,\r\n\t\tuniforms: UniformsUtils.clone( SAOShader.uniforms )\r\n\t} );\r\n\tthis.saoMaterial.extensions.derivatives = true;\r\n\tthis.saoMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\r\n\tthis.saoMaterial.defines[ 'NORMAL_TEXTURE' ] = this.supportsNormalTexture ? 1 : 0;\r\n\tthis.saoMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n\tthis.saoMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\r\n\tthis.saoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\r\n\tthis.saoMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\r\n\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\r\n\tthis.saoMaterial.blending = NoBlending;\r\n\r\n\tif ( DepthLimitedBlurShader === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.SAOPass relies on DepthLimitedBlurShader' );\r\n\r\n\t}\r\n\r\n\tthis.vBlurMaterial = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\r\n\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\r\n\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\r\n\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\r\n\t} );\r\n\tthis.vBlurMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\r\n\tthis.vBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n\tthis.vBlurMaterial.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\r\n\tthis.vBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\r\n\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\r\n\tthis.vBlurMaterial.blending = NoBlending;\r\n\r\n\tthis.hBlurMaterial = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\r\n\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\r\n\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\r\n\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\r\n\t} );\r\n\tthis.hBlurMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\r\n\tthis.hBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n\tthis.hBlurMaterial.uniforms[ 'tDiffuse' ].value = this.blurIntermediateRenderTarget.texture;\r\n\tthis.hBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\r\n\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\r\n\tthis.hBlurMaterial.blending = NoBlending;\r\n\r\n\tif ( CopyShader === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.SAOPass relies on CopyShader' );\r\n\r\n\t}\r\n\r\n\tthis.materialCopy = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\r\n\t\tvertexShader: CopyShader.vertexShader,\r\n\t\tfragmentShader: CopyShader.fragmentShader,\r\n\t\tblending: NoBlending\r\n\t} );\r\n\tthis.materialCopy.transparent = true;\r\n\tthis.materialCopy.depthTest = false;\r\n\tthis.materialCopy.depthWrite = false;\r\n\tthis.materialCopy.blending = CustomBlending;\r\n\tthis.materialCopy.blendSrc = DstColorFactor;\r\n\tthis.materialCopy.blendDst = ZeroFactor;\r\n\tthis.materialCopy.blendEquation = AddEquation;\r\n\tthis.materialCopy.blendSrcAlpha = DstAlphaFactor;\r\n\tthis.materialCopy.blendDstAlpha = ZeroFactor;\r\n\tthis.materialCopy.blendEquationAlpha = AddEquation;\r\n\r\n\tif ( UnpackDepthRGBAShader === undefined ) {\r\n\r\n\t\tconsole.error( 'THREE.SAOPass relies on UnpackDepthRGBAShader' );\r\n\r\n\t}\r\n\r\n\tthis.depthCopy = new ShaderMaterial( {\r\n\t\tuniforms: UniformsUtils.clone( UnpackDepthRGBAShader.uniforms ),\r\n\t\tvertexShader: UnpackDepthRGBAShader.vertexShader,\r\n\t\tfragmentShader: UnpackDepthRGBAShader.fragmentShader,\r\n\t\tblending: NoBlending\r\n\t} );\r\n\r\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\r\n\r\n};\r\n\r\nSAOPass.OUTPUT = {\r\n\t'Beauty': 1,\r\n\t'Default': 0,\r\n\t'SAO': 2,\r\n\t'Depth': 3,\r\n\t'Normal': 4\r\n};\r\n\r\nSAOPass.prototype = Object.assign( Object.create( Pass.prototype ), {\r\n\tconstructor: SAOPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\r\n\r\n\t\t// Rendering readBuffer first when rendering to screen\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis.materialCopy.blending = NoBlending;\r\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\t\tthis.materialCopy.needsUpdate = true;\r\n\t\t\tthis.renderPass( renderer, this.materialCopy, null );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.params.output === 1 ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\r\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\tvar oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\trenderer.setRenderTarget( this.depthRenderTarget );\r\n\t\trenderer.clear();\r\n\r\n\t\tthis.saoMaterial.uniforms[ 'bias' ].value = this.params.saoBias;\r\n\t\tthis.saoMaterial.uniforms[ 'intensity' ].value = this.params.saoIntensity;\r\n\t\tthis.saoMaterial.uniforms[ 'scale' ].value = this.params.saoScale;\r\n\t\tthis.saoMaterial.uniforms[ 'kernelRadius' ].value = this.params.saoKernelRadius;\r\n\t\tthis.saoMaterial.uniforms[ 'minResolution' ].value = this.params.saoMinResolution;\r\n\t\tthis.saoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.saoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\t\t// this.saoMaterial.uniforms['randomSeed'].value = Math.random();\r\n\r\n\t\tvar depthCutoff = this.params.saoBlurDepthCutoff * ( this.camera.far - this.camera.near );\r\n\t\tthis.vBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\r\n\t\tthis.hBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\r\n\r\n\t\tthis.vBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.vBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\t\tthis.hBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.hBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\r\n\t\tthis.params.saoBlurRadius = Math.floor( this.params.saoBlurRadius );\r\n\t\tif ( ( this.prevStdDev !== this.params.saoBlurStdDev ) || ( this.prevNumSamples !== this.params.saoBlurRadius ) ) {\r\n\r\n\t\t\tBlurShaderUtils.configure( this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 0, 1 ) );\r\n\t\t\tBlurShaderUtils.configure( this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 1, 0 ) );\r\n\t\t\tthis.prevStdDev = this.params.saoBlurStdDev;\r\n\t\t\tthis.prevNumSamples = this.params.saoBlurRadius;\r\n\r\n\t\t}\r\n\r\n\t\t// Rendering scene to depth texture\r\n\t\trenderer.setClearColor( 0x000000 );\r\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\r\n\t\trenderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// Re-render scene if depth texture extension is not supported\r\n\t\tif ( ! this.supportsDepthTextureExtension ) {\r\n\r\n\t\t\t// Clear rule : far clipping plane in both RGBA and Basic encoding\r\n\t\t\tthis.renderOverride( renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.supportsNormalTexture ) {\r\n\r\n\t\t\t// Clear rule : default normal is facing the camera\r\n\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\r\n\r\n\t\t}\r\n\r\n\t\t// Rendering SAO texture\r\n\t\tthis.renderPass( renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\r\n\r\n\t\t// Blurring SAO texture\r\n\t\tif ( this.params.saoBlur ) {\r\n\r\n\t\t\tthis.renderPass( renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0 );\r\n\t\t\tthis.renderPass( renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvar outputMaterial = this.materialCopy;\r\n\t\t// Setting up SAO rendering\r\n\t\tif ( this.params.output === 3 ) {\r\n\r\n\t\t\tif ( this.supportsDepthTextureExtension ) {\r\n\r\n\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.depthTexture;\r\n\t\t\t\tthis.materialCopy.needsUpdate = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.depthCopy.uniforms[ 'tDiffuse' ].value = this.depthRenderTarget.texture;\r\n\t\t\t\tthis.depthCopy.needsUpdate = true;\r\n\t\t\t\toutputMaterial = this.depthCopy;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.params.output === 4 ) {\r\n\r\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\r\n\t\t\tthis.materialCopy.needsUpdate = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\r\n\t\t\tthis.materialCopy.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t// Blending depends on output, only want a CustomBlending when showing SAO\r\n\t\tif ( this.params.output === 0 ) {\r\n\r\n\t\t\toutputMaterial.blending = CustomBlending;\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutputMaterial.blending = NoBlending;\r\n\r\n\t\t}\r\n\r\n\t\t// Rendering SAOPass result on top of previous pass\r\n\t\tthis.renderPass( renderer, outputMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t},\r\n\r\n\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\t// save original state\r\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\r\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\r\n\t\tvar originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t// setup pass state\r\n\t\trenderer.autoClear = false;\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad.material = passMaterial;\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// restore original state\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t},\r\n\r\n\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\r\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\r\n\t\tvar originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\r\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = overrideMaterial;\r\n\t\trenderer.render( this.scene, this.camera );\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t\t// restore original state\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.beautyRenderTarget.setSize( width, height );\r\n\t\tthis.saoRenderTarget.setSize( width, height );\r\n\t\tthis.blurIntermediateRenderTarget.setSize( width, height );\r\n\t\tthis.normalRenderTarget.setSize( width, height );\r\n\t\tthis.depthRenderTarget.setSize( width, height );\r\n\r\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( width, height );\r\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\r\n\t\tthis.saoMaterial.needsUpdate = true;\r\n\r\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( width, height );\r\n\t\tthis.vBlurMaterial.needsUpdate = true;\r\n\r\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( width, height );\r\n\t\tthis.hBlurMaterial.needsUpdate = true;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { SAOPass };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/postprocessing/SAOPass.js","<template>\r\n    <div class=\"webglPostprocessingSao-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener noreferrer\">three.js</a> - Scalable Ambient Occlusion (SAO)<br/>\r\n\t\t\tshader by <a href=\"http://clara.io\">Ben Houston</a> / Post-processing pass by <a href=\"http://ludobaka.github.io\">Ludobaka</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GUI } from '@/components/jsm/libs/dat.gui.module.js'\r\nimport { EffectComposer } from '@/components/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from '@/components/jsm/postprocessing/RenderPass.js'\r\nimport { SAOPass } from '@/components/jsm/postprocessing/SAOPass.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n            composer: null,\r\n            renderPass: null,\r\n            saoPass: null,\r\n            group: null,\r\n            gui: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.animate()\r\n    },\r\n    beforeDestroy() {\r\n        this.gui.destroy()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.createElement('div')\r\n            document.getElementsByClassName('webglPostprocessingSao-container')[0].appendChild(this.container)\r\n            var width = this.$webglInnerWidth || 1\r\n            var height = window.innerHeight || 1\r\n            var devicePixelRatio = window.devicePixelRatio || 1\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setClearColor(0x000000)\r\n            this.renderer.setPixelRatio(devicePixelRatio)\r\n            this.renderer.setSize(width, height)\r\n            document.getElementsByClassName('webglPostprocessingSao-container')[0].appendChild(this.renderer.domElement)\r\n            this.camera = new this.$THREE.PerspectiveCamera(65, width / height, 3, 10)\r\n            this.camera.position.z = 7\r\n            this.scene = new this.$THREE.Scene()\r\n            this.group = new this.$THREE.Object3D()\r\n            this.scene.add(this.group)\r\n            var light = new this.$THREE.PointLight(0xddffdd, 0.8)\r\n            light.position.z = 70\r\n            light.position.y = - 70\r\n            light.position.x = - 70\r\n            this.scene.add(light)\r\n            var light2 = new this.$THREE.PointLight(0xffdddd, 0.8)\r\n            light2.position.z = 70\r\n            light2.position.x = - 70\r\n            light2.position.y = 70\r\n            this.scene.add(light2)\r\n            var light3 = new this.$THREE.PointLight(0xddddff, 0.8)\r\n            light3.position.z = 70\r\n            light3.position.x = 70\r\n            light3.position.y = - 70\r\n            this.scene.add(light3)\r\n            var light4 = new this.$THREE.AmbientLight(0xffffff, 0.05)\r\n            this.scene.add(light4)\r\n            var geometry = new this.$THREE.SphereBufferGeometry(3, 48, 24)\r\n            for (var i = 0; i < 120; i ++) {\r\n                var material = new this.$THREE.MeshStandardMaterial()\r\n                material.roughness = 0.5 * Math.random() + 0.25\r\n                material.metalness = 0\r\n                material.color.setHSL(Math.random(), 1.0, 0.3)\r\n                var mesh = new this.$THREE.Mesh(geometry, material)\r\n                mesh.position.x = Math.random() * 4 - 2\r\n                mesh.position.y = Math.random() * 4 - 2\r\n                mesh.position.z = Math.random() * 4 - 2\r\n                mesh.rotation.x = Math.random()\r\n                mesh.rotation.y = Math.random()\r\n                mesh.rotation.z = Math.random()\r\n                mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 0.2 + 0.05\r\n                this.group.add(mesh)\r\n            }\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            this.composer = new EffectComposer(this.renderer)\r\n            this.renderPass = new RenderPass(this.scene, this.camera)\r\n            this.composer.addPass(this.renderPass)\r\n            this.saoPass = new SAOPass(this.scene, this.camera, false, true)\r\n            this.composer.addPass(this.saoPass)\r\n            // Init gui\r\n            this.gui = new GUI()\r\n            this.gui.add(this.saoPass.params, 'output', {\r\n                'Beauty': SAOPass.OUTPUT.Beauty,\r\n                'Beauty+SAO': SAOPass.OUTPUT.Default,\r\n                'SAO': SAOPass.OUTPUT.SAO,\r\n                'Depth': SAOPass.OUTPUT.Depth,\r\n                'Normal': SAOPass.OUTPUT.Normal\r\n            }).onChange((value) => {\r\n                this.saoPass.params.output = parseInt(value)\r\n            })\r\n            this.gui.add(this.saoPass.params, 'saoBias', - 1, 1)\r\n            this.gui.add(this.saoPass.params, 'saoIntensity', 0, 1)\r\n            this.gui.add(this.saoPass.params, 'saoScale', 0, 10)\r\n            this.gui.add(this.saoPass.params, 'saoKernelRadius', 1, 100)\r\n            this.gui.add(this.saoPass.params, 'saoMinResolution', 0, 1)\r\n            this.gui.add(this.saoPass.params, 'saoBlur')\r\n            this.gui.add(this.saoPass.params, 'saoBlurRadius', 0, 200)\r\n            this.gui.add(this.saoPass.params, 'saoBlurStdDev', 0.5, 150)\r\n            this.gui.add(this.saoPass.params, 'saoBlurDepthCutoff', 0.0, 0.1)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            var width = (window.innerWidth - 291) || 1\r\n            var height = window.innerHeight || 1\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.composer.setSize(width, height)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.stats.begin()\r\n            this.render()\r\n            this.stats.end()\r\n        },\r\n        render() {\r\n            var timer = performance.now()\r\n            this.group.rotation.x = timer * 0.0002\r\n            this.group.rotation.y = timer * 0.0001\r\n            this.composer.render()\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglPostprocessingSao-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/postprocessing/webglPostprocessingSao.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglPostprocessingSao-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"three.js\")]),_vm._v(\" - Scalable Ambient Occlusion (SAO)\"),_c('br'),_vm._v(\"\\n\\t\\t\\tshader by \"),_c('a',{attrs:{\"href\":\"http://clara.io\"}},[_vm._v(\"Ben Houston\")]),_vm._v(\" / Post-processing pass by \"),_c('a',{attrs:{\"href\":\"http://ludobaka.github.io\"}},[_vm._v(\"Ludobaka\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-7311d90e\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/postprocessing/webglPostprocessingSao.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7311d90e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglPostprocessingSao.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingSao.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglPostprocessingSao.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7311d90e\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglPostprocessingSao.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-7311d90e\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/postprocessing/webglPostprocessingSao.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}