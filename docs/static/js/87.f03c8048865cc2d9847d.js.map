{"version":3,"sources":["webpack:///src/views/interactive/webglInteractiveCubesGpu.vue","webpack:///./src/views/interactive/webglInteractiveCubesGpu.vue?8f28","webpack:///./src/views/interactive/webglInteractiveCubesGpu.vue"],"names":["webglInteractiveCubesGpu","data","container","stats","camera","controls","scene","renderer","pickingTexture","pickingScene","highlightBox","pickingData","mouse","offset","mounted","this","$THREE","Vector2","Vector3","init","animate","methods","document","getElementById","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","z","Scene","background","Color","WebGLRenderTarget","add","AmbientLight","light","SpotLight","set","pickingMaterial","MeshBasicMaterial","vertexColors","defaultMaterial","MeshPhongMaterial","color","flatShading","shininess","that","applyVertexColors","geometry","attributes","colors","i","count","push","r","g","b","setAttribute","Float32BufferAttribute","geometriesDrawn","geometriesPicking","matrix","Matrix4","quaternion","Quaternion","BoxBufferGeometry","x","Math","random","y","rotation","Euler","PI","scale","setFromEuler","compose","applyMatrix4","setHex","clone","objects","Mesh","BufferGeometryUtils","mergeBufferGeometries","MeshLambertMaterial","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","TrackballControls","rotateSpeed","zoomSpeed","panSpeed","noZoom","noPan","staticMoving","dynamicDampingFactor","$Stats","dom","style","left","addEventListener","onWindowResize","onMouseMove","$onWindowResize","e","clientX","clientY","requestAnimationFrame","render","update","pick","setViewOffset","width","height","setRenderTarget","clearViewOffset","pixelBuffer","Uint8Array","readRenderTargetPixels","id","copy","visible","interactive_webglInteractiveCubesGpu","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","href","target","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/87.f03c8048865cc2d9847d.js","sourcesContent":["<template>\r\n    <div class=\"webglInteractiveCubesGpu-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> webgl - gpu picking\r\n\t\t</div>\r\n\t\t<div id=\"container\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { TrackballControls } from '@/components/jsm/controls/TrackballControls.js'\r\nimport { BufferGeometryUtils } from '@/components/jsm/utils/BufferGeometryUtils.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            controls: null,\r\n            scene: null,\r\n            renderer: null,\r\n            pickingTexture: null,\r\n            pickingScene: null,\r\n\t\t\thighlightBox: null,\r\n\t\t\tpickingData: [],\r\n\t\t\tmouse: null,\r\n\t\t\toffset: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.mouse = new this.$THREE.Vector2()\r\n        this.offset = new this.$THREE.Vector3(10, 10, 10)\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById(\"container\")\r\n            this.camera = new this.$THREE.PerspectiveCamera(70, this.$webglInnerWidth / window.innerHeight, 1, 10000)\r\n            this.camera.position.z = 1000\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xffffff)\r\n            this.pickingScene = new this.$THREE.Scene()\r\n            this.pickingTexture = new this.$THREE.WebGLRenderTarget(1, 1)\r\n            this.scene.add(new this.$THREE.AmbientLight(0x555555))\r\n            var light = new this.$THREE.SpotLight(0xffffff, 1.5)\r\n            light.position.set(0, 500, 2000)\r\n            this.scene.add(light)\r\n            var pickingMaterial = new this.$THREE.MeshBasicMaterial({ vertexColors: true })\r\n            var defaultMaterial = new this.$THREE.MeshPhongMaterial({ color: 0xffffff, flatShading: true, vertexColors: true, shininess: 0\t})\r\n            var that = this\r\n            function applyVertexColors(geometry, color) {\r\n                var position = geometry.attributes.position\r\n                var colors = []\r\n                for (var i = 0; i < position.count; i ++) {\r\n                    colors.push(color.r, color.g, color.b)\r\n                }\r\n                geometry.setAttribute('color', new that.$THREE.Float32BufferAttribute(colors, 3))\r\n            }\r\n            var geometriesDrawn = []\r\n            var geometriesPicking = []\r\n            var matrix = new this.$THREE.Matrix4()\r\n            var quaternion = new this.$THREE.Quaternion()\r\n            var color = new this.$THREE.Color()\r\n            for (var i = 0; i < 5000; i ++) {\r\n                var geometry = new this.$THREE.BoxBufferGeometry()\r\n                var position = new this.$THREE.Vector3()\r\n                position.x = Math.random() * 10000 - 5000\r\n                position.y = Math.random() * 6000 - 3000\r\n                position.z = Math.random() * 8000 - 4000\r\n                var rotation = new this.$THREE.Euler()\r\n                rotation.x = Math.random() * 2 * Math.PI\r\n                rotation.y = Math.random() * 2 * Math.PI\r\n                rotation.z = Math.random() * 2 * Math.PI\r\n                var scale = new this.$THREE.Vector3()\r\n                scale.x = Math.random() * 200 + 100\r\n                scale.y = Math.random() * 200 + 100\r\n                scale.z = Math.random() * 200 + 100\r\n                quaternion.setFromEuler(rotation)\r\n                matrix.compose(position, quaternion, scale)\r\n                geometry.applyMatrix4(matrix)\r\n                // give the geometry's vertices a random color, to be displayed\r\n                applyVertexColors(geometry, color.setHex(Math.random() * 0xffffff))\r\n                geometriesDrawn.push(geometry)\r\n                geometry = geometry.clone()\r\n                // give the geometry's vertices a color corresponding to the \"id\"\r\n                applyVertexColors(geometry, color.setHex(i))\r\n                geometriesPicking.push(geometry)\r\n                this.pickingData[ i ] = {\r\n                    position: position,\r\n                    rotation: rotation,\r\n                    scale: scale\r\n                }\r\n            }\r\n            var objects = new this.$THREE.Mesh(BufferGeometryUtils.mergeBufferGeometries(geometriesDrawn), defaultMaterial)\r\n            this.scene.add(objects)\r\n            this.pickingScene.add(new this.$THREE.Mesh(BufferGeometryUtils.mergeBufferGeometries(geometriesPicking), pickingMaterial))\r\n            this.highlightBox = new this.$THREE.Mesh(\r\n                new this.$THREE.BoxBufferGeometry(),\r\n                new this.$THREE.MeshLambertMaterial({ color: 0xffff00 }\r\n            ))\r\n            this.scene.add(this.highlightBox)\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            this.controls = new TrackballControls(this.camera, this.renderer.domElement)\r\n            this.controls.rotateSpeed = 1.0\r\n            this.controls.zoomSpeed = 1.2\r\n            this.controls.panSpeed = 0.8\r\n            this.controls.noZoom = false\r\n            this.controls.noPan = false\r\n            this.controls.staticMoving = true\r\n            this.controls.dynamicDampingFactor = 0.3\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.renderer.domElement.addEventListener('mousemove', this.onMouseMove)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        onMouseMove(e) {\r\n            this.mouse.x = e.clientX - 281\r\n            this.mouse.y = e.clientY\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        pick() {\r\n            //render the picking scene off-screen\r\n            // set the view offset to represent just a single pixel under the mouse\r\n            this.camera.setViewOffset(this.renderer.domElement.width, this.renderer.domElement.height, this.mouse.x * window.devicePixelRatio | 0, this.mouse.y * window.devicePixelRatio | 0, 1, 1)\r\n            // render the scene\r\n            this.renderer.setRenderTarget(this.pickingTexture)\r\n            this.renderer.render(this.pickingScene, this.camera)\r\n            // clear the view offset so rendering returns to normal\r\n            this.camera.clearViewOffset()\r\n            //create buffer for reading single pixel\r\n            var pixelBuffer = new Uint8Array(4)\r\n            //read the pixel\r\n            this.renderer.readRenderTargetPixels(this.pickingTexture, 0, 0, 1, 1, pixelBuffer)\r\n            //interpret the pixel as an ID\r\n            var id = (pixelBuffer[ 0 ] << 16) | (pixelBuffer[ 1 ] << 8) | (pixelBuffer[ 2 ])\r\n            var data = this.pickingData[ id ]\r\n            if (data) {\r\n                //move our highlightBox so that it surrounds the picked object\r\n                if (data.position && data.rotation && data.scale) {\r\n                    this.highlightBox.position.copy(data.position)\r\n                    this.highlightBox.rotation.copy(data.rotation)\r\n                    this.highlightBox.scale.copy(data.scale).add(this.offset)\r\n                    this.highlightBox.visible = true\r\n                }\r\n            } else {\r\n                this.highlightBox.visible = false\r\n            }\r\n        },\r\n        render() {\r\n            this.controls.update()\r\n            this.pick()\r\n            this.renderer.setRenderTarget(null)\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglInteractiveCubesGpu-container {\r\n    width: 100%;\r\n    background-color: #fff;\r\n}\r\n#info {\r\n    color: #444;\r\n}\r\n#info a {\r\n    color: #08f;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/interactive/webglInteractiveCubesGpu.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglInteractiveCubesGpu-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" webgl - gpu picking\\n\\t\\t\")]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"container\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-716aa462\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/interactive/webglInteractiveCubesGpu.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-716aa462\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglInteractiveCubesGpu.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglInteractiveCubesGpu.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglInteractiveCubesGpu.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-716aa462\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglInteractiveCubesGpu.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-716aa462\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/interactive/webglInteractiveCubesGpu.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}