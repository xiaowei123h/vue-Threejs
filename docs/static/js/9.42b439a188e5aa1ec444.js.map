{"version":3,"sources":["webpack:///./src/components/jsm/utils/RoughnessMipmapper.js","webpack:///src/views/loader/webglLoaderGltf.vue","webpack:///./src/views/loader/webglLoaderGltf.vue?1d6b","webpack:///./src/views/loader/webglLoaderGltf.vue","webpack:///./src/components/jsm/loaders/RGBELoader.js"],"names":["shaderMaterial","_mipmapMaterial","RawShaderMaterial","uniforms","roughnessMap","value","normalMap","texelSize","Vector2","vertexShader","fragmentShader","blending","NoBlending","depthTest","depthWrite","type","_mesh","Mesh","PlaneBufferGeometry","_flatCamera","OrthographicCamera","_tempTarget","_renderer","RoughnessMipmapper","renderer","compile","prototype","constructor","generateMipmaps","material","userData","roughnessUpdated","width","Math","max","image","height","MathUtils","isPowerOfTwo","oldTarget","getRenderTarget","autoClear","dispose","WebGLRenderTarget","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","position","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","webglLoaderGltf","data","camera","scene","mounted","this","init","methods","_this","container","document","createElement","getElementsByClassName","appendChild","$THREE","PerspectiveCamera","$webglInnerWidth","window","innerHeight","Scene","RGBELoader","setDataType","UnsignedByteType","setPath","load","envMap","pmremGenerator","fromEquirectangular","background","environment","roughnessMipmapper","GLTFLoader","gltf","traverse","child","isMesh","add","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","domElement","PMREMGenerator","compileEquirectangularShader","controls","OrbitControls","addEventListener","minDistance","maxDistance","target","update","onWindowResize","$onWindowResize","loader_webglLoaderGltf","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","attrs","id","href","rel","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","d","__WEBPACK_IMPORTED_MODULE_0__components_build_three_module_js__","manager","DataTextureLoader","call","Object","assign","create","parse","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBHalf","sourceArray","sourceOffset","destArray","destOffset","e","scale","pow","DataUtils","toHalfFloat","byteArray","Uint8Array","rgbe_header_info","line","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","RGBEFormat","FloatType","numElements","floatArray","Float32Array","j","RGBFormat","HalfFloatType","halfArray","url","onLoad","onProgress","onError","texData","encoding","RGBEEncoding","NearestFilter","flipY","LinearEncoding","LinearFilter"],"mappings":"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","file":"static/js/9.42b439a188e5aa1ec444.js","sourcesContent":["/**\r\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\r\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\r\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\r\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\r\n * enlarged to match the dimensions of the normal map.\r\n */\r\n\r\nimport {\r\n\tMathUtils,\r\n\tMesh,\r\n\tNoBlending,\r\n\tOrthographicCamera,\r\n\tPlaneBufferGeometry,\r\n\tRawShaderMaterial,\r\n\tVector2,\r\n\tWebGLRenderTarget\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar _mipmapMaterial = _getMipmapMaterial();\r\n\r\nvar _mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), _mipmapMaterial );\r\n\r\nvar _flatCamera = new OrthographicCamera( 0, 1, 0, 1, 0, 1 );\r\n\r\nvar _tempTarget = null;\r\n\r\nvar _renderer = null;\r\n\r\nfunction RoughnessMipmapper( renderer ) {\r\n\r\n\t_renderer = renderer;\r\n\r\n\t_renderer.compile( _mesh, _flatCamera );\r\n\r\n}\r\n\r\nRoughnessMipmapper.prototype = {\r\n\r\n\tconstructor: RoughnessMipmapper,\r\n\r\n\tgenerateMipmaps: function ( material ) {\r\n\r\n\t\tif ( 'roughnessMap' in material === false ) return;\r\n\r\n\t\tvar { roughnessMap, normalMap } = material;\r\n\r\n\t\tif ( roughnessMap === null || normalMap === null || ! roughnessMap.generateMipmaps || material.userData.roughnessUpdated ) return;\r\n\r\n\t\tmaterial.userData.roughnessUpdated = true;\r\n\r\n\t\tvar width = Math.max( roughnessMap.image.width, normalMap.image.width );\r\n\r\n\t\tvar height = Math.max( roughnessMap.image.height, normalMap.image.height );\r\n\r\n\t\tif ( ! MathUtils.isPowerOfTwo( width ) || ! MathUtils.isPowerOfTwo( height ) ) return;\r\n\r\n\t\tvar oldTarget = _renderer.getRenderTarget();\r\n\r\n\t\tvar autoClear = _renderer.autoClear;\r\n\r\n\t\t_renderer.autoClear = false;\r\n\r\n\t\tif ( _tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height ) {\r\n\r\n\t\t\tif ( _tempTarget !== null ) _tempTarget.dispose();\r\n\r\n\t\t\t_tempTarget = new WebGLRenderTarget( width, height, { depthBuffer: false } );\r\n\r\n\t\t\t_tempTarget.scissorTest = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( width !== roughnessMap.image.width || height !== roughnessMap.image.height ) {\r\n\r\n\t\t\tvar params = {\r\n\t\t\t\twrapS: roughnessMap.wrapS,\r\n\t\t\t\twrapT: roughnessMap.wrapT,\r\n\t\t\t\tmagFilter: roughnessMap.magFilter,\r\n\t\t\t\tminFilter: roughnessMap.minFilter,\r\n\t\t\t\tdepthBuffer: false\r\n\t\t\t};\r\n\r\n\t\t\tvar newRoughnessTarget = new WebGLRenderTarget( width, height, params );\r\n\r\n\t\t\tnewRoughnessTarget.texture.generateMipmaps = true;\r\n\r\n\t\t\t// Setting the render target causes the memory to be allocated.\r\n\r\n\t\t\t_renderer.setRenderTarget( newRoughnessTarget );\r\n\r\n\t\t\tmaterial.roughnessMap = newRoughnessTarget.texture;\r\n\r\n\t\t\tif ( material.metalnessMap == roughnessMap ) material.metalnessMap = material.roughnessMap;\r\n\r\n\t\t\tif ( material.aoMap == roughnessMap ) material.aoMap = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\t_mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\r\n\r\n\t\t_mipmapMaterial.uniforms.normalMap.value = normalMap;\r\n\r\n\t\tvar position = new Vector2( 0, 0 );\r\n\r\n\t\tvar texelSize = _mipmapMaterial.uniforms.texelSize.value;\r\n\r\n\t\tfor ( var mip = 0; width >= 1 && height >= 1; ++ mip, width /= 2, height /= 2 ) {\r\n\r\n\t\t\t// Rendering to a mip level is not allowed in webGL1. Instead we must set\r\n\t\t\t// up a secondary texture to write the result to, then copy it back to the\r\n\t\t\t// proper mipmap level.\r\n\r\n\t\t\ttexelSize.set( 1.0 / width, 1.0 / height );\r\n\r\n\t\t\tif ( mip == 0 ) texelSize.set( 0.0, 0.0 );\r\n\r\n\t\t\t_tempTarget.viewport.set( position.x, position.y, width, height );\r\n\r\n\t\t\t_tempTarget.scissor.set( position.x, position.y, width, height );\r\n\r\n\t\t\t_renderer.setRenderTarget( _tempTarget );\r\n\r\n\t\t\t_renderer.render( _mesh, _flatCamera );\r\n\r\n\t\t\t_renderer.copyFramebufferToTexture( position, material.roughnessMap, mip );\r\n\r\n\t\t\t_mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( roughnessMap !== material.roughnessMap ) roughnessMap.dispose();\r\n\r\n\t\t_renderer.setRenderTarget( oldTarget );\r\n\r\n\t\t_renderer.autoClear = autoClear;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\t_mipmapMaterial.dispose();\r\n\r\n\t\t_mesh.geometry.dispose();\r\n\r\n\t\tif ( _tempTarget != null ) _tempTarget.dispose();\r\n\r\n\t}\r\n\r\n};\r\n\r\nfunction _getMipmapMaterial() {\r\n\r\n\tvar shaderMaterial = new RawShaderMaterial( {\r\n\r\n\t\tuniforms: {\r\n\t\t\troughnessMap: { value: null },\r\n\t\t\tnormalMap: { value: null },\r\n\t\t\ttexelSize: { value: new Vector2( 1, 1 ) }\r\n\t\t},\r\n\r\n\t\tvertexShader: /* glsl */`\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tattribute vec3 position;\r\n\t\t\tattribute vec2 uv;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tvUv = uv;\r\n\r\n\t\t\t\tgl_Position = vec4( position, 1.0 );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tfragmentShader: /* glsl */`\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\tuniform sampler2D roughnessMap;\r\n\t\t\tuniform sampler2D normalMap;\r\n\t\t\tuniform vec2 texelSize;\r\n\r\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\r\n\r\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\r\n\r\n\t\t\t#include <cube_uv_reflection_fragment>\r\n\r\n\t\t\tfloat roughnessToVariance( float roughness ) {\r\n\r\n\t\t\t\tfloat variance = 0.0;\r\n\r\n\t\t\t\tif ( roughness >= r1 ) {\r\n\r\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\r\n\r\n\t\t\t\t} else if ( roughness >= r4 ) {\r\n\r\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\r\n\r\n\t\t\t\t} else if ( roughness >= r5 ) {\r\n\r\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\r\n\r\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn variance;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloat varianceToRoughness( float variance ) {\r\n\r\n\t\t\t\tfloat roughness = 0.0;\r\n\r\n\t\t\t\tif ( variance >= v1 ) {\r\n\r\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\r\n\r\n\t\t\t\t} else if ( variance >= v4 ) {\r\n\r\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\r\n\r\n\t\t\t\t} else if ( variance >= v5 ) {\r\n\r\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn roughness;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\r\n\r\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\r\n\r\n\t\t\t\tfloat roughness = gl_FragColor.g;\r\n\r\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\r\n\r\n\t\t\t\tvec3 avgNormal;\r\n\r\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\r\n\r\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\r\n\r\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\r\n\r\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\r\n\r\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\tblending: NoBlending,\r\n\t\tdepthTest: false,\r\n\t\tdepthWrite: false\r\n\r\n\t} );\r\n\r\n\tshaderMaterial.type = 'RoughnessMipmapper';\r\n\r\n\treturn shaderMaterial;\r\n\r\n}\r\n\r\nexport { RoughnessMipmapper };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/utils/RoughnessMipmapper.js","<template>\r\n    <div class=\"webglLoaderGltf-container\">\r\n        <div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - GLTFLoader<br />\r\n\t\t\tBattle Damaged Sci-fi Helmet by\r\n\t\t\t<a href=\"https://sketchfab.com/theblueturtle_\" target=\"_blank\" rel=\"noopener\">theblueturtle_</a><br />\r\n\t\t\t<a href=\"https://hdrihaven.com/hdri/?h=royal_esplanade\" target=\"_blank\" rel=\"noopener\">Royal Esplanade</a> by <a href=\"https://hdrihaven.com/\" target=\"_blank\" rel=\"noopener\">HDRI Haven</a>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from '@/components/jsm/loaders/GLTFLoader.js'\r\nimport { RGBELoader } from '@/components/jsm/loaders/RGBELoader.js'\r\nimport { RoughnessMipmapper } from '@/components/jsm/utils/RoughnessMipmapper.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\t\tthis.render()\r\n    },\r\n    methods: {\r\n        init() {\r\n            var container = document.createElement('div')\r\n            document.getElementsByClassName('webglLoaderGltf-container')[0].appendChild(container)\r\n            this.camera = new this.$THREE.PerspectiveCamera(45, this.$webglInnerWidth / window.innerHeight, 0.25, 20)\r\n            this.camera.position.set(- 1.8, 0.6, 2.7)\r\n            this.scene = new this.$THREE.Scene()\r\n            new RGBELoader()\r\n                .setDataType(this.$THREE.UnsignedByteType)\r\n                .setPath('static/textures/equirectangular/')\r\n                .load('royal_esplanade_1k.hdr', (texture) => {\r\n                    var envMap = pmremGenerator.fromEquirectangular(texture).texture\r\n                    this.scene.background = envMap\r\n                    this.scene.environment = envMap\r\n                    texture.dispose()\r\n                    pmremGenerator.dispose()\r\n                    this.render()\r\n                    // model\r\n                    // use of RoughnessMipmapper is optional\r\n                    var roughnessMipmapper = new RoughnessMipmapper(this.renderer)\r\n                    var loader = new GLTFLoader().setPath('static/models/gltf/DamagedHelmet/glTF/')\r\n                    loader.load('DamagedHelmet.gltf', (gltf) => {\r\n                        gltf.scene.traverse((child) => {\r\n                            if (child.isMesh) {\r\n                                // TOFIX RoughnessMipmapper seems to be broken with WebGL 2.0\r\n                                // roughnessMipmapper.generateMipmaps(child.material)\r\n                            }\r\n                        })\r\n                        this.scene.add(gltf.scene)\r\n                        roughnessMipmapper.dispose()\r\n                        this.render()\r\n                    })\r\n                })\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.renderer.toneMapping = this.$THREE.ACESFilmicToneMapping\r\n            this.renderer.toneMappingExposure = 1\r\n            this.renderer.outputEncoding = this.$THREE.sRGBEncoding\r\n            container.appendChild(this.renderer.domElement)\r\n            var pmremGenerator = new this.$THREE.PMREMGenerator(this.renderer)\r\n            pmremGenerator.compileEquirectangularShader()\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.addEventListener('change', this.render) // use if there is no animation loop\r\n            controls.minDistance = 2\r\n            controls.maxDistance = 10\r\n            controls.target.set(0, 0, - 0.2)\r\n            controls.update()\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n            this.render()\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderGltf-container {\r\n    width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderGltf.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderGltf-container\"},[_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - GLTFLoader\"),_c('br'),_vm._v(\"\\n\\t\\t\\tBattle Damaged Sci-fi Helmet by\\n\\t\\t\\t\"),_c('a',{attrs:{\"href\":\"https://sketchfab.com/theblueturtle_\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"theblueturtle_\")]),_c('br'),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"https://hdrihaven.com/hdri/?h=royal_esplanade\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Royal Esplanade\")]),_vm._v(\" by \"),_c('a',{attrs:{\"href\":\"https://hdrihaven.com/\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"HDRI Haven\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3bdeefa8\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderGltf.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3bdeefa8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderGltf.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderGltf.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderGltf.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3bdeefa8\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderGltf.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3bdeefa8\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderGltf.vue\n// module id = null\n// module chunks = ","import {\r\n\tDataTextureLoader,\r\n\tDataUtils,\r\n\tFloatType,\r\n\tHalfFloatType,\r\n\tLinearEncoding,\r\n\tLinearFilter,\r\n\tNearestFilter,\r\n\tRGBEEncoding,\r\n\tRGBEFormat,\r\n\tRGBFormat,\r\n\tUnsignedByteType\r\n} from \"@/components/build/three.module.js\";\r\n\r\n// https://github.com/mrdoob/three.js/issues/5552\r\n// http://en.wikipedia.org/wiki/RGBE_image_format\r\n\r\nvar RGBELoader = function ( manager ) {\r\n\r\n\tDataTextureLoader.call( this, manager );\r\n\r\n\tthis.type = UnsignedByteType;\r\n\r\n};\r\n\r\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\r\n\r\n\tconstructor: RGBELoader,\r\n\r\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\r\n\r\n\tparse: function ( buffer ) {\r\n\r\n\t\tvar\r\n\t\t\t/* return codes for rgbe routines */\r\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\r\n\t\t\tRGBE_RETURN_FAILURE = - 1,\r\n\r\n\t\t\t/* default error routine.  change this to change error handling */\r\n\t\t\trgbe_read_error = 1,\r\n\t\t\trgbe_write_error = 2,\r\n\t\t\trgbe_format_error = 3,\r\n\t\t\trgbe_memory_error = 4,\r\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\r\n\r\n\t\t\t\tswitch ( rgbe_error_code ) {\r\n\r\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn RGBE_RETURN_FAILURE;\r\n\r\n\t\t\t},\r\n\r\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\r\n\t\t\t//RGBE_DATA_RED = 0,\r\n\t\t\t//RGBE_DATA_GREEN = 1,\r\n\t\t\t//RGBE_DATA_BLUE = 2,\r\n\r\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\r\n\t\t\t//RGBE_DATA_SIZE = 4,\r\n\r\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\r\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\r\n\t\t\tRGBE_VALID_FORMAT = 2,\r\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\r\n\r\n\t\t\tNEWLINE = \"\\n\",\r\n\r\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\r\n\r\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\r\n\t\t\t\tvar p = buffer.pos,\r\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\r\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\r\n\t\t\t\t;\r\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\r\n\r\n\t\t\t\t\ts += chunk; len += chunk.length;\r\n\t\t\t\t\tp += chunkSize;\r\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( - 1 < i ) {\r\n\r\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\r\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\r\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\r\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\r\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\r\n\t\t\t\t\treturn s + chunk.slice( 0, i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\r\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\r\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\r\n\r\n\t\t\t\tvar line, match,\r\n\r\n\t\t\t\t\t// regexes to parse header info fields\r\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\r\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\r\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\r\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\r\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\r\n\r\n\t\t\t\t\t// RGBE format header struct\r\n\t\t\t\t\theader = {\r\n\r\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\r\n\r\n\t\t\t\t\t\tstring: '', /* the actual header string */\r\n\r\n\t\t\t\t\t\tcomments: '', /* comments found in header */\r\n\r\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\r\n\r\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\r\n\r\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\r\n\r\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\r\n\r\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\r\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\r\n\t\t\t\theader.programtype = match[ 1 ];\r\n\t\t\t\theader.string += line + \"\\n\";\r\n\r\n\t\t\t\twhile ( true ) {\r\n\r\n\t\t\t\t\tline = fgets( buffer );\r\n\t\t\t\t\tif ( false === line ) break;\r\n\t\t\t\t\theader.string += line + \"\\n\";\r\n\r\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\r\n\r\n\t\t\t\t\t\theader.comments += line + \"\\n\";\r\n\t\t\t\t\t\tcontinue; // comment line\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\r\n\r\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\r\n\r\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\r\n\r\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\r\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\r\n\r\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\r\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\r\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn header;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\r\n\r\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\r\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\r\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\r\n\t\t\t\t;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t// run length encoding is not allowed so read flat\r\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\r\n\t\t\t\t\t// this file is not run length encoded\r\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\t// return the flat buffer\r\n\t\t\t\t\treturn new Uint8Array( buffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\r\n\r\n\t\t\t\tif ( ! data_rgba.length ) {\r\n\r\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\r\n\t\t\t\trgbeStart = new Uint8Array( 4 );\r\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\r\n\r\n\t\t\t\t// read in each successive scanline\r\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\r\n\r\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\r\n\r\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\r\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\r\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\r\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\r\n\r\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\r\n\r\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\r\n\t\t\t\t\t// first red, then green, then blue, then exponent\r\n\t\t\t\t\tptr = 0;\r\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\r\n\r\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\r\n\t\t\t\t\t\tisEncodedRun = count > 128;\r\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\r\n\r\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\r\n\r\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( isEncodedRun ) {\r\n\r\n\t\t\t\t\t\t\t// a (encoded) run of the same value\r\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\r\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//ptr += count;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// a literal-run\r\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\r\n\t\t\t\t\t\t\tptr += count; pos += count;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// now convert data from buffer into rgba\r\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\r\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\r\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\toff = 0;\r\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toff += scanline_width; //1;\r\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toff += scanline_width; //1;\r\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toff += scanline_width; //1;\r\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\r\n\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnum_scanlines --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data_rgba;\r\n\r\n\t\t\t};\r\n\r\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\r\n\r\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\r\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\r\n\r\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\r\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\r\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\r\n\r\n\t\t};\r\n\r\n\t\tvar RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\r\n\r\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\r\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\r\n\r\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 0 ] * scale );\r\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 1 ] * scale );\r\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( sourceArray[ sourceOffset + 2 ] * scale );\r\n\r\n\t\t};\r\n\r\n\t\tvar byteArray = new Uint8Array( buffer );\r\n\t\tbyteArray.pos = 0;\r\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\r\n\r\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\r\n\r\n\t\t\tvar w = rgbe_header_info.width,\r\n\t\t\t\th = rgbe_header_info.height,\r\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\r\n\r\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\r\n\r\n\t\t\t\tswitch ( this.type ) {\r\n\r\n\t\t\t\t\tcase UnsignedByteType:\r\n\r\n\t\t\t\t\t\tvar data = image_rgba_data;\r\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\r\n\t\t\t\t\t\tvar type = UnsignedByteType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase FloatType:\r\n\r\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\r\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar data = floatArray;\r\n\t\t\t\t\t\tvar format = RGBFormat;\r\n\t\t\t\t\t\tvar type = FloatType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase HalfFloatType:\r\n\r\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\r\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar data = halfArray;\r\n\t\t\t\t\t\tvar format = RGBFormat;\r\n\t\t\t\t\t\tvar type = HalfFloatType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\twidth: w, height: h,\r\n\t\t\t\t\tdata: data,\r\n\t\t\t\t\theader: rgbe_header_info.string,\r\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\r\n\t\t\t\t\texposure: rgbe_header_info.exposure,\r\n\t\t\t\t\tformat: format,\r\n\t\t\t\t\ttype: type\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\tsetDataType: function ( value ) {\r\n\r\n\t\tthis.type = value;\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tfunction onLoadCallback( texture, texData ) {\r\n\r\n\t\t\tswitch ( texture.type ) {\r\n\r\n\t\t\t\tcase UnsignedByteType:\r\n\r\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\r\n\t\t\t\t\ttexture.minFilter = NearestFilter;\r\n\t\t\t\t\ttexture.magFilter = NearestFilter;\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttexture.flipY = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase FloatType:\r\n\r\n\t\t\t\t\ttexture.encoding = LinearEncoding;\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttexture.flipY = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase HalfFloatType:\r\n\r\n\t\t\t\t\ttexture.encoding = LinearEncoding;\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttexture.flipY = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}\r\n\r\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { RGBELoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/RGBELoader.js"],"sourceRoot":""}