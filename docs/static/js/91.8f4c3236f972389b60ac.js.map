{"version":3,"sources":["webpack:///./src/components/jsm/loaders/AssimpLoader.js","webpack:///src/views/loader/webglLoaderAssimp.vue","webpack:///./src/views/loader/webglLoaderAssimp.vue?016f","webpack:///./src/views/loader/webglLoaderAssimp.vue"],"names":["AssimpLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","textureLoader","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","Virtulous","time","matrix","clone","position","Vector3","quaternion","Quaternion","scale","decompose","KeyFrame","lerp","nextKey","l","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","x","y","z","tempAniQuat","set","w","slerp","tempAniMatrix","compose","tempAniScale","Matrix4","KeyFrameTrack","keys","target","length","_accelTable","fps","addKey","key","push","init","sortKeys","j","i","parseFromThree","data","node","track","hierarchy","targets","parseFromCollada","sort","keySortFunc","a","b","t","reTarget","root","compareitor","TrackTargetNodeNameCompare","keySearchAccel","Math","floor","setTime","abs","key0","key1","matrixAutoUpdate","copy","matrixWorldNeedsUpdate","find","name","children","r","Animation","tracks","addTrack","max","n","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","cloneTreeToBones","scene","rootBone","Bone","matrixWorld","nodeCount","toString","nodeToBoneMap","child","add","sortWeights","indexes","weights","pairs","sum","sqrt","findMatchingBone","indexOf","ret","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","mBones","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","findNode","mName","mParent","isBone","threeSkeletonRootBone","toTHREE","threeNode","bone","tbone","mOffsetMatrix","skeleton","Skeleton","bind","material","skinning","mat","mesh","geometry","BufferGeometry","mMaterials","MeshLambertMaterial","setIndex","BufferAttribute","Uint32Array","mIndexArray","setAttribute","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","Float32Array","mTangentBuffer","mBitangentBuffer","bones","mWeights","weight","mVertexId","mWeight","parseInt","_weights","_bones","Mesh","SkinnedMesh","normalizeSkinWeights","aiFace","mNumIndices","mIndices","aiString","str","forEach","String","fromCharCode","replace","aiNode","mTransformation","mNumChildren","mNumMeshes","mMeshes","mChildren","o","Object3D","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","array","Uint8Array","reader","DataView","getFloat32","g","Color","dataAsFloat","dataAsBool","dataAsString","s","dataAsMap","substr","lastIndexOf","namePropMapping","?mat.name","$mat.shadingm","$mat.twosided","$mat.wireframe","$clr.ambient","$clr.diffuse","$clr.specular","$clr.emissive","$clr.transparent","$clr.reflective","$mat.shininess","$mat.reflectivity","$mat.refracti","$tex.file","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","MeshPhongMaterial","prop","map","normalMap","lightMap","alphaMap","ambient","color","veclerp","v1","v2","v","lm1","quatlerp","q1","q2","sampleTrack","lne","mValue","dist","Infinity","timeDist","mTime","dT","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","comp","getLength","apply","pos","rotation","t2","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","littleEndian","readFloat","dataview","val","readOffset","Read_double","getFloat64","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","c","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","m","elements","i2","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVectorKey","size","ReadBounds","T","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryBone","shortened","ReadArray_aiVertexWeight","ReadBinaryMesh","mNumUVComponents","subArray32","uv","f","Error","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","nd","ReadArray_aiQuatKey","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","ReadBinaryNode","parent","depth","mDepth","node2","mAnimations","mTextures","mLights","mCameras","compressed","aiOrigin_BEG","pFiledata","pScene","versionMajor","versionMinor","versionRevision","compileFlags","k","boneNode","markBones","object","animation","off","ori","buff","bytes","getUint8","start","end","newbuff","slice","subArrayUint16","Uint16Array","subArrayUint8","subArrayUint32","extendStream","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","ArrayBuffer","InternReadFile","webglLoaderAssimp","container","stats","camera","renderer","mounted","methods","_this","document","getElementById","$moduleTHREE","PerspectiveCamera","$webglInnerWidth","window","innerHeight","up","lookAt","Scene","HemisphereLight","light","DirectionalLight","normalize","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","controls","OrbitControls","minDistance","maxDistance","$Stats","dom","style","left","AssimpLoader_AssimpLoader","result","PI","addEventListener","onWindowResize","animate","$onWindowResize","requestAnimationFrame","render","performance","now","update","loader_webglLoaderAssimp","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","attrs","id","_v","href","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"oIAoBIA,EAAe,SAAWC,GAE7BC,SAAOC,KAAMC,KAAMH,IAIpBD,EAAaK,UAAYC,OAAOC,OAAQD,OAAOE,OAAQN,SAAOG,YAE7DI,YAAaT,EAEbU,KAAM,SAAWC,EAAKC,EAAQC,EAAYC,GAEzC,IAAIC,EAAQX,KAERY,EAAwB,KAAfD,EAAMC,KAAgBC,cAAYC,eAAgBP,GAAQI,EAAMC,KAEzEG,EAAS,IAAIC,aAAYL,EAAMd,SACnCkB,EAAOE,QAASN,EAAMC,MACtBG,EAAOG,gBAAiB,eACxBH,EAAOI,iBAAkBR,EAAMS,eAC/BL,EAAOM,mBAAoBV,EAAMW,iBAEjCP,EAAOT,KAAMC,EAAK,SAAWgB,GAE5B,IAECf,EAAQG,EAAMa,MAAOD,EAAQX,IAE5B,MAAQa,GAEJf,EAEJA,EAASe,GAITC,QAAQC,MAAOF,GAIhBd,EAAMd,QAAQ+B,UAAWrB,KAIxBE,EAAYC,IAIhBc,MAAO,SAAWD,EAAQX,GAEzB,IAAIiB,EAAgB,IAAIC,gBAAe9B,KAAKH,SAC5CgC,EAAcZ,QAASjB,KAAK+B,cAAgBnB,GAAOoB,eAAgBhC,KAAKiC,aAExE,IAAIC,GAEJA,SAAqB,SAAWC,EAAMC,GAErCpC,KAAKmC,KAAOA,EACZnC,KAAKoC,OAASA,EAAOC,QACrBrC,KAAKsC,SAAW,IAAIC,UACpBvC,KAAKwC,WAAa,IAAIC,aACtBzC,KAAK0C,MAAQ,IAAIH,UAAS,EAAG,EAAG,GAChCvC,KAAKoC,OAAOO,UAAW3C,KAAKsC,SAAUtC,KAAKwC,WAAYxC,KAAK0C,OAC5D1C,KAAKqC,MAAQ,WAGZ,OADQ,IAAIH,EAAUU,SAAU5C,KAAKmC,KAAMnC,KAAKoC,SAKjDpC,KAAK6C,KAAO,SAAWC,EAASX,GAG/B,IACIY,GAFJZ,GAAQnC,KAAKmC,OACAW,EAAQX,KAAOnC,KAAKmC,MAE7Ba,EAAK,EAAID,EACTE,EAASjD,KAAKsC,SACdY,EAASlD,KAAKwC,WAEdW,EAAUL,EAAQR,SAClBc,EAAUN,EAAQN,WAUtB,OARAN,EAAUU,SAASS,WAAWC,EAAIL,EAAOK,EAAIN,EAAKG,EAAQG,EAAIP,EAC9Db,EAAUU,SAASS,WAAWE,EAAIN,EAAOM,EAAIP,EAAKG,EAAQI,EAAIR,EAC9Db,EAAUU,SAASS,WAAWG,EAAIP,EAAOO,EAAIR,EAAKG,EAAQK,EAAIT,EAI9Db,EAAUU,SAASa,YAAYC,IAAKR,EAAOI,EAAGJ,EAAOK,EAAGL,EAAOM,EAAGN,EAAOS,GACzEzB,EAAUU,SAASa,YAAYG,MAAOR,EAASL,GACxCb,EAAUU,SAASiB,cAAcC,QAAS5B,EAAUU,SAASS,WAAYnB,EAAUU,SAASa,YAAavB,EAAUU,SAASmB,iBAMrI7B,EAAUU,SAASS,WAAa,IAAId,UACpCL,EAAUU,SAASa,YAAc,IAAIhB,aACrCP,EAAUU,SAASmB,aAAe,IAAIxB,UAAS,EAAG,EAAG,GACrDL,EAAUU,SAASiB,cAAgB,IAAIG,UACvC9B,EAAU+B,cAAgB,WAEzBjE,KAAKkE,QACLlE,KAAKmE,OAAS,KACdnE,KAAKmC,KAAO,EACZnC,KAAKoE,OAAS,EACdpE,KAAKqE,eACLrE,KAAKsE,IAAM,GACXtE,KAAKuE,OAAS,SAAWC,GAExBxE,KAAKkE,KAAKO,KAAMD,IAIjBxE,KAAK0E,KAAO,WASX,GAPA1E,KAAK2E,WAEA3E,KAAKkE,KAAKE,OAAS,EACvBpE,KAAKoE,OAASpE,KAAKkE,KAAMlE,KAAKkE,KAAKE,OAAS,GAAIjC,KAEhDnC,KAAKoE,OAAS,EAERpE,KAAKsE,IAEZ,IAAM,IAAIM,EAAI,EAAGA,EAAI5E,KAAKoE,OAASpE,KAAKsE,IAAKM,IAE5C,IAAM,IAAIC,EAAI,EAAGA,EAAI7E,KAAKkE,KAAKE,OAAQS,IAAO,CAE7C,GAAK7E,KAAKkE,KAAMW,GAAI1C,MAAQyC,EAAI,CAE/B5E,KAAKqE,YAAaO,GAAMC,EACxB,MAEM,GAAK7E,KAAKkE,KAAMW,GAAI1C,KAAOyC,EAAI5E,KAAKsE,KAAOtE,KAAKkE,KAAMW,EAAI,IAAO7E,KAAKkE,KAAMW,EAAI,GAAI1C,MAAQyC,EAAI5E,KAAKsE,IAAM,CAEjHtE,KAAKqE,YAAaO,GAAMC,EACxB,SAUJ7E,KAAK8E,eAAiB,SAAWC,GAEhC,IAAIT,EAAMS,EAAKT,IACftE,KAAKmE,OAASY,EAAKC,KAEnB,IADA,IAAIC,EAAQF,EAAKG,UAAW,GAAIhB,KACtBW,EAAI,EAAGA,EAAII,EAAMb,OAAQS,IAElC7E,KAAKuE,OAAQ,IAAIrC,EAAUU,SAAUiC,EAAIP,GAAOW,EAAOJ,GAAI1C,KAAM8C,EAAOJ,GAAIM,QAAS,GAAIJ,OAI1F/E,KAAK0E,QAIN1E,KAAKoF,iBAAmB,SAAWL,GAKlC,IAHA,IAAIE,EAAQF,EAAKb,KACbI,EAAMtE,KAAKsE,IAELO,EAAI,EAAGA,EAAII,EAAMb,OAAQS,IAElC7E,KAAKuE,OAAQ,IAAIrC,EAAUU,SAAUiC,EAAIP,GAAOW,EAAOJ,GAAI1C,KAAM8C,EAAOJ,GAAIzC,SAI7EpC,KAAK0E,QAIN1E,KAAK2E,SAAW,WAEf3E,KAAKkE,KAAKmB,KAAMrF,KAAKsF,cAItBtF,KAAKsF,YAAc,SAAWC,EAAGC,GAEhC,OAAOD,EAAEpD,KAAOqD,EAAErD,MAInBnC,KAAKqC,MAAQ,WAEZ,IAAIoD,EAAI,IAAIvD,EAAU+B,cACtBwB,EAAEtB,OAASnE,KAAKmE,OAChBsB,EAAEtD,KAAOnC,KAAKmC,KACdsD,EAAErB,OAASpE,KAAKoE,OAEhB,IAAM,IAAIS,EAAI,EAAGA,EAAI7E,KAAKkE,KAAKE,OAAQS,IAEtCY,EAAElB,OAAQvE,KAAKkE,KAAMW,GAAIxC,SAK1B,OADAoD,EAAEf,OACKe,GAIRzF,KAAK0F,SAAW,SAAWC,EAAMC,GAEzBA,IAAcA,EAAc1D,EAAU2D,4BAC7C7F,KAAKmE,OAASyB,EAAaD,EAAM3F,KAAKmE,SAIvCnE,KAAK8F,eAAiB,SAAW3D,GAIhC,OAFAA,GAAQnC,KAAKsE,IACbnC,EAAO4D,KAAKC,MAAO7D,GACZnC,KAAKqE,YAAalC,IAAU,GAIpCnC,KAAKiG,QAAU,SAAW9D,GAEzBA,EAAO4D,KAAKG,IAAK/D,GACZnC,KAAKoE,SACTjC,EAAOA,EAAOnC,KAAKoE,OAAS,KAI7B,IAHA,IAAI+B,EAAO,KACPC,EAAO,KAEDvB,EAAI7E,KAAK8F,eAAgB3D,GAAQ0C,EAAI7E,KAAKkE,KAAKE,OAAQS,IAAO,CAEvE,GAAK7E,KAAKkE,KAAMW,GAAI1C,MAAQA,EAAO,CAElCgE,EAAOnG,KAAKkE,KAAMW,GAClBuB,EAAOpG,KAAKkE,KAAMW,GAClB,MAEM,GAAK7E,KAAKkE,KAAMW,GAAI1C,KAAOA,GAAQnC,KAAKkE,KAAMW,EAAI,IAAO7E,KAAKkE,KAAMW,EAAI,GAAI1C,KAAOA,EAAO,CAEhGgE,EAAOnG,KAAKkE,KAAMW,GAClBuB,EAAOpG,KAAKkE,KAAMW,EAAI,GACtB,MAEM,GAAK7E,KAAKkE,KAAMW,GAAI1C,KAAOA,GAAQ0C,GAAK7E,KAAKkE,KAAKE,OAAS,EAAI,CAErE+B,EAAOnG,KAAKkE,KAAMW,IAClBuB,EAAOpG,KAAKkE,KAAM,GAAI7B,SACjBF,MAAQnC,KAAKoE,OAAS,IAC3B,OAMF,OAAK+B,GAAQC,GAAQD,IAASC,GAE7BpG,KAAKmE,OAAOkC,kBAAmB,EAC/BrG,KAAKmE,OAAO/B,OAAOkE,KAAMH,EAAKtD,KAAMuD,EAAMjE,SAC1CnC,KAAKmE,OAAOoC,wBAAyB,IAKjCJ,GAAQC,GAAQD,GAAQC,GAE5BpG,KAAKmE,OAAOkC,kBAAmB,EAC/BrG,KAAKmE,OAAO/B,OAAOkE,KAAMH,EAAK/D,aAC9BpC,KAAKmE,OAAOoC,wBAAyB,SAJtC,IAaFrE,EAAU2D,2BAA6B,SAAWF,EAAMxB,GAkBvD,OAhBA,SAASqC,EAAMxB,EAAMyB,GAEpB,GAAKzB,EAAKyB,MAAQA,EACjB,OAAOzB,EAER,IAAM,IAAIH,EAAI,EAAGA,EAAIG,EAAK0B,SAAStC,OAAQS,IAAO,CAEjD,IAAI8B,EAAIH,EAAMxB,EAAK0B,SAAU7B,GAAK4B,GAClC,GAAKE,EAAI,OAAOA,EAIjB,OAAO,KAIDH,CAAMb,EAAMxB,EAAOsC,OAI3BvE,EAAU0E,UAAY,WAErB5G,KAAK6G,UACL7G,KAAKoE,OAAS,EAEdpE,KAAK8G,SAAW,SAAW7B,GAE1BjF,KAAK6G,OAAOpC,KAAMQ,GAClBjF,KAAKoE,OAAS2B,KAAKgB,IAAK9B,EAAMb,OAAQpE,KAAKoE,SAI5CpE,KAAKiG,QAAU,SAAW9D,GAEzBnC,KAAKmC,KAAOA,EAEZ,IAAM,IAAI0C,EAAI,EAAGA,EAAI7E,KAAK6G,OAAOzC,OAAQS,IACxC7E,KAAK6G,OAAQhC,GAAIoB,QAAS9D,IAI5BnC,KAAKqC,MAAQ,SAAW8B,EAAQyB,GAExBA,IAAcA,EAAc1D,EAAU2D,4BAC7C,IAAImB,EAAI,IAAI9E,EAAU0E,UACtBI,EAAE7C,OAASA,EACX,IAAM,IAAIU,EAAI,EAAGA,EAAI7E,KAAK6G,OAAOzC,OAAQS,IAAO,CAE/C,IAAII,EAAQjF,KAAK6G,OAAQhC,GAAIxC,QAC7B4C,EAAMS,SAAUvB,EAAQyB,GACxBoB,EAAEF,SAAU7B,GAIb,OAAO+B,IAMT,IAAIC,EAAwB,KACxBC,EAAuB,KACvBC,EAAyB,KACzBC,EAAsB,KACtBC,EAA0B,KAC1BC,EAAuB,KACvBC,EAAsB,KACtBC,EAA2B,KAC3BC,EAAsB,KACtBC,EAA0B,KAC1BC,EAAkC,KAClCC,EAA4B,EAC5BC,EAA0B,EAC1BC,EAA0C,EAC1CC,EAAgC,IAChCC,EAA6B,MAC7BC,EAA8B,EAC9BC,EAAiC,EAKjCC,EAA4B,EAS5BC,EAAqB,EAoDrBC,EAAwB,EAyBxBC,EAAwB,EAcxBC,EAAwB,EAcxBC,EAAyB,GAczBC,EAAe,EAEnB,SAASC,EAA0B1B,GAElC,OAAOe,GAAiCf,EAIzC,SAAS2B,EAAuB3B,GAE/B,OAAOgB,GAA8BhB,EAqBtC,SAAS4B,EAAkBjD,EAAMkD,GAEhC,IAAIC,EAAW,IAAIC,OAYnB,IAAM,IAAIlE,KAXViE,EAAS1G,OAAOkE,KAAMX,EAAKvD,QAC3B0G,EAASE,YAAY1C,KAAMX,EAAKqD,aAChCF,EAASxG,SAASgE,KAAMX,EAAKrD,UAC7BwG,EAAStG,WAAW8D,KAAMX,EAAKnD,YAC/BsG,EAASpG,MAAM4D,KAAMX,EAAKjD,OAC1BmG,EAAMI,YACNH,EAASrC,KAAO,QAAUd,EAAKc,KAAOoC,EAAMI,UAAUC,WAE/CL,EAAMM,cAAexD,EAAKc,QAChCoC,EAAMM,cAAexD,EAAKc,UAC3BoC,EAAMM,cAAexD,EAAKc,MAAOhC,KAAMqE,GACxBnD,EAAKe,SAAW,CAE9B,IAAI0C,EAAQR,EAAkBjD,EAAKe,SAAU7B,GAAKgE,GAClDC,EAASO,IAAKD,GAIf,OAAON,EAIR,SAASQ,EAAaC,EAASC,GAI9B,IAFA,IAAIC,KAEM5E,EAAI,EAAGA,EAAI0E,EAAQnF,OAAQS,IAEpC4E,EAAMhF,MACLI,EAAG0E,EAAS1E,GACZlB,EAAG6F,EAAS3E,KAWd,IANA4E,EAAMpE,KAAM,SAAWE,EAAGC,GAEzB,OAAOA,EAAE7B,EAAI4B,EAAE5B,IAIR8F,EAAMrF,OAAS,GAEtBqF,EAAMhF,MACLI,EAAG,EACHlB,EAAG,IAKA8F,EAAMrF,OAAS,IACnBqF,EAAMrF,OAAS,GAChB,IAAIsF,EAAM,EAEV,IAAU7E,EAAI,EAAGA,EAAI,EAAGA,IAEvB6E,GAAOD,EAAO5E,GAAIlB,EAAI8F,EAAO5E,GAAIlB,EAIlC+F,EAAM3D,KAAK4D,KAAMD,GAEjB,IAAU7E,EAAI,EAAGA,EAAI,EAAGA,IAEvB4E,EAAO5E,GAAIlB,EAAI8F,EAAO5E,GAAIlB,EAAI+F,EAC9BH,EAAS1E,GAAM4E,EAAO5E,GAAIA,EAC1B2E,EAAS3E,GAAM4E,EAAO5E,GAAIlB,EAM5B,SAASiG,EAAkBjE,EAAMc,GAEhC,GAA4C,GAAvCd,EAAKc,KAAKoD,QAAS,QAAUpD,GACjC,OAAOd,EAER,IAAM,IAAId,KAAKc,EAAKe,SAAW,CAE9B,IAAIoD,EAAMF,EAAkBjE,EAAKe,SAAU7B,GAAK4B,GAEhD,GAAKqD,EACJ,OAAOA,GAQV,SAASC,IAER/J,KAAKgK,gBAAkB,EACvBhK,KAAKiK,aAAe,EACpBjK,KAAKkK,UAAY,EACjBlK,KAAKmK,UAAY,EACjBnK,KAAKoK,eAAiB,EACtBpK,KAAKqK,aACLrK,KAAKsK,YACLtK,KAAKuK,aACLvK,KAAKwK,eACLxK,KAAKyK,aAGLzK,KAAK0K,oBAGL1K,KAAK2K,UACL3K,KAAK4K,UACL5K,KAAK6K,gBAAkB,SAAWhC,GAEjC,GAA2B,GAAtB7I,KAAK4K,OAAOxG,OAAjB,CAMA,IAJA,IAAI0G,KACAC,KACAC,EAAenC,EAAMoC,SAAUjL,KAAK4K,OAAQ,GAAIM,OAE5CF,EAAaG,SAAWH,EAAaG,QAAQC,QAEpDJ,EAAeA,EAAaG,QAI7B,IACIE,EAAwBzC,EADJoC,EAAaM,QAASzC,GACmBA,GACjE7I,KAAKuL,UAAUlC,IAAKgC,GAEpB,IAAM,IAAIxG,EAAI,EAAGA,EAAI7E,KAAK4K,OAAOxG,OAAQS,IAAO,CAI/C,GAFI2G,EAAO5B,EAAkByB,EAAuBrL,KAAK4K,OAAQ/F,GAAIqG,OAEzD,CAEX,IAAIO,EAAQD,EACZV,EAASrG,KAAMgH,GAEfV,EAAatG,KAAMzE,KAAK4K,OAAQ/F,GAAI6G,cAAcJ,eAE5C,CAGN,KADIN,EAAenC,EAAMoC,SAAUjL,KAAK4K,OAAQ/F,GAAIqG,QAC9B,OAElBG,EAAwBzC,EADJoC,EAAaM,QAASzC,GACmBA,GACjE7I,KAAKuL,UAAUlC,IAAKgC,GACpB,IAAIG,EACAC,EADAD,EAAO5B,EAAkByB,EAAuBrL,KAAK4K,OAAQ/F,GAAIqG,OAErEJ,EAASrG,KAAMgH,GAEfV,EAAatG,KAAMzE,KAAK4K,OAAQ/F,GAAI6G,cAAcJ,YAMpD,IAAIK,EAAW,IAAIC,WAAUd,EAAUC,GAEvC/K,KAAKuL,UAAUM,KAAMF,EAAU,IAAI3H,WACnChE,KAAKuL,UAAUO,SAASC,UAAW,IAIpC/L,KAAKsL,QAAU,SAAWzC,GAEzB,GAAK7I,KAAKuL,UAAY,OAAOvL,KAAKuL,UAClC,IACIS,EA4EAC,EA7EAC,EAAW,IAAIC,iBAoBnB,GAjBCH,EADInD,EAAMuD,WAAYpM,KAAKoK,gBACrBvB,EAAMuD,WAAYpM,KAAKoK,gBAAiBkB,QAASzC,GAEjD,IAAIwD,sBACXH,EAASI,SAAU,IAAIC,kBAAiB,IAAIC,YAAaxM,KAAKyM,aAAe,IAC7EP,EAASQ,aAAc,WAAY,IAAIH,kBAAiBvM,KAAK2M,cAAe,IACvE3M,KAAK4M,eAAiB5M,KAAK4M,cAAcxI,OAAS,GACtD8H,EAASQ,aAAc,SAAU,IAAIH,kBAAiBvM,KAAK4M,cAAe,IACtE5M,KAAK6M,cAAgB7M,KAAK6M,aAAazI,OAAS,GACpD8H,EAASQ,aAAc,QAAS,IAAIH,kBAAiBvM,KAAK6M,aAAc,IACpE7M,KAAK8M,kBAAmB,IAAO9M,KAAK8M,kBAAmB,GAAI1I,OAAS,GACxE8H,EAASQ,aAAc,KAAM,IAAIH,kBAAiB,IAAIQ,aAAc/M,KAAK8M,kBAAmB,IAAO,IAC/F9M,KAAK8M,kBAAmB,IAAO9M,KAAK8M,kBAAmB,GAAI1I,OAAS,GACxE8H,EAASQ,aAAc,MAAO,IAAIH,kBAAiB,IAAIQ,aAAc/M,KAAK8M,kBAAmB,IAAO,IAChG9M,KAAKgN,gBAAkBhN,KAAKgN,eAAe5I,OAAS,GACxD8H,EAASQ,aAAc,WAAY,IAAIH,kBAAiBvM,KAAKgN,eAAgB,IACzEhN,KAAKiN,kBAAoBjN,KAAKiN,iBAAiB7I,OAAS,GAC5D8H,EAASQ,aAAc,aAAc,IAAIH,kBAAiBvM,KAAKiN,iBAAkB,IAC7EjN,KAAK4K,OAAOxG,OAAS,EAAI,CAK7B,IAHA,IAAIoF,KACA0D,KAEMrI,EAAI,EAAGA,EAAI7E,KAAK4K,OAAOxG,OAAQS,IAExC,IAAM,IAAID,EAAI,EAAGA,EAAI5E,KAAK4K,OAAQ/F,GAAIsI,SAAS/I,OAAQQ,IAAO,CAE7D,IAAIwI,EAASpN,KAAK4K,OAAQ/F,GAAIsI,SAAUvI,GACnCwI,IAEG5D,EAAS4D,EAAOC,aAAc7D,EAAS4D,EAAOC,eAC9CH,EAAOE,EAAOC,aAAcH,EAAOE,EAAOC,eACjD7D,EAAS4D,EAAOC,WAAY5I,KAAM2I,EAAOE,SACzCJ,EAAOE,EAAOC,WAAY5I,KAAM8I,SAAU1I,KAQ7C,IAAM,IAAIA,KAAKqI,EAEd5D,EAAa4D,EAAOrI,GAAK2E,EAAS3E,IAInC,IAAI2I,KACAC,KAEJ,IAAU5I,EAAI,EAAGA,EAAI2E,EAAQpF,OAAQS,IAEpC,IAAUD,EAAI,EAAGA,EAAI,EAAGA,IAElB4E,EAAS3E,IAAOqI,EAAOrI,IAE3B2I,EAAS/I,KAAM+E,EAAS3E,GAAKD,IAC7B6I,EAAOhJ,KAAMyI,EAAOrI,GAAKD,MAIzB4I,EAAS/I,KAAM,GACfgJ,EAAOhJ,KAAM,IAQhByH,EAASQ,aAAc,aAAc,IAAIH,kBAAiB,IAAIQ,aAAcS,GAAY/E,IACxFyD,EAASQ,aAAc,YAAa,IAAIH,kBAAiB,IAAIQ,aAAcU,GAAUhF,IAkBtF,OAZ2B,GAAtBzI,KAAK4K,OAAOxG,SAChB6H,EAAO,IAAIyB,OAAMxB,EAAUF,IAEvBhM,KAAK4K,OAAOxG,OAAS,IAEzB6H,EAAO,IAAI0B,cAAazB,EAAUF,IAC7B4B,uBAIN5N,KAAKuL,UAAYU,EAEVA,GAMT,SAAS4B,IAER7N,KAAK8N,YAAc,EACnB9N,KAAK+N,YAqDN,SAASC,IAERhO,KAAK+E,QACL/E,KAAKkJ,SAAW,WAEf,IAAI+E,EAAM,GAMV,OALAjO,KAAK+E,KAAKmJ,QAAS,SAAWrJ,GAE7BoJ,GAASE,OAAOC,aAAcvJ,KAGxBoJ,EAAII,QAAS,iBAAkB,KAoBxC,SAASC,IAERtO,KAAKkL,MAAQ,GACblL,KAAKuO,mBACLvO,KAAKwO,aAAe,EACpBxO,KAAKyO,WAAa,EAClBzO,KAAK0O,WACL1O,KAAK2O,aACL3O,KAAKsL,QAAU,SAAWzC,GAEzB,GAAK7I,KAAKuL,UAAY,OAAOvL,KAAKuL,UAClC,IAAIqD,EAAI,IAAIC,WACZD,EAAEnI,KAAOzG,KAAKkL,MACd0D,EAAExM,OAASpC,KAAKuO,gBAAgBjD,UAEhC,IAAM,IAAIzG,EAAI,EAAGA,EAAI7E,KAAK2O,UAAUvK,OAAQS,IAE3C+J,EAAEvF,IAAKrJ,KAAK2O,UAAW9J,GAAIyG,QAASzC,IAIrC,IAAUhE,EAAI,EAAGA,EAAI7E,KAAK0O,QAAQtK,OAAQS,IAEzC+J,EAAEvF,IAAKR,EAAM6F,QAAS1O,KAAK0O,QAAS7J,IAAMyG,QAASzC,IAOpD,OAHA7I,KAAKuL,UAAYqD,EAEjBA,EAAExM,OAAOO,UAAWiM,EAAEtM,SAAUsM,EAAEpM,WAAYoM,EAAElM,OACzCkM,GAMT,SAASE,IAER9O,KAAKkL,MAAQ,GACblL,KAAK+O,YAAc,EACnB/O,KAAK0L,cAAgB,EAItB,SAASsD,IAERhP,KAAKiP,KAAO,GACZjP,KAAKkP,UAAY,EACjBlP,KAAKmP,OAAS,EACdnP,KAAKoP,SACLpP,KAAKqP,YAAc,EACnBrP,KAAKsP,MAAQ,EACbtP,KAAKuP,YAAc,WAElB,IAAIC,EAAU,IAAIC,WAAYzP,KAAKoP,OAAU7N,OACzCmO,EAAS,IAAIC,SAAUH,GACvB7I,EAAI+I,EAAOE,WAAY,GAAG,GAC1BC,EAAIH,EAAOE,WAAY,GAAG,GAC1BpK,EAAIkK,EAAOE,WAAY,GAAG,GAE9B,OAAO,IAAIE,QAAOnJ,EAAGkJ,EAAGrK,IAIzBxF,KAAK+P,YAAc,WAElB,IAAIP,EAAU,IAAIC,WAAYzP,KAAKoP,OAAU7N,OAG7C,OAFa,IAAIoO,SAAUH,GACZI,WAAY,GAAG,IAK/B5P,KAAKgQ,WAAa,WAEjB,IAAIR,EAAU,IAAIC,WAAYzP,KAAKoP,OAAU7N,OAG7C,QAFa,IAAIoO,SAAUH,GACZI,WAAY,GAAG,IAK/B5P,KAAKiQ,aAAe,WAEnB,IAAIC,EAAI,IAAIlC,EAEZ,OADAkC,EAAEnL,KAAO/E,KAAKoP,MACPc,EAAEhH,YAIVlJ,KAAKmQ,UAAY,WAEhB,IAAID,EAAI,IAAIlC,EACZkC,EAAEnL,KAAO/E,KAAKoP,MACd,IAAIxO,EAAOsP,EAAEhH,WASb,OAN8B,IAF9BtI,EAAOA,EAAKyN,QAAS,MAAO,MAElBxE,QAAS,OAElBjJ,EAAOA,EAAKwP,OAAQxP,EAAKyP,YAAa,KAAQ,IAIxCxO,EAAcvB,KAAMM,IAM7B,IAAI0P,GAEHC,YAAa,OACbC,gBAAiB,UACjBC,gBAAiB,WACjBC,iBAAkB,YAClBC,eAAgB,UAChBC,eAAgB,QAChBC,gBAAiB,WACjBC,gBAAiB,WACjBC,mBAAoB,cACpBC,kBAAmB,UACnBC,iBAAkB,YAClBC,oBAAqB,eACrBC,gBAAiB,aACjBC,YAAa,OAIVC,GAEHd,YAAa,SACbC,gBAAiB,OACjBC,gBAAiB,OACjBC,iBAAkB,OAClBC,eAAgB,QAChBC,eAAgB,QAChBC,gBAAiB,QACjBC,gBAAiB,QACjBC,mBAAoB,QACpBC,kBAAmB,QACnBC,iBAAkB,QAClBC,oBAAqB,QACrBC,gBAAiB,QACjBC,YAAa,OAId,SAASE,IAERtR,KAAKuR,cAAgB,EACrBvR,KAAKwR,eAAiB,EACtBxR,KAAKyR,eACLzR,KAAKsL,QAAU,WAId,IAFA,IAAIU,EAAM,IAAI0F,oBAEJ7M,EAAI,EAAGA,EAAI7E,KAAKyR,YAAYrN,OAAQS,IAU7C,GARsD,SAAjDwM,EAAiBrR,KAAKyR,YAAa5M,GAAIoK,QAC3CjD,EAAKsE,EAAiBtQ,KAAKyR,YAAa5M,GAAIoK,OAAWjP,KAAKyR,YAAa5M,GAAIkL,eACxB,SAAjDsB,EAAiBrR,KAAKyR,YAAa5M,GAAIoK,QAC3CjD,EAAKsE,EAAiBtQ,KAAKyR,YAAa5M,GAAIoK,OAAWjP,KAAKyR,YAAa5M,GAAI0K,eACxB,QAAjD8B,EAAiBrR,KAAKyR,YAAa5M,GAAIoK,QAC3CjD,EAAKsE,EAAiBtQ,KAAKyR,YAAa5M,GAAIoK,OAAWjP,KAAKyR,YAAa5M,GAAImL,cACxB,UAAjDqB,EAAiBrR,KAAKyR,YAAa5M,GAAIoK,QAC3CjD,EAAKsE,EAAiBtQ,KAAKyR,YAAa5M,GAAIoK,OAAWjP,KAAKyR,YAAa5M,GAAIoL,gBACxB,OAAjDoB,EAAiBrR,KAAKyR,YAAa5M,GAAIoK,MAAkB,CAE7D,IAAI0C,EAAO3R,KAAKyR,YAAa5M,GACxB8M,EAAKzC,WAAa7G,IACtB2D,EAAI4F,IAAM5R,KAAKyR,YAAa5M,GAAIsL,aAC5BwB,EAAKzC,WAAa5G,IACtB0D,EAAI6F,UAAY7R,KAAKyR,YAAa5M,GAAIsL,aAClCwB,EAAKzC,WAAa1G,IACtBwD,EAAI8F,SAAW9R,KAAKyR,YAAa5M,GAAIsL,aACjCwB,EAAKzC,WAAa3G,IACtByD,EAAI+F,SAAW/R,KAAKyR,YAAa5M,GAAIsL,aAYxC,OANAnE,EAAIgG,QAAQrL,EAAI,IAChBqF,EAAIgG,QAAQnC,EAAI,IAChB7D,EAAIgG,QAAQxM,EAAI,IAChBwG,EAAIiG,MAAMtL,EAAI,EACdqF,EAAIiG,MAAMpC,EAAI,EACd7D,EAAIiG,MAAMzM,EAAI,EACPwG,GAOT,SAASkG,EAASC,EAAIC,EAAIrP,GAEzB,IAAIsP,EAAI,IAAI9P,UACR+P,EAAM,EAAIvP,EAId,OAHAsP,EAAE/O,EAAI6O,EAAG7O,EAAIP,EAAIqP,EAAG9O,EAAIgP,EACxBD,EAAE9O,EAAI4O,EAAG5O,EAAIR,EAAIqP,EAAG7O,EAAI+O,EACxBD,EAAE7O,EAAI2O,EAAG3O,EAAIT,EAAIqP,EAAG5O,EAAI8O,EACjBD,EAIR,SAASE,EAAUC,EAAIC,EAAI1P,GAE1B,OAAOyP,EAAGnQ,QAAQuB,MAAO6O,EAAI,EAAI1P,GAIlC,SAAS2P,EAAaxO,EAAM/B,EAAMwQ,EAAK9P,GAEtC,GAAoB,GAAfqB,EAAKE,OAAc,OAAOF,EAAM,GAAI0O,OAAOtH,UAMhD,IAJA,IAAIuH,EAAOC,IACPtO,EAAM,KACN1B,EAAU,KAEJ+B,EAAI,EAAGA,EAAIX,EAAKE,OAAQS,IAAO,CAExC,IAAIkO,EAAWhN,KAAKG,IAAKhC,EAAMW,GAAImO,MAAQ7Q,GAEtC4Q,EAAWF,GAAQ3O,EAAMW,GAAImO,OAAS7Q,IAE1C0Q,EAAOE,EACPvO,EAAMN,EAAMW,GACZ/B,EAAUoB,EAAMW,EAAI,IAMtB,GAAOL,EAIA,IAAK1B,EAAU,CAErB,IAAImQ,EAAKnQ,EAAQkQ,MAAQxO,EAAIwO,MAEzBjQ,GADIyB,EAAIwO,MAAQ7Q,GACR8Q,EAEZ,OAAOpQ,EAAM2B,EAAIoO,OAAOtH,UAAWxI,EAAQ8P,OAAOtH,UAAWvI,IAI7DD,EAAUoB,EAAM,GAAI7B,SACZ2Q,OAASL,EAEbM,EAAKnQ,EAAQkQ,MAAQxO,EAAIwO,MAEzBjQ,GADIyB,EAAIwO,MAAQ7Q,GACR8Q,EAEZ,OAAOpQ,EAAM2B,EAAIoO,OAAOtH,UAAWxI,EAAQ8P,OAAOtH,UAAWvI,GAnB7D,OAAO,KAyBT,SAASmQ,IAERlT,KAAKmT,UAAY,GACjBnT,KAAKoT,iBAAmB,EACxBpT,KAAKqT,iBAAmB,EACxBrT,KAAKsT,gBAAkB,EACvBtT,KAAKuT,iBACLvT,KAAKwT,iBACLxT,KAAKyT,gBACLzT,KAAK0T,UAAY,GACjB1T,KAAK2T,WAAa,GAClB3T,KAAK0E,KAAO,SAAWkP,GAItB,SAASnO,EAAGA,GAEXA,EAAEuN,OAASY,EAJLA,IAAMA,EAAM,GAQnB5T,KAAKuT,cAAcrF,QAASzI,GAC5BzF,KAAKwT,cAActF,QAASzI,GAC5BzF,KAAKyT,aAAavF,QAASzI,IAI5BzF,KAAK2E,SAAW,WAEf,SAASkP,EAAMtO,EAAGC,GAEjB,OAAOD,EAAEyN,MAAQxN,EAAEwN,MAIpBhT,KAAKuT,cAAclO,KAAMwO,GACzB7T,KAAKwT,cAAcnO,KAAMwO,GACzB7T,KAAKyT,aAAapO,KAAMwO,IAIzB7T,KAAK8T,UAAY,WAEhB,OAAO/N,KAAKgB,IACXhB,KAAKgB,IAAIgN,MAAO,KAAM/T,KAAKuT,cAAc3B,IAAK,SAAWrM,GAExD,OAAOA,EAAEyN,SAGVjN,KAAKgB,IAAIgN,MAAO,KAAM/T,KAAKwT,cAAc5B,IAAK,SAAWrM,GAExD,OAAOA,EAAEyN,SAGVjN,KAAKgB,IAAIgN,MAAO,KAAM/T,KAAKyT,aAAa7B,IAAK,SAAWrM,GAEvD,OAAOA,EAAEyN,WAOZhT,KAAKsL,QAAU,SAAWsD,GAEzB5O,KAAK2E,WAIL,IAHA,IAAIP,EAASpE,KAAK8T,YACd7O,EAAQ,IAAI/C,EAAU+B,cAEhBY,EAAI,EAAGA,EAAIT,EAAQS,GAAK,IAAM,CAEvC,IAAIzC,EAAS,IAAI4B,UACb7B,EAAO0C,EACPmP,EAAMtB,EAAa1S,KAAKuT,cAAepR,EAAMiC,EAAQ8N,GACrDxP,EAAQgQ,EAAa1S,KAAKyT,aAActR,EAAMiC,EAAQ8N,GACtD+B,EAAWvB,EAAa1S,KAAKwT,cAAerR,EAAMiC,EAAQmO,GAC9DnQ,EAAO0B,QAASkQ,EAAKC,EAAUvR,GAE/B,IAAI8B,EAAM,IAAItC,EAAUU,SAAUT,EAAMC,GACxC6C,EAAMV,OAAQC,GAIfS,EAAMd,OAASyK,EAAE3D,SAAUjL,KAAKmT,WAAY7H,UAE5C,IAAIzE,GAAW5B,GAEf,GAAK2J,EAAEzF,cAAenJ,KAAKmT,WAE1B,IAAUtO,EAAI,EAAGA,EAAI+J,EAAEzF,cAAenJ,KAAKmT,WAAY/O,OAAQS,IAAO,CAErE,IAAIqP,EAAKjP,EAAM5C,QACf6R,EAAG/P,OAASyK,EAAEzF,cAAenJ,KAAKmT,WAAatO,GAC/CgC,EAAOpC,KAAMyP,GAMf,OAAOrN,GAMT,SAASsN,IAERnU,KAAKkL,MAAQ,GACblL,KAAKoU,UAAY,EACjBpU,KAAKqU,gBAAkB,EACvBrU,KAAKsU,aAAe,EACpBtU,KAAKuU,aACLvU,KAAKsL,QAAU,SAAW3F,GAEzB,IAAI6O,EAAkB,IAAItS,EAAU0E,UAEpC,IAAM,IAAI/B,KAAK7E,KAAKuU,UAAY,CAE/BvU,KAAKuU,UAAW1P,GAAIH,KAAM1E,KAAKqU,iBAE/B,IAAIxN,EAAS7G,KAAKuU,UAAW1P,GAAIyG,QAAS3F,GAE1C,IAAM,IAAIf,KAAKiC,EAEdA,EAAQjC,GAAIF,OACZ8P,EAAgB1N,SAAUD,EAAQjC,IAWpC,OALA4P,EAAgBpQ,OAAS2B,KAAKgB,IAAIgN,MAAO,KAAMS,EAAgB3N,OAAO+K,IAAK,SAAWnQ,GAErF,OAAOA,EAAE2C,UAGHoQ,GAMT,SAASC,IAERzU,KAAK0U,OAAS,EACd1U,KAAK2U,QAAU,EACf3U,KAAK4U,oBACL5U,KAAK6U,UAIN,SAASC,IAER9U,KAAKkL,MAAQ,GACblL,KAAKsP,MAAQ,EACbtP,KAAK+U,qBAAuB,EAC5B/U,KAAKgV,mBAAqB,EAC1BhV,KAAKiV,sBAAwB,EAC7BjV,KAAKkV,gBAAkB,EACvBlV,KAAKmV,gBAAkB,EACvBnV,KAAKoV,cAAgB,KACrBpV,KAAKqV,eAAiB,KACtBrV,KAAKsV,cAAgB,KAItB,SAASC,IAERvV,KAAKkL,MAAQ,GACblL,KAAKwV,UAAY,KACjBxV,KAAKyV,QAAU,KACfzV,KAAK0V,IAAM,KACX1V,KAAK2V,eAAiB,EACtB3V,KAAK4V,eAAiB,EACtB5V,KAAK6V,cAAgB,EACrB7V,KAAK8V,QAAU,EAoGhB,IAAIC,GAAe,EAEnB,SAASC,EAAWC,GAEnB,IAAIC,EAAMD,EAASrG,WAAYqG,EAASE,WAAYJ,GAEpD,OADAE,EAASE,YAAc,EAChBD,EAIR,SAASE,GAAaH,GAErB,IAAIC,EAAMD,EAASI,WAAYJ,EAASE,WAAYJ,GAEpD,OADAE,EAASE,YAAc,EAChBD,EAYR,SAASI,GAAeL,GAEvB,IAAIC,EAAMD,EAASM,UAAWN,EAASE,WAAYJ,GAEnD,OADAE,EAASE,YAAc,EAChBD,EAIR,SAASM,GAAmBP,GAE3B,IAAIC,EAAMD,EAASQ,UAAWR,EAASE,WAAYJ,GAEnD,OADAE,EAASE,YAAc,EAChBD,EAIR,SAASQ,GAAeT,GAEvB,IAAIC,EAAMD,EAASQ,UAAWR,EAASE,WAAYJ,GAEnD,OADAE,EAASE,YAAc,EAChBD,EAIR,SAASS,GAAiBC,GAEzB,IAAIvE,EAAI,IA5pBT,WAECrS,KAAKsD,EAAI,EACTtD,KAAKuD,EAAI,EACTvD,KAAKwD,EAAI,EAETxD,KAAKsL,QAAU,WAEd,OAAO,IAAI/I,UAASvC,KAAKsD,EAAGtD,KAAKuD,EAAGvD,KAAKwD,KAwpB1C,OAHA6O,EAAE/O,EAAI0S,EAAWY,GACjBvE,EAAE9O,EAAIyS,EAAWY,GACjBvE,EAAE7O,EAAIwS,EAAWY,GACVvE,EAIR,SAASwE,GAAgBD,GAExB,IAAIE,EAAI,IAxpBT,WAEC9W,KAAK2G,EAAI,EACT3G,KAAK6P,EAAI,EACT7P,KAAKwF,EAAI,EACTxF,KAAKuF,EAAI,EACTvF,KAAKsL,QAAU,WAEd,OAAO,IAAIwE,QAAO9P,KAAK2G,EAAG3G,KAAK6P,EAAG7P,KAAKwF,KAopBxC,OAHAsR,EAAEnQ,EAAIqP,EAAWY,GACjBE,EAAEjH,EAAImG,EAAWY,GACjBE,EAAEtR,EAAIwQ,EAAWY,GACVE,EAIR,SAASC,GAAmBH,GAE3B,IAAIvE,EAAI,IAppBT,WAECrS,KAAKsD,EAAI,EACTtD,KAAKuD,EAAI,EACTvD,KAAKwD,EAAI,EACTxD,KAAK2D,EAAI,EACT3D,KAAKsL,QAAU,WAEd,OAAO,IAAI7I,aAAYzC,KAAKsD,EAAGtD,KAAKuD,EAAGvD,KAAKwD,EAAGxD,KAAK2D,KAipBrD,OAJA0O,EAAE1O,EAAIqS,EAAWY,GACjBvE,EAAE/O,EAAI0S,EAAWY,GACjBvE,EAAE9O,EAAIyS,EAAWY,GACjBvE,EAAE7O,EAAIwS,EAAWY,GACVvE,EAIR,SAAS2E,GAAeJ,GAEvB,IAAI1G,EAAI,IAAIlC,EACRiJ,EAAoBT,GAAmBI,GAE3C,OADAA,EAAOM,UAAWhH,EAAEnL,KAAM,EAAGkS,GACtB/G,EAAEhH,WAIV,SAASiO,GAAqBP,GAE7B,IAAIjT,EAAI,IA1pBT,WAEC3D,KAAKqN,UAAY,EACjBrN,KAAKsN,QAAU,GA0pBf,OAFA3J,EAAE0J,UAAYmJ,GAAmBI,GACjCjT,EAAE2J,QAAU0I,EAAWY,GAChBjT,EAIR,SAASyT,GAAkBR,GAI1B,IAFA,IAAIS,EAAI,IAjIT,WAECrX,KAAKsX,uBAMLtX,KAAKsL,QAAU,WAId,IAFA,IAAI+L,EAAI,IAAIrT,UAEFa,EAAI,EAAGA,EAAI,IAAMA,EAE1B,IAAM,IAAI0S,EAAK,EAAGA,EAAK,IAAMA,EAE5BF,EAAEC,SAAc,EAAJzS,EAAQ0S,GAAOvX,KAAKsX,SAAUC,GAAM1S,GAMlD,OAAOwS,IA6GExS,EAAI,EAAGA,EAAI,IAAMA,EAE1B,IAAM,IAAI0S,EAAK,EAAGA,EAAK,IAAMA,EAE5BF,EAAEC,SAAUzS,GAAK0S,GAAOvB,EAAWY,GAMrC,OAAOS,EAIR,SAASG,GAAkBZ,GAE1B,IAAIvE,EAAI,IA7pBT,WAECrS,KAAKgT,MAAQ,EACbhT,KAAK4S,OAAS,MA6pBd,OAFAP,EAAEW,MAAQoD,GAAaQ,GACvBvE,EAAEO,OAAS+D,GAAiBC,GACrBvE,EAIR,SAASoF,GAAgBb,GAExB,IAAIvE,EAAI,IA/pBT,WAECrS,KAAKgT,MAAQ,EACbhT,KAAK4S,OAAS,MA+pBd,OAFAP,EAAEW,MAAQoD,GAAaQ,GACvBvE,EAAEO,OAASmE,GAAmBH,GACvBvE,EAUR,SAASqF,GAAuBd,EAAQ7R,EAAM4S,GAE7C,IAAM,IAAI9S,EAAI,EAAGA,EAAI8S,EAAM9S,IAAOE,EAAMF,GAAM2S,GAAkBZ,GAUjE,SAASgB,GAAYhB,EAAQiB,EAAS7Q,GAGrC,OAAO4P,EAAOkB,KAAMC,OAAQF,GAAM7Q,EAAGgR,IAItC,SAASC,GAAWC,GAEnB,IAAOA,EACN,KAAQ,eAiDV,SAASC,GAAgBvB,EAAQpR,GAwBhC,OArBAyS,GADcvB,GAAeE,IACPrP,GAEtBmP,GAAeE,GACfpR,EAAE0F,MAAQ8L,GAAeJ,GACzBpR,EAAEuJ,YAAcyH,GAAmBI,GACnCpR,EAAEkG,cAAgB0L,GAAkBR,GAG/BwB,GAEJR,GAAYhB,EAAQpR,EAAE2H,SAAU3H,EAAEuJ,cAMlCvJ,EAAE2H,YAhGJ,SAAmCyJ,EAAQ7R,EAAM4S,GAEhD,IAAM,IAAI9S,EAAI,EAAGA,EAAI8S,EAAM9S,IAAOE,EAAMF,GAAMsS,GAAqBP,GA+FlEyB,CAA0BzB,EAAQpR,EAAE2H,SAAU3H,EAAEuJ,cAI1CvJ,EAIR,SAAS8S,GAAgB1B,EAAQ3K,GAGhCgM,GADcvB,GAAeE,IACPxP,GAEtBsP,GAAeE,GACf3K,EAAKjC,gBAAkBwM,GAAmBI,GAC1C3K,EAAKhC,aAAeuM,GAAmBI,GACvC3K,EAAK/B,UAAYsM,GAAmBI,GACpC3K,EAAK9B,UAAYqM,GAAmBI,GACpC3K,EAAK7B,eAAiBoM,GAAmBI,GACzC3K,EAAKsM,oBAEL,IAAIzB,EAAIN,GAAmBI,GAEtBE,EAAIlP,IAEHwQ,GAEJR,GAAYhB,EAAQ3K,EAAK5B,UAAW4B,EAAKhC,eAMzCgC,EAAK5B,aACL4B,EAAKU,cAAgBiK,EAAO4B,WAAY5B,EAAOT,WAAYS,EAAOT,WAAiC,EAApBlK,EAAKhC,aAAmB,GACvG2M,EAAOkB,KAA0B,EAApB7L,EAAKhC,aAAmB,EAAG+N,MAMrClB,EAAIjP,IAEHuQ,GAEJR,GAAYhB,EAAQ3K,EAAK3B,SAAU2B,EAAKhC,eAMxCgC,EAAK3B,YACL2B,EAAKW,cAAgBgK,EAAO4B,WAAY5B,EAAOT,WAAYS,EAAOT,WAAiC,EAApBlK,EAAKhC,aAAmB,GACvG2M,EAAOkB,KAA0B,EAApB7L,EAAKhC,aAAmB,EAAG+N,MAMrClB,EAAIhP,IAEHsQ,IAEJR,GAAYhB,EAAQ3K,EAAK1B,UAAW0B,EAAKhC,cACzC2N,GAAYhB,EAAQ3K,EAAKzB,YAAayB,EAAKhC,gBAM3CgC,EAAK1B,aACL0B,EAAKe,eAAiB4J,EAAO4B,WAAY5B,EAAOT,WAAYS,EAAOT,WAAiC,EAApBlK,EAAKhC,aAAmB,GACxG2M,EAAOkB,KAA0B,EAApB7L,EAAKhC,aAAmB,EAAG+N,IACxC/L,EAAKzB,eACLyB,EAAKgB,iBAAmB2J,EAAO4B,WAAY5B,EAAOT,WAAYS,EAAOT,WAAiC,EAApBlK,EAAKhC,aAAmB,GAC1G2M,EAAOkB,KAA0B,EAApB7L,EAAKhC,aAAmB,EAAG+N,MAM1C,IAAM,IAAIhR,EAAI,EAAGA,EAAIiB,GAEX6O,EAAInO,EAAuB3B,KAFgBA,EAI/CoR,GAEJR,GAAYhB,EAAQ3K,EAAKxB,QAASzD,GAAKiF,EAAKhC,eAM5CgC,EAAKxB,QAASzD,MACdiF,EAAKY,aAAe+J,EAAO4B,WAAY5B,EAAOT,WAAYS,EAAOT,WAAiC,EAApBlK,EAAKhC,aAAmB,GACtG2M,EAAOkB,KAA0B,EAApB7L,EAAKhC,aAAmB,EAAG+N,KAM1C/L,EAAKa,qBAEL,IAAU9F,EAAI,EAAGA,EAAIkB,GAEX4O,EAAIpO,EAA0B1B,KAFgBA,EAOvD,GAFAiF,EAAKsM,iBAAkBvR,GAAMwP,GAAmBI,GAE3CwB,GAEJR,GAAYhB,EAAQ3K,EAAKvB,eAAgB1D,GAAKiF,EAAKhC,kBAE7C,CAINgC,EAAKvB,eAAgB1D,MAErBiF,EAAKa,kBAAmB9F,MAExB,IAAM,IAAIyR,EAAK,EAAGA,EAAKxM,EAAKhC,aAAcwO,IAEzCxM,EAAKa,kBAAmB9F,GAAIvC,KAAMuR,EAAWY,IAC7C3K,EAAKa,kBAAmB9F,GAAIvC,KAAMuR,EAAWY,IAC7CZ,EAAWY,GAYd,GAAKwB,GAEJ5B,GAAmBI,OAEb,CAKN3K,EAAKtB,UACLsB,EAAKQ,eAEL,IAAM,IAAI5H,EAAI,EAAGA,EAAIoH,EAAK/B,YAAcrF,EAAI,CAE3C,IAAI6T,EAAIzM,EAAKtB,OAAQ9F,GAAM,IAAIgJ,EAE/B6K,EAAE5K,YAAcwI,GAAeM,GAC/B8B,EAAE3K,YAEF,IAAM,IAAIxI,EAAI,EAAGA,EAAImT,EAAE5K,cAAgBvI,EAEjC0G,EAAKhC,aAAiB,MAE1ByO,EAAE3K,SAAUxI,GAAM+Q,GAAeM,GAIjC8B,EAAE3K,SAAUxI,GAAMiR,GAAmBI,GAQvC,GAAuB,IAAlB8B,EAAE5K,YAEN7B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,QAE7B,IAAuB,IAAlB2K,EAAE5K,YAWb,MAAQ,IAAI6K,MAAO,yFATnB1M,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,IACnC9B,EAAKQ,YAAYhI,KAAMiU,EAAE3K,SAAU,MAetC,GAAK9B,EAAK9B,UAAY,CAErB8B,EAAKrB,UAEL,IAAUrF,EAAI,EAAGA,EAAI0G,EAAK9B,YAAc5E,EAEvC0G,EAAKrB,OAAQrF,GAAM,IAAIuJ,EACvBqJ,GAAgBvB,EAAQ3K,EAAKrB,OAAQrF,KAQxC,SAASqT,GAA4BhC,EAAQjF,GAG5CsG,GADcvB,GAAeE,IACPjP,GAEtB+O,GAAeE,GACfjF,EAAK1C,KAAO+H,GAAeJ,GAC3BjF,EAAKzC,UAAYsH,GAAmBI,GACpCjF,EAAKxC,OAASqH,GAAmBI,GACjCjF,EAAKtC,YAAcmH,GAAmBI,GACtCjF,EAAKrC,MAAQkH,GAAmBI,GAChCjF,EAAKvC,SACLwH,EAAOM,UAAWvF,EAAKvC,MAAO,EAAGuC,EAAKtC,aAMvC,SAASwJ,GAAoBjC,EAAQ5K,GAQpC,GALAiM,GADcvB,GAAeE,IACPlP,GAEtBgP,GAAeE,GACf5K,EAAIuF,cAAgBvF,EAAIwF,eAAiBgF,GAAmBI,GAEvD5K,EAAIwF,eAAiB,CAEpBxF,EAAIyF,oBAEDzF,EAAIyF,YAIZzF,EAAIyF,eAEJ,IAAM,IAAI5M,EAAI,EAAGA,EAAImH,EAAIwF,iBAAmB3M,EAE3CmH,EAAIyF,YAAa5M,GAAM,IAAImK,EAC3B4J,GAA4BhC,EAAQ5K,EAAIyF,YAAa5M,KAQxD,SAASiU,GAAoBlC,EAAQmC,GAGpCd,GADcvB,GAAeE,IACPvP,GAEtBqP,GAAeE,GACfmC,EAAG5F,UAAY6D,GAAeJ,GAC9BmC,EAAG3F,iBAAmBoD,GAAmBI,GACzCmC,EAAG1F,iBAAmBmD,GAAmBI,GACzCmC,EAAGzF,gBAAkBkD,GAAmBI,GACxCmC,EAAGrF,UAAY8C,GAAmBI,GAClCmC,EAAGpF,WAAa6C,GAAmBI,GAE9BmC,EAAG3F,mBAEFgF,GAEJR,GAAYhB,EAAQmC,EAAGxF,cAAewF,EAAG3F,mBAMzC2F,EAAGxF,iBACHmE,GAAuBd,EAAQmC,EAAGxF,cAAewF,EAAG3F,oBAMjD2F,EAAG1F,mBAEF+E,GAEJR,GAAYhB,EAAQmC,EAAGvF,cAAeuF,EAAG1F,mBAMzC0F,EAAGvF,iBApYN,SAA8BoD,EAAQ7R,EAAM4S,GAE3C,IAAM,IAAI9S,EAAI,EAAGA,EAAI8S,EAAM9S,IAAOE,EAAMF,GAAM4S,GAAgBb,GAmY5DoC,CAAqBpC,EAAQmC,EAAGvF,cAAeuF,EAAG1F,oBAM/C0F,EAAGzF,kBAEF8E,GAEJR,GAAYhB,EAAQmC,EAAGtF,aAAcsF,EAAGzF,kBAMxCyF,EAAGtF,gBACHiE,GAAuBd,EAAQmC,EAAGtF,aAAcsF,EAAGzF,mBAQtD,SAAS2F,GAAgBrC,EAAQsC,GAWhC,GARAjB,GADcvB,GAAeE,IACPpP,GAEtBkP,GAAeE,GACfsC,EAAKhO,MAAQ8L,GAAeJ,GAC5BsC,EAAK9E,UAAYgC,GAAaQ,GAC9BsC,EAAK7E,gBAAkB+B,GAAaQ,GACpCsC,EAAK5E,aAAekC,GAAmBI,GAElCsC,EAAK5E,aAAe,CAExB4E,EAAK3E,aAEL,IAAM,IAAIhP,EAAI,EAAGA,EAAI2T,EAAK5E,eAAiB/O,EAE1C2T,EAAK3E,UAAWhP,GAAM,IAAI2N,EAC1B4F,GAAoBlC,EAAQsC,EAAK3E,UAAWhP,KAQ/C,SAAS4T,GAAmBvC,EAAQwC,GAGnCnB,GADcvB,GAAeE,IACPzP,GAEtBuP,GAAeE,GACfwC,EAAI1E,OAAS8B,GAAmBI,GAChCwC,EAAIzE,QAAU6B,GAAmBI,GACjCA,EAAOM,UAAWkC,EAAIC,cAAe,EAAG,GAEjCjB,KAECgB,EAAIzE,SAOVyE,EAAIvE,UACJ+B,EAAOM,UAAWkC,EAAIvE,OAAQ,EAAGuE,EAAI1E,OAAS0E,EAAIzE,QAAU,KAN5DyE,EAAIvE,UACJ+B,EAAOM,UAAWkC,EAAIvE,OAAQ,EAAGuE,EAAI1E,UAaxC,SAAS4E,GAAiB1C,EAAQ7T,GAGjCkV,GADcvB,GAAeE,IACP1P,GAEtBwP,GAAeE,GACf7T,EAAEmI,MAAQ8L,GAAeJ,GACzB7T,EAAEuM,MAAQkH,GAAmBI,GAExB7T,EAAEuM,OAASnH,IAEfpF,EAAEgS,qBAAuBiB,EAAWY,GACpC7T,EAAEiS,mBAAqBgB,EAAWY,GAClC7T,EAAEkS,sBAAwBe,EAAWY,IAItC7T,EAAEqS,cAAgByB,GAAgBD,GAClC7T,EAAEsS,eAAiBwB,GAAgBD,GACnC7T,EAAEuS,cAAgBuB,GAAgBD,GAE7B7T,EAAEuM,OAASlH,IAEfrF,EAAEmS,gBAAkBc,EAAWY,GAC/B7T,EAAEoS,gBAAkBa,EAAWY,IAMjC,SAAS2C,GAAkB3C,EAAQ4C,GAGlCvB,GADcvB,GAAeE,IACP3P,GAEtByP,GAAeE,GACf4C,EAAItO,MAAQ8L,GAAeJ,GAC3B4C,EAAIhE,UAAYmB,GAAiBC,GACjC4C,EAAI/D,QAAUkB,GAAiBC,GAC/B4C,EAAI9D,IAAMiB,GAAiBC,GAC3B4C,EAAI7D,eAAiBK,EAAWY,GAChC4C,EAAI5D,eAAiBI,EAAWY,GAChC4C,EAAI3D,cAAgBG,EAAWY,GAC/B4C,EAAI1D,QAAUE,EAAWY,GAI1B,SAAS6C,GAAiB7C,EAAQ/N,GAiBjC,GAdAoP,GADcvB,GAAeE,IACPtP,GAEtBoP,GAAeE,GACf/N,EAAM6Q,OAASlD,GAAmBI,GAClC/N,EAAM4F,WAAa+H,GAAmBI,GACtC/N,EAAM8Q,cAAgBnD,GAAmBI,GACzC/N,EAAM+Q,eAAiBpD,GAAmBI,GAC1C/N,EAAMgR,aAAerD,GAAmBI,GACxC/N,EAAMiR,WAAatD,GAAmBI,GACtC/N,EAAMkR,YAAcvD,GAAmBI,GAEvC/N,EAAMmR,UAAY,IAAI1L,EACtBzF,EAAMmR,UA9fP,SAASC,EAAgBrD,EAAQsD,EAAQC,GAGxClC,GADcvB,GAAeE,IACPnP,GAEtBiP,GAAeE,GACf,IAAI5R,EAAO,IAAIsJ,EAQf,GAPAtJ,EAAKmG,QAAU+O,EACflV,EAAKoV,OAASD,EACdnV,EAAKkG,MAAQ8L,GAAeJ,GAC5B5R,EAAKuJ,gBAAkB6I,GAAkBR,GACzC5R,EAAKwJ,aAAegI,GAAmBI,GACvC5R,EAAKyJ,WAAa+H,GAAmBI,GAEhC5R,EAAKyJ,WAAa,CAEtBzJ,EAAK0J,WAEL,IAAM,IAAI7J,EAAI,EAAGA,EAAIG,EAAKyJ,aAAe5J,EAExCG,EAAK0J,QAAS7J,GAAM2R,GAAmBI,GAMzC,GAAK5R,EAAKwJ,aAIT,IAFAxJ,EAAK2J,aAEK9J,EAAI,EAAGA,EAAIG,EAAKwJ,eAAiB3J,EAAI,CAE9C,IAAIwV,EAAQJ,EAAgBrD,EAAQ5R,EAAMmV,KAC1CnV,EAAK2J,UAAW9J,GAAMwV,EAMxB,OAAOrV,EAudWiV,CAAgBrD,EAAQ,KAAM,GAE3C/N,EAAM4F,WAAa,CAEvB5F,EAAM6F,WAEN,IAAM,IAAI7J,EAAI,EAAGA,EAAIgE,EAAM4F,aAAe5J,EAEzCgE,EAAM6F,QAAS7J,GAAM,IAAIkF,EACzBuO,GAAgB1B,EAAQ/N,EAAM6F,QAAS7J,IAOzC,GAAKgE,EAAM8Q,cAAgB,CAE1B9Q,EAAMuD,cAEN,IAAUvH,EAAI,EAAGA,EAAIgE,EAAM8Q,gBAAkB9U,EAE5CgE,EAAMuD,WAAYvH,GAAM,IAAIyM,EAC5BuH,GAAoBjC,EAAQ/N,EAAMuD,WAAYvH,IAOhD,GAAKgE,EAAM+Q,eAAiB,CAE3B/Q,EAAMyR,eAEN,IAAUzV,EAAI,EAAGA,EAAIgE,EAAM+Q,iBAAmB/U,EAE7CgE,EAAMyR,YAAazV,GAAM,IAAIsP,EAC7B8E,GAAgBrC,EAAQ/N,EAAMyR,YAAazV,IAO7C,GAAKgE,EAAMgR,aAAe,CAEzBhR,EAAM0R,aAEN,IAAU1V,EAAI,EAAGA,EAAIgE,EAAMgR,eAAiBhV,EAE3CgE,EAAM0R,UAAW1V,GAAM,IAAI4P,EAC3B0E,GAAmBvC,EAAQ/N,EAAM0R,UAAW1V,IAO9C,GAAKgE,EAAMiR,WAAa,CAEvBjR,EAAM2R,WAEN,IAAU3V,EAAI,EAAGA,EAAIgE,EAAMiR,aAAejV,EAEzCgE,EAAM2R,QAAS3V,GAAM,IAAIiQ,EACzBwE,GAAiB1C,EAAQ/N,EAAM2R,QAAS3V,IAO1C,GAAKgE,EAAMkR,YAAc,CAExBlR,EAAM4R,YAEN,IAAU5V,EAAI,EAAGA,EAAIgE,EAAMkR,cAAgBlV,EAE1CgE,EAAM4R,SAAU5V,GAAM,IAAI0Q,EAC1BgE,GAAkB3C,EAAQ/N,EAAM4R,SAAU5V,KAQ7C,IAgEIuT,GAAWsC,GAhEX1C,GAAe,EACf2C,GAAe,EA2GnB,OA1CA,SAAyBC,GAExB,IAAIC,EAAS,IAh6Bd,WAEC7a,KAAK8a,aAAe,EACpB9a,KAAK+a,aAAe,EACpB/a,KAAKgb,gBAAkB,EACvBhb,KAAKib,aAAe,EACpBjb,KAAK0Z,OAAS,EACd1Z,KAAKyO,WAAa,EAClBzO,KAAK2Z,cAAgB,EACrB3Z,KAAK4Z,eAAiB,EACtB5Z,KAAK6Z,aAAe,EACpB7Z,KAAK8Z,WAAa,EAClB9Z,KAAK+Z,YAAc,EACnB/Z,KAAKga,UAAY,KACjBha,KAAK0O,WACL1O,KAAKoM,cACLpM,KAAKsa,eACLta,KAAKwa,WACLxa,KAAKya,YACLza,KAAKmJ,iBACLnJ,KAAKiL,SAAW,SAAWxE,EAAMd,GAQhC,GANOA,IAENA,EAAO3F,KAAKga,WAIRrU,EAAKuF,OAASzE,EAElB,OAAOd,EAIR,IAAM,IAAId,EAAI,EAAGA,EAAIc,EAAKgJ,UAAUvK,OAAQS,IAAO,CAElD,IAAIiF,EAAM9J,KAAKiL,SAAUxE,EAAMd,EAAKgJ,UAAW9J,IAC/C,GAAKiF,EAAM,OAAOA,EAInB,OAAO,MAIR9J,KAAKsL,QAAU,WAEdtL,KAAKiJ,UAAY,EAx1BnB,SAAoBJ,GAEnB,IAAM,IAAIhE,KAAKgE,EAAM6F,QAAU,CAE9B,IAAIzC,EAAOpD,EAAM6F,QAAS7J,GAC1B,IAAM,IAAIqW,KAAKjP,EAAKrB,OAAS,CAE5B,IAAIuQ,EAAWtS,EAAMoC,SAAUgB,EAAKrB,OAAQsQ,GAAIhQ,OAC3CiQ,IACJA,EAAS/P,QAAS,KAi1BpBgQ,CAAWpb,MAEX,IAAI4O,EAAI5O,KAAKga,UAAU1O,QAAStL,MAEhC,IAAM,IAAI6E,KAAK7E,KAAK0O,QACnB1O,KAAK0O,QAAS7J,GAAIgG,gBAAiB7K,MAEpC,GAAKA,KAAKsa,YAAYlW,OAAS,EAE9B,IAAImB,EAAIvF,KAAKsa,YAAa,GAAIhP,QAAStL,MAIxC,OAASqb,OAAQzM,EAAG0M,UAAW/V,KAm2B5BqR,EAAS,IAAIjH,SAAUiL,GAa3B,GA/ED,SAAuBhE,GAEtBA,EAAOT,WAAa,EACpBS,EAAOkB,KAAO,SAAWyD,EAAKC,GAExBA,GAAOxD,KAEXpB,EAAOT,YAAcoF,GAIjBC,GAAOb,KAEX/D,EAAOT,WAAaoF,IAMtB3E,EAAOM,UAAY,SAAWuE,EAAM9D,EAAM3Q,GAGzC,IADA,IAlwBqBiP,EAElBC,EAgwBCwF,EAAQ/D,EAAO3Q,EACTnC,EAAI,EAAGA,EAAI6W,EAAO7W,IAC3B4W,EAAM5W,IAlwBJqR,GAFkBD,EAowBMjW,MAlwBT2b,SAAU1F,EAASE,YACtCF,EAASE,YAAc,EAChBD,IAowBPU,EAAO4B,WAAa,SAAWoD,EAAOC,GAErC,IACIC,EADO9b,KAAKuB,OACGwa,MAAOH,EAAOC,GACjC,OAAO,IAAI9O,aAAc+O,IAI1BlF,EAAOoF,eAAiB,SAAWJ,EAAOC,GAEzC,IACIC,EADO9b,KAAKuB,OACGwa,MAAOH,EAAOC,GACjC,OAAO,IAAII,YAAaH,IAIzBlF,EAAOsF,cAAgB,SAAWN,EAAOC,GAExC,IACIC,EADO9b,KAAKuB,OACGwa,MAAOH,EAAOC,GACjC,OAAO,IAAIpM,WAAYqM,IAIxBlF,EAAOuF,eAAiB,SAAWP,EAAOC,GAEzC,IACIC,EADO9b,KAAKuB,OACGwa,MAAOH,EAAOC,GACjC,OAAO,IAAIrP,YAAasP,IAYzBM,CAAcxF,GACdA,EAAOkB,KAAM,GAAIE,IAEjB6C,EAAOC,aAAetE,GAAmBI,GAEzCiE,EAAOE,aAAevE,GAAmBI,GAEzCiE,EAAOG,gBAAkBxE,GAAmBI,GAE5CiE,EAAOI,aAAezE,GAAmBI,GACzCwB,GAAY9B,GAAeM,GAAW,EACtC8D,GAAapE,GAAeM,GAAW,EAClCwB,GACJ,KAAM,wCAIP,GAHAxB,EAAOkB,KAAM,IAAKE,IAClBpB,EAAOkB,KAAM,IAAKE,IAClBpB,EAAOkB,KAAM,GAAIE,IACZ0C,GAAa,CAEjB,IAAI2B,EAAmB3F,GAAeE,GAClC0F,EAAiB1F,EAAO2F,WAAa3F,EAAO4F,OAC5CC,KACJ7F,EAAO8F,KAAMD,EAAgB,EAAGH,GAChC,IAAIK,KACJC,WAAYD,EAAkBN,EAAkBI,EAAgBH,GAEhE7C,GADW,IAAIoD,YAAaF,GACL9B,QAIvBpB,GAAiB7C,EAAQiE,GAI1B,OAAOA,EAAOvP,UAIRwR,CAAgBvb,MC7uEzB,IAAAwb,GACAhY,KADA,WAEA,OACAiY,UAAA,KACAC,MAAA,KACAC,OAAA,KACArU,MAAA,KACAsU,SAAA,KACA7B,UAAA,OAGA8B,QAXA,WAYApd,KAAA0E,QAEA2Y,SACA3Y,KADA,WACA,IAAA4Y,EAAAtd,KACAA,KAAAgd,UAAAO,SAAAC,eAAA,aACAxd,KAAAkd,OAAA,IAAAld,KAAAyd,aAAAC,kBAAA,GAAA1d,KAAA2d,iBAAAC,OAAAC,YAAA,OACA7d,KAAAkd,OAAA5a,SAAAoB,IAAA,YACA1D,KAAAkd,OAAAY,GAAApa,IAAA,OACA1D,KAAAkd,OAAAa,QAAA,SACA/d,KAAA6I,MAAA,IAAA7I,KAAAyd,aAAAO,MACA,IAAAhM,EAAA,IAAAhS,KAAAyd,aAAAQ,gBAAA,uBACAjM,EAAA1P,SAAAoB,IAAA,OACA1D,KAAA6I,MAAAQ,IAAA2I,GACA,IAAAkM,EAAA,IAAAle,KAAAyd,aAAAU,iBAAA,YACAD,EAAA5b,SAAAoB,IAAA,OAAA0a,YACApe,KAAA6I,MAAAQ,IAAA6U,GACAle,KAAAmd,SAAA,IAAAnd,KAAAyd,aAAAY,eAAAC,WAAA,IACAte,KAAAmd,SAAAoB,cAAAX,OAAAY,kBACAxe,KAAAmd,SAAAsB,QAAAze,KAAA2d,iBAAAC,OAAAC,aACA7d,KAAAgd,UAAA0B,YAAA1e,KAAAmd,SAAAwB,YACA,IAAAC,EAAA,IAAAC,EAAA,EAAA7e,KAAAkd,OAAAld,KAAAmd,SAAAwB,YACAC,EAAAE,YAAA,IACAF,EAAAG,YAAA,KACA/e,KAAAid,MAAA,IAAAjd,KAAAgf,OACAhf,KAAAid,MAAAgC,IAAAC,MAAAC,KAAA,QACAnf,KAAAgd,UAAA0B,YAAA1e,KAAAid,MAAAgC,MACA,IAAAG,GACA9e,KAAA,+DAAA+e,GACA,IAAAhE,EAAAgE,EAAAhE,OACAA,EAAA/Y,SAAAiB,GAAA,IACA8X,EAAApH,SAAA3Q,EAAAyC,KAAAuZ,GAAA,EACAhC,EAAAzU,MAAAQ,IAAAgS,GACAiC,EAAAhC,UAAA+D,EAAA/D,YAEAsC,OAAA2B,iBAAA,SAAAvf,KAAAwf,gBAAA,GACAxf,KAAAyf,WAEAD,eAnCA,WAoCAxf,KAAA0f,gBAAA1f,KAAAkd,OAAAld,KAAAmd,WAEAsC,QAtCA,WAuCAE,sBAAA3f,KAAAyf,QAAAzf,KAAAmd,SAAAwB,YACA3e,KAAAmd,SAAAyC,OAAA5f,KAAA6I,MAAA7I,KAAAkd,QACAld,KAAAsb,WAAAtb,KAAAsb,UAAArV,QAAA4Z,YAAAC,MAAA,KACA9f,KAAAid,MAAA8C,YCpEeC,GADEJ,OAFjB,WAA0B5f,KAAaigB,eAAbjgB,KAAuCkgB,MAAAC,GAAwB,OAA/DngB,KAA+DogB,GAAA,IAExEC,iBADjB,WAAoC,IAAAC,EAAAtgB,KAAaugB,EAAAD,EAAAL,eAA0BE,EAAAG,EAAAJ,MAAAC,IAAAI,EAAwB,OAAAJ,EAAA,OAAiBK,YAAA,gCAA0CL,EAAA,OAAYM,OAAOC,GAAA,eAAkBJ,EAAAK,GAAA,KAAAR,EAAA,OAAwBM,OAAOC,GAAA,UAAaP,EAAA,KAAUM,OAAOG,KAAA,sBAAAzc,OAAA,SAAA0c,IAAA,cAAiEP,EAAAK,GAAA,cAAAL,EAAAK,GAAA,KAAAR,EAAA,KAA2CM,OAAOG,KAAA,+BAAAzc,OAAA,SAAA0c,IAAA,cAA0EP,EAAAK,GAAA,wBAAAL,EAAAK,GAAA,KAAAR,EAAA,OAAAG,EAAAK,GAAA,qBAAAR,EAAA,KAA2FM,OAAOG,KAAA,qBAAAzc,OAAA,SAAA0c,IAAA,cAAgEP,EAAAK,GAAA,iBAAAL,EAAAK,GAAA,KAAAR,EAAA,OAAAG,EAAAK,GAAA,2BAAAR,EAAA,KAA0FM,OAAOG,KAAA,0DAAAzc,OAAA,SAAA0c,IAAA,cAAqGP,EAAAK,GAAA,wCCEryB,IAcAG,EAdyBC,EAAQ,OAcjCC,CACEjE,EACAiD,GATF,EAVA,SAAAiB,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/91.8f4c3236f972389b60ac.js","sourcesContent":["import {\r\n\tBone,\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tColor,\r\n\tFileLoader,\r\n\tLoader,\r\n\tLoaderUtils,\r\n\tMatrix4,\r\n\tMesh,\r\n\tMeshLambertMaterial,\r\n\tMeshPhongMaterial,\r\n\tObject3D,\r\n\tQuaternion,\r\n\tSkeleton,\r\n\tSkinnedMesh,\r\n\tTextureLoader,\r\n\tVector3\r\n} from \"@/components/build/three.module.js\";\r\n\r\nvar AssimpLoader = function ( manager ) {\r\n\r\n\tLoader.call( this, manager );\r\n\r\n};\r\n\r\nAssimpLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\tconstructor: AssimpLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\r\n\r\n\t\tvar loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( buffer, path ) {\r\n\r\n\t\tvar textureLoader = new TextureLoader( this.manager );\r\n\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar Virtulous = {};\r\n\r\n\t\tVirtulous.KeyFrame = function ( time, matrix ) {\r\n\r\n\t\t\tthis.time = time;\r\n\t\t\tthis.matrix = matrix.clone();\r\n\t\t\tthis.position = new Vector3();\r\n\t\t\tthis.quaternion = new Quaternion();\r\n\t\t\tthis.scale = new Vector3( 1, 1, 1 );\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\t\t\tthis.clone = function () {\r\n\r\n\t\t\t\tvar n = new Virtulous.KeyFrame( this.time, this.matrix );\r\n\t\t\t\treturn n;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.lerp = function ( nextKey, time ) {\r\n\r\n\t\t\t\ttime -= this.time;\r\n\t\t\t\tvar dist = ( nextKey.time - this.time );\r\n\t\t\t\tvar l = time / dist;\r\n\t\t\t\tvar l2 = 1 - l;\r\n\t\t\t\tvar keypos = this.position;\r\n\t\t\t\tvar keyrot = this.quaternion;\r\n\t\t\t\t//      var keyscl =  key.parentspaceScl || key.scl;\r\n\t\t\t\tvar key2pos = nextKey.position;\r\n\t\t\t\tvar key2rot = nextKey.quaternion;\r\n\t\t\t\t//  var key2scl =  key2.parentspaceScl || key2.scl;\r\n\t\t\t\tVirtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\r\n\t\t\t\tVirtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\r\n\t\t\t\tVirtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\r\n\t\t\t\t//     tempAniScale.x = keyscl[0] * l2 + key2scl[0] * l;\r\n\t\t\t\t//     tempAniScale.y = keyscl[1] * l2 + key2scl[1] * l;\r\n\t\t\t\t//     tempAniScale.z = keyscl[2] * l2 + key2scl[2] * l;\r\n\t\t\t\tVirtulous.KeyFrame.tempAniQuat.set( keyrot.x, keyrot.y, keyrot.z, keyrot.w );\r\n\t\t\t\tVirtulous.KeyFrame.tempAniQuat.slerp( key2rot, l );\r\n\t\t\t\treturn Virtulous.KeyFrame.tempAniMatrix.compose( Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale );\r\n\r\n\t\t\t};\r\n\r\n\t\t};\r\n\r\n\t\tVirtulous.KeyFrame.tempAniPos = new Vector3();\r\n\t\tVirtulous.KeyFrame.tempAniQuat = new Quaternion();\r\n\t\tVirtulous.KeyFrame.tempAniScale = new Vector3( 1, 1, 1 );\r\n\t\tVirtulous.KeyFrame.tempAniMatrix = new Matrix4();\r\n\t\tVirtulous.KeyFrameTrack = function () {\r\n\r\n\t\t\tthis.keys = [];\r\n\t\t\tthis.target = null;\r\n\t\t\tthis.time = 0;\r\n\t\t\tthis.length = 0;\r\n\t\t\tthis._accelTable = {};\r\n\t\t\tthis.fps = 20;\r\n\t\t\tthis.addKey = function ( key ) {\r\n\r\n\t\t\t\tthis.keys.push( key );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.init = function () {\r\n\r\n\t\t\t\tthis.sortKeys();\r\n\r\n\t\t\t\tif ( this.keys.length > 0 )\r\n\t\t\t\t\tthis.length = this.keys[ this.keys.length - 1 ].time;\r\n\t\t\t\telse\r\n\t\t\t\t\tthis.length = 0;\r\n\r\n\t\t\t\tif ( ! this.fps ) return;\r\n\r\n\t\t\t\tfor ( var j = 0; j < this.length * this.fps; j ++ ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( this.keys[ i ].time == j ) {\r\n\r\n\t\t\t\t\t\t\tthis._accelTable[ j ] = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t} else if ( this.keys[ i ].time < j / this.fps && this.keys[ i + 1 ] && this.keys[ i + 1 ].time >= j / this.fps ) {\r\n\r\n\t\t\t\t\t\t\tthis._accelTable[ j ] = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.parseFromThree = function ( data ) {\r\n\r\n\t\t\t\tvar fps = data.fps;\r\n\t\t\t\tthis.target = data.node;\r\n\t\t\t\tvar track = data.hierarchy[ 0 ].keys;\r\n\t\t\t\tfor ( var i = 0; i < track.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.addKey( new Virtulous.KeyFrame( i / fps || track[ i ].time, track[ i ].targets[ 0 ].data ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.init();\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.parseFromCollada = function ( data ) {\r\n\r\n\t\t\t\tvar track = data.keys;\r\n\t\t\t\tvar fps = this.fps;\r\n\r\n\t\t\t\tfor ( var i = 0; i < track.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.addKey( new Virtulous.KeyFrame( i / fps || track[ i ].time, track[ i ].matrix ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.init();\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.sortKeys = function () {\r\n\r\n\t\t\t\tthis.keys.sort( this.keySortFunc );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.keySortFunc = function ( a, b ) {\r\n\r\n\t\t\t\treturn a.time - b.time;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.clone = function () {\r\n\r\n\t\t\t\tvar t = new Virtulous.KeyFrameTrack();\r\n\t\t\t\tt.target = this.target;\r\n\t\t\t\tt.time = this.time;\r\n\t\t\t\tt.length = this.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\t\t\t\tt.addKey( this.keys[ i ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt.init();\r\n\t\t\t\treturn t;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.reTarget = function ( root, compareitor ) {\r\n\r\n\t\t\t\tif ( ! compareitor ) compareitor = Virtulous.TrackTargetNodeNameCompare;\r\n\t\t\t\tthis.target = compareitor( root, this.target );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.keySearchAccel = function ( time ) {\r\n\r\n\t\t\t\ttime *= this.fps;\r\n\t\t\t\ttime = Math.floor( time );\r\n\t\t\t\treturn this._accelTable[ time ] || 0;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.setTime = function ( time ) {\r\n\r\n\t\t\t\ttime = Math.abs( time );\r\n\t\t\t\tif ( this.length )\r\n\t\t\t\t\ttime = time % this.length + .05;\r\n\t\t\t\tvar key0 = null;\r\n\t\t\t\tvar key1 = null;\r\n\r\n\t\t\t\tfor ( var i = this.keySearchAccel( time ); i < this.keys.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( this.keys[ i ].time == time ) {\r\n\r\n\t\t\t\t\t\tkey0 = this.keys[ i ];\r\n\t\t\t\t\t\tkey1 = this.keys[ i ];\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t} else if ( this.keys[ i ].time < time && this.keys[ i + 1 ] && this.keys[ i + 1 ].time > time ) {\r\n\r\n\t\t\t\t\t\tkey0 = this.keys[ i ];\r\n\t\t\t\t\t\tkey1 = this.keys[ i + 1 ];\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t} else if ( this.keys[ i ].time < time && i == this.keys.length - 1 ) {\r\n\r\n\t\t\t\t\t\tkey0 = this.keys[ i ];\r\n\t\t\t\t\t\tkey1 = this.keys[ 0 ].clone();\r\n\t\t\t\t\t\tkey1.time += this.length + .05;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( key0 && key1 && key0 !== key1 ) {\r\n\r\n\t\t\t\t\tthis.target.matrixAutoUpdate = false;\r\n\t\t\t\t\tthis.target.matrix.copy( key0.lerp( key1, time ) );\r\n\t\t\t\t\tthis.target.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( key0 && key1 && key0 == key1 ) {\r\n\r\n\t\t\t\t\tthis.target.matrixAutoUpdate = false;\r\n\t\t\t\t\tthis.target.matrix.copy( key0.matrix );\r\n\t\t\t\t\tthis.target.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t};\r\n\r\n\t\tVirtulous.TrackTargetNodeNameCompare = function ( root, target ) {\r\n\r\n\t\t\tfunction find( node, name ) {\r\n\r\n\t\t\t\tif ( node.name == name )\r\n\t\t\t\t\treturn node;\r\n\r\n\t\t\t\tfor ( var i = 0; i < node.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar r = find( node.children[ i ], name );\r\n\t\t\t\t\tif ( r ) return r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn find( root, target.name );\r\n\r\n\t\t};\r\n\r\n\t\tVirtulous.Animation = function () {\r\n\r\n\t\t\tthis.tracks = [];\r\n\t\t\tthis.length = 0;\r\n\r\n\t\t\tthis.addTrack = function ( track ) {\r\n\r\n\t\t\t\tthis.tracks.push( track );\r\n\t\t\t\tthis.length = Math.max( track.length, this.length );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.setTime = function ( time ) {\r\n\r\n\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ )\r\n\t\t\t\t\tthis.tracks[ i ].setTime( time );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.clone = function ( target, compareitor ) {\r\n\r\n\t\t\t\tif ( ! compareitor ) compareitor = Virtulous.TrackTargetNodeNameCompare;\r\n\t\t\t\tvar n = new Virtulous.Animation();\r\n\t\t\t\tn.target = target;\r\n\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar track = this.tracks[ i ].clone();\r\n\t\t\t\t\ttrack.reTarget( target, compareitor );\r\n\t\t\t\t\tn.addTrack( track );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn n;\r\n\r\n\t\t\t};\r\n\r\n\t\t};\r\n\r\n\t\tvar ASSBIN_CHUNK_AICAMERA = 0x1234;\r\n\t\tvar ASSBIN_CHUNK_AILIGHT = 0x1235;\r\n\t\tvar ASSBIN_CHUNK_AITEXTURE = 0x1236;\r\n\t\tvar ASSBIN_CHUNK_AIMESH = 0x1237;\r\n\t\tvar ASSBIN_CHUNK_AINODEANIM = 0x1238;\r\n\t\tvar ASSBIN_CHUNK_AISCENE = 0x1239;\r\n\t\tvar ASSBIN_CHUNK_AIBONE = 0x123a;\r\n\t\tvar ASSBIN_CHUNK_AIANIMATION = 0x123b;\r\n\t\tvar ASSBIN_CHUNK_AINODE = 0x123c;\r\n\t\tvar ASSBIN_CHUNK_AIMATERIAL = 0x123d;\r\n\t\tvar ASSBIN_CHUNK_AIMATERIALPROPERTY = 0x123e;\r\n\t\tvar ASSBIN_MESH_HAS_POSITIONS = 0x1;\r\n\t\tvar ASSBIN_MESH_HAS_NORMALS = 0x2;\r\n\t\tvar ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 0x4;\r\n\t\tvar ASSBIN_MESH_HAS_TEXCOORD_BASE = 0x100;\r\n\t\tvar ASSBIN_MESH_HAS_COLOR_BASE = 0x10000;\r\n\t\tvar AI_MAX_NUMBER_OF_COLOR_SETS = 1;\r\n\t\tvar AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\r\n\t\t//var aiLightSource_UNDEFINED = 0x0;\r\n\t\t//! A directional light source has a well-defined direction\r\n\t\t//! but is infinitely far away. That's quite a good\r\n\t\t//! approximation for sun light.\r\n\t\tvar aiLightSource_DIRECTIONAL = 0x1;\r\n\t\t//! A point light source has a well-defined position\r\n\t\t//! in space but no direction - it emits light in all\r\n\t\t//! directions. A normal bulb is a point light.\r\n\t\t//var aiLightSource_POINT = 0x2;\r\n\t\t//! A spot light source emits light in a specific\r\n\t\t//! angle. It has a position and a direction it is pointing to.\r\n\t\t//! A good example for a spot light is a light spot in\r\n\t\t//! sport arenas.\r\n\t\tvar aiLightSource_SPOT = 0x3;\r\n\t\t//! The generic light level of the world, including the bounces\r\n\t\t//! of all other lightsources.\r\n\t\t//! Typically, there's at most one ambient light in a scene.\r\n\t\t//! This light type doesn't have a valid position, direction, or\r\n\t\t//! other properties, just a color.\r\n\t\t//var aiLightSource_AMBIENT = 0x4;\r\n\t\t/** Flat shading. Shading is done on per-face base,\r\n\t\t *  diffuse only. Also known as 'faceted shading'.\r\n\t\t */\r\n\t\t//var aiShadingMode_Flat = 0x1;\r\n\t\t/** Simple Gouraud shading.\r\n\t\t */\r\n\t\t//var aiShadingMode_Gouraud = 0x2;\r\n\t\t/** Phong-Shading -\r\n\t\t */\r\n\t\t//var aiShadingMode_Phong = 0x3;\r\n\t\t/** Phong-Blinn-Shading\r\n\t\t */\r\n\t\t//var aiShadingMode_Blinn = 0x4;\r\n\t\t/** Toon-Shading per pixel\r\n\t\t *\r\n\t\t *  Also known as 'comic' shader.\r\n\t\t */\r\n\t\t//var aiShadingMode_Toon = 0x5;\r\n\t\t/** OrenNayar-Shading per pixel\r\n\t\t *\r\n\t\t *  Extension to standard Lambertian shading, taking the\r\n\t\t *  roughness of the material into account\r\n\t\t */\r\n\t\t//var aiShadingMode_OrenNayar = 0x6;\r\n\t\t/** Minnaert-Shading per pixel\r\n\t\t *\r\n\t\t *  Extension to standard Lambertian shading, taking the\r\n\t\t *  \"darkness\" of the material into account\r\n\t\t */\r\n\t\t//var aiShadingMode_Minnaert = 0x7;\r\n\t\t/** CookTorrance-Shading per pixel\r\n\t\t *\r\n\t\t *  Special shader for metallic surfaces.\r\n\t\t */\r\n\t\t//var aiShadingMode_CookTorrance = 0x8;\r\n\t\t/** No shading at all. Constant light influence of 1.0.\r\n\t\t */\r\n\t\t//var aiShadingMode_NoShading = 0x9;\r\n\t\t/** Fresnel shading\r\n\t\t */\r\n\t\t//var aiShadingMode_Fresnel = 0xa;\r\n\t\t//var aiTextureType_NONE = 0x0;\r\n\t\t/** The texture is combined with the result of the diffuse\r\n\t\t *  lighting equation.\r\n\t\t */\r\n\t\tvar aiTextureType_DIFFUSE = 0x1;\r\n\t\t/** The texture is combined with the result of the specular\r\n\t\t *  lighting equation.\r\n\t\t */\r\n\t\t//var aiTextureType_SPECULAR = 0x2;\r\n\t\t/** The texture is combined with the result of the ambient\r\n\t\t *  lighting equation.\r\n\t\t */\r\n\t\t//var aiTextureType_AMBIENT = 0x3;\r\n\t\t/** The texture is added to the result of the lighting\r\n\t\t *  calculation. It isn't influenced by incoming light.\r\n\t\t */\r\n\t\t//var aiTextureType_EMISSIVE = 0x4;\r\n\t\t/** The texture is a height map.\r\n\t\t *\r\n\t\t *  By convention, higher gray-scale values stand for\r\n\t\t *  higher elevations from the base height.\r\n\t\t */\r\n\t\t//var aiTextureType_HEIGHT = 0x5;\r\n\t\t/** The texture is a (tangent space) normal-map.\r\n\t\t *\r\n\t\t *  Again, there are several conventions for tangent-space\r\n\t\t *  normal maps. Assimp does (intentionally) not\r\n\t\t *  distinguish here.\r\n\t\t */\r\n\t\tvar aiTextureType_NORMALS = 0x6;\r\n\t\t/** The texture defines the glossiness of the material.\r\n\t\t *\r\n\t\t *  The glossiness is in fact the exponent of the specular\r\n\t\t *  (phong) lighting equation. Usually there is a conversion\r\n\t\t *  function defined to map the linear color values in the\r\n\t\t *  texture to a suitable exponent. Have fun.\r\n\t\t */\r\n\t\t//var aiTextureType_SHININESS = 0x7;\r\n\t\t/** The texture defines per-pixel opacity.\r\n\t\t *\r\n\t\t *  Usually 'white' means opaque and 'black' means\r\n\t\t *  'transparency'. Or quite the opposite. Have fun.\r\n\t\t */\r\n\t\tvar aiTextureType_OPACITY = 0x8;\r\n\t\t/** Displacement texture\r\n\t\t *\r\n\t\t *  The exact purpose and format is application-dependent.\r\n\t\t *  Higher color values stand for higher vertex displacements.\r\n\t\t */\r\n\t\t//var aiTextureType_DISPLACEMENT = 0x9;\r\n\t\t/** Lightmap texture (aka Ambient Occlusion)\r\n\t\t *\r\n\t\t *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are\r\n\t\t *  covered by this material property. The texture contains a\r\n\t\t *  scaling value for the final color value of a pixel. Its\r\n\t\t *  intensity is not affected by incoming light.\r\n\t\t */\r\n\t\tvar aiTextureType_LIGHTMAP = 0xA;\r\n\t\t/** Reflection texture\r\n\t\t *\r\n\t\t * Contains the color of a perfect mirror reflection.\r\n\t\t * Rarely used, almost never for real-time applications.\r\n\t\t */\r\n\t\t//var aiTextureType_REFLECTION = 0xB;\r\n\t\t/** Unknown texture\r\n\t\t *\r\n\t\t *  A texture reference that does not match any of the definitions\r\n\t\t *  above is considered to be 'unknown'. It is still imported,\r\n\t\t *  but is excluded from any further postprocessing.\r\n\t\t */\r\n\t\t//var aiTextureType_UNKNOWN = 0xC;\r\n\t\tvar BONESPERVERT = 4;\r\n\r\n\t\tfunction ASSBIN_MESH_HAS_TEXCOORD( n ) {\r\n\r\n\t\t\treturn ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\r\n\r\n\t\t}\r\n\r\n\t\tfunction ASSBIN_MESH_HAS_COLOR( n ) {\r\n\r\n\t\t\treturn ASSBIN_MESH_HAS_COLOR_BASE << n;\r\n\r\n\t\t}\r\n\r\n\t\tfunction markBones( scene ) {\r\n\r\n\t\t\tfor ( var i in scene.mMeshes ) {\r\n\r\n\t\t\t\tvar mesh = scene.mMeshes[ i ];\r\n\t\t\t\tfor ( var k in mesh.mBones ) {\r\n\r\n\t\t\t\t\tvar boneNode = scene.findNode( mesh.mBones[ k ].mName );\r\n\t\t\t\t\tif ( boneNode )\r\n\t\t\t\t\t\tboneNode.isBone = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction cloneTreeToBones( root, scene ) {\r\n\r\n\t\t\tvar rootBone = new Bone();\r\n\t\t\trootBone.matrix.copy( root.matrix );\r\n\t\t\trootBone.matrixWorld.copy( root.matrixWorld );\r\n\t\t\trootBone.position.copy( root.position );\r\n\t\t\trootBone.quaternion.copy( root.quaternion );\r\n\t\t\trootBone.scale.copy( root.scale );\r\n\t\t\tscene.nodeCount ++;\r\n\t\t\trootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\r\n\r\n\t\t\tif ( ! scene.nodeToBoneMap[ root.name ] )\r\n\t\t\t\tscene.nodeToBoneMap[ root.name ] = [];\r\n\t\t\tscene.nodeToBoneMap[ root.name ].push( rootBone );\r\n\t\t\tfor ( var i in root.children ) {\r\n\r\n\t\t\t\tvar child = cloneTreeToBones( root.children[ i ], scene );\r\n\t\t\t\trootBone.add( child );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn rootBone;\r\n\r\n\t\t}\r\n\r\n\t\tfunction sortWeights( indexes, weights ) {\r\n\r\n\t\t\tvar pairs = [];\r\n\r\n\t\t\tfor ( var i = 0; i < indexes.length; i ++ ) {\r\n\r\n\t\t\t\tpairs.push( {\r\n\t\t\t\t\ti: indexes[ i ],\r\n\t\t\t\t\tw: weights[ i ]\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpairs.sort( function ( a, b ) {\r\n\r\n\t\t\t\treturn b.w - a.w;\r\n\r\n\t\t\t } );\r\n\r\n\t\t\twhile ( pairs.length < 4 ) {\r\n\r\n\t\t\t\tpairs.push( {\r\n\t\t\t\t\ti: 0,\r\n\t\t\t\t\tw: 0\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pairs.length > 4 )\r\n\t\t\t\tpairs.length = 4;\r\n\t\t\tvar sum = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tsum += pairs[ i ].w * pairs[ i ].w;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsum = Math.sqrt( sum );\r\n\r\n\t\t\tfor ( var i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tpairs[ i ].w = pairs[ i ].w / sum;\r\n\t\t\t\tindexes[ i ] = pairs[ i ].i;\r\n\t\t\t\tweights[ i ] = pairs[ i ].w;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction findMatchingBone( root, name ) {\r\n\r\n\t\t\tif ( root.name.indexOf( \"bone_\" + name ) == 0 )\r\n\t\t\t\treturn root;\r\n\r\n\t\t\tfor ( var i in root.children ) {\r\n\r\n\t\t\t\tvar ret = findMatchingBone( root.children[ i ], name );\r\n\r\n\t\t\t\tif ( ret )\r\n\t\t\t\t\treturn ret;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiMesh() {\r\n\r\n\t\t\tthis.mPrimitiveTypes = 0;\r\n\t\t\tthis.mNumVertices = 0;\r\n\t\t\tthis.mNumFaces = 0;\r\n\t\t\tthis.mNumBones = 0;\r\n\t\t\tthis.mMaterialIndex = 0;\r\n\t\t\tthis.mVertices = [];\r\n\t\t\tthis.mNormals = [];\r\n\t\t\tthis.mTangents = [];\r\n\t\t\tthis.mBitangents = [];\r\n\t\t\tthis.mColors = [\r\n\t\t\t\t[]\r\n\t\t\t];\r\n\t\t\tthis.mTextureCoords = [\r\n\t\t\t\t[]\r\n\t\t\t];\r\n\t\t\tthis.mFaces = [];\r\n\t\t\tthis.mBones = [];\r\n\t\t\tthis.hookupSkeletons = function ( scene ) {\r\n\r\n\t\t\t\tif ( this.mBones.length == 0 ) return;\r\n\r\n\t\t\t\tvar allBones = [];\r\n\t\t\t\tvar offsetMatrix = [];\r\n\t\t\t\tvar skeletonRoot = scene.findNode( this.mBones[ 0 ].mName );\r\n\r\n\t\t\t\twhile ( skeletonRoot.mParent && skeletonRoot.mParent.isBone ) {\r\n\r\n\t\t\t\t\tskeletonRoot = skeletonRoot.mParent;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar threeSkeletonRoot = skeletonRoot.toTHREE( scene );\r\n\t\t\t\tvar threeSkeletonRootBone = cloneTreeToBones( threeSkeletonRoot, scene );\r\n\t\t\t\tthis.threeNode.add( threeSkeletonRootBone );\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.mBones.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar bone = findMatchingBone( threeSkeletonRootBone, this.mBones[ i ].mName );\r\n\r\n\t\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\t\tvar tbone = bone;\r\n\t\t\t\t\t\tallBones.push( tbone );\r\n\t\t\t\t\t\t//tbone.matrixAutoUpdate = false;\r\n\t\t\t\t\t\toffsetMatrix.push( this.mBones[ i ].mOffsetMatrix.toTHREE() );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar skeletonRoot = scene.findNode( this.mBones[ i ].mName );\r\n\t\t\t\t\t\tif ( ! skeletonRoot ) return;\r\n\t\t\t\t\t\tvar threeSkeletonRoot = skeletonRoot.toTHREE( scene );\r\n\t\t\t\t\t\tvar threeSkeletonRootBone = cloneTreeToBones( threeSkeletonRoot, scene );\r\n\t\t\t\t\t\tthis.threeNode.add( threeSkeletonRootBone );\r\n\t\t\t\t\t\tvar bone = findMatchingBone( threeSkeletonRootBone, this.mBones[ i ].mName );\r\n\t\t\t\t\t\tvar tbone = bone;\r\n\t\t\t\t\t\tallBones.push( tbone );\r\n\t\t\t\t\t\t//tbone.matrixAutoUpdate = false;\r\n\t\t\t\t\t\toffsetMatrix.push( this.mBones[ i ].mOffsetMatrix.toTHREE() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar skeleton = new Skeleton( allBones, offsetMatrix );\r\n\r\n\t\t\t\tthis.threeNode.bind( skeleton, new Matrix4() );\r\n\t\t\t\tthis.threeNode.material.skinning = true;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.toTHREE = function ( scene ) {\r\n\r\n\t\t\t\tif ( this.threeNode ) return this.threeNode;\r\n\t\t\t\tvar geometry = new BufferGeometry();\r\n\t\t\t\tvar mat;\r\n\t\t\t\tif ( scene.mMaterials[ this.mMaterialIndex ] )\r\n\t\t\t\t\tmat = scene.mMaterials[ this.mMaterialIndex ].toTHREE( scene );\r\n\t\t\t\telse\r\n\t\t\t\t\tmat = new MeshLambertMaterial();\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( new Uint32Array( this.mIndexArray ), 1 ) );\r\n\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( this.mVertexBuffer, 3 ) );\r\n\t\t\t\tif ( this.mNormalBuffer && this.mNormalBuffer.length > 0 )\r\n\t\t\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( this.mNormalBuffer, 3 ) );\r\n\t\t\t\tif ( this.mColorBuffer && this.mColorBuffer.length > 0 )\r\n\t\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( this.mColorBuffer, 4 ) );\r\n\t\t\t\tif ( this.mTexCoordsBuffers[ 0 ] && this.mTexCoordsBuffers[ 0 ].length > 0 )\r\n\t\t\t\t\tgeometry.setAttribute( 'uv', new BufferAttribute( new Float32Array( this.mTexCoordsBuffers[ 0 ] ), 2 ) );\r\n\t\t\t\tif ( this.mTexCoordsBuffers[ 1 ] && this.mTexCoordsBuffers[ 1 ].length > 0 )\r\n\t\t\t\t\tgeometry.setAttribute( 'uv1', new BufferAttribute( new Float32Array( this.mTexCoordsBuffers[ 1 ] ), 2 ) );\r\n\t\t\t\tif ( this.mTangentBuffer && this.mTangentBuffer.length > 0 )\r\n\t\t\t\t\tgeometry.setAttribute( 'tangents', new BufferAttribute( this.mTangentBuffer, 3 ) );\r\n\t\t\t\tif ( this.mBitangentBuffer && this.mBitangentBuffer.length > 0 )\r\n\t\t\t\t\tgeometry.setAttribute( 'bitangents', new BufferAttribute( this.mBitangentBuffer, 3 ) );\r\n\t\t\t\tif ( this.mBones.length > 0 ) {\r\n\r\n\t\t\t\t\tvar weights = [];\r\n\t\t\t\t\tvar bones = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < this.mBones.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < this.mBones[ i ].mWeights.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar weight = this.mBones[ i ].mWeights[ j ];\r\n\t\t\t\t\t\t\tif ( weight ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( ! weights[ weight.mVertexId ] ) weights[ weight.mVertexId ] = [];\r\n\t\t\t\t\t\t\t\tif ( ! bones[ weight.mVertexId ] ) bones[ weight.mVertexId ] = [];\r\n\t\t\t\t\t\t\t\tweights[ weight.mVertexId ].push( weight.mWeight );\r\n\t\t\t\t\t\t\t\tbones[ weight.mVertexId ].push( parseInt( i ) );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i in bones ) {\r\n\r\n\t\t\t\t\t\tsortWeights( bones[ i ], weights[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar _weights = [];\r\n\t\t\t\t\tvar _bones = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < weights.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( weights[ i ] && bones[ i ] ) {\r\n\r\n\t\t\t\t\t\t\t\t_weights.push( weights[ i ][ j ] );\r\n\t\t\t\t\t\t\t\t_bones.push( bones[ i ][ j ] );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t_weights.push( 0 );\r\n\t\t\t\t\t\t\t\t_bones.push( 0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'skinWeight', new BufferAttribute( new Float32Array( _weights ), BONESPERVERT ) );\r\n\t\t\t\t\tgeometry.setAttribute( 'skinIndex', new BufferAttribute( new Float32Array( _bones ), BONESPERVERT ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar mesh;\r\n\r\n\t\t\t\tif ( this.mBones.length == 0 )\r\n\t\t\t\t\tmesh = new Mesh( geometry, mat );\r\n\r\n\t\t\t\tif ( this.mBones.length > 0 ) {\r\n\r\n\t\t\t\t\tmesh = new SkinnedMesh( geometry, mat );\r\n\t\t\t\t\tmesh.normalizeSkinWeights();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.threeNode = mesh;\r\n\t\t\t\t//mesh.matrixAutoUpdate = false;\r\n\t\t\t\treturn mesh;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiFace() {\r\n\r\n\t\t\tthis.mNumIndices = 0;\r\n\t\t\tthis.mIndices = [];\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiVector3D() {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t\tthis.toTHREE = function () {\r\n\r\n\t\t\t\treturn new Vector3( this.x, this.y, this.z );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiColor3D() {\r\n\r\n\t\t\tthis.r = 0;\r\n\t\t\tthis.g = 0;\r\n\t\t\tthis.b = 0;\r\n\t\t\tthis.a = 0;\r\n\t\t\tthis.toTHREE = function () {\r\n\r\n\t\t\t\treturn new Color( this.r, this.g, this.b );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiQuaternion() {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 0;\r\n\t\t\tthis.toTHREE = function () {\r\n\r\n\t\t\t\treturn new Quaternion( this.x, this.y, this.z, this.w );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiVertexWeight() {\r\n\r\n\t\t\tthis.mVertexId = 0;\r\n\t\t\tthis.mWeight = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiString() {\r\n\r\n\t\t\tthis.data = [];\r\n\t\t\tthis.toString = function () {\r\n\r\n\t\t\t\tvar str = '';\r\n\t\t\t\tthis.data.forEach( function ( i ) {\r\n\r\n\t\t\t\t\tstr += ( String.fromCharCode( i ) );\r\n\r\n\t\t\t\t} );\r\n\t\t\t\treturn str.replace( /[^\\x20-\\x7E]+/g, '' );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiVectorKey() {\r\n\r\n\t\t\tthis.mTime = 0;\r\n\t\t\tthis.mValue = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiQuatKey() {\r\n\r\n\t\t\tthis.mTime = 0;\r\n\t\t\tthis.mValue = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiNode() {\r\n\r\n\t\t\tthis.mName = '';\r\n\t\t\tthis.mTransformation = [];\r\n\t\t\tthis.mNumChildren = 0;\r\n\t\t\tthis.mNumMeshes = 0;\r\n\t\t\tthis.mMeshes = [];\r\n\t\t\tthis.mChildren = [];\r\n\t\t\tthis.toTHREE = function ( scene ) {\r\n\r\n\t\t\t\tif ( this.threeNode ) return this.threeNode;\r\n\t\t\t\tvar o = new Object3D();\r\n\t\t\t\to.name = this.mName;\r\n\t\t\t\to.matrix = this.mTransformation.toTHREE();\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.mChildren.length; i ++ ) {\r\n\r\n\t\t\t\t\to.add( this.mChildren[ i ].toTHREE( scene ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.mMeshes.length; i ++ ) {\r\n\r\n\t\t\t\t\to.add( scene.mMeshes[ this.mMeshes[ i ] ].toTHREE( scene ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.threeNode = o;\r\n\t\t\t\t//o.matrixAutoUpdate = false;\r\n\t\t\t\to.matrix.decompose( o.position, o.quaternion, o.scale );\r\n\t\t\t\treturn o;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiBone() {\r\n\r\n\t\t\tthis.mName = '';\r\n\t\t\tthis.mNumWeights = 0;\r\n\t\t\tthis.mOffsetMatrix = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiMaterialProperty() {\r\n\r\n\t\t\tthis.mKey = \"\";\r\n\t\t\tthis.mSemantic = 0;\r\n\t\t\tthis.mIndex = 0;\r\n\t\t\tthis.mData = [];\r\n\t\t\tthis.mDataLength = 0;\r\n\t\t\tthis.mType = 0;\r\n\t\t\tthis.dataAsColor = function () {\r\n\r\n\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\r\n\t\t\t\tvar reader = new DataView( array );\r\n\t\t\t\tvar r = reader.getFloat32( 0, true );\r\n\t\t\t\tvar g = reader.getFloat32( 4, true );\r\n\t\t\t\tvar b = reader.getFloat32( 8, true );\r\n\t\t\t\t//var a = reader.getFloat32(12, true);\r\n\t\t\t\treturn new Color( r, g, b );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.dataAsFloat = function () {\r\n\r\n\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\r\n\t\t\t\tvar reader = new DataView( array );\r\n\t\t\t\tvar r = reader.getFloat32( 0, true );\r\n\t\t\t\treturn r;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.dataAsBool = function () {\r\n\r\n\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\r\n\t\t\t\tvar reader = new DataView( array );\r\n\t\t\t\tvar r = reader.getFloat32( 0, true );\r\n\t\t\t\treturn !! r;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.dataAsString = function () {\r\n\r\n\t\t\t\tvar s = new aiString();\r\n\t\t\t\ts.data = this.mData;\r\n\t\t\t\treturn s.toString();\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.dataAsMap = function () {\r\n\r\n\t\t\t\tvar s = new aiString();\r\n\t\t\t\ts.data = this.mData;\r\n\t\t\t\tvar path = s.toString();\r\n\t\t\t\tpath = path.replace( /\\\\/g, '/' );\r\n\r\n\t\t\t\tif ( path.indexOf( '/' ) != - 1 ) {\r\n\r\n\t\t\t\t\tpath = path.substr( path.lastIndexOf( '/' ) + 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn textureLoader.load( path );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar namePropMapping = {\r\n\r\n\t\t\t\"?mat.name\": \"name\",\r\n\t\t\t\"$mat.shadingm\": \"shading\",\r\n\t\t\t\"$mat.twosided\": \"twoSided\",\r\n\t\t\t\"$mat.wireframe\": \"wireframe\",\r\n\t\t\t\"$clr.ambient\": \"ambient\",\r\n\t\t\t\"$clr.diffuse\": \"color\",\r\n\t\t\t\"$clr.specular\": \"specular\",\r\n\t\t\t\"$clr.emissive\": \"emissive\",\r\n\t\t\t\"$clr.transparent\": \"transparent\",\r\n\t\t\t\"$clr.reflective\": \"reflect\",\r\n\t\t\t\"$mat.shininess\": \"shininess\",\r\n\t\t\t\"$mat.reflectivity\": \"reflectivity\",\r\n\t\t\t\"$mat.refracti\": \"refraction\",\r\n\t\t\t\"$tex.file\": \"map\"\r\n\r\n\t\t};\r\n\r\n\t\tvar nameTypeMapping = {\r\n\r\n\t\t\t\"?mat.name\": \"string\",\r\n\t\t\t\"$mat.shadingm\": \"bool\",\r\n\t\t\t\"$mat.twosided\": \"bool\",\r\n\t\t\t\"$mat.wireframe\": \"bool\",\r\n\t\t\t\"$clr.ambient\": \"color\",\r\n\t\t\t\"$clr.diffuse\": \"color\",\r\n\t\t\t\"$clr.specular\": \"color\",\r\n\t\t\t\"$clr.emissive\": \"color\",\r\n\t\t\t\"$clr.transparent\": \"color\",\r\n\t\t\t\"$clr.reflective\": \"color\",\r\n\t\t\t\"$mat.shininess\": \"float\",\r\n\t\t\t\"$mat.reflectivity\": \"float\",\r\n\t\t\t\"$mat.refracti\": \"float\",\r\n\t\t\t\"$tex.file\": \"map\"\r\n\r\n\t\t};\r\n\r\n\t\tfunction aiMaterial() {\r\n\r\n\t\t\tthis.mNumAllocated = 0;\r\n\t\t\tthis.mNumProperties = 0;\r\n\t\t\tthis.mProperties = [];\r\n\t\t\tthis.toTHREE = function () {\r\n\r\n\t\t\t\tvar mat = new MeshPhongMaterial();\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.mProperties.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'float' )\r\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsFloat();\r\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'color' )\r\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsColor();\r\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'bool' )\r\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsBool();\r\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'string' )\r\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsString();\r\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'map' ) {\r\n\r\n\t\t\t\t\t\tvar prop = this.mProperties[ i ];\r\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_DIFFUSE )\r\n\t\t\t\t\t\t\tmat.map = this.mProperties[ i ].dataAsMap();\r\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_NORMALS )\r\n\t\t\t\t\t\t\tmat.normalMap = this.mProperties[ i ].dataAsMap();\r\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_LIGHTMAP )\r\n\t\t\t\t\t\t\tmat.lightMap = this.mProperties[ i ].dataAsMap();\r\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_OPACITY )\r\n\t\t\t\t\t\t\tmat.alphaMap = this.mProperties[ i ].dataAsMap();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.ambient.r = .53;\r\n\t\t\t\tmat.ambient.g = .53;\r\n\t\t\t\tmat.ambient.b = .53;\r\n\t\t\t\tmat.color.r = 1;\r\n\t\t\t\tmat.color.g = 1;\r\n\t\t\t\tmat.color.b = 1;\r\n\t\t\t\treturn mat;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction veclerp( v1, v2, l ) {\r\n\r\n\t\t\tvar v = new Vector3();\r\n\t\t\tvar lm1 = 1 - l;\r\n\t\t\tv.x = v1.x * l + v2.x * lm1;\r\n\t\t\tv.y = v1.y * l + v2.y * lm1;\r\n\t\t\tv.z = v1.z * l + v2.z * lm1;\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t\tfunction quatlerp( q1, q2, l ) {\r\n\r\n\t\t\treturn q1.clone().slerp( q2, 1 - l );\r\n\r\n\t\t}\r\n\r\n\t\tfunction sampleTrack( keys, time, lne, lerp ) {\r\n\r\n\t\t\tif ( keys.length == 1 ) return keys[ 0 ].mValue.toTHREE();\r\n\r\n\t\t\tvar dist = Infinity;\r\n\t\t\tvar key = null;\r\n\t\t\tvar nextKey = null;\r\n\r\n\t\t\tfor ( var i = 0; i < keys.length; i ++ ) {\r\n\r\n\t\t\t\tvar timeDist = Math.abs( keys[ i ].mTime - time );\r\n\r\n\t\t\t\tif ( timeDist < dist && keys[ i ].mTime <= time ) {\r\n\r\n\t\t\t\t\tdist = timeDist;\r\n\t\t\t\t\tkey = keys[ i ];\r\n\t\t\t\t\tnextKey = keys[ i + 1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! key ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t} else if ( nextKey ) {\r\n\r\n\t\t\t\tvar dT = nextKey.mTime - key.mTime;\r\n\t\t\t\tvar T = key.mTime - time;\r\n\t\t\t\tvar l = T / dT;\r\n\r\n\t\t\t\treturn lerp( key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnextKey = keys[ 0 ].clone();\r\n\t\t\t\tnextKey.mTime += lne;\r\n\r\n\t\t\t\tvar dT = nextKey.mTime - key.mTime;\r\n\t\t\t\tvar T = key.mTime - time;\r\n\t\t\t\tvar l = T / dT;\r\n\r\n\t\t\t\treturn lerp( key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiNodeAnim() {\r\n\r\n\t\t\tthis.mNodeName = \"\";\r\n\t\t\tthis.mNumPositionKeys = 0;\r\n\t\t\tthis.mNumRotationKeys = 0;\r\n\t\t\tthis.mNumScalingKeys = 0;\r\n\t\t\tthis.mPositionKeys = [];\r\n\t\t\tthis.mRotationKeys = [];\r\n\t\t\tthis.mScalingKeys = [];\r\n\t\t\tthis.mPreState = \"\";\r\n\t\t\tthis.mPostState = \"\";\r\n\t\t\tthis.init = function ( tps ) {\r\n\r\n\t\t\t\tif ( ! tps ) tps = 1;\r\n\r\n\t\t\t\tfunction t( t ) {\r\n\r\n\t\t\t\t\tt.mTime /= tps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.mPositionKeys.forEach( t );\r\n\t\t\t\tthis.mRotationKeys.forEach( t );\r\n\t\t\t\tthis.mScalingKeys.forEach( t );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.sortKeys = function () {\r\n\r\n\t\t\t\tfunction comp( a, b ) {\r\n\r\n\t\t\t\t\treturn a.mTime - b.mTime;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.mPositionKeys.sort( comp );\r\n\t\t\t\tthis.mRotationKeys.sort( comp );\r\n\t\t\t\tthis.mScalingKeys.sort( comp );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.getLength = function () {\r\n\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\tMath.max.apply( null, this.mPositionKeys.map( function ( a ) {\r\n\r\n\t\t\t\t\t\treturn a.mTime;\r\n\r\n\t\t\t\t\t} ) ),\r\n\t\t\t\t\tMath.max.apply( null, this.mRotationKeys.map( function ( a ) {\r\n\r\n\t\t\t\t\t\treturn a.mTime;\r\n\r\n\t\t\t\t\t} ) ),\r\n\t\t\t\t\tMath.max.apply( null, this.mScalingKeys.map( function ( a ) {\r\n\r\n\t\t\t\t\t\treturn a.mTime;\r\n\r\n\t\t\t\t } ) )\r\n\t\t\t\t);\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.toTHREE = function ( o ) {\r\n\r\n\t\t\t\tthis.sortKeys();\r\n\t\t\t\tvar length = this.getLength();\r\n\t\t\t\tvar track = new Virtulous.KeyFrameTrack();\r\n\r\n\t\t\t\tfor ( var i = 0; i < length; i += .05 ) {\r\n\r\n\t\t\t\t\tvar matrix = new Matrix4();\r\n\t\t\t\t\tvar time = i;\r\n\t\t\t\t\tvar pos = sampleTrack( this.mPositionKeys, time, length, veclerp );\r\n\t\t\t\t\tvar scale = sampleTrack( this.mScalingKeys, time, length, veclerp );\r\n\t\t\t\t\tvar rotation = sampleTrack( this.mRotationKeys, time, length, quatlerp );\r\n\t\t\t\t\tmatrix.compose( pos, rotation, scale );\r\n\r\n\t\t\t\t\tvar key = new Virtulous.KeyFrame( time, matrix );\r\n\t\t\t\t\ttrack.addKey( key );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttrack.target = o.findNode( this.mNodeName ).toTHREE();\r\n\r\n\t\t\t\tvar tracks = [ track ];\r\n\r\n\t\t\t\tif ( o.nodeToBoneMap[ this.mNodeName ] ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < o.nodeToBoneMap[ this.mNodeName ].length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar t2 = track.clone();\r\n\t\t\t\t\t\tt2.target = o.nodeToBoneMap[ this.mNodeName ][ i ];\r\n\t\t\t\t\t\ttracks.push( t2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn tracks;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiAnimation() {\r\n\r\n\t\t\tthis.mName = \"\";\r\n\t\t\tthis.mDuration = 0;\r\n\t\t\tthis.mTicksPerSecond = 0;\r\n\t\t\tthis.mNumChannels = 0;\r\n\t\t\tthis.mChannels = [];\r\n\t\t\tthis.toTHREE = function ( root ) {\r\n\r\n\t\t\t\tvar animationHandle = new Virtulous.Animation();\r\n\r\n\t\t\t\tfor ( var i in this.mChannels ) {\r\n\r\n\t\t\t\t\tthis.mChannels[ i ].init( this.mTicksPerSecond );\r\n\r\n\t\t\t\t\tvar tracks = this.mChannels[ i ].toTHREE( root );\r\n\r\n\t\t\t\t\tfor ( var j in tracks ) {\r\n\r\n\t\t\t\t\t\ttracks[ j ].init();\r\n\t\t\t\t\t\tanimationHandle.addTrack( tracks[ j ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationHandle.length = Math.max.apply( null, animationHandle.tracks.map( function ( e ) {\r\n\r\n\t\t\t\t\treturn e.length;\r\n\r\n\t\t\t\t} ) );\r\n\t\t\t\treturn animationHandle;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiTexture() {\r\n\r\n\t\t\tthis.mWidth = 0;\r\n\t\t\tthis.mHeight = 0;\r\n\t\t\tthis.texAchFormatHint = [];\r\n\t\t\tthis.pcData = [];\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiLight() {\r\n\r\n\t\t\tthis.mName = '';\r\n\t\t\tthis.mType = 0;\r\n\t\t\tthis.mAttenuationConstant = 0;\r\n\t\t\tthis.mAttenuationLinear = 0;\r\n\t\t\tthis.mAttenuationQuadratic = 0;\r\n\t\t\tthis.mAngleInnerCone = 0;\r\n\t\t\tthis.mAngleOuterCone = 0;\r\n\t\t\tthis.mColorDiffuse = null;\r\n\t\t\tthis.mColorSpecular = null;\r\n\t\t\tthis.mColorAmbient = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiCamera() {\r\n\r\n\t\t\tthis.mName = '';\r\n\t\t\tthis.mPosition = null;\r\n\t\t\tthis.mLookAt = null;\r\n\t\t\tthis.mUp = null;\r\n\t\t\tthis.mHorizontalFOV = 0;\r\n\t\t\tthis.mClipPlaneNear = 0;\r\n\t\t\tthis.mClipPlaneFar = 0;\r\n\t\t\tthis.mAspect = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiScene() {\r\n\r\n\t\t\tthis.versionMajor = 0;\r\n\t\t\tthis.versionMinor = 0;\r\n\t\t\tthis.versionRevision = 0;\r\n\t\t\tthis.compileFlags = 0;\r\n\t\t\tthis.mFlags = 0;\r\n\t\t\tthis.mNumMeshes = 0;\r\n\t\t\tthis.mNumMaterials = 0;\r\n\t\t\tthis.mNumAnimations = 0;\r\n\t\t\tthis.mNumTextures = 0;\r\n\t\t\tthis.mNumLights = 0;\r\n\t\t\tthis.mNumCameras = 0;\r\n\t\t\tthis.mRootNode = null;\r\n\t\t\tthis.mMeshes = [];\r\n\t\t\tthis.mMaterials = [];\r\n\t\t\tthis.mAnimations = [];\r\n\t\t\tthis.mLights = [];\r\n\t\t\tthis.mCameras = [];\r\n\t\t\tthis.nodeToBoneMap = {};\r\n\t\t\tthis.findNode = function ( name, root ) {\r\n\r\n\t\t\t\tif ( ! root ) {\r\n\r\n\t\t\t\t\troot = this.mRootNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( root.mName == name ) {\r\n\r\n\t\t\t\t\treturn root;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < root.mChildren.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar ret = this.findNode( name, root.mChildren[ i ] );\r\n\t\t\t\t\tif ( ret ) return ret;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tthis.toTHREE = function () {\r\n\r\n\t\t\t\tthis.nodeCount = 0;\r\n\r\n\t\t\t\tmarkBones( this );\r\n\r\n\t\t\t\tvar o = this.mRootNode.toTHREE( this );\r\n\r\n\t\t\t\tfor ( var i in this.mMeshes )\r\n\t\t\t\t\tthis.mMeshes[ i ].hookupSkeletons( this );\r\n\r\n\t\t\t\tif ( this.mAnimations.length > 0 ) {\r\n\r\n\t\t\t\t\tvar a = this.mAnimations[ 0 ].toTHREE( this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn { object: o, animation: a };\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction aiMatrix4() {\r\n\r\n\t\t\tthis.elements = [\r\n\t\t\t\t[],\r\n\t\t\t\t[],\r\n\t\t\t\t[],\r\n\t\t\t\t[]\r\n\t\t\t];\r\n\t\t\tthis.toTHREE = function () {\r\n\r\n\t\t\t\tvar m = new Matrix4();\r\n\r\n\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\r\n\r\n\t\t\t\t\tfor ( var i2 = 0; i2 < 4; ++ i2 ) {\r\n\r\n\t\t\t\t\t\tm.elements[ i * 4 + i2 ] = this.elements[ i2 ][ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn m;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar littleEndian = true;\r\n\r\n\t\tfunction readFloat( dataview ) {\r\n\r\n\t\t\tvar val = dataview.getFloat32( dataview.readOffset, littleEndian );\r\n\t\t\tdataview.readOffset += 4;\r\n\t\t\treturn val;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_double( dataview ) {\r\n\r\n\t\t\tvar val = dataview.getFloat64( dataview.readOffset, littleEndian );\r\n\t\t\tdataview.readOffset += 8;\r\n\t\t\treturn val;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_uint8_t( dataview ) {\r\n\r\n\t\t\tvar val = dataview.getUint8( dataview.readOffset );\r\n\t\t\tdataview.readOffset += 1;\r\n\t\t\treturn val;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_uint16_t( dataview ) {\r\n\r\n\t\t\tvar val = dataview.getUint16( dataview.readOffset, littleEndian );\r\n\t\t\tdataview.readOffset += 2;\r\n\t\t\treturn val;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_unsigned_int( dataview ) {\r\n\r\n\t\t\tvar val = dataview.getUint32( dataview.readOffset, littleEndian );\r\n\t\t\tdataview.readOffset += 4;\r\n\t\t\treturn val;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_uint32_t( dataview ) {\r\n\r\n\t\t\tvar val = dataview.getUint32( dataview.readOffset, littleEndian );\r\n\t\t\tdataview.readOffset += 4;\r\n\t\t\treturn val;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiVector3D( stream ) {\r\n\r\n\t\t\tvar v = new aiVector3D();\r\n\t\t\tv.x = readFloat( stream );\r\n\t\t\tv.y = readFloat( stream );\r\n\t\t\tv.z = readFloat( stream );\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiColor3D( stream ) {\r\n\r\n\t\t\tvar c = new aiColor3D();\r\n\t\t\tc.r = readFloat( stream );\r\n\t\t\tc.g = readFloat( stream );\r\n\t\t\tc.b = readFloat( stream );\r\n\t\t\treturn c;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiQuaternion( stream ) {\r\n\r\n\t\t\tvar v = new aiQuaternion();\r\n\t\t\tv.w = readFloat( stream );\r\n\t\t\tv.x = readFloat( stream );\r\n\t\t\tv.y = readFloat( stream );\r\n\t\t\tv.z = readFloat( stream );\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiString( stream ) {\r\n\r\n\t\t\tvar s = new aiString();\r\n\t\t\tvar stringlengthbytes = Read_unsigned_int( stream );\r\n\t\t\tstream.ReadBytes( s.data, 1, stringlengthbytes );\r\n\t\t\treturn s.toString();\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiVertexWeight( stream ) {\r\n\r\n\t\t\tvar w = new aiVertexWeight();\r\n\t\t\tw.mVertexId = Read_unsigned_int( stream );\r\n\t\t\tw.mWeight = readFloat( stream );\r\n\t\t\treturn w;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiMatrix4x4( stream ) {\r\n\r\n\t\t\tvar m = new aiMatrix4();\r\n\r\n\t\t\tfor ( var i = 0; i < 4; ++ i ) {\r\n\r\n\t\t\t\tfor ( var i2 = 0; i2 < 4; ++ i2 ) {\r\n\r\n\t\t\t\t\tm.elements[ i ][ i2 ] = readFloat( stream );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn m;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiVectorKey( stream ) {\r\n\r\n\t\t\tvar v = new aiVectorKey();\r\n\t\t\tv.mTime = Read_double( stream );\r\n\t\t\tv.mValue = Read_aiVector3D( stream );\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t\tfunction Read_aiQuatKey( stream ) {\r\n\r\n\t\t\tvar v = new aiQuatKey();\r\n\t\t\tv.mTime = Read_double( stream );\r\n\t\t\tv.mValue = Read_aiQuaternion( stream );\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadArray_aiVertexWeight( stream, data, size ) {\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiVertexWeight( stream );\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadArray_aiVectorKey( stream, data, size ) {\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiVectorKey( stream );\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadArray_aiQuatKey( stream, data, size ) {\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiQuatKey( stream );\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBounds( stream, T /*p*/, n ) {\r\n\r\n\t\t\t// not sure what to do here, the data isn't really useful.\r\n\t\t\treturn stream.Seek( sizeof( T ) * n, aiOrigin_CUR ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t\tfunction ai_assert( bool ) {\r\n\r\n\t\t\tif ( ! bool )\r\n\t\t\t\tthrow ( \"asset failed\" );\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryNode( stream, parent, depth ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AINODE );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tvar node = new aiNode();\r\n\t\t\tnode.mParent = parent;\r\n\t\t\tnode.mDepth = depth;\r\n\t\t\tnode.mName = Read_aiString( stream );\r\n\t\t\tnode.mTransformation = Read_aiMatrix4x4( stream );\r\n\t\t\tnode.mNumChildren = Read_unsigned_int( stream );\r\n\t\t\tnode.mNumMeshes = Read_unsigned_int( stream );\r\n\r\n\t\t\tif ( node.mNumMeshes ) {\r\n\r\n\t\t\t\tnode.mMeshes = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < node.mNumMeshes; ++ i ) {\r\n\r\n\t\t\t\t\tnode.mMeshes[ i ] = Read_unsigned_int( stream );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( node.mNumChildren ) {\r\n\r\n\t\t\t\tnode.mChildren = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < node.mNumChildren; ++ i ) {\r\n\r\n\t\t\t\t\tvar node2 = ReadBinaryNode( stream, node, depth ++ );\r\n\t\t\t\t\tnode.mChildren[ i ] = node2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\r\n\t\t}\r\n\r\n\t\t// -----------------------------------------------------------------------------------\r\n\r\n\t\tfunction ReadBinaryBone( stream, b ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIBONE );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tb.mName = Read_aiString( stream );\r\n\t\t\tb.mNumWeights = Read_unsigned_int( stream );\r\n\t\t\tb.mOffsetMatrix = Read_aiMatrix4x4( stream );\r\n\t\t\t// for the moment we write dumb min/max values for the bones, too.\r\n\t\t\t// maybe I'll add a better, hash-like solution later\r\n\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\tReadBounds( stream, b.mWeights, b.mNumWeights );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// else write as usual\r\n\r\n\t\t\t\tb.mWeights = [];\r\n\t\t\t\tReadArray_aiVertexWeight( stream, b.mWeights, b.mNumWeights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn b;\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryMesh( stream, mesh ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMESH );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tmesh.mPrimitiveTypes = Read_unsigned_int( stream );\r\n\t\t\tmesh.mNumVertices = Read_unsigned_int( stream );\r\n\t\t\tmesh.mNumFaces = Read_unsigned_int( stream );\r\n\t\t\tmesh.mNumBones = Read_unsigned_int( stream );\r\n\t\t\tmesh.mMaterialIndex = Read_unsigned_int( stream );\r\n\t\t\tmesh.mNumUVComponents = [];\r\n\t\t\t// first of all, write bits for all existent vertex components\r\n\t\t\tvar c = Read_unsigned_int( stream );\r\n\r\n\t\t\tif ( c & ASSBIN_MESH_HAS_POSITIONS ) {\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, mesh.mVertices, mesh.mNumVertices );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tmesh.mVertices = [];\r\n\t\t\t\t\tmesh.mVertexBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\r\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( c & ASSBIN_MESH_HAS_NORMALS ) {\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, mesh.mNormals, mesh.mNumVertices );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tmesh.mNormals = [];\r\n\t\t\t\t\tmesh.mNormalBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\r\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS ) {\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, mesh.mTangents, mesh.mNumVertices );\r\n\t\t\t\t\tReadBounds( stream, mesh.mBitangents, mesh.mNumVertices );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tmesh.mTangents = [];\r\n\t\t\t\t\tmesh.mTangentBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\r\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\r\n\t\t\t\t\tmesh.mBitangents = [];\r\n\t\t\t\t\tmesh.mBitangentBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\r\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++ n ) {\r\n\r\n\t\t\t\tif ( ! ( c & ASSBIN_MESH_HAS_COLOR( n ) ) ) break;\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, mesh.mColors[ n ], mesh.mNumVertices );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tmesh.mColors[ n ] = [];\r\n\t\t\t\t\tmesh.mColorBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4 );\r\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 4 * 4, aiOrigin_CUR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmesh.mTexCoordsBuffers = [];\r\n\r\n\t\t\tfor ( var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++ n ) {\r\n\r\n\t\t\t\tif ( ! ( c & ASSBIN_MESH_HAS_TEXCOORD( n ) ) ) break;\r\n\r\n\t\t\t\t// write number of UV components\r\n\t\t\t\tmesh.mNumUVComponents[ n ] = Read_unsigned_int( stream );\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, mesh.mTextureCoords[ n ], mesh.mNumVertices );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tmesh.mTextureCoords[ n ] = [];\r\n\t\t\t\t\t//note that assbin always writes 3d texcoords\r\n\t\t\t\t\tmesh.mTexCoordsBuffers[ n ] = [];\r\n\r\n\t\t\t\t\tfor ( var uv = 0; uv < mesh.mNumVertices; uv ++ ) {\r\n\r\n\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ].push( readFloat( stream ) );\r\n\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ].push( readFloat( stream ) );\r\n\t\t\t\t\t\treadFloat( stream );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// write faces. There are no floating-point calculations involved\r\n\t\t\t// in these, so we can write a simple hash over the face data\r\n\t\t\t// to the dump file. We generate a single 32 Bit hash for 512 faces\r\n\t\t\t// using Assimp's standard hashing function.\r\n\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\tRead_unsigned_int( stream );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t// if there are less than 2^16 vertices, we can simply use 16 bit integers ...\r\n\t\t\t\tmesh.mFaces = [];\r\n\t\t\t\tmesh.mIndexArray = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < mesh.mNumFaces; ++ i ) {\r\n\r\n\t\t\t\t\tvar f = mesh.mFaces[ i ] = new aiFace();\r\n\t\t\t\t\t// BOOST_STATIC_ASSERT(AI_MAX_FACE_INDICES <= 0xffff);\r\n\t\t\t\t\tf.mNumIndices = Read_uint16_t( stream );\r\n\t\t\t\t\tf.mIndices = [];\r\n\r\n\t\t\t\t\tfor ( var a = 0; a < f.mNumIndices; ++ a ) {\r\n\r\n\t\t\t\t\t\tif ( mesh.mNumVertices < ( 1 << 16 ) ) {\r\n\r\n\t\t\t\t\t\t\tf.mIndices[ a ] = Read_uint16_t( stream );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tf.mIndices[ a ] = Read_unsigned_int( stream );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( f.mNumIndices === 3 ) {\r\n\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 1 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\r\n\r\n\t\t\t\t\t} else if ( f.mNumIndices === 4 ) {\r\n\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 1 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 3 ] );\r\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthrow ( new Error( \"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\" ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// write bones\r\n\t\t\tif ( mesh.mNumBones ) {\r\n\r\n\t\t\t\tmesh.mBones = [];\r\n\r\n\t\t\t\tfor ( var a = 0; a < mesh.mNumBones; ++ a ) {\r\n\r\n\t\t\t\t\tmesh.mBones[ a ] = new aiBone();\r\n\t\t\t\t\tReadBinaryBone( stream, mesh.mBones[ a ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryMaterialProperty( stream, prop ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tprop.mKey = Read_aiString( stream );\r\n\t\t\tprop.mSemantic = Read_unsigned_int( stream );\r\n\t\t\tprop.mIndex = Read_unsigned_int( stream );\r\n\t\t\tprop.mDataLength = Read_unsigned_int( stream );\r\n\t\t\tprop.mType = Read_unsigned_int( stream );\r\n\t\t\tprop.mData = [];\r\n\t\t\tstream.ReadBytes( prop.mData, 1, prop.mDataLength );\r\n\r\n\t\t}\r\n\r\n\t\t// -----------------------------------------------------------------------------------\r\n\r\n\t\tfunction ReadBinaryMaterial( stream, mat ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMATERIAL );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tmat.mNumAllocated = mat.mNumProperties = Read_unsigned_int( stream );\r\n\r\n\t\t\tif ( mat.mNumProperties ) {\r\n\r\n\t\t\t\tif ( mat.mProperties ) {\r\n\r\n\t\t\t\t\tdelete mat.mProperties;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.mProperties = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < mat.mNumProperties; ++ i ) {\r\n\r\n\t\t\t\t\tmat.mProperties[ i ] = new aiMaterialProperty();\r\n\t\t\t\t\tReadBinaryMaterialProperty( stream, mat.mProperties[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryNodeAnim( stream, nd ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AINODEANIM );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tnd.mNodeName = Read_aiString( stream );\r\n\t\t\tnd.mNumPositionKeys = Read_unsigned_int( stream );\r\n\t\t\tnd.mNumRotationKeys = Read_unsigned_int( stream );\r\n\t\t\tnd.mNumScalingKeys = Read_unsigned_int( stream );\r\n\t\t\tnd.mPreState = Read_unsigned_int( stream );\r\n\t\t\tnd.mPostState = Read_unsigned_int( stream );\r\n\r\n\t\t\tif ( nd.mNumPositionKeys ) {\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, nd.mPositionKeys, nd.mNumPositionKeys );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tnd.mPositionKeys = [];\r\n\t\t\t\t\tReadArray_aiVectorKey( stream, nd.mPositionKeys, nd.mNumPositionKeys );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( nd.mNumRotationKeys ) {\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, nd.mRotationKeys, nd.mNumRotationKeys );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t \t\t\t// else write as usual\r\n\r\n\t\t\t\t\tnd.mRotationKeys = [];\r\n\t\t\t\t\tReadArray_aiQuatKey( stream, nd.mRotationKeys, nd.mNumRotationKeys );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( nd.mNumScalingKeys ) {\r\n\r\n\t\t\t\tif ( shortened ) {\r\n\r\n\t\t\t\t\tReadBounds( stream, nd.mScalingKeys, nd.mNumScalingKeys );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t \t\t\t\t// else write as usual\r\n\r\n\t\t\t\t\tnd.mScalingKeys = [];\r\n\t\t\t\t\tReadArray_aiVectorKey( stream, nd.mScalingKeys, nd.mNumScalingKeys );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryAnim( stream, anim ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIANIMATION );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tanim.mName = Read_aiString( stream );\r\n\t\t\tanim.mDuration = Read_double( stream );\r\n\t\t\tanim.mTicksPerSecond = Read_double( stream );\r\n\t\t\tanim.mNumChannels = Read_unsigned_int( stream );\r\n\r\n\t\t\tif ( anim.mNumChannels ) {\r\n\r\n\t\t\t\tanim.mChannels = [];\r\n\r\n\t\t\t\tfor ( var a = 0; a < anim.mNumChannels; ++ a ) {\r\n\r\n\t\t\t\t\tanim.mChannels[ a ] = new aiNodeAnim();\r\n\t\t\t\t\tReadBinaryNodeAnim( stream, anim.mChannels[ a ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryTexture( stream, tex ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AITEXTURE );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\ttex.mWidth = Read_unsigned_int( stream );\r\n\t\t\ttex.mHeight = Read_unsigned_int( stream );\r\n\t\t\tstream.ReadBytes( tex.achFormatHint, 1, 4 );\r\n\r\n\t\t\tif ( ! shortened ) {\r\n\r\n\t\t\t\tif ( ! tex.mHeight ) {\r\n\r\n\t\t\t\t\ttex.pcData = [];\r\n\t\t\t\t\tstream.ReadBytes( tex.pcData, 1, tex.mWidth );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttex.pcData = [];\r\n\t\t\t\t\tstream.ReadBytes( tex.pcData, 1, tex.mWidth * tex.mHeight * 4 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryLight( stream, l ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AILIGHT );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tl.mName = Read_aiString( stream );\r\n\t\t\tl.mType = Read_unsigned_int( stream );\r\n\r\n\t\t\tif ( l.mType != aiLightSource_DIRECTIONAL ) {\r\n\r\n\t\t\t\tl.mAttenuationConstant = readFloat( stream );\r\n\t\t\t\tl.mAttenuationLinear = readFloat( stream );\r\n\t\t\t\tl.mAttenuationQuadratic = readFloat( stream );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tl.mColorDiffuse = Read_aiColor3D( stream );\r\n\t\t\tl.mColorSpecular = Read_aiColor3D( stream );\r\n\t\t\tl.mColorAmbient = Read_aiColor3D( stream );\r\n\r\n\t\t\tif ( l.mType == aiLightSource_SPOT ) {\r\n\r\n\t\t\t\tl.mAngleInnerCone = readFloat( stream );\r\n\t\t\t\tl.mAngleOuterCone = readFloat( stream );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryCamera( stream, cam ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AICAMERA );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tcam.mName = Read_aiString( stream );\r\n\t\t\tcam.mPosition = Read_aiVector3D( stream );\r\n\t\t\tcam.mLookAt = Read_aiVector3D( stream );\r\n\t\t\tcam.mUp = Read_aiVector3D( stream );\r\n\t\t\tcam.mHorizontalFOV = readFloat( stream );\r\n\t\t\tcam.mClipPlaneNear = readFloat( stream );\r\n\t\t\tcam.mClipPlaneFar = readFloat( stream );\r\n\t\t\tcam.mAspect = readFloat( stream );\r\n\r\n\t\t}\r\n\r\n\t\tfunction ReadBinaryScene( stream, scene ) {\r\n\r\n\t\t\tvar chunkID = Read_uint32_t( stream );\r\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AISCENE );\r\n\t\t\t/*uint32_t size =*/\r\n\t\t\tRead_uint32_t( stream );\r\n\t\t\tscene.mFlags = Read_unsigned_int( stream );\r\n\t\t\tscene.mNumMeshes = Read_unsigned_int( stream );\r\n\t\t\tscene.mNumMaterials = Read_unsigned_int( stream );\r\n\t\t\tscene.mNumAnimations = Read_unsigned_int( stream );\r\n\t\t\tscene.mNumTextures = Read_unsigned_int( stream );\r\n\t\t\tscene.mNumLights = Read_unsigned_int( stream );\r\n\t\t\tscene.mNumCameras = Read_unsigned_int( stream );\r\n\t\t\t// Read node graph\r\n\t\t\tscene.mRootNode = new aiNode();\r\n\t\t\tscene.mRootNode = ReadBinaryNode( stream, null, 0 );\r\n\t\t\t// Read all meshes\r\n\t\t\tif ( scene.mNumMeshes ) {\r\n\r\n\t\t\t\tscene.mMeshes = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < scene.mNumMeshes; ++ i ) {\r\n\r\n\t\t\t\t\tscene.mMeshes[ i ] = new aiMesh();\r\n\t\t\t\t\tReadBinaryMesh( stream, scene.mMeshes[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read materials\r\n\t\t\tif ( scene.mNumMaterials ) {\r\n\r\n\t\t\t\tscene.mMaterials = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < scene.mNumMaterials; ++ i ) {\r\n\r\n\t\t\t\t\tscene.mMaterials[ i ] = new aiMaterial();\r\n\t\t\t\t\tReadBinaryMaterial( stream, scene.mMaterials[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read all animations\r\n\t\t\tif ( scene.mNumAnimations ) {\r\n\r\n\t\t\t\tscene.mAnimations = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < scene.mNumAnimations; ++ i ) {\r\n\r\n\t\t\t\t\tscene.mAnimations[ i ] = new aiAnimation();\r\n\t\t\t\t\tReadBinaryAnim( stream, scene.mAnimations[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read all textures\r\n\t\t\tif ( scene.mNumTextures ) {\r\n\r\n\t\t\t\tscene.mTextures = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < scene.mNumTextures; ++ i ) {\r\n\r\n\t\t\t\t\tscene.mTextures[ i ] = new aiTexture();\r\n\t\t\t\t\tReadBinaryTexture( stream, scene.mTextures[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read lights\r\n\t\t\tif ( scene.mNumLights ) {\r\n\r\n\t\t\t\tscene.mLights = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < scene.mNumLights; ++ i ) {\r\n\r\n\t\t\t\t\tscene.mLights[ i ] = new aiLight();\r\n\t\t\t\t\tReadBinaryLight( stream, scene.mLights[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read cameras\r\n\t\t\tif ( scene.mNumCameras ) {\r\n\r\n\t\t\t\tscene.mCameras = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < scene.mNumCameras; ++ i ) {\r\n\r\n\t\t\t\t\tscene.mCameras[ i ] = new aiCamera();\r\n\t\t\t\t\tReadBinaryCamera( stream, scene.mCameras[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar aiOrigin_CUR = 0;\r\n\t\tvar aiOrigin_BEG = 1;\r\n\r\n\t\tfunction extendStream( stream ) {\r\n\r\n\t\t\tstream.readOffset = 0;\r\n\t\t\tstream.Seek = function ( off, ori ) {\r\n\r\n\t\t\t\tif ( ori == aiOrigin_CUR ) {\r\n\r\n\t\t\t\t\tstream.readOffset += off;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ori == aiOrigin_BEG ) {\r\n\r\n\t\t\t\t\tstream.readOffset = off;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tstream.ReadBytes = function ( buff, size, n ) {\r\n\r\n\t\t\t\tvar bytes = size * n;\r\n\t\t\t\tfor ( var i = 0; i < bytes; i ++ )\r\n\t\t\t\t\tbuff[ i ] = Read_uint8_t( this );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tstream.subArray32 = function ( start, end ) {\r\n\r\n\t\t\t\tvar buff = this.buffer;\r\n\t\t\t\tvar newbuff = buff.slice( start, end );\r\n\t\t\t\treturn new Float32Array( newbuff );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tstream.subArrayUint16 = function ( start, end ) {\r\n\r\n\t\t\t\tvar buff = this.buffer;\r\n\t\t\t\tvar newbuff = buff.slice( start, end );\r\n\t\t\t\treturn new Uint16Array( newbuff );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tstream.subArrayUint8 = function ( start, end ) {\r\n\r\n\t\t\t\tvar buff = this.buffer;\r\n\t\t\t\tvar newbuff = buff.slice( start, end );\r\n\t\t\t\treturn new Uint8Array( newbuff );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tstream.subArrayUint32 = function ( start, end ) {\r\n\r\n\t\t\t\tvar buff = this.buffer;\r\n\t\t\t\tvar newbuff = buff.slice( start, end );\r\n\t\t\t\treturn new Uint32Array( newbuff );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar shortened, compressed;\r\n\r\n\t\tfunction InternReadFile( pFiledata ) {\r\n\r\n\t\t\tvar pScene = new aiScene();\r\n\t\t\tvar stream = new DataView( pFiledata );\r\n\t\t\textendStream( stream );\r\n\t\t\tstream.Seek( 44, aiOrigin_CUR ); // signature\r\n\t\t\t/*unsigned int versionMajor =*/\r\n\t\t\tpScene.versionMajor = Read_unsigned_int( stream );\r\n\t\t\t/*unsigned int versionMinor =*/\r\n\t\t\tpScene.versionMinor = Read_unsigned_int( stream );\r\n\t\t\t/*unsigned int versionRevision =*/\r\n\t\t\tpScene.versionRevision = Read_unsigned_int( stream );\r\n\t\t\t/*unsigned int compileFlags =*/\r\n\t\t\tpScene.compileFlags = Read_unsigned_int( stream );\r\n\t\t\tshortened = Read_uint16_t( stream ) > 0;\r\n\t\t\tcompressed = Read_uint16_t( stream ) > 0;\r\n\t\t\tif ( shortened )\r\n\t\t\t\tthrow \"Shortened binaries are not supported!\";\r\n\t\t\tstream.Seek( 256, aiOrigin_CUR ); // original filename\r\n\t\t\tstream.Seek( 128, aiOrigin_CUR ); // options\r\n\t\t\tstream.Seek( 64, aiOrigin_CUR ); // padding\r\n\t\t\tif ( compressed ) {\r\n\r\n\t\t\t\tvar uncompressedSize = Read_uint32_t( stream );\r\n\t\t\t\tvar compressedSize = stream.FileSize() - stream.Tell();\r\n\t\t\t\tvar compressedData = [];\r\n\t\t\t\tstream.Read( compressedData, 1, compressedSize );\r\n\t\t\t\tvar uncompressedData = [];\r\n\t\t\t\tuncompress( uncompressedData, uncompressedSize, compressedData, compressedSize ); // eslint-disable-line no-undef\r\n\t\t\t\tvar buff = new ArrayBuffer( uncompressedData );\r\n\t\t\t\tReadBinaryScene( buff, pScene );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tReadBinaryScene( stream, pScene );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn pScene.toTHREE();\r\n\r\n\t\t}\r\n\r\n\t\treturn InternReadFile( buffer );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport { AssimpLoader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/jsm/loaders/AssimpLoader.js","<template>\r\n    <div class=\"webglLoaderAssimp-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a>\r\n\t\t\t<a href=\"https://github.com/Virtulous\" target=\"_blank\" rel=\"noopener\">Assimp File format</a>\r\n\t\t\t<div>Assimp loader by <a href=\"https://virtulo.us\" target=\"_blank\" rel=\"noopener\">Virtulous</a></div>\r\n\t\t\t<div>Octaminator model from <a href=\"http://opengameart.org/content/octaminator-engine-ready\" target=\"_blank\" rel=\"noopener\">Teh_Bucket and raymoohawk</a></div>\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js';\r\nimport { AssimpLoader } from '@/components/jsm/loaders/AssimpLoader.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            stats: null,\r\n            camera: null,\r\n            scene: null,\r\n            renderer: null,\r\n\t\t\tanimation: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.container = document.getElementById('container')\r\n            this.camera = new this.$moduleTHREE.PerspectiveCamera(25, this.$webglInnerWidth / window.innerHeight, 1, 10000)\r\n            this.camera.position.set(600, 1150, 5)\r\n            this.camera.up.set(0, 0, 1)\r\n            this.camera.lookAt(- 100, 0, 0)\r\n            this.scene = new this.$moduleTHREE.Scene()\r\n            var ambient = new this.$moduleTHREE.HemisphereLight(0x8888fff, 0xff8888, 0.5)\r\n            ambient.position.set(0, 1, 0)\r\n            this.scene.add(ambient)\r\n            var light = new this.$moduleTHREE.DirectionalLight(0xffffff, 1)\r\n            light.position.set(0, 4, 4).normalize()\r\n            this.scene.add(light)\r\n            this.renderer = new this.$moduleTHREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            this.container.appendChild(this.renderer.domElement)\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 750\r\n            controls.maxDistance = 2500\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            this.container.appendChild(this.stats.dom)\r\n            var loader = new AssimpLoader()\r\n            loader.load('static/models/assimp/octaminator/Octaminator.assimp', (result) => {\r\n                var object = result.object\r\n                object.position.y = - 100\r\n                object.rotation.x = Math.PI / 2\r\n                this.scene.add(object)\r\n                this.animation = result.animation\r\n            })\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n            this.animate()\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate, this.renderer.domElement)\r\n            this.renderer.render(this.scene, this.camera)\r\n            if (this.animation) this.animation.setTime(performance.now() / 1000)\r\n            this.stats.update()\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglLoaderAssimp-container {\r\n    width: 100%;\r\n}\r\n#info {\r\n    margin-left: -50px;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/loader/webglLoaderAssimp.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglLoaderAssimp-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"https://github.com/Virtulous\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Assimp File format\")]),_vm._v(\" \"),_c('div',[_vm._v(\"Assimp loader by \"),_c('a',{attrs:{\"href\":\"https://virtulo.us\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Virtulous\")])]),_vm._v(\" \"),_c('div',[_vm._v(\"Octaminator model from \"),_c('a',{attrs:{\"href\":\"http://opengameart.org/content/octaminator-engine-ready\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Teh_Bucket and raymoohawk\")])])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-dd3a6fb6\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/loader/webglLoaderAssimp.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-dd3a6fb6\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglLoaderAssimp.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderAssimp.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglLoaderAssimp.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-dd3a6fb6\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglLoaderAssimp.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-dd3a6fb6\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/loader/webglLoaderAssimp.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}