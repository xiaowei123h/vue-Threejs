webpackJsonp([95],{"4Bm4":function(t,e){},uPRy:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=r("QEtz"),i=r("wIBv"),n={modes:{none:"NO_PARALLAX",basic:"USE_BASIC_PARALLAX",steep:"USE_STEEP_PARALLAX",occlusion:"USE_OCLUSION_PARALLAX",relief:"USE_RELIEF_PARALLAX"},uniforms:{bumpMap:{value:null},map:{value:null},parallaxScale:{value:null},parallaxMinLayers:{value:null},parallaxMaxLayers:{value:null}},vertexShader:["varying vec2 vUv;","varying vec3 vViewPosition;","varying vec3 vNormal;","void main() {","\tvUv = uv;","\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );","\tvViewPosition = -mvPosition.xyz;","\tvNormal = normalize( normalMatrix * normal );","\tgl_Position = projectionMatrix * mvPosition;","}"].join("\n"),fragmentShader:["uniform sampler2D bumpMap;","uniform sampler2D map;","uniform float parallaxScale;","uniform float parallaxMinLayers;","uniform float parallaxMaxLayers;","varying vec2 vUv;","varying vec3 vViewPosition;","varying vec3 vNormal;","#ifdef USE_BASIC_PARALLAX","\tvec2 parallaxMap( in vec3 V ) {","\t\tfloat initialHeight = texture2D( bumpMap, vUv ).r;","\t\tvec2 texCoordOffset = parallaxScale * V.xy * initialHeight;","\t\treturn vUv - texCoordOffset;","\t}","#else","\tvec2 parallaxMap( in vec3 V ) {","\t\tfloat numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );","\t\tfloat layerHeight = 1.0 / numLayers;","\t\tfloat currentLayerHeight = 0.0;","\t\tvec2 dtex = parallaxScale * V.xy / V.z / numLayers;","\t\tvec2 currentTextureCoords = vUv;","\t\tfloat heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;","\t\tfor ( int i = 0; i < 30; i += 1 ) {","\t\t\tif ( heightFromTexture <= currentLayerHeight ) {","\t\t\t\tbreak;","\t\t\t}","\t\t\tcurrentLayerHeight += layerHeight;","\t\t\tcurrentTextureCoords -= dtex;","\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;","\t\t}","\t\t#ifdef USE_STEEP_PARALLAX","\t\t\treturn currentTextureCoords;","\t\t#elif defined( USE_RELIEF_PARALLAX )","\t\t\tvec2 deltaTexCoord = dtex / 2.0;","\t\t\tfloat deltaHeight = layerHeight / 2.0;","\t\t\tcurrentTextureCoords += deltaTexCoord;","\t\t\tcurrentLayerHeight -= deltaHeight;","\t\t\tconst int numSearches = 5;","\t\t\tfor ( int i = 0; i < numSearches; i += 1 ) {","\t\t\t\tdeltaTexCoord /= 2.0;","\t\t\t\tdeltaHeight /= 2.0;","\t\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;","\t\t\t\tif( heightFromTexture > currentLayerHeight ) {","\t\t\t\t\tcurrentTextureCoords -= deltaTexCoord;","\t\t\t\t\tcurrentLayerHeight += deltaHeight;","\t\t\t\t} else {","\t\t\t\t\tcurrentTextureCoords += deltaTexCoord;","\t\t\t\t\tcurrentLayerHeight -= deltaHeight;","\t\t\t\t}","\t\t\t}","\t\t\treturn currentTextureCoords;","\t\t#elif defined( USE_OCLUSION_PARALLAX )","\t\t\tvec2 prevTCoords = currentTextureCoords + dtex;","\t\t\tfloat nextH = heightFromTexture - currentLayerHeight;","\t\t\tfloat prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;","\t\t\tfloat weight = nextH / ( nextH - prevH );","\t\t\treturn prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );","\t\t#else","\t\t\treturn vUv;","\t\t#endif","\t}","#endif","vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {","\tvec2 texDx = dFdx( vUv );","\tvec2 texDy = dFdy( vUv );","\tvec3 vSigmaX = dFdx( surfPosition );","\tvec3 vSigmaY = dFdy( surfPosition );","\tvec3 vR1 = cross( vSigmaY, surfNormal );","\tvec3 vR2 = cross( surfNormal, vSigmaX );","\tfloat fDet = dot( vSigmaX, vR1 );","\tvec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );","\tvec3 vProjVtex;","\tvProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;","\tvProjVtex.z = dot( surfNormal, viewPosition );","\treturn parallaxMap( vProjVtex );","}","void main() {","\tvec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );","\tgl_FragColor = texture2D( map, mapUv );","}"].join("\n")},o={data:function(){return{camera:null,scene:null,material:null,renderer:null,stats:null,gui:null,effectController:{mode:"relief",scale:.005,minLayers:20,maxLayers:25}}},mounted:function(){this.init(),this.initGUI(),this.animate()},beforeDestroy:function(){this.gui.destroy()},methods:{init:function(){var t=document.createElement("div");document.getElementsByClassName("webglMaterialsParallaxmap-container")[0].appendChild(t),this.camera=new this.$THREE.PerspectiveCamera(45,this.$webglInnerWidth/window.innerHeight,.01,10),this.camera.position.z=2,this.scene=new this.$THREE.Scene;var e=n,r=this.$THREE.UniformsUtils.clone(e.uniforms),a={fragmentShader:e.fragmentShader,vertexShader:e.vertexShader,uniforms:r},o=new this.$THREE.TextureLoader;this.material=new this.$THREE.ShaderMaterial(a),this.material.map=o.load("static/textures/brick_diffuse.jpg"),this.material.bumpMap=o.load("static/textures/brick_bump.jpg"),this.material.map.anisotropy=4,this.material.bumpMap.anisotropy=4,r.map.value=this.material.map,r.bumpMap.value=this.material.bumpMap;var s=new this.$THREE.BoxBufferGeometry(1,1,1),l=new this.$THREE.Mesh(s,this.material);this.scene.add(l),this.renderer=new this.$THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.$webglInnerWidth,window.innerHeight),t.appendChild(this.renderer.domElement),this.renderer.outputEncoding=this.$THREE.sRGBEncoding;var u=new i.a(this.camera,this.renderer.domElement);u.minDistance=1,u.maxDistance=5,this.stats=new this.$Stats,this.stats.dom.style.left="280px",t.appendChild(this.stats.dom),window.addEventListener("resize",this.onWindowResize,!1)},guiChanged:function(){var t=this.material.uniforms;t.parallaxScale.value=-1*this.effectController.scale,t.parallaxMinLayers.value=this.effectController.minLayers,t.parallaxMaxLayers.value=this.effectController.maxLayers,this.material.defines={},this.material.defines[n.modes[this.effectController.mode]]="",this.material.needsUpdate=!0},initGUI:function(){this.gui=new a.a,this.gui.add(this.effectController,"mode",Object.keys(n.modes)).onChange(this.guiChanged),this.gui.add(this.effectController,"scale",0,.01,.001).onChange(this.guiChanged),this.gui.add(this.effectController,"minLayers",1,30,1).onChange(this.guiChanged),this.gui.add(this.effectController,"maxLayers",1,30,1).onChange(this.guiChanged),this.guiChanged()},onWindowResize:function(){this.$onWindowResize(this.camera,this.renderer)},animate:function(){requestAnimationFrame(this.animate),this.render(),this.stats.update()},render:function(){this.renderer.render(this.scene,this.camera)}}},s={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"webglMaterialsParallaxmap-container"},[r("div",{attrs:{id:"info"}},[r("a",{attrs:{href:"https://threejs.org"}},[t._v("Three.js")]),t._v(" parallax mapping "),r("br"),t._v("\n\t\t\tOryginal shaders authors:\n\t\t\t"),r("a",{attrs:{href:"http://sunandblackcat.com/tipFullView.php?topicid=28"}},[t._v("Igor Dyhta")]),t._v(",\n\t\t\t"),r("a",{attrs:{href:"http://mmikkelsen3d.blogspot.sk/2012/02/parallaxpoc-mapping-and-no-tangent.html"}},[t._v("Morten S. Mikkelsen")]),r("br"),t._v("\n\t\t\tTexture by "),r("a",{attrs:{href:"http://agf81.deviantart.com/"}},[t._v("AGF81")])])])}]};var l=r("VU/8")(o,s,!1,function(t){r("4Bm4")},"data-v-66089bc8",null);e.default=l.exports}});
//# sourceMappingURL=95.f6f9b98284e4e27c12c5.js.map