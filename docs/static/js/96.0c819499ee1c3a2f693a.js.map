{"version":3,"sources":["webpack:///src/views/geometries/webglGeometryExtrudeShapes2.vue","webpack:///./src/views/geometries/webglGeometryExtrudeShapes2.vue?b034","webpack:///./src/views/geometries/webglGeometryExtrudeShapes2.vue"],"names":["webglGeometryExtrudeShapes2","data","d3g","renderer","stats","scene","camera","mounted","this","d3threeD","init","animate","methods","exports","DEGS_TO_RADS","Math","PI","DIGIT_0","DIGIT_9","COMMA","SPACE","PERIOD","MINUS","that","transformSVGPath","pathStr","activeCmd","cx","cy","canRepeat","path","$THREE","ShapePath","idx","x","y","nx","ny","firstX","firstY","x1","x2","y1","y2","rx","ry","xar","laf","sf","len","length","eatNum","sidx","c","s","isFloat","charCodeAt","substring","parseFloat","parseInt","nextIsNum","moveTo","lineTo","bezierCurveTo","quadraticCurveTo","console","warn","cos","sin","norm","sqrt","u","Vector2","v","startAng","acos","dot","deltaAng","absarc","Error","addGeoObject","group","svgObject","paths","depths","colors","center","i","color","Color","material","MeshLambertMaterial","emissive","depth","simpleShapes","toShapes","j","simpleShape","shape3d","ExtrudeBufferGeometry","bevelEnabled","mesh","Mesh","rotation","translateZ","translateX","translateY","add","container","document","getElementById","Scene","background","PerspectiveCamera","$webglInnerWidth","window","innerHeight","position","set","Group","directionalLight","DirectionalLight","normalize","ambientLight","AmbientLight","helper","GridHelper","obj","initSVGObject","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","controls","OrbitControls","minDistance","maxDistance","$Stats","dom","style","left","addEventListener","onWindowResize","$onWindowResize","requestAnimationFrame","render","update","geometries_webglGeometryExtrudeShapes2","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","id","_v","href","target","rel","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/96.0c819499ee1c3a2f693a.js","sourcesContent":["<template>\r\n    <div class=\"webglGeometryExtrudeShapes2-container\">\r\n        <div id=\"container\"></div>\r\n\t\t<div id=\"info\">\r\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - shapes extrusion via geodata\r\n\t\t</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { OrbitControls } from '@/components/jsm/controls/OrbitControls.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            d3g: {},\r\n            renderer: null,\r\n            stats: null,\r\n            scene: null,\r\n            camera: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.d3threeD(this.d3g)\r\n        this.init()\r\n        this.animate()\r\n    },\r\n    methods: {\r\n        // From d3-threeD.js\r\n        /* This Source Code Form is subject to the terms of the Mozilla Public\r\n            * License, v. 2.0. If a copy of the MPL was not distributed with this file,\r\n            * You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n        d3threeD(exports) {\r\n            var DEGS_TO_RADS = Math.PI / 180\r\n            var DIGIT_0 = 48, DIGIT_9 = 57, COMMA = 44, SPACE = 32, PERIOD = 46, MINUS = 45\r\n            var that = this\r\n            exports.transformSVGPath = function transformSVGPath(pathStr) {\r\n                var path = new that.$THREE.ShapePath()\r\n                var idx = 1, activeCmd,\r\n                    x = 0, y = 0, nx = 0, ny = 0, firstX = null, firstY = null,\r\n                    x1 = 0, x2 = 0, y1 = 0, y2 = 0,\r\n                    rx = 0, ry = 0, xar = 0, laf = 0, sf = 0, cx, cy\r\n                var len = pathStr.length\r\n                function eatNum() {\r\n                    var sidx, c, isFloat = false, s\r\n                    // eat delims\r\n                    while (idx < len) {\r\n                        c = pathStr.charCodeAt(idx)\r\n                        if (c !== COMMA && c !== SPACE) break\r\n                        idx ++\r\n                    }\r\n                    if (c === MINUS) {\r\n                        sidx = idx ++\r\n                    } else {\r\n                        sidx = idx\r\n                    }\r\n                    // eat number\r\n                    while (idx < len) {\r\n                        c = pathStr.charCodeAt(idx)\r\n                        if (DIGIT_0 <= c && c <= DIGIT_9) {\r\n                            idx ++\r\n                            continue\r\n                        } else if (c === PERIOD) {\r\n                            idx ++\r\n                            isFloat = true\r\n                            continue\r\n                        }\r\n                        s = pathStr.substring(sidx, idx)\r\n                        return isFloat ? parseFloat(s) : parseInt(s)\r\n                    }\r\n                    s = pathStr.substring(sidx)\r\n                    return isFloat ? parseFloat(s) : parseInt(s)\r\n                }\r\n                function nextIsNum() {\r\n                    var c\r\n                    // do permanently eat any delims...\r\n                    while (idx < len) {\r\n                        c = pathStr.charCodeAt(idx)\r\n                        if (c !== COMMA && c !== SPACE) break\r\n                        idx ++\r\n                    }\r\n                    c = pathStr.charCodeAt(idx)\r\n                    return (c === MINUS || (DIGIT_0 <= c && c <= DIGIT_9))\r\n                }\r\n                var canRepeat\r\n                activeCmd = pathStr[ 0 ]\r\n                while (idx <= len) {\r\n                    canRepeat = true\r\n                    switch (activeCmd) {\r\n                        // moveto commands, become lineto's if repeated\r\n                        case 'M':\r\n                            x = eatNum()\r\n                            y = eatNum()\r\n                            path.moveTo(x, y)\r\n                            activeCmd = 'L'\r\n                            firstX = x\r\n                            firstY = y\r\n                            break\r\n                        case 'm':\r\n                            x += eatNum()\r\n                            y += eatNum()\r\n                            path.moveTo(x, y)\r\n                            activeCmd = 'l'\r\n                            firstX = x\r\n                            firstY = y\r\n                            break\r\n                        case 'Z':\r\n                        case 'z':\r\n                            canRepeat = false\r\n                            if (x !== firstX || y !== firstY) path.lineTo(firstX, firstY)\r\n                            break\r\n                        // - lines!\r\n                        case 'L':\r\n                        case 'H':\r\n                        case 'V':\r\n                            nx = (activeCmd === 'V') ? x : eatNum()\r\n                            ny = (activeCmd === 'H') ? y : eatNum()\r\n                            path.lineTo(nx, ny)\r\n                            x = nx\r\n                            y = ny\r\n                            break\r\n                        case 'l':\r\n                        case 'h':\r\n                        case 'v':\r\n                            nx = (activeCmd === 'v') ? x : (x + eatNum())\r\n                            ny = (activeCmd === 'h') ? y : (y + eatNum())\r\n                            path.lineTo(nx, ny)\r\n                            x = nx\r\n                            y = ny\r\n                            break\r\n                        // - cubic bezier\r\n                        case 'C':\r\n                            x1 = eatNum()\r\n                            y1 = eatNum()\r\n                        case 'S':\r\n                            if (activeCmd === 'S') {\r\n                                x1 = 2 * x - x2\r\n                                y1 = 2 * y - y2\r\n                            }\r\n                            x2 = eatNum()\r\n                            y2 = eatNum()\r\n                            nx = eatNum()\r\n                            ny = eatNum()\r\n                            path.bezierCurveTo(x1, y1, x2, y2, nx, ny)\r\n                            x = nx\r\n                            y = ny\r\n                            break\r\n                        case 'c':\r\n                            x1 = x + eatNum()\r\n                            y1 = y + eatNum()\r\n                        case 's':\r\n                            if (activeCmd === 's') {\r\n                                x1 = 2 * x - x2\r\n                                y1 = 2 * y - y2\r\n                            }\r\n                            x2 = x + eatNum()\r\n                            y2 = y + eatNum()\r\n                            nx = x + eatNum()\r\n                            ny = y + eatNum()\r\n                            path.bezierCurveTo(x1, y1, x2, y2, nx, ny)\r\n                            x = nx\r\n                            y = ny;\r\n                            break\r\n                        // - quadratic bezier\r\n                        case 'Q':\r\n                            x1 = eatNum()\r\n                            y1 = eatNum()\r\n                        case 'T':\r\n                            if (activeCmd === 'T') {\r\n                                x1 = 2 * x - x1\r\n                                y1 = 2 * y - y1\r\n                            }\r\n                            nx = eatNum()\r\n                            ny = eatNum()\r\n                            path.quadraticCurveTo(x1, y1, nx, ny)\r\n                            x = nx\r\n                            y = ny\r\n                            break\r\n                        case 'q':\r\n                            x1 = x + eatNum()\r\n                            y1 = y + eatNum()\r\n                        case 't':\r\n                            if (activeCmd === 't') {\r\n                                x1 = 2 * x - x1\r\n                                y1 = 2 * y - y1\r\n                            }\r\n                            nx = x + eatNum()\r\n                            ny = y + eatNum()\r\n                            path.quadraticCurveTo(x1, y1, nx, ny)\r\n                            x = nx\r\n                            y = ny\r\n                            break\r\n                        // - elliptical arc\r\n                        case 'A':\r\n                            rx = eatNum()\r\n                            ry = eatNum()\r\n                            xar = eatNum() * DEGS_TO_RADS\r\n                            laf = eatNum()\r\n                            sf = eatNum()\r\n                            nx = eatNum()\r\n                            ny = eatNum()\r\n                            if (rx !== ry) console.warn('Forcing elliptical arc to be a circular one:', rx, ry)\r\n                            // SVG implementation notes does all the math for us! woo!\r\n                            // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\r\n                            // step1, using x1 as x1'\r\n                            x1 = Math.cos(xar) * (x - nx) / 2 + Math.sin(xar) * (y - ny) / 2\r\n                            y1 = - Math.sin(xar) * (x - nx) / 2 + Math.cos(xar) * (y - ny) / 2\r\n                            // step 2, using x2 as cx'\r\n                            var norm = Math.sqrt((rx * rx * ry * ry - rx * rx * y1 * y1 - ry * ry * x1 * x1) /\r\n                                    (rx * rx * y1 * y1 + ry * ry * x1 * x1))\r\n                            if (laf === sf) norm = - norm\r\n                            x2 = norm * rx * y1 / ry\r\n                            y2 = norm * - ry * x1 / rx\r\n                            // step 3\r\n                            cx = Math.cos(xar) * x2 - Math.sin(xar) * y2 + (x + nx) / 2\r\n                            cy = Math.sin(xar) * x2 + Math.cos(xar) * y2 + (y + ny) / 2\r\n                            var u = new that.$THREE.Vector2(1, 0)\r\n                            var v = new that.$THREE.Vector2((x1 - x2) / rx, (y1 - y2) / ry)\r\n                            var startAng = Math.acos(u.dot(v) / u.length() / v.length())\r\n                            if (((u.x * v.y) - (u.y * v.x)) < 0) startAng = - startAng\r\n                            // we can reuse 'v' from start angle as our 'u' for delta angle\r\n                            u.x = (- x1 - x2) / rx\r\n                            u.y = (- y1 - y2) / ry\r\n                            var deltaAng = Math.acos(v.dot(u) / v.length() / u.length())\r\n                            // This normalization ends up making our curves fail to triangulate...\r\n                            if (((v.x * u.y) - (v.y * u.x)) < 0) deltaAng = - deltaAng\r\n                            if (! sf && deltaAng > 0) deltaAng -= Math.PI * 2\r\n                            if (sf && deltaAng < 0) deltaAng += Math.PI * 2\r\n                            path.absarc(cx, cy, rx, startAng, startAng + deltaAng, sf)\r\n                            x = nx\r\n                            y = ny\r\n                            break\r\n                        default:\r\n                            throw new Error('Wrong path command: ' + activeCmd)\r\n                    }\r\n                    // just reissue the command\r\n                    if (canRepeat && nextIsNum()) continue\r\n                    activeCmd = pathStr[ idx ++ ]\r\n                }\r\n                return path\r\n            }\r\n        },\r\n        addGeoObject(group, svgObject) {\r\n            var paths = svgObject.paths\r\n            var depths = svgObject.depths\r\n            var colors = svgObject.colors\r\n            var center = svgObject.center\r\n            for (var i = 0; i < paths.length; i ++) {\r\n                var path = this.d3g.transformSVGPath(paths[ i ])\r\n                var color = new this.$THREE.Color(colors[ i ])\r\n                var material = new this.$THREE.MeshLambertMaterial({\r\n                    color: color,\r\n                    emissive: color\r\n                })\r\n                var depth = depths[ i ]\r\n                var simpleShapes = path.toShapes(true)\r\n                for (var j = 0; j < simpleShapes.length; j ++) {\r\n                    var simpleShape = simpleShapes[ j ]\r\n                    var shape3d = new this.$THREE.ExtrudeBufferGeometry(simpleShape, {\r\n                        depth: depth,\r\n                        bevelEnabled: false\r\n                    })\r\n                    var mesh = new this.$THREE.Mesh(shape3d, material)\r\n                    mesh.rotation.x = Math.PI\r\n                    mesh.translateZ(- depth - 1)\r\n                    mesh.translateX(- center.x)\r\n                    mesh.translateY(- center.y)\r\n                    group.add(mesh)\r\n                }\r\n            }\r\n        },\r\n        init() {\r\n            var container = document.getElementById('container')\r\n            //\r\n            this.scene = new this.$THREE.Scene()\r\n            this.scene.background = new this.$THREE.Color(0xb0b0b0)\r\n            //\r\n            this.camera = new this.$THREE.PerspectiveCamera(50, this.$webglInnerWidth / window.innerHeight, 1, 1000)\r\n            this.camera.position.set(0, 0, 200)\r\n            //\r\n            var group = new this.$THREE.Group()\r\n            this.scene.add(group)\r\n            //\r\n            var directionalLight = new this.$THREE.DirectionalLight(0xffffff, 0.6)\r\n            directionalLight.position.set(0.75, 0.75, 1.0).normalize()\r\n            this.scene.add(directionalLight)\r\n            var ambientLight = new this.$THREE.AmbientLight(0xcccccc, 0.2)\r\n            this.scene.add(ambientLight)\r\n            //\r\n            var helper = new this.$THREE.GridHelper(160, 10)\r\n            helper.rotation.x = Math.PI / 2\r\n            group.add(helper)\r\n            //\r\n            var obj = this.initSVGObject()\r\n            this.addGeoObject(group, obj)\r\n            //\r\n            this.renderer = new this.$THREE.WebGLRenderer({ antialias: true })\r\n            this.renderer.setPixelRatio(window.devicePixelRatio)\r\n            this.renderer.setSize(this.$webglInnerWidth, window.innerHeight)\r\n            container.appendChild(this.renderer.domElement)\r\n            //\r\n            var controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n            controls.minDistance = 100\r\n            controls.maxDistance = 1000\r\n            //\r\n            this.stats = new this.$Stats()\r\n            this.stats.dom.style.left = '280px'\r\n            container.appendChild(this.stats.dom)\r\n            //\r\n            window.addEventListener('resize', this.onWindowResize, false)\r\n        },\r\n        initSVGObject() {\r\n            var obj = {}\r\n            /// The geo data from Taipei City, Keelung City, Taipei County in SVG form\r\n            obj.paths = [\r\n                /// Taipei City\r\n                \"M366.2182,108.9780 L368.0329,110.3682 L367.5922,112.4411 L369.9258,116.0311 L368.9827,117.3543 \" +\r\n                \"L371.5686,119.8491 L370.5599,121.7206 L372.9314,124.8009 L368.8889,126.7603 L369.2695,130.7622 \" +\r\n                \"L366.1499,130.3388 L363.4698,128.1161 L362.9256,125.6018 L360.8153,126.4025 L360.2968,124.3588 \" +\r\n                \"L361.9519,121.1623 L360.4475,118.7162 L358.1163,117.8678 L358.7094,115.7577 L361.6243,112.4576 Z\",\r\n                /// Keelung City\r\n                \"M380.2689,113.3850 L383.5604,114.2370 L383.7404,114.2386 L385.4082,115.6247 L384.9725,117.4631 \" +\r\n                \"L381.6681,117.9439 L383.0209,121.0914 L379.4649,122.7061 L373.4987,118.8487 L372.0980,114.7589 \" +\r\n                \"L377.9716,112.0707 Z\",\r\n                /// Taipei County\r\n                \"M359.4486,155.6690 L357.0422,152.7420 L355.1688,148.0173 L357.1186,145.8045 L354.1323,141.2242 \" +\r\n                \"L351.1807,141.6609 L348.9387,140.5372 L349.5415,137.8396 L347.5174,136.1694 L347.6299,129.2327 \" +\r\n                \"L351.4192,128.8067 L354.2518,125.3113 L352.5805,121.8038 L349.3190,120.9429 L344.3277,116.7676 \" +\r\n                \"L350.9772,115.1221 L354.5759,112.5371 L354.5667,110.6949 L357.4098,105.7489 L362.3963,101.8443 \" +\r\n                \"L364.4415,101.0819 L364.5314,101.0828 L364.6209,101.1230 L364.7698,101.2029 L368.1221,101.5115 \" +\r\n                \"L371.7216,104.1338 L372.2958,106.7261 L375.5949,109.6971 L377.0415,108.8875 L377.0737,108.6526 \" +\r\n                \"L377.4037,108.6165 L376.8840,109.7091 L376.7323,109.9037 L377.9416,112.0705 L371.7970,114.8736 \" +\r\n                \"L374.0935,119.4031 L380.7848,122.7963 L382.6529,121.9897 L381.5792,117.8256 L385.0339,117.3069 \" +\r\n                \"L385.4082,115.6247 L388.7014,116.3969 L389.8697,116.6024 L390.0206,116.4860 L391.0396,116.6118 \" +\r\n                \"L394.6665,116.9929 L394.4694,119.2255 L394.3172,119.4987 L395.3792,121.8977 L395.2728,124.0526 \" +\r\n                \"L397.2123,125.6350 L401.1709,126.2516 L401.2612,126.2130 L401.4086,126.6060 L400.1992,127.7733 \" +\r\n                \"L399.7769,128.0446 L399.6247,128.3179 L398.1779,129.0521 L394.2418,129.2969 L388.7324,130.9385 \" +\r\n                \"L389.2782,134.0003 L383.7237,137.0111 L381.7445,139.9336 L379.7001,139.9546 L376.1539,143.0580 \" +\r\n                \"L371.3022,144.1094 L368.6009,146.5914 L368.7361,151.1399 L363.6153,154.4980 \" +\r\n                /// Taipei County hole.\r\n                \"M363.4600,128.3904 L366.6300,130.3829 L369.3732,129.3913 L369.5603,125.6695 L374.3989,125.1677 \" +\r\n                \"L370.8412,123.6440 L371.0684,118.8252 L369.0431,117.3157 L369.6882,115.7936 L367.8578,112.8749 \" +\r\n                \"L368.1217,110.4867 L366.5152,109.2554 L361.9554,112.3435 L358.1163,117.8678 L361.7218,120.2192 \" +\r\n                \"L360.7261,126.3232 L362.8064,125.5221 Z\" ]\r\n            obj.depths = [ 19, 20, 21 ]\r\n            obj.colors = [ 0xC07000, 0xC08000, 0xC0A000 ]\r\n            obj.center = { x: 365, y: 125 }\r\n            return obj\r\n        },\r\n        onWindowResize() {\r\n            this.$onWindowResize(this.camera, this.renderer)\r\n        },\r\n        animate() {\r\n            requestAnimationFrame(this.animate)\r\n            this.render()\r\n            this.stats.update()\r\n        },\r\n        render() {\r\n            this.renderer.render(this.scene, this.camera)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.webglGeometryExtrudeShapes2-container {\r\n    width: 100%;\r\n    color: #fff;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/geometries/webglGeometryExtrudeShapes2.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"webglGeometryExtrudeShapes2-container\"},[_c('div',{attrs:{\"id\":\"container\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"info\"}},[_c('a',{attrs:{\"href\":\"https://threejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"three.js\")]),_vm._v(\" - shapes extrusion via geodata\\n\\t\\t\")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ce10e620\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/geometries/webglGeometryExtrudeShapes2.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ce10e620\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./webglGeometryExtrudeShapes2.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometryExtrudeShapes2.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./webglGeometryExtrudeShapes2.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ce10e620\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./webglGeometryExtrudeShapes2.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-ce10e620\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/geometries/webglGeometryExtrudeShapes2.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}